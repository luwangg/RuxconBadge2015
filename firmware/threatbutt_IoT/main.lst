
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000388 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccUDHZwF.o
f108f85f l       *ABS*	00000000 BootRAM
080039ac l       .text	00000000 LoopCopyDataInit
080039a4 l       .text	00000000 CopyDataInit
080039c0 l       .text	00000000 LoopFillZerobss
080039ba l       .text	00000000 FillZerobss
080039d2 l       .text	00000000 LoopForever
080039ec l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_i2c.c
00000000 l    df *ABS*	00000000 stm32f0xx_iwdg.c
00000000 l    df *ABS*	00000000 stm32f0xx_misc.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_usart.c
00000000 l    df *ABS*	00000000 u8g_bitmap.c
00000000 l    df *ABS*	00000000 u8g_clip.c
00000000 l    df *ABS*	00000000 u8g_font.c
080015b4 l     F .text	0000000e u8g_font_get_word
080015f8 l     F .text	00000002 u8g_font_GetFormat.isra.0
080015fa l     F .text	00000016 u8g_font_GetFontGlyphStructureSize.isra.1
080017aa l     F .text	00000084 u8g_font_calc_str_min_box
00000000 l    df *ABS*	00000000 u8g_dev_ssd1306_128x64.c
08004be3 l     O .text	00000026 u8g_dev_ssd1306_128x64_adafruit2_init_seq
08004c09 l     O .text	00000008 u8g_dev_ssd1306_128x64_data_start
08004c11 l     O .text	00000009 u8g_dev_ssd13xx_sleep_on
08004c1a l     O .text	0000000b u8g_dev_ssd13xx_sleep_off
08004c25 l     O .text	00000026 u8g_dev_ssd1306_128x64_adafruit3_init_seq
08004c4b l     O .text	00000008 u8g_dev_sh1106_128x64_data_start
00000000 l    df *ABS*	00000000 u8g_ll_api.c
080024f8 l     F .text	00000058 u8g_init_data
00000000 l    df *ABS*	00000000 u8g_state.c
00000000 l    df *ABS*	00000000 u8g_pb16v1.c
00000000 l    df *ABS*	00000000 u8g_pb8v1.c
00000000 l    df *ABS*	00000000 u8g_com_api.c
00000000 l    df *ABS*	00000000 u8g_pb.c
00000000 l    df *ABS*	00000000 u8g_com_null.c
00000000 l    df *ABS*	00000000 u8g_page.c
00000000 l    df *ABS*	00000000 _thumb1_case_uqi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
0800304c l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 main.c
20000a0c l     O .bss	00000004 vector_index.6926
20000a10 l     O .bss	00000004 attacker_index.6925
20000a1c l     O .bss	00000004 ip_index.6927
20000a24 l     O .bss	00000100 rx_buffer.6928
20000b2c l     O .bss	00000080 vec_buf.6930
20000bac l     O .bss	00000080 at_buf.6929
20000170 l     O .data	00000200 threatbutt_bits
20000c2c l     O .bss	00000040 ip_buf.6931
20000c6c l     O .bss	00000004 rx_index.6924
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 u8g_arm.c
080036e8 l     F .text	00000044 _delay_system_ticks_sub
00000000 l    df *ABS*	00000000 i2c_func.c
00000000 l    df *ABS*	00000000 u8g_font_data.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.2/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.2/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000e20 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000e20 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08001100 g     F .text	00000012 USART_SetGuardTime
080011e4 g     F .text	00000018 USART_SetDEDeassertionTime
080008dc g     F .text	00000020 RCC_HSICmd
08001f7e g     F .text	00000002 u8g_font_box_all_gA
08002f94 g     F .text	00000014 u8g_pb_GetPageBox
08000970 g     F .text	00000018 RCC_LSEDriveConfig
08000f3c g     F .text	00000020 USART_MSBFirstCmd
080009c8 g     F .text	00000024 RCC_PLLCmd
20000c74 g     O .bss	00000080 attacker
08004497 g     O .text	0000074c u8g_font_gdr11r
080029fe g     F .text	00000020 u8g_Draw4TPixel
08000ca4 g     F .text	00000018 RCC_AHBPeriphResetCmd
20000010 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_i2c
080002ac g     F .text	00000024 GPIO_PinAFConfig
08002e4c g     F .text	0000000c u8g_SetAddress
20000608 g     O .bss	00000100 u8g_dev_ssd1306_128x64_2x_buf
08003774 g     F .text	0000000e u8g_Delay
08000d9c g     F .text	0000000c RCC_ClearITPendingBit
08002af2 g     F .text	00000010 u8g_SetDefaultMidColor
08000280 g     F .text	0000000c GPIO_ReadOutputDataBit
08001144 g     F .text	00000018 USART_SetAutoRetryCount
08001d0e g     F .text	00000038 u8g_DrawStr180P
08002e78 g     F .text	0000009c u8g_WriteEscSeqP
20000e1c g     O .bss	00000004 control
080039ec  w    F .text	00000002 TIM1_CC_IRQHandler
080006f8 g     F .text	00000006 I2C_ReceiveData
08001e3c g     F .text	00000010 u8g_SetFontRefHeightExtendedText
080039ec  w    F .text	00000002 HardFault_Handler
08001b64 g     F .text	0000001e u8g_DrawGlyph270
200000f4 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_sw_spi_pb
200000c4 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_i2c_pb
08002600 g     F .text	00000014 u8g_DrawPixelLL
080039ec  w    F .text	00000002 ADC1_COMP_IRQHandler
08003400 g     F .text	00000010 SysTick_Handler
08000a24 g     F .text	0000000c RCC_MCOConfig
080007c0 g     F .text	00000060 NVIC_Init
08000430 g     F .text	00000024 I2C_OwnAddress2Config
080039ec  w    F .text	00000002 PVD_IRQHandler
0800182e g     F .text	0000000e u8g_IsGlyph
08001f7c g     F .text	00000002 u8g_font_box_left_gA
08002e64 g     F .text	0000000a u8g_WriteSequence
08000ab4 g     F .text	00000018 RCC_CECCLKConfig
08004c6c g       .text	00000000 _sidata
080039ec  w    F .text	00000002 PendSV_Handler
080039ec  w    F .text	00000002 NMI_Handler
08003884 g     F .text	00000002 I2C1_IRQHandler
08003782 g     F .text	0000000a u8g_MicroDelay
08000cec g     F .text	00000018 RCC_ITConfig
20000588 g     O .bss	00000080 u8g_dev_sh1106_128x64_sw_spi_buf
08000ee8 g     F .text	00000012 USART_DirectionModeCmd
08003410 g     F .text	00000068 initUSART1
0800184e g     F .text	00000096 u8g_draw_glyph
08002986 g     F .text	0000000a u8g_FirstPage
08001114 g     F .text	00000018 USART_SmartCardCmd
08001280 g     F .text	0000000c USART_GetFlagStatus
08000fd0 g     F .text	00000010 USART_SetReceiverTimeOut
08004c6c g       .text	00000000 _etext
20000388 g       .bss	00000000 _sbss
08001f30 g     F .text	00000022 u8g_GetStrWidth
08002c1e g     F .text	0000007e u8g_dev_pb16v1_base_fn
08000a30 g     F .text	00000014 RCC_SYSCLKConfig
08002614 g     F .text	00000020 u8g_Draw8PixelLL
08000678 g     F .text	0000001c I2C_TimeoutBConfig
20000cf4 g     O .bss	0000004c u8g
08001094 g     F .text	00000014 USART_MuteModeWakeUpConfig
08000d40 g     F .text	00000034 RCC_WaitForHSEStartUp
080021e8 g     F .text	000000a0 u8g_dev_ssd1306_adafruit_128x64_fn
08001060 g     F .text	00000012 USART_SetAddress
08000474 g     F .text	00000020 I2C_SlaveByteControlCmd
0800139e g     F .text	00000052 u8g_DrawBitmapP
0800103c g     F .text	00000014 USART_AutoBaudRateConfig
08000fe0 g     F .text	00000010 USART_SetPrescaler
08002b06 g     F .text	0000000a u8g_SetHardwareBackup
080029de g     F .text	00000020 u8g_Draw8Pixel
08000c38 g     F .text	00000024 RCC_BackupResetCmd
0800372c g     F .text	00000028 delay_system_ticks
08000f1c g     F .text	00000020 USART_OneBitMethodCmd
08000774 g     F .text	0000000c IWDG_SetReload
08001368 g     F .text	00000036 u8g_DrawHBitmapP
080003bc g     F .text	00000012 I2C_ITConfig
08003130 g     F .text	00000080 memcpy
08003754 g     F .text	00000020 delay_micro_seconds
080026cc g     F .text	00000014 u8g_Init
08000a00 g     F .text	00000024 RCC_ClockSecuritySystemCmd
08002a3a g     F .text	00000006 u8g_SetColorIndex
08001e6a g     F .text	0000000a u8g_SetFontPosBaseline
08000d74 g     F .text	00000014 RCC_ClearFlag
08000578 g     F .text	00000020 I2C_10BitAddressHeaderCmd
08001c62 g     F .text	0000003c u8g_DrawStrDir
08002fce g     F .text	00000012 u8g_pb_WriteBuffer
20000384 g     O .data	00000004 SystemCoreClock
20000a18 g     O .bss	00000004 ip_valid
08002b12 g     F .text	00000014 u8g_pb16v1_Clear
08001058 g     F .text	00000008 USART_ReceiveData
20000908 g     O .bss	00000080 u8g_dev_ssd1306_128x64_hw_spi_buf
080008b8 g     F .text	00000010 RCC_HSEConfig
08001e4c g     F .text	00000010 u8g_SetFontRefHeightAll
08003048 g     F .text	00000088 .hidden __udivsi3
200000d0 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_hw_spi
080005f0 g     F .text	00000020 I2C_SMBusAlertCmd
080016b2 g     F .text	00000008 u8g_GetFontBBXOffY
08001f20 g     F .text	00000010 u8g_GetStrXP
08000c74 g     F .text	00000018 RCC_APB2PeriphClockCmd
08000700 g     F .text	00000012 I2C_DMACmd
08002b82 g     F .text	00000048 u8g_pb16v1_Set8PixelStd
200000e8 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_sw_spi
08000168 g     F .text	000000c6 GPIO_Init
080009a8 g     F .text	00000020 RCC_PLLConfig
08000a80 g     F .text	00000034 RCC_ADCCLKConfig
08002e0a g     F .text	0000000c u8g_InitCom
08001e80 g     F .text	0000000c u8g_SetFontPosTop
0800162c g     F .text	00000004 u8g_font_GetFontEndEncoding
080019c6 g     F .text	000000c4 u8g_draw_glyph180
20000000 g       .data	00000000 _sdata
080039ec  w    F .text	00000002 SPI1_IRQHandler
08002ade g     F .text	00000008 u8g_SetDefaultBackgroundColor
08000ed0 g     F .text	00000018 USART_Cmd
20000124 g     O .data	0000000c u8g_dev_ssd1306_128x64_hw_spi_pb
08002e3e g     F .text	0000000e u8g_SetResetHigh
08001180 g     F .text	00000018 USART_IrDACmd
08000838 g     F .text	00000020 SysTick_CLKSourceConfig
080002a8 g     F .text	00000004 GPIO_Write
080039ec  w    F .text	00000002 TIM6_DAC_IRQHandler
08002b26 g     F .text	0000000c u8g_pb16v1_Init
0800028c g     F .text	00000006 GPIO_ReadOutputData
20000508 g     O .bss	00000080 u8g_dev_sh1106_128x64_hw_spi_buf
08001d46 g     F .text	00000038 u8g_DrawStr270P
08000950 g     F .text	00000020 RCC_LSEConfig
08003034 g     F .text	00000012 .hidden __gnu_thumb1_case_uqi
08000694 g     F .text	00000020 I2C_CalculatePEC
080012d4 g     F .text	0000000a USART_ClearITPendingBit
080029c0 g     F .text	0000000e u8g_SleepOff
08000c14 g     F .text	00000024 RCC_RTCCLKCmd
080015d6 g     F .text	0000001a u8g_font_calc_vref_center
08001e98 g     F .text	0000005a u8g_font_calc_str_pixel_width
080029a6 g     F .text	0000000c u8g_SetContrast
0800270a g     F .text	0000004e u8g_InitSPI
08002288 g     F .text	000000a0 u8g_dev_sh1106_128x64_fn
08000c8c g     F .text	00000018 RCC_APB1PeriphClockCmd
08000d88 g     F .text	00000014 RCC_GetITStatus
080015c6 g     F .text	00000006 u8g_font_calc_vref_bottom
20000c70 g     O .bss	00000004 attacker_valid
080025f0 g     F .text	00000010 u8g_SetContrastLL
080004a4 g     F .text	00000020 I2C_10BitAddressingModeCmd
20000160 g     O .data	00000008 GPIOA_InitStruct
08001ef2 g     F .text	0000000e u8g_GetStrPixelWidth
08002ada g     F .text	00000004 u8g_GetDefaultBackgroundColor
080030e8 g     F .text	00000048 __libc_init_array
08001b82 g     F .text	00000038 u8g_DrawStr
08000c5c g     F .text	00000018 RCC_AHBPeriphClockCmd
080006f4 g     F .text	00000004 I2C_SendData
08002bca g     F .text	00000054 u8g_pb16v1_Set8PixelOpt2
080039ec  w    F .text	00000002 EXTI2_3_IRQHandler
0800164e g     F .text	00000050 u8g_font_GetSize
08001074 g     F .text	00000020 USART_MuteModeCmd
08001dd6 g     F .text	00000056 u8g_UpdateRefHeight
2000004c g     O .data	0000000c u8g_dev_sh1106_128x64_i2c_pb
08002990 g     F .text	00000016 u8g_NextPage
080025b6 g     F .text	0000003a u8g_NextPageLL
20000888 g     O .bss	00000080 u8g_dev_ssd1306_128x64_i2c_buf
08000efc g     F .text	00000020 USART_OverSampling8Cmd
08001bba g     F .text	00000038 u8g_DrawStr90
08004c54 g     F .text	00000000 _init
080039ec  w    F .text	00000002 I2C2_IRQHandler
20000b24 g     O .bss	00000004 vector_valid
08002cf0 g     F .text	00000048 u8g_pb8v1_Set8PixelStd
080019a8 g     F .text	0000001e u8g_DrawGlyph90
08000780 g     F .text	00000010 IWDG_ReloadCounter
08000308 g     F .text	00000064 I2C_Init
080039ec  w    F .text	00000002 TIM17_IRQHandler
08000648 g     F .text	00000020 I2C_IdleClockTimeoutCmd
080039ec  w    F .text	00000002 RTC_IRQHandler
08001c9e g     F .text	00000038 u8g_DrawStrP
080026b4 g     F .text	00000018 u8g_Begin
20000148 g     O .data	00000018 USART1_InitStruct
20000e20 g       .bss	00000000 _ebss
080026e0 g     F .text	0000002a u8g_InitComFn
08001290 g     F .text	00000042 USART_GetITStatus
08002b32 g     F .text	0000002e u8g_pb16v1_set_pixel
08002328 g     F .text	000000e8 u8g_dev_ssd1306_128x64_2x_fn
0800399c  w    F .text	00000038 Reset_Handler
08002ff2 g     F .text	00000010 u8g_page_Init
08000278 g     F .text	00000006 GPIO_ReadInputData
080010b8 g     F .text	00000010 USART_LINBreakDetectLengthConfig
08002b04 g     F .text	00000002 u8g_state_dummy_cb
08002d8c g     F .text	0000007e u8g_dev_pb8v1_base_fn
08001e2c g     F .text	00000010 u8g_SetFontRefHeightText
20000d40 g     O .bss	00000040 ip_addr
08002fe0 g     F .text	00000004 u8g_com_null_fn
08000d04 g     F .text	0000003c RCC_GetFlagStatus
080010a8 g     F .text	00000010 USART_AddressDetectionConfig
20000118 g     O .data	0000000c u8g_dev_ssd1306_128x64_hw_spi
08001e8c g     F .text	0000000c u8g_SetFontPosCenter
08000610 g     F .text	00000020 I2C_ClockTimeoutCmd
20000d80 g     O .bss	0000001c I2C1_InitStruct
08002f4e g     F .text	00000012 u8g_pb_IsXIntersection
08000294 g     F .text	00000004 GPIO_SetBits
08001f10 g     F .text	00000010 u8g_GetStrX
08000a44 g     F .text	00000010 RCC_GetSYSCLKSource
0800029c g     F .text	0000000c GPIO_WriteBit
08000538 g     F .text	00000020 I2C_GenerateSTART
0800036c g     F .text	00000016 I2C_StructInit
080029ce g     F .text	00000010 u8g_DrawPixel
08002758 g     F .text	00000030 u8g_InitHWSPI
20000708 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_i2c_buf
20000a08 g     O .bss	00000004 i
0800183c g     F .text	00000012 u8g_GetGlyphDeltaX
08000afc g     F .text	00000108 RCC_GetClocksFreq
080039ec  w    F .text	00000002 TIM16_IRQHandler
08000dec g     F .text	000000a0 USART_Init
080039ec  w    F .text	00000002 TIM3_IRQHandler
080039ec  w    F .text	00000002 EXTI4_15_IRQHandler
080039ec  w    F .text	00000002 RCC_IRQHandler
08002e30 g     F .text	0000000e u8g_SetResetLow
0800161e g     F .text	0000000a u8g_font_GetEncoding97Pos
08001628 g     F .text	00000004 u8g_font_GetFontStartEncoding
08002e58 g     F .text	0000000c u8g_WriteByte
20000388 g       .bss	00000000 _bss
080039ec  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001198 g     F .text	00000020 USART_DECmd
0800075c g     F .text	0000000c IWDG_WriteAccessCmd
080039ec g       .text	00000002 Default_Handler
20000058 g     O .data	0000000c u8g_dev_sh1106_128x64_hw_spi
080005d0 g     F .text	00000020 I2C_TransferHandling
20000088 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_i2c
20000373 g     O .data	00000010 AHBPrescTable
08000630 g     F .text	00000018 I2C_ExtendedClockTimeoutCmd
080010e8 g     F .text	00000018 USART_HalfDuplexCmd
08000714 g     F .text	0000000c I2C_GetFlagStatus
080016c0 g     F .text	000000ea u8g_GetGlyph
08002a4e g     F .text	0000001e u8g_SetHiColorByRGB
08002f60 g     F .text	00000034 u8g_pb_IsIntersection
08001e74 g     F .text	0000000c u8g_SetFontPosBottom
08001bf2 g     F .text	00000038 u8g_DrawStr180
08002ca8 g     F .text	00000026 u8g_pb8v1_set_pixel
08000c04 g     F .text	00000010 RCC_RTCCLKConfig
08001f52 g     F .text	00000022 u8g_GetStrWidthP
08002e6e g     F .text	0000000a u8g_WriteSequenceP
080039ec  w    F .text	00000002 CEC_IRQHandler
08002050 g     F .text	00000096 u8g_draw_aa_glyph
08000910 g     F .text	00000020 RCC_HSI14Cmd
20000028 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_sw_spi
080039ec  w    F .text	00000002 TIM14_IRQHandler
200000ac g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_pb
20000a20 g     O .bss	00000004 timercounter
0800079c g     F .text	00000010 IWDG_Enable
08001224 g     F .text	00000032 USART_ITConfig
080039ec  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
08001610 g     F .text	00000004 u8g_font_GetCapitalAHeight
08001d7e g     F .text	0000002c u8g_DrawStrFontBBX
20000788 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_hw_spi_buf
080013f0 g     F .text	000000b4 u8g_DrawXBM
08000f5c g     F .text	00000020 USART_DataInvCmd
08002e16 g     F .text	0000000e u8g_StopCom
080015f0 g     F .text	00000004 u8g_font_get_char
080002d0 g     F .text	00000038 I2C_DeInit
080016aa g     F .text	00000008 u8g_GetFontBBXOffX
08000384 g     F .text	00000018 I2C_Cmd
08000f90 g     F .text	00000020 USART_SWAPPinCmd
08000298 g     F .text	00000004 GPIO_ResetBits
08000720 g     F .text	00000004 I2C_ClearFlag
08001e5c g     F .text	0000000e u8g_SetFontLineSpacingFactor
08000790 g     F .text	0000000c IWDG_SetWindowValue
080028c2 g     F .text	000000c4 u8g_InitRW8Bit
08002b60 g     F .text	00000022 u8g_pb16v1_SetPixel
08001170 g     F .text	00000010 USART_IrDAConfig
080003f0 g     F .text	00000020 I2C_StopModeCmd
08002034 g     F .text	0000001c u8g_SetFont
080039ec  w    F .text	00000002 TIM15_IRQHandler
08000ff0 g     F .text	00000018 USART_STOPModeCmd
080039ec  w    F .text	00000002 EXTI0_1_IRQHandler
08003914 g     F .text	00000088 I2C_WrReg
08002ae6 g     F .text	0000000c u8g_GetDefaultMidColor
080011b8 g     F .text	00000014 USART_DEPolarityConfig
080030e4  w    F .text	00000002 .hidden __aeabi_ldiv0
08002654 g     F .text	00000012 u8g_GetWidthLL
08000930 g     F .text	00000020 RCC_HSI14ADCRequestCmd
08001cd6 g     F .text	00000038 u8g_DrawStr90P
0800126c g     F .text	00000014 USART_OverrunDetectionConfig
080015f4 g     F .text	00000004 u8g_font_get_charP
08000da8 g     F .text	00000044 USART_DeInit
080004e4 g     F .text	00000020 I2C_ReloadCmd
08002d38 g     F .text	00000054 u8g_pb8v1_Set8PixelOpt2
08001316 g     F .text	00000052 u8g_DrawBitmap
08002104 g     F .text	00000048 u8g_DrawAAStr
080039ec  w    F .text	00000002 SPI2_IRQHandler
08001642 g     F .text	00000006 u8g_font_GetFontXAscent
08001c2a g     F .text	00000038 u8g_DrawStr270
08002c9c g     F .text	0000000c u8g_pb8v1_Init
080031b0 g     F .text	0000008e memset
080008c8 g     F .text	00000014 RCC_AdjustHSICalibrationValue
080034f4 g     F .text	000000d8 main
08002cce g     F .text	00000022 u8g_pb8v1_SetPixel
2000007c g     O .data	0000000c u8g_dev_sh1106_128x64_sw_spi_pb
080005c4 g     F .text	0000000a I2C_GetTransferDirection
08000ea4 g     F .text	00000020 USART_ClockInit
08002666 g     F .text	00000012 u8g_GetHeightLL
08001daa g     F .text	0000002c u8g_DrawGlyphFontBBX
08002a40 g     F .text	0000000e u8g_SetHiColor
08003048 g     F .text	00000000 .hidden __aeabi_uidiv
080039ec  w    F .text	00000002 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
20000488 g     O .bss	00000080 u8g_dev_sh1106_128x64_i2c_buf
20000100 g     O .data	0000000c u8g_dev_ssd1306_128x64_i2c
080027a4 g     F .text	0000004e u8g_Init8BitFixedPort
080007ac g     F .text	00000014 IWDG_GetFlagStatus
20000b28 g     O .bss	00000004 resp_valid
08002a1e g     F .text	0000001c u8g_SetColorEntry
080004c4 g     F .text	00000020 I2C_AutoEndCmd
20000070 g     O .data	0000000c u8g_dev_sh1106_128x64_sw_spi
08002788 g     F .text	0000001c u8g_InitI2C
08001902 g     F .text	000000a6 u8g_draw_glyph90
08000454 g     F .text	00000020 I2C_GeneralCallCmd
20000988 g     O .bss	00000080 u8g_dev_ssd1306_128x64_sw_spi_buf
0800128c g     F .text	00000004 USART_ClearFlag
08002410 g     F .text	000000e8 u8g_dev_sh1106_128x64_2x_fn
0800039c g     F .text	00000020 I2C_SoftwareResetCmd
080035cc g     F .text	000000b8 SystemInit
08001558 g     F .text	0000005c u8g_IsBBXIntersection
20000064 g     O .data	0000000c u8g_dev_sh1106_128x64_hw_spi_pb
080008fc g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
080015cc g     F .text	0000000a u8g_font_calc_vref_top
08001a8a g     F .text	0000001e u8g_DrawGlyph180
080000c4 g     F .text	000000a4 GPIO_DeInit
08004c60 g     F .text	00000000 _fini
08001648 g     F .text	00000006 u8g_font_GetFontXDescent
08001aa8 g     F .text	000000bc u8g_draw_glyph270
080006b4 g     F .text	00000020 I2C_PECRequestCmd
08000518 g     F .text	00000020 I2C_MasterRequestConfig
20000808 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_sw_spi_buf
08000858 g     F .text	00000060 RCC_DeInit
080016ba g     F .text	00000006 u8g_GetFontCapitalAHeight
20000a14 g     O .bss	00000004 line_valid
08001f80 g     F .text	0000004e u8g_GetStrMinBox
08001008 g     F .text	00000014 USART_StopModeWakeUpSourceConfig
08001fce g     F .text	00000066 u8g_GetStrAMinBox
08001614 g     F .text	0000000a u8g_font_GetEncoding65Pos
08000820 g     F .text	00000018 NVIC_SystemLPConfig
080039ec  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08001630 g     F .text	00000006 u8g_font_GetLowerGDescent
2000013c g     O .data	0000000c u8g_dev_ssd1306_128x64_sw_spi_pb
08002684 g     F .text	00000030 u8g_UpdateDimension
08002e24 g     F .text	0000000c u8g_SetChipSelect
08002fa8 g     F .text	00000026 u8g_pb_Is8PixelVisible
080039ec  w    F .text	00000002 WWDG_IRQHandler
080039f8 g     O .text	00000a9f u8g_font_profont22r
2000010c g     O .data	0000000c u8g_dev_ssd1306_128x64_i2c_pb
08000cd4 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08002f14 g     F .text	00000012 u8g_pb_Clear
08002abc g     F .text	0000001e u8g_SetDefaultForegroundColor
080009ec g     F .text	00000014 RCC_PREDIV1Config
0800378c g     F .text	0000000a u8g_10MicroDelay
08000724 g     F .text	00000032 I2C_GetITStatus
080039ec  w    F .text	00000002 TIM2_IRQHandler
2000001c g     O .data	0000000c u8g_dev_sh1106_128x64_2x_hw_spi
08002558 g     F .text	0000002a u8g_InitLL
0800214c g     F .text	0000009c u8g_dev_ssd1306_128x64_fn
08002aaa g     F .text	00000012 u8g_GetDefaultForegroundColor
08002634 g     F .text	00000020 u8g_Draw4TPixelLL
080003d0 g     F .text	00000020 I2C_StretchClockCmd
080027f2 g     F .text	000000d0 u8g_Init8Bit
08000230 g     F .text	00000018 GPIO_StructInit
080039ec  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
08002fe4 g     F .text	0000000e u8g_page_First
08000504 g     F .text	00000014 I2C_NumberOfBytesConfig
08001258 g     F .text	00000014 USART_RequestCmd
08001050 g     F .text	00000008 USART_SendData
20001000 g       *ABS*	00000000 _estack
080020e6 g     F .text	0000001e u8g_DrawAAGlyph
08002aa4 g     F .text	00000006 u8g_GetColorIndex
080018e4 g     F .text	0000001e u8g_DrawGlyph
080030d0 g     F .text	00000012 .hidden __aeabi_uidivmod
08002b10 g     F .text	00000002 u8g_backup_spi
08002678 g     F .text	0000000c u8g_GetModeLL
080006dc g     F .text	00000016 I2C_ReadRegister
20000388 g       .data	00000000 _edata
08000e8c g     F .text	00000016 USART_StructInit
08000fb0 g     F .text	00000020 USART_ReceiverTimeOutCmd
08003002 g     F .text	00000030 u8g_page_Next
200000b8 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_i2c
08001636 g     F .text	00000006 u8g_font_GetFontAscent
20000094 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_hw_spi
08001f00 g     F .text	00000010 u8g_GetStrPixelWidthP
08000668 g     F .text	00000010 I2C_TimeoutAConfig
080039ec  w    F .text	00000002 USART2_IRQHandler
0800112c g     F .text	00000018 USART_SmartCardNACKCmd
0800115c g     F .text	00000012 USART_SetBlockLength
080029b2 g     F .text	0000000e u8g_SleepOn
08000000 g     O .isr_vector	00000000 g_pfnVectors
080006d4 g     F .text	00000006 I2C_GetPEC
08003684 g     F .text	00000064 SystemCoreClockUpdate
080010c8 g     F .text	00000020 USART_LINCmd
20000370 g     O .data	00000003 NVIC_InitStructure
20000034 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_pb
08000ae4 g     F .text	00000018 RCC_USARTCLKConfig
08000f7c g     F .text	00000012 USART_InvPinCmd
08000410 g     F .text	00000020 I2C_DualAddressCmd
08000494 g     F .text	00000010 I2C_SlaveAddressConfig
00000000  w      *UND*	00000000 __init_array_start
080030e4  w    F .text	00000002 .hidden __aeabi_idiv0
08000acc g     F .text	00000018 RCC_I2CCLKConfig
08000768 g     F .text	0000000c IWDG_SetPrescaler
08003478 g     F .text	0000007c draw
08000a68 g     F .text	00000018 RCC_PCLKConfig
08002f26 g     F .text	00000028 u8g_pb_IsYIntersection
080039ec  w    F .text	00000002 FLASH_IRQHandler
080016a4 g     F .text	00000006 u8g_GetFontBBXHeight
080015c2 g     F .text	00000004 u8g_font_calc_vref_font
08003888 g     F .text	0000008c init_i2c
08003798 g     F .text	000000ec u8g_com_hw_i2c_fn
08000248 g     F .text	00000024 GPIO_PinLockConfig
08003240 g     F .text	000001c0 USART1_IRQHandler
08000988 g     F .text	00000020 RCC_LSICmd
08000598 g     F .text	00000020 I2C_AcknowledgeConfig
20000130 g     O .data	0000000c u8g_dev_ssd1306_128x64_sw_spi
08002550 g     F .text	00000008 u8g_call_dev_fn
20000040 g     O .data	0000000c u8g_dev_sh1106_128x64_i2c
08000ec4 g     F .text	0000000c USART_ClockStructInit
08000cbc g     F .text	00000018 RCC_APB2PeriphResetCmd
08000558 g     F .text	00000020 I2C_GenerateSTOP
0800101c g     F .text	00000020 USART_AutoBaudRateCmd
0800169e g     F .text	00000006 u8g_GetFontBBXWidth
080039ec  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
08001f74 g     F .text	00000008 u8g_font_box_min
200000dc g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_hw_spi_pb
20000d9c g     O .bss	00000080 vector
20000388 g     O .bss	00000100 u8g_dev_sh1106_128x64_2x_buf
08000758 g     F .text	00000004 I2C_ClearITPendingBit
00000000  w      *UND*	00000000 __preinit_array_start
080012e0 g     F .text	00000036 u8g_DrawHBitmap
08002a6c g     F .text	00000038 u8g_SetRGB
0800163c g     F .text	00000006 u8g_font_GetFontDescent
080014a4 g     F .text	000000b4 u8g_DrawXBMP
0800026c g     F .text	0000000c GPIO_ReadInputDataBit
080011fc g     F .text	00000012 USART_DMACmd
080011cc g     F .text	00000018 USART_SetDEAssertionTime
080005b8 g     F .text	0000000c I2C_GetAddressMatched
08000a54 g     F .text	00000014 RCC_HCLKConfig
200000a0 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_sw_spi
20000168 g     O .data	00000008 USART1_GPIO_InitStruct
08001210 g     F .text	00000014 USART_DMAReceptionErrorConfig
08002582 g     F .text	00000034 u8g_FirstPageLL



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	2101      	movs	r1, #1
 80000ec:	03c0      	lsls	r0, r0, #15
 80000ee:	f000 fdd9 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	2100      	movs	r1, #0
 80000f6:	03c0      	lsls	r0, r0, #15
 80000f8:	f000 fdd4 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	2101      	movs	r1, #1
 8000102:	0280      	lsls	r0, r0, #10
 8000104:	f000 fdce 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	2100      	movs	r1, #0
 800010c:	0280      	lsls	r0, r0, #10
 800010e:	f000 fdc9 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	2101      	movs	r1, #1
 8000118:	02c0      	lsls	r0, r0, #11
 800011a:	f000 fdc3 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	2100      	movs	r1, #0
 8000122:	02c0      	lsls	r0, r0, #11
 8000124:	f000 fdbe 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	2101      	movs	r1, #1
 800012e:	0300      	lsls	r0, r0, #12
 8000130:	f000 fdb8 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	2100      	movs	r1, #0
 8000138:	0300      	lsls	r0, r0, #12
 800013a:	f000 fdb3 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	2101      	movs	r1, #1
 8000144:	0340      	lsls	r0, r0, #13
 8000146:	f000 fdad 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	2100      	movs	r1, #0
 800014e:	0340      	lsls	r0, r0, #13
 8000150:	f000 fda8 	bl	8000ca4 <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	4644      	mov	r4, r8
 800016c:	465f      	mov	r7, fp
 800016e:	4656      	mov	r6, sl
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000174:	2403      	movs	r4, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000176:	468c      	mov	ip, r1
 8000178:	b083      	sub	sp, #12
 800017a:	6809      	ldr	r1, [r1, #0]
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	46a0      	mov	r8, r4
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d027      	beq.n	80001de <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c3c      	adds	r4, r7, #0

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000190:	1c0d      	adds	r5, r1, #0

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000192:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	4664      	mov	r4, ip
 800019c:	7924      	ldrb	r4, [r4, #4]
 800019e:	46a3      	mov	fp, r4
 80001a0:	3c01      	subs	r4, #1
 80001a2:	2c01      	cmp	r4, #1
 80001a4:	d922      	bls.n	80001ec <GPIO_Init+0x84>
 80001a6:	4644      	mov	r4, r8
 80001a8:	4094      	lsls	r4, r2
 80001aa:	43e4      	mvns	r4, r4
 80001ac:	9401      	str	r4, [sp, #4]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001ae:	6805      	ldr	r5, [r0, #0]
 80001b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001b2:	3301      	adds	r3, #1
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	402c      	ands	r4, r5
 80001b6:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001b8:	465c      	mov	r4, fp
 80001ba:	4094      	lsls	r4, r2
 80001bc:	6805      	ldr	r5, [r0, #0]
 80001be:	432c      	orrs	r4, r5

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c0:	4645      	mov	r5, r8
 80001c2:	4095      	lsls	r5, r2
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001c4:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c6:	68c4      	ldr	r4, [r0, #12]
 80001c8:	43ac      	bics	r4, r5
 80001ca:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	4664      	mov	r4, ip
 80001ce:	79e4      	ldrb	r4, [r4, #7]
 80001d0:	68c5      	ldr	r5, [r0, #12]
 80001d2:	4094      	lsls	r4, r2
 80001d4:	432c      	orrs	r4, r5
 80001d6:	60c4      	str	r4, [r0, #12]
 80001d8:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d1d7      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001de:	b003      	add	sp, #12
 80001e0:	bc3c      	pop	{r2, r3, r4, r5}
 80001e2:	4690      	mov	r8, r2
 80001e4:	4699      	mov	r9, r3
 80001e6:	46a2      	mov	sl, r4
 80001e8:	46ab      	mov	fp, r5
 80001ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001ec:	6884      	ldr	r4, [r0, #8]
 80001ee:	46a1      	mov	r9, r4
 80001f0:	4644      	mov	r4, r8
 80001f2:	4094      	lsls	r4, r2
 80001f4:	464e      	mov	r6, r9
 80001f6:	43e4      	mvns	r4, r4
 80001f8:	4026      	ands	r6, r4
 80001fa:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	6886      	ldr	r6, [r0, #8]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	9401      	str	r4, [sp, #4]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	46b2      	mov	sl, r6
 8000202:	4666      	mov	r6, ip
 8000204:	7976      	ldrb	r6, [r6, #5]
 8000206:	4096      	lsls	r6, r2
 8000208:	46b1      	mov	r9, r6
 800020a:	4656      	mov	r6, sl
 800020c:	464c      	mov	r4, r9
 800020e:	4326      	orrs	r6, r4
 8000210:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	1c26      	adds	r6, r4, #0
 8000216:	43ae      	bics	r6, r5
 8000218:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800021a:	8884      	ldrh	r4, [r0, #4]
 800021c:	46a1      	mov	r9, r4
 800021e:	4664      	mov	r4, ip
 8000220:	79a5      	ldrb	r5, [r4, #6]
 8000222:	464c      	mov	r4, r9
 8000224:	409d      	lsls	r5, r3
 8000226:	4325      	orrs	r5, r4
 8000228:	b2ad      	uxth	r5, r5
 800022a:	8085      	strh	r5, [r0, #4]
 800022c:	e7bf      	b.n	80001ae <GPIO_Init+0x46>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000232:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000234:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000236:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000238:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800023a:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800023c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800023e:	71c3      	strb	r3, [r0, #7]
}
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	0000ffff 	.word	0x0000ffff

08000248 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000248:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800024a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800024c:	025b      	lsls	r3, r3, #9
 800024e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	430b      	orrs	r3, r1
 8000254:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800025a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000260:	69c3      	ldr	r3, [r0, #28]
 8000262:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000264:	69c3      	ldr	r3, [r0, #28]
 8000266:	9301      	str	r3, [sp, #4]
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a00      	ldrh	r0, [r0, #16]
 800026e:	4008      	ands	r0, r1
 8000270:	1e41      	subs	r1, r0, #1
 8000272:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000274:	b2c0      	uxtb	r0, r0
}
 8000276:	4770      	bx	lr

08000278 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000278:	8a00      	ldrh	r0, [r0, #16]
 800027a:	b280      	uxth	r0, r0
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000280:	8a80      	ldrh	r0, [r0, #20]
 8000282:	4008      	ands	r0, r1
 8000284:	1e41      	subs	r1, r0, #1
 8000286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000288:	b2c0      	uxtb	r0, r0
}
 800028a:	4770      	bx	lr

0800028c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800028c:	8a80      	ldrh	r0, [r0, #20]
 800028e:	b280      	uxth	r0, r0
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000294:	6181      	str	r1, [r0, #24]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000298:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800029a:	4770      	bx	lr

0800029c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800029c:	2a00      	cmp	r2, #0
 800029e:	d101      	bne.n	80002a4 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80002a0:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 80002a2:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	6181      	str	r1, [r0, #24]
 80002a6:	e7fc      	b.n	80002a2 <GPIO_WriteBit+0x6>

080002a8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80002a8:	8281      	strh	r1, [r0, #20]
}
 80002aa:	4770      	bx	lr

080002ac <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ac:	2307      	movs	r3, #7
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002ae:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b0:	240f      	movs	r4, #15
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	400b      	ands	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b8:	409c      	lsls	r4, r3
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ba:	1c13      	adds	r3, r2, #0
 80002bc:	08c9      	lsrs	r1, r1, #3
 80002be:	0089      	lsls	r1, r1, #2
 80002c0:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002c2:	6a01      	ldr	r1, [r0, #32]
 80002c4:	43a1      	bics	r1, r4
 80002c6:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002c8:	6a01      	ldr	r1, [r0, #32]
 80002ca:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002cc:	6203      	str	r3, [r0, #32]
}
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80002d0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <I2C_DeInit+0x34>)
 80002d4:	4298      	cmp	r0, r3
 80002d6:	d00a      	beq.n	80002ee <I2C_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80002d8:	2080      	movs	r0, #128	; 0x80
 80002da:	2101      	movs	r1, #1
 80002dc:	03c0      	lsls	r0, r0, #15
 80002de:	f000 fcf9 	bl	8000cd4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80002e2:	2080      	movs	r0, #128	; 0x80
 80002e4:	2100      	movs	r1, #0
 80002e6:	03c0      	lsls	r0, r0, #15
 80002e8:	f000 fcf4 	bl	8000cd4 <RCC_APB1PeriphResetCmd>
  }
}
 80002ec:	bd08      	pop	{r3, pc}
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	2101      	movs	r1, #1
 80002f2:	0380      	lsls	r0, r0, #14
 80002f4:	f000 fcee 	bl	8000cd4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80002f8:	2080      	movs	r0, #128	; 0x80
 80002fa:	2100      	movs	r1, #0
 80002fc:	0380      	lsls	r0, r0, #14
 80002fe:	f000 fce9 	bl	8000cd4 <RCC_APB1PeriphResetCmd>
 8000302:	e7f3      	b.n	80002ec <I2C_DeInit+0x1c>
 8000304:	40005400 	.word	0x40005400

08000308 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000308:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800030a:	2401      	movs	r4, #1
 800030c:	6803      	ldr	r3, [r0, #0]
 800030e:	43a3      	bics	r3, r4
 8000310:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000312:	6802      	ldr	r2, [r0, #0]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <I2C_Init+0x58>)
 8000316:	4013      	ands	r3, r2
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8000318:	688a      	ldr	r2, [r1, #8]
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	4313      	orrs	r3, r2
 800031e:	684a      	ldr	r2, [r1, #4]
 8000320:	4313      	orrs	r3, r2

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000322:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8000324:	680a      	ldr	r2, [r1, #0]
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <I2C_Init+0x5c>)
 8000328:	4013      	ands	r3, r2
 800032a:	6103      	str	r3, [r0, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800032c:	6803      	ldr	r3, [r0, #0]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800032e:	698a      	ldr	r2, [r1, #24]
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000330:	431c      	orrs	r4, r3

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8000332:	2300      	movs	r3, #0
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000334:	6004      	str	r4, [r0, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8000336:	6083      	str	r3, [r0, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8000338:	60c3      	str	r3, [r0, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800033a:	690b      	ldr	r3, [r1, #16]
 800033c:	4313      	orrs	r3, r2
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 800033e:	2280      	movs	r2, #128	; 0x80
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8000340:	6083      	str	r3, [r0, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8000342:	6883      	ldr	r3, [r0, #8]
 8000344:	0212      	lsls	r2, r2, #8
 8000346:	4313      	orrs	r3, r2
 8000348:	6083      	str	r3, [r0, #8]
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 800034a:	6803      	ldr	r3, [r0, #0]
 800034c:	68ca      	ldr	r2, [r1, #12]
 800034e:	4313      	orrs	r3, r2
 8000350:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000352:	6842      	ldr	r2, [r0, #4]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <I2C_Init+0x60>)
 8000356:	4013      	ands	r3, r2
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8000358:	694a      	ldr	r2, [r1, #20]
 800035a:	4313      	orrs	r3, r2
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800035c:	6043      	str	r3, [r0, #4]
}
 800035e:	bd10      	pop	{r4, pc}
 8000360:	00cfe0ff 	.word	0x00cfe0ff
 8000364:	f0ffffff 	.word	0xf0ffffff
 8000368:	07ff7fff 	.word	0x07ff7fff

0800036c <I2C_StructInit>:
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800036c:	2280      	movs	r2, #128	; 0x80
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 800036e:	2300      	movs	r3, #0
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8000370:	0212      	lsls	r2, r2, #8
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8000372:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8000374:	6043      	str	r3, [r0, #4]
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 8000376:	6083      	str	r3, [r0, #8]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000378:	60c3      	str	r3, [r0, #12]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800037a:	6103      	str	r3, [r0, #16]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800037c:	6142      	str	r2, [r0, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800037e:	6183      	str	r3, [r0, #24]
}
 8000380:	4770      	bx	lr
 8000382:	46c0      	nop			; (mov r8, r8)

08000384 <I2C_Cmd>:
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000384:	2900      	cmp	r1, #0
 8000386:	d104      	bne.n	8000392 <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8000388:	2201      	movs	r2, #1
 800038a:	6803      	ldr	r3, [r0, #0]
 800038c:	4393      	bics	r3, r2
 800038e:	6003      	str	r3, [r0, #0]
  }
}
 8000390:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000392:	2301      	movs	r3, #1
 8000394:	6802      	ldr	r2, [r0, #0]
 8000396:	4313      	orrs	r3, r2
 8000398:	6003      	str	r3, [r0, #0]
 800039a:	e7f9      	b.n	8000390 <I2C_Cmd+0xc>

0800039c <I2C_SoftwareResetCmd>:
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800039c:	2900      	cmp	r1, #0
 800039e:	d104      	bne.n	80003aa <I2C_SoftwareResetCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SWRST);
 80003a0:	6802      	ldr	r2, [r0, #0]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <I2C_SoftwareResetCmd+0x1c>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	6003      	str	r3, [r0, #0]
  }
}
 80003a8:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	6803      	ldr	r3, [r0, #0]
 80003ae:	0192      	lsls	r2, r2, #6
 80003b0:	4313      	orrs	r3, r2
 80003b2:	6003      	str	r3, [r0, #0]
 80003b4:	e7f8      	b.n	80003a8 <I2C_SoftwareResetCmd+0xc>
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	ffffdfff 	.word	0xffffdfff

080003bc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80003bc:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d102      	bne.n	80003c8 <I2C_ITConfig+0xc>
    I2Cx->CR1 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 80003c2:	438b      	bics	r3, r1
 80003c4:	6003      	str	r3, [r0, #0]
  }
}
 80003c6:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80003c8:	4319      	orrs	r1, r3
 80003ca:	6001      	str	r1, [r0, #0]
 80003cc:	e7fb      	b.n	80003c6 <I2C_ITConfig+0xa>
 80003ce:	46c0      	nop			; (mov r8, r8)

080003d0 <I2C_StretchClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d105      	bne.n	80003e0 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	6803      	ldr	r3, [r0, #0]
 80003d8:	0292      	lsls	r2, r2, #10
 80003da:	4313      	orrs	r3, r2
 80003dc:	6003      	str	r3, [r0, #0]
  }
}
 80003de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 80003e0:	6802      	ldr	r2, [r0, #0]
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <I2C_StretchClockCmd+0x1c>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	6003      	str	r3, [r0, #0]
 80003e8:	e7f9      	b.n	80003de <I2C_StretchClockCmd+0xe>
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	fffdffff 	.word	0xfffdffff

080003f0 <I2C_StopModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d104      	bne.n	80003fe <I2C_StopModeCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 80003f4:	6802      	ldr	r2, [r0, #0]
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <I2C_StopModeCmd+0x1c>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	6003      	str	r3, [r0, #0]
  }
}
 80003fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	6803      	ldr	r3, [r0, #0]
 8000402:	02d2      	lsls	r2, r2, #11
 8000404:	4313      	orrs	r3, r2
 8000406:	6003      	str	r3, [r0, #0]
 8000408:	e7f8      	b.n	80003fc <I2C_StopModeCmd+0xc>
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	fffbffff 	.word	0xfffbffff

08000410 <I2C_DualAddressCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000410:	2900      	cmp	r1, #0
 8000412:	d104      	bne.n	800041e <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 8000414:	68c2      	ldr	r2, [r0, #12]
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <I2C_DualAddressCmd+0x1c>)
 8000418:	4013      	ands	r3, r2
 800041a:	60c3      	str	r3, [r0, #12]
  }
}    
 800041c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	68c3      	ldr	r3, [r0, #12]
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	4313      	orrs	r3, r2
 8000426:	60c3      	str	r3, [r0, #12]
 8000428:	e7f8      	b.n	800041c <I2C_DualAddressCmd+0xc>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffff7fff 	.word	0xffff7fff

08000430 <I2C_OwnAddress2Config>:
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8000430:	b510      	push	{r4, lr}
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <I2C_OwnAddress2Config+0x20>)
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8000434:	1c0c      	adds	r4, r1, #0
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000436:	68c1      	ldr	r1, [r0, #12]
  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 8000438:	0212      	lsls	r2, r2, #8
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 800043a:	400b      	ands	r3, r1

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 800043c:	21fe      	movs	r1, #254	; 0xfe
 800043e:	4021      	ands	r1, r4
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 8000440:	24e0      	movs	r4, #224	; 0xe0
 8000442:	00e4      	lsls	r4, r4, #3
 8000444:	4022      	ands	r2, r4

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 8000446:	4311      	orrs	r1, r2
 8000448:	4319      	orrs	r1, r3
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800044a:	60c1      	str	r1, [r0, #12]
}
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	fffff801 	.word	0xfffff801

08000454 <I2C_GeneralCallCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000454:	2900      	cmp	r1, #0
 8000456:	d104      	bne.n	8000462 <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_GCEN;
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 8000458:	6802      	ldr	r2, [r0, #0]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <I2C_GeneralCallCmd+0x1c>)
 800045c:	4013      	ands	r3, r2
 800045e:	6003      	str	r3, [r0, #0]
  }
} 
 8000460:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	6803      	ldr	r3, [r0, #0]
 8000466:	0312      	lsls	r2, r2, #12
 8000468:	4313      	orrs	r3, r2
 800046a:	6003      	str	r3, [r0, #0]
 800046c:	e7f8      	b.n	8000460 <I2C_GeneralCallCmd+0xc>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	fff7ffff 	.word	0xfff7ffff

08000474 <I2C_SlaveByteControlCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000474:	2900      	cmp	r1, #0
 8000476:	d104      	bne.n	8000482 <I2C_SlaveByteControlCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SBC;
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 8000478:	6802      	ldr	r2, [r0, #0]
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <I2C_SlaveByteControlCmd+0x1c>)
 800047c:	4013      	ands	r3, r2
 800047e:	6003      	str	r3, [r0, #0]
  }
}
 8000480:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	6803      	ldr	r3, [r0, #0]
 8000486:	0252      	lsls	r2, r2, #9
 8000488:	4313      	orrs	r3, r2
 800048a:	6003      	str	r3, [r0, #0]
 800048c:	e7f8      	b.n	8000480 <I2C_SlaveByteControlCmd+0xc>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	fffeffff 	.word	0xfffeffff

08000494 <I2C_SlaveAddressConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8000494:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 8000496:	0589      	lsls	r1, r1, #22
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 8000498:	0a9b      	lsrs	r3, r3, #10
 800049a:	029b      	lsls	r3, r3, #10

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 800049c:	0d89      	lsrs	r1, r1, #22
 800049e:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 80004a0:	6041      	str	r1, [r0, #4]
}
 80004a2:	4770      	bx	lr

080004a4 <I2C_10BitAddressingModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004a4:	2900      	cmp	r1, #0
 80004a6:	d104      	bne.n	80004b2 <I2C_10BitAddressingModeCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_ADD10;
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 80004a8:	6842      	ldr	r2, [r0, #4]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <I2C_10BitAddressingModeCmd+0x1c>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	6043      	str	r3, [r0, #4]
  }
} 
 80004b0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	6843      	ldr	r3, [r0, #4]
 80004b6:	0112      	lsls	r2, r2, #4
 80004b8:	4313      	orrs	r3, r2
 80004ba:	6043      	str	r3, [r0, #4]
 80004bc:	e7f8      	b.n	80004b0 <I2C_10BitAddressingModeCmd+0xc>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	fffff7ff 	.word	0xfffff7ff

080004c4 <I2C_AutoEndCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d104      	bne.n	80004d2 <I2C_AutoEndCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 80004c8:	6842      	ldr	r2, [r0, #4]
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <I2C_AutoEndCmd+0x1c>)
 80004cc:	4013      	ands	r3, r2
 80004ce:	6043      	str	r3, [r0, #4]
  }
} 
 80004d0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	6843      	ldr	r3, [r0, #4]
 80004d6:	0492      	lsls	r2, r2, #18
 80004d8:	4313      	orrs	r3, r2
 80004da:	6043      	str	r3, [r0, #4]
 80004dc:	e7f8      	b.n	80004d0 <I2C_AutoEndCmd+0xc>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	fdffffff 	.word	0xfdffffff

080004e4 <I2C_ReloadCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004e4:	2900      	cmp	r1, #0
 80004e6:	d104      	bne.n	80004f2 <I2C_ReloadCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_RELOAD;
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 80004e8:	6842      	ldr	r2, [r0, #4]
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <I2C_ReloadCmd+0x1c>)
 80004ec:	4013      	ands	r3, r2
 80004ee:	6043      	str	r3, [r0, #4]
  }
}
 80004f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	6843      	ldr	r3, [r0, #4]
 80004f6:	0452      	lsls	r2, r2, #17
 80004f8:	4313      	orrs	r3, r2
 80004fa:	6043      	str	r3, [r0, #4]
 80004fc:	e7f8      	b.n	80004f0 <I2C_ReloadCmd+0xc>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	feffffff 	.word	0xfeffffff

08000504 <I2C_NumberOfBytesConfig>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8000504:	6842      	ldr	r2, [r0, #4]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <I2C_NumberOfBytesConfig+0x10>)

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8000508:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 800050a:	4013      	ands	r3, r2

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 800050c:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 800050e:	6041      	str	r1, [r0, #4]
}  
 8000510:	4770      	bx	lr
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	ff00ffff 	.word	0xff00ffff

08000518 <I2C_MasterRequestConfig>:
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 8000518:	2900      	cmp	r1, #0
 800051a:	d005      	beq.n	8000528 <I2C_MasterRequestConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	6843      	ldr	r3, [r0, #4]
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	4313      	orrs	r3, r2
 8000524:	6043      	str	r3, [r0, #4]
  }
}  
 8000526:	4770      	bx	lr
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 8000528:	6842      	ldr	r2, [r0, #4]
 800052a:	4b02      	ldr	r3, [pc, #8]	; (8000534 <I2C_MasterRequestConfig+0x1c>)
 800052c:	4013      	ands	r3, r2
 800052e:	6043      	str	r3, [r0, #4]
 8000530:	e7f9      	b.n	8000526 <I2C_MasterRequestConfig+0xe>
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	fffffbff 	.word	0xfffffbff

08000538 <I2C_GenerateSTART>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000538:	2900      	cmp	r1, #0
 800053a:	d104      	bne.n	8000546 <I2C_GenerateSTART+0xe>
    I2Cx->CR2 |= I2C_CR2_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 800053c:	6842      	ldr	r2, [r0, #4]
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <I2C_GenerateSTART+0x1c>)
 8000540:	4013      	ands	r3, r2
 8000542:	6043      	str	r3, [r0, #4]
  }
}  
 8000544:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	6843      	ldr	r3, [r0, #4]
 800054a:	0192      	lsls	r2, r2, #6
 800054c:	4313      	orrs	r3, r2
 800054e:	6043      	str	r3, [r0, #4]
 8000550:	e7f8      	b.n	8000544 <I2C_GenerateSTART+0xc>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	ffffdfff 	.word	0xffffdfff

08000558 <I2C_GenerateSTOP>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000558:	2900      	cmp	r1, #0
 800055a:	d104      	bne.n	8000566 <I2C_GenerateSTOP+0xe>
    I2Cx->CR2 |= I2C_CR2_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 800055c:	6842      	ldr	r2, [r0, #4]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <I2C_GenerateSTOP+0x1c>)
 8000560:	4013      	ands	r3, r2
 8000562:	6043      	str	r3, [r0, #4]
  }
}  
 8000564:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	6843      	ldr	r3, [r0, #4]
 800056a:	01d2      	lsls	r2, r2, #7
 800056c:	4313      	orrs	r3, r2
 800056e:	6043      	str	r3, [r0, #4]
 8000570:	e7f8      	b.n	8000564 <I2C_GenerateSTOP+0xc>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	ffffbfff 	.word	0xffffbfff

08000578 <I2C_10BitAddressHeaderCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000578:	2900      	cmp	r1, #0
 800057a:	d104      	bne.n	8000586 <I2C_10BitAddressHeaderCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 800057c:	6842      	ldr	r2, [r0, #4]
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <I2C_10BitAddressHeaderCmd+0x1c>)
 8000580:	4013      	ands	r3, r2
 8000582:	6043      	str	r3, [r0, #4]
  }
}    
 8000584:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	6843      	ldr	r3, [r0, #4]
 800058a:	0152      	lsls	r2, r2, #5
 800058c:	4313      	orrs	r3, r2
 800058e:	6043      	str	r3, [r0, #4]
 8000590:	e7f8      	b.n	8000584 <I2C_10BitAddressHeaderCmd+0xc>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	ffffefff 	.word	0xffffefff

08000598 <I2C_AcknowledgeConfig>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000598:	2900      	cmp	r1, #0
 800059a:	d105      	bne.n	80005a8 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	6843      	ldr	r3, [r0, #4]
 80005a0:	0212      	lsls	r2, r2, #8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	6043      	str	r3, [r0, #4]
  }
}
 80005a6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 80005a8:	6842      	ldr	r2, [r0, #4]
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <I2C_AcknowledgeConfig+0x1c>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	6043      	str	r3, [r0, #4]
 80005b0:	e7f9      	b.n	80005a6 <I2C_AcknowledgeConfig+0xe>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	ffff7fff 	.word	0xffff7fff

080005b8 <I2C_GetAddressMatched>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 80005b8:	23fe      	movs	r3, #254	; 0xfe
 80005ba:	6980      	ldr	r0, [r0, #24]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	4018      	ands	r0, r3
 80005c0:	0c00      	lsrs	r0, r0, #16
}
 80005c2:	4770      	bx	lr

080005c4 <I2C_GetTransferDirection>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 80005c4:	6980      	ldr	r0, [r0, #24]
 80005c6:	03c0      	lsls	r0, r0, #15
    direction = I2C_Direction_Transmitter;
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 80005c8:	0fc0      	lsrs	r0, r0, #31
 80005ca:	0280      	lsls	r0, r0, #10
  }  
  return direction;
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80005d0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80005d2:	6844      	ldr	r4, [r0, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80005d4:	4d05      	ldr	r5, [pc, #20]	; (80005ec <I2C_TransferHandling+0x1c>)
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80005d6:	0589      	lsls	r1, r1, #22
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80005d8:	402c      	ands	r4, r5
 80005da:	9d03      	ldr	r5, [sp, #12]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80005dc:	0d89      	lsrs	r1, r1, #22
 80005de:	432c      	orrs	r4, r5
 80005e0:	4323      	orrs	r3, r4
 80005e2:	430b      	orrs	r3, r1
 80005e4:	0412      	lsls	r2, r2, #16
 80005e6:	4313      	orrs	r3, r2
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80005e8:	6043      	str	r3, [r0, #4]
}
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	fc009800 	.word	0xfc009800

080005f0 <I2C_SMBusAlertCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005f0:	2900      	cmp	r1, #0
 80005f2:	d104      	bne.n	80005fe <I2C_SMBusAlertCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 80005f4:	6802      	ldr	r2, [r0, #0]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <I2C_SMBusAlertCmd+0x1c>)
 80005f8:	4013      	ands	r3, r2
 80005fa:	6003      	str	r3, [r0, #0]
  }
}
 80005fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	4313      	orrs	r3, r2
 8000606:	6003      	str	r3, [r0, #0]
 8000608:	e7f8      	b.n	80005fc <I2C_SMBusAlertCmd+0xc>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	ffbfffff 	.word	0xffbfffff

08000610 <I2C_ClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000610:	2900      	cmp	r1, #0
 8000612:	d104      	bne.n	800061e <I2C_ClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8000614:	6942      	ldr	r2, [r0, #20]
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <I2C_ClockTimeoutCmd+0x1c>)
 8000618:	4013      	ands	r3, r2
 800061a:	6143      	str	r3, [r0, #20]
  }
}
 800061c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	6943      	ldr	r3, [r0, #20]
 8000622:	0212      	lsls	r2, r2, #8
 8000624:	4313      	orrs	r3, r2
 8000626:	6143      	str	r3, [r0, #20]
 8000628:	e7f8      	b.n	800061c <I2C_ClockTimeoutCmd+0xc>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	ffff7fff 	.word	0xffff7fff

08000630 <I2C_ExtendedClockTimeoutCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8000630:	6943      	ldr	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <I2C_ExtendedClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	6143      	str	r3, [r0, #20]
  }
}
 800063c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0612      	lsls	r2, r2, #24
 8000642:	4313      	orrs	r3, r2
 8000644:	6143      	str	r3, [r0, #20]
 8000646:	e7f9      	b.n	800063c <I2C_ExtendedClockTimeoutCmd+0xc>

08000648 <I2C_IdleClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000648:	2900      	cmp	r1, #0
 800064a:	d104      	bne.n	8000656 <I2C_IdleClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 800064c:	6942      	ldr	r2, [r0, #20]
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <I2C_IdleClockTimeoutCmd+0x1c>)
 8000650:	4013      	ands	r3, r2
 8000652:	6143      	str	r3, [r0, #20]
  }
}
 8000654:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	6943      	ldr	r3, [r0, #20]
 800065a:	0152      	lsls	r2, r2, #5
 800065c:	4313      	orrs	r3, r2
 800065e:	6143      	str	r3, [r0, #20]
 8000660:	e7f8      	b.n	8000654 <I2C_IdleClockTimeoutCmd+0xc>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	ffffefff 	.word	0xffffefff

08000668 <I2C_TimeoutAConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8000668:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 800066a:	0509      	lsls	r1, r1, #20
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 800066c:	0b1b      	lsrs	r3, r3, #12
 800066e:	031b      	lsls	r3, r3, #12

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8000670:	0d09      	lsrs	r1, r1, #20
 8000672:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8000674:	6141      	str	r1, [r0, #20]
}
 8000676:	4770      	bx	lr

08000678 <I2C_TimeoutBConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8000678:	6942      	ldr	r2, [r0, #20]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <I2C_TimeoutBConfig+0x14>)

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 800067c:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 800067e:	4013      	ands	r3, r2

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <I2C_TimeoutBConfig+0x18>)
 8000682:	4011      	ands	r1, r2
 8000684:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8000686:	6141      	str	r1, [r0, #20]
}
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	f000ffff 	.word	0xf000ffff
 8000690:	0fff0000 	.word	0x0fff0000

08000694 <I2C_CalculatePEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000694:	2900      	cmp	r1, #0
 8000696:	d104      	bne.n	80006a2 <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= I2C_CR1_PECEN;   
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 8000698:	6802      	ldr	r2, [r0, #0]
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <I2C_CalculatePEC+0x1c>)
 800069c:	4013      	ands	r3, r2
 800069e:	6003      	str	r3, [r0, #0]
  }
}
 80006a0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	6803      	ldr	r3, [r0, #0]
 80006a6:	0412      	lsls	r2, r2, #16
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6003      	str	r3, [r0, #0]
 80006ac:	e7f8      	b.n	80006a0 <I2C_CalculatePEC+0xc>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	ff7fffff 	.word	0xff7fffff

080006b4 <I2C_PECRequestCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d104      	bne.n	80006c2 <I2C_PECRequestCmd+0xe>
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 80006b8:	6802      	ldr	r2, [r0, #0]
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <I2C_PECRequestCmd+0x1c>)
 80006bc:	4013      	ands	r3, r2
 80006be:	6003      	str	r3, [r0, #0]
  }
}
 80006c0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6003      	str	r3, [r0, #0]
 80006cc:	e7f8      	b.n	80006c0 <I2C_PECRequestCmd+0xc>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	fbffffff 	.word	0xfbffffff

080006d4 <I2C_GetPEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 80006d4:	6a00      	ldr	r0, [r0, #32]
 80006d6:	b2c0      	uxtb	r0, r0
}
 80006d8:	4770      	bx	lr
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <I2C_ReadRegister>:
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 80006dc:	2300      	movs	r3, #0
  *            @arg I2C_Register_RXDR: RXDR register.
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80006de:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80006e0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 80006e2:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80006e4:	9b01      	ldr	r3, [sp, #4]
 80006e6:	18c9      	adds	r1, r1, r3
 80006e8:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	6818      	ldr	r0, [r3, #0]
}
 80006ee:	b002      	add	sp, #8
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)

080006f4 <I2C_SendData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 80006f4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006f6:	4770      	bx	lr

080006f8 <I2C_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 80006f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80006fa:	b2c0      	uxtb	r0, r0
}  
 80006fc:	4770      	bx	lr
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <I2C_DMACmd>:
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8000700:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 8000702:	2a00      	cmp	r2, #0
 8000704:	d102      	bne.n	800070c <I2C_DMACmd+0xc>
    I2Cx->CR1 |= I2C_DMAReq;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8000706:	438b      	bics	r3, r1
 8000708:	6003      	str	r3, [r0, #0]
  }
}
 800070a:	4770      	bx	lr
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 800070c:	4319      	orrs	r1, r3
 800070e:	6001      	str	r1, [r0, #0]
 8000710:	e7fb      	b.n	800070a <I2C_DMACmd+0xa>
 8000712:	46c0      	nop			; (mov r8, r8)

08000714 <I2C_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000714:	6980      	ldr	r0, [r0, #24]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8000716:	4008      	ands	r0, r1
  
  if(tmpreg != 0)
 8000718:	1e41      	subs	r1, r0, #1
 800071a:	4188      	sbcs	r0, r1
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  return bitstatus;
 800071c:	b2c0      	uxtb	r0, r0
} 
 800071e:	4770      	bx	lr

08000720 <I2C_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8000720:	61c1      	str	r1, [r0, #28]
  }
 8000722:	4770      	bx	lr

08000724 <I2C_GetITStatus>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if((I2C_IT & ERROR_IT_MASK) != 0)
 8000724:	23fc      	movs	r3, #252	; 0xfc
 8000726:	019b      	lsls	r3, r3, #6
 8000728:	4219      	tst	r1, r3
 800072a:	d00a      	beq.n	8000742 <I2C_GetITStatus+0x1e>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	6803      	ldr	r3, [r0, #0]
 8000730:	4013      	ands	r3, r2
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000732:	6982      	ldr	r2, [r0, #24]
    bitstatus = SET;
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8000734:	2000      	movs	r0, #0

  /* Get flag status */
  tmpreg &= I2C_IT;

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8000736:	420a      	tst	r2, r1
 8000738:	d002      	beq.n	8000740 <I2C_GetITStatus+0x1c>
 800073a:	1e58      	subs	r0, r3, #1
 800073c:	4183      	sbcs	r3, r0
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800073e:	b2d8      	uxtb	r0, r3
    bitstatus = RESET;
  }

  /* Return the I2C_IT status */
  return bitstatus;
}
 8000740:	4770      	bx	lr
  if((I2C_IT & ERROR_IT_MASK) != 0)
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
  }
  /* If TC interrupt */
  else if((I2C_IT & TC_IT_MASK) != 0)
 8000742:	23c0      	movs	r3, #192	; 0xc0
 8000744:	420b      	tst	r3, r1
 8000746:	d003      	beq.n	8000750 <I2C_GetITStatus+0x2c>
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	4013      	ands	r3, r2
 800074e:	e7f0      	b.n	8000732 <I2C_GetITStatus+0xe>
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	400b      	ands	r3, r1
 8000754:	e7ed      	b.n	8000732 <I2C_GetITStatus+0xe>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <I2C_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8000758:	61c1      	str	r1, [r0, #28]
}
 800075a:	4770      	bx	lr

0800075c <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800075c:	4b01      	ldr	r3, [pc, #4]	; (8000764 <IWDG_WriteAccessCmd+0x8>)
 800075e:	6018      	str	r0, [r3, #0]
}
 8000760:	4770      	bx	lr
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40003000 	.word	0x40003000

08000768 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8000768:	4b01      	ldr	r3, [pc, #4]	; (8000770 <IWDG_SetPrescaler+0x8>)
 800076a:	6058      	str	r0, [r3, #4]
}
 800076c:	4770      	bx	lr
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40003000 	.word	0x40003000

08000774 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <IWDG_SetReload+0x8>)
 8000776:	6098      	str	r0, [r3, #8]
}
 8000778:	4770      	bx	lr
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40003000 	.word	0x40003000

08000780 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 8000780:	4a01      	ldr	r2, [pc, #4]	; (8000788 <IWDG_ReloadCounter+0x8>)
 8000782:	4b02      	ldr	r3, [pc, #8]	; (800078c <IWDG_ReloadCounter+0xc>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	4770      	bx	lr
 8000788:	0000aaaa 	.word	0x0000aaaa
 800078c:	40003000 	.word	0x40003000

08000790 <IWDG_SetWindowValue>:
  */
void IWDG_SetWindowValue(uint16_t WindowValue)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
  IWDG->WINR = WindowValue;
 8000790:	4b01      	ldr	r3, [pc, #4]	; (8000798 <IWDG_SetWindowValue+0x8>)
 8000792:	6118      	str	r0, [r3, #16]
}
 8000794:	4770      	bx	lr
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40003000 	.word	0x40003000

0800079c <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 800079c:	4a01      	ldr	r2, [pc, #4]	; (80007a4 <IWDG_Enable+0x8>)
 800079e:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <IWDG_Enable+0xc>)
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	4770      	bx	lr
 80007a4:	0000cccc 	.word	0x0000cccc
 80007a8:	40003000 	.word	0x40003000

080007ac <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <IWDG_GetFlagStatus+0x10>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4018      	ands	r0, r3
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 80007b6:	b2c0      	uxtb	r0, r0
}
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40003000 	.word	0x40003000

080007c0 <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80007c0:	7883      	ldrb	r3, [r0, #2]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80007c2:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <NVIC_Init+0x1c>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007c8:	221f      	movs	r2, #31
 80007ca:	7803      	ldrb	r3, [r0, #0]
 80007cc:	4913      	ldr	r1, [pc, #76]	; (800081c <NVIC_Init+0x5c>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	409a      	lsls	r2, r3
 80007d4:	1c13      	adds	r3, r2, #0
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	508b      	str	r3, [r1, r2]
  }
}
 80007da:	bd70      	pop	{r4, r5, r6, pc}
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80007dc:	2403      	movs	r4, #3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80007de:	7802      	ldrb	r2, [r0, #0]
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <NVIC_Init+0x5c>)
 80007e2:	0895      	lsrs	r5, r2, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80007e4:	4022      	ands	r2, r4
 80007e6:	00d4      	lsls	r4, r2, #3
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	1c11      	adds	r1, r2, #0
 80007ec:	469c      	mov	ip, r3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80007ee:	26c0      	movs	r6, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80007f0:	40a1      	lsls	r1, r4
 80007f2:	00ad      	lsls	r5, r5, #2
 80007f4:	4465      	add	r5, ip
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80007f6:	00b6      	lsls	r6, r6, #2
 80007f8:	59ab      	ldr	r3, [r5, r6]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80007fa:	438b      	bics	r3, r1
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80007fc:	7841      	ldrb	r1, [r0, #1]
 80007fe:	0189      	lsls	r1, r1, #6
 8000800:	400a      	ands	r2, r1
 8000802:	40a2      	lsls	r2, r4
 8000804:	4313      	orrs	r3, r2
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000806:	221f      	movs	r2, #31
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8000808:	51ab      	str	r3, [r5, r6]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800080a:	7803      	ldrb	r3, [r0, #0]
 800080c:	4013      	ands	r3, r2
 800080e:	2201      	movs	r2, #1
 8000810:	409a      	lsls	r2, r3
 8000812:	1c13      	adds	r3, r2, #0
 8000814:	4662      	mov	r2, ip
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	e7df      	b.n	80007da <NVIC_Init+0x1a>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	e000e100 	.word	0xe000e100

08000820 <NVIC_SystemLPConfig>:
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <NVIC_SystemLPConfig+0x14>)
 8000822:	6913      	ldr	r3, [r2, #16]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000824:	2900      	cmp	r1, #0
 8000826:	d102      	bne.n	800082e <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000828:	4383      	bics	r3, r0
 800082a:	6113      	str	r3, [r2, #16]
  }
}
 800082c:	4770      	bx	lr
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800082e:	4318      	orrs	r0, r3
 8000830:	6110      	str	r0, [r2, #16]
 8000832:	e7fb      	b.n	800082c <NVIC_SystemLPConfig+0xc>
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000838:	2804      	cmp	r0, #4
 800083a:	d005      	beq.n	8000848 <SysTick_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800083c:	2104      	movs	r1, #4
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SysTick_CLKSourceConfig+0x1c>)
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	438b      	bics	r3, r1
 8000844:	6013      	str	r3, [r2, #0]
  }
}
 8000846:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <SysTick_CLKSourceConfig+0x1c>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4310      	orrs	r0, r2
 800084e:	6018      	str	r0, [r3, #0]
 8000850:	e7f9      	b.n	8000846 <SysTick_CLKSourceConfig+0xe>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	e000e010 	.word	0xe000e010

08000858 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000858:	2101      	movs	r1, #1
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <RCC_DeInit+0x48>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000862:	6858      	ldr	r0, [r3, #4]
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <RCC_DeInit+0x4c>)
 8000866:	4002      	ands	r2, r0
 8000868:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <RCC_DeInit+0x50>)
 800086e:	4002      	ands	r2, r0
 8000870:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <RCC_DeInit+0x54>)
 8000876:	4002      	ands	r2, r0
 8000878:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800087a:	6858      	ldr	r0, [r3, #4]
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <RCC_DeInit+0x58>)
 800087e:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000880:	200f      	movs	r0, #15

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000882:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000886:	4382      	bics	r2, r0
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800088a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <RCC_DeInit+0x5c>)
 800088e:	4002      	ands	r2, r0
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000894:	438a      	bics	r2, r1
 8000896:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
}
 800089c:	4770      	bx	lr
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	f8ffb80c 	.word	0xf8ffb80c
 80008a8:	fef6ffff 	.word	0xfef6ffff
 80008ac:	fffbffff 	.word	0xfffbffff
 80008b0:	ffc0ffff 	.word	0xffc0ffff
 80008b4:	fffffeac 	.word	0xfffffeac

080008b8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80008b8:	2200      	movs	r2, #0
 80008ba:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <RCC_HSEConfig+0xc>)
 80008bc:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80008be:	7018      	strb	r0, [r3, #0]

}
 80008c0:	4770      	bx	lr
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021002 	.word	0x40021002

080008c8 <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80008c8:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80008ca:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80008cc:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80008ce:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80008d0:	438b      	bics	r3, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80008d2:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 80008d4:	6010      	str	r0, [r2, #0]
}
 80008d6:	4770      	bx	lr
 80008d8:	40021000 	.word	0x40021000

080008dc <RCC_HSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008de:	2800      	cmp	r0, #0
 80008e0:	d104      	bne.n	80008ec <RCC_HSICmd+0x10>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 80008e2:	2101      	movs	r1, #1
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	438b      	bics	r3, r1
 80008e8:	6013      	str	r3, [r2, #0]
  }
}
 80008ea:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80008ec:	2301      	movs	r3, #1
 80008ee:	6811      	ldr	r1, [r2, #0]
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e7f9      	b.n	80008ea <RCC_HSICmd+0xe>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80008fc:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 80008fe:	4a03      	ldr	r2, [pc, #12]	; (800090c <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8000900:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8000902:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000904:	438b      	bics	r3, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8000906:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 8000908:	6350      	str	r0, [r2, #52]	; 0x34
}
 800090a:	4770      	bx	lr
 800090c:	40021000 	.word	0x40021000

08000910 <RCC_HSI14Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000912:	2800      	cmp	r0, #0
 8000914:	d104      	bne.n	8000920 <RCC_HSI14Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 8000916:	2101      	movs	r1, #1
 8000918:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800091a:	438b      	bics	r3, r1
 800091c:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 800091e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000920:	2301      	movs	r3, #1
 8000922:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000924:	430b      	orrs	r3, r1
 8000926:	6353      	str	r3, [r2, #52]	; 0x34
 8000928:	e7f9      	b.n	800091e <RCC_HSI14Cmd+0xe>
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000

08000930 <RCC_HSI14ADCRequestCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000932:	2800      	cmp	r0, #0
 8000934:	d104      	bne.n	8000940 <RCC_HSI14ADCRequestCmd+0x10>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 8000936:	2304      	movs	r3, #4
 8000938:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800093a:	430b      	orrs	r3, r1
 800093c:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 800093e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000940:	2104      	movs	r1, #4
 8000942:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000944:	438b      	bics	r3, r1
 8000946:	6353      	str	r3, [r2, #52]	; 0x34
 8000948:	e7f9      	b.n	800093e <RCC_HSI14ADCRequestCmd+0xe>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000950:	2101      	movs	r1, #1
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <RCC_LSEConfig+0x1c>)
 8000954:	6a1a      	ldr	r2, [r3, #32]
 8000956:	438a      	bics	r2, r1

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8000958:	2104      	movs	r1, #4
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 800095a:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800095c:	6a1a      	ldr	r2, [r3, #32]
 800095e:	438a      	bics	r2, r1
 8000960:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8000962:	6a1a      	ldr	r2, [r3, #32]
 8000964:	4310      	orrs	r0, r2
 8000966:	6218      	str	r0, [r3, #32]
}
 8000968:	4770      	bx	lr
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40021000 	.word	0x40021000

08000970 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000970:	2118      	movs	r1, #24
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <RCC_LSEDriveConfig+0x14>)
 8000974:	6a1a      	ldr	r2, [r3, #32]
 8000976:	438a      	bics	r2, r1
 8000978:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800097a:	6a1a      	ldr	r2, [r3, #32]
 800097c:	4310      	orrs	r0, r2
 800097e:	6218      	str	r0, [r3, #32]
}
 8000980:	4770      	bx	lr
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000

08000988 <RCC_LSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800098a:	2800      	cmp	r0, #0
 800098c:	d104      	bne.n	8000998 <RCC_LSICmd+0x10>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 800098e:	2101      	movs	r1, #1
 8000990:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000992:	438b      	bics	r3, r1
 8000994:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 8000996:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000998:	2301      	movs	r3, #1
 800099a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800099c:	430b      	orrs	r3, r1
 800099e:	6253      	str	r3, [r2, #36]	; 0x24
 80009a0:	e7f9      	b.n	8000996 <RCC_LSICmd+0xe>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000

080009a8 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80009aa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80009ac:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <RCC_PLLConfig+0x1c>)
 80009ae:	685c      	ldr	r4, [r3, #4]
 80009b0:	4022      	ands	r2, r4
 80009b2:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4311      	orrs	r1, r2
 80009b8:	4308      	orrs	r0, r1
 80009ba:	6058      	str	r0, [r3, #4]
}
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40021000 	.word	0x40021000
 80009c4:	ffc2ffff 	.word	0xffc2ffff

080009c8 <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <RCC_PLLCmd+0x1c>)
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d104      	bne.n	80009d8 <RCC_PLLCmd+0x10>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80009ce:	6811      	ldr	r1, [r2, #0]
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <RCC_PLLCmd+0x20>)
 80009d2:	400b      	ands	r3, r1
 80009d4:	6013      	str	r3, [r2, #0]
  }
}
 80009d6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	0449      	lsls	r1, r1, #17
 80009de:	430b      	orrs	r3, r1
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e7f8      	b.n	80009d6 <RCC_PLLCmd+0xe>
 80009e4:	40021000 	.word	0x40021000
 80009e8:	feffffff 	.word	0xfeffffff

080009ec <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80009ec:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80009ee:	4a03      	ldr	r2, [pc, #12]	; (80009fc <RCC_PREDIV1Config+0x10>)
 80009f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80009f2:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80009f4:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80009f6:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <RCC_ClockSecuritySystemCmd+0x1c>)
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d104      	bne.n	8000a10 <RCC_ClockSecuritySystemCmd+0x10>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 8000a06:	6811      	ldr	r1, [r2, #0]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <RCC_ClockSecuritySystemCmd+0x20>)
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	6013      	str	r3, [r2, #0]
  }
}
 8000a0e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	0309      	lsls	r1, r1, #12
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e7f8      	b.n	8000a0e <RCC_ClockSecuritySystemCmd+0xe>
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	fff7ffff 	.word	0xfff7ffff

08000a24 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <RCC_MCOConfig+0x8>)
 8000a26:	7018      	strb	r0, [r3, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40021007 	.word	0x40021007

08000a30 <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000a30:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000a32:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <RCC_SYSCLKConfig+0x10>)
 8000a34:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000a36:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000a38:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a3a:	6050      	str	r0, [r2, #4]
}
 8000a3c:	4770      	bx	lr
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40021000 	.word	0x40021000

08000a44 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000a44:	200c      	movs	r0, #12
 8000a46:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <RCC_GetSYSCLKSource+0xc>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4018      	ands	r0, r3
}
 8000a4c:	4770      	bx	lr
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000

08000a54 <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000a54:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8000a56:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <RCC_HCLKConfig+0x10>)
 8000a58:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000a5a:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000a5c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a5e:	6050      	str	r0, [r2, #4]
}
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40021000 	.word	0x40021000

08000a68 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000a6c:	6851      	ldr	r1, [r2, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000a6e:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000a70:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a72:	6050      	str	r0, [r2, #4]
}
 8000a74:	4770      	bx	lr
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	fffff8ff 	.word	0xfffff8ff

08000a80 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <RCC_ADCCLKConfig+0x28>)
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <RCC_ADCCLKConfig+0x2c>)
 8000a84:	6859      	ldr	r1, [r3, #4]
 8000a86:	400a      	ands	r2, r1
 8000a88:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8000a8a:	6859      	ldr	r1, [r3, #4]
 8000a8c:	0402      	lsls	r2, r0, #16
 8000a8e:	0c12      	lsrs	r2, r2, #16
 8000a90:	430a      	orrs	r2, r1
 8000a92:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000a94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000a98:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa0:	4310      	orrs	r0, r2
 8000aa2:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000aa4:	4770      	bx	lr
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	ffffbfff 	.word	0xffffbfff
 8000ab0:	fffffeff 	.word	0xfffffeff

08000ab4 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <RCC_CECCLKConfig+0x14>)
 8000ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aba:	438a      	bics	r2, r1
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8000abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000ac4:	4770      	bx	lr
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000

08000acc <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000acc:	2110      	movs	r1, #16
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <RCC_I2CCLKConfig+0x14>)
 8000ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8000ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad8:	4310      	orrs	r0, r2
 8000ada:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000adc:	4770      	bx	lr
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <RCC_USARTCLKConfig+0x14>)
 8000ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aea:	438a      	bics	r2, r1
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8000aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af0:	4310      	orrs	r0, r2
 8000af2:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000af4:	4770      	bx	lr
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000afc:	210c      	movs	r1, #12
 8000afe:	4a3b      	ldr	r2, [pc, #236]	; (8000bec <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b00:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b02:	6853      	ldr	r3, [r2, #4]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b04:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b06:	400b      	ands	r3, r1
  
  switch (tmp)
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d001      	beq.n	8000b10 <RCC_GetClocksFreq+0x14>
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d051      	beq.n	8000bb4 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b10:	4837      	ldr	r0, [pc, #220]	; (8000bf0 <RCC_GetClocksFreq+0xf4>)
 8000b12:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b14:	4935      	ldr	r1, [pc, #212]	; (8000bec <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8000b16:	4d37      	ldr	r5, [pc, #220]	; (8000bf4 <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b18:	684b      	ldr	r3, [r1, #4]
 8000b1a:	061b      	lsls	r3, r3, #24
  tmp = tmp >> 4;
 8000b1c:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 8000b1e:	5cea      	ldrb	r2, [r5, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b20:	1c03      	adds	r3, r0, #0
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	1c1a      	adds	r2, r3, #0
 8000b26:	6063      	str	r3, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000b28:	684b      	ldr	r3, [r1, #4]
 8000b2a:	055b      	lsls	r3, r3, #21
  tmp = tmp >> 8;
 8000b2c:	0f5b      	lsrs	r3, r3, #29
  presc = APBAHBPrescTable[tmp];
 8000b2e:	5ceb      	ldrb	r3, [r5, r3]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b30:	40da      	lsrs	r2, r3
 8000b32:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8000b34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	d421      	bmi.n	8000b7e <RCC_GetClocksFreq+0x82>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <RCC_GetClocksFreq+0xfc>)
 8000b3c:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <RCC_GetClocksFreq+0xf0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	065b      	lsls	r3, r3, #25
 8000b44:	d424      	bmi.n	8000b90 <RCC_GetClocksFreq+0x94>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <RCC_GetClocksFreq+0x100>)
 8000b48:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <RCC_GetClocksFreq+0xf0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	06db      	lsls	r3, r3, #27
 8000b50:	d425      	bmi.n	8000b9e <RCC_GetClocksFreq+0xa2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000b54:	4925      	ldr	r1, [pc, #148]	; (8000bec <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000b56:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000b58:	2303      	movs	r3, #3
 8000b5a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000b5c:	422b      	tst	r3, r5
 8000b5e:	d024      	beq.n	8000baa <RCC_GetClocksFreq+0xae>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000b60:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000b62:	401a      	ands	r2, r3
 8000b64:	2a01      	cmp	r2, #1
 8000b66:	d03a      	beq.n	8000bde <RCC_GetClocksFreq+0xe2>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000b68:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	2a02      	cmp	r2, #2
 8000b6e:	d038      	beq.n	8000be2 <RCC_GetClocksFreq+0xe6>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000b70:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d101      	bne.n	8000b7c <RCC_GetClocksFreq+0x80>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <RCC_GetClocksFreq+0xf4>)
 8000b7a:	61a3      	str	r3, [r4, #24]
  }
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8000b7e:	684b      	ldr	r3, [r1, #4]
 8000b80:	045b      	lsls	r3, r3, #17
 8000b82:	d414      	bmi.n	8000bae <RCC_GetClocksFreq+0xb2>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8000b84:	0853      	lsrs	r3, r2, #1
 8000b86:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <RCC_GetClocksFreq+0xf0>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	065b      	lsls	r3, r3, #25
 8000b8e:	d5da      	bpl.n	8000b46 <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <RCC_GetClocksFreq+0xf0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	06db      	lsls	r3, r3, #27
 8000b9c:	d5d9      	bpl.n	8000b52 <RCC_GetClocksFreq+0x56>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	4912      	ldr	r1, [pc, #72]	; (8000bec <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ba2:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000ba4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000ba6:	422b      	tst	r3, r5
 8000ba8:	d1da      	bne.n	8000b60 <RCC_GetClocksFreq+0x64>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000baa:	61a2      	str	r2, [r4, #24]
 8000bac:	e7e6      	b.n	8000b7c <RCC_GetClocksFreq+0x80>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000bae:	0893      	lsrs	r3, r2, #2
 8000bb0:	60e3      	str	r3, [r4, #12]
 8000bb2:	e7c4      	b.n	8000b3e <RCC_GetClocksFreq+0x42>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000bb4:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000bb6:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000bb8:	0280      	lsls	r0, r0, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000bba:	0f00      	lsrs	r0, r0, #28
 8000bbc:	1c85      	adds	r5, r0, #2
      
      if (pllsource == 0x00)
 8000bbe:	03db      	lsls	r3, r3, #15
 8000bc0:	d403      	bmi.n	8000bca <RCC_GetClocksFreq+0xce>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <RCC_GetClocksFreq+0x104>)
 8000bc4:	4368      	muls	r0, r5
 8000bc6:	6020      	str	r0, [r4, #0]
 8000bc8:	e7a4      	b.n	8000b14 <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000bca:	210f      	movs	r1, #15
 8000bcc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000bce:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <RCC_GetClocksFreq+0xf4>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000bd0:	4019      	ands	r1, r3
 8000bd2:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000bd4:	f002 fa38 	bl	8003048 <__aeabi_uidiv>
 8000bd8:	4368      	muls	r0, r5
 8000bda:	6020      	str	r0, [r4, #0]
 8000bdc:	e79a      	b.n	8000b14 <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bde:	61a0      	str	r0, [r4, #24]
 8000be0:	e7cc      	b.n	8000b7c <RCC_GetClocksFreq+0x80>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	61a3      	str	r3, [r4, #24]
 8000be8:	e7c8      	b.n	8000b7c <RCC_GetClocksFreq+0x80>
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	007a1200 	.word	0x007a1200
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	00d59f80 	.word	0x00d59f80
 8000bfc:	00008012 	.word	0x00008012
 8000c00:	003d0900 	.word	0x003d0900

08000c04 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000c04:	4a02      	ldr	r2, [pc, #8]	; (8000c10 <RCC_RTCCLKConfig+0xc>)
 8000c06:	6a13      	ldr	r3, [r2, #32]
 8000c08:	4318      	orrs	r0, r3
 8000c0a:	6210      	str	r0, [r2, #32]
}
 8000c0c:	4770      	bx	lr
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40021000 	.word	0x40021000

08000c14 <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <RCC_RTCCLKCmd+0x1c>)
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d104      	bne.n	8000c24 <RCC_RTCCLKCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000c1a:	6a11      	ldr	r1, [r2, #32]
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <RCC_RTCCLKCmd+0x20>)
 8000c1e:	400b      	ands	r3, r1
 8000c20:	6213      	str	r3, [r2, #32]
  }
}
 8000c22:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	6a13      	ldr	r3, [r2, #32]
 8000c28:	0209      	lsls	r1, r1, #8
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	6213      	str	r3, [r2, #32]
 8000c2e:	e7f8      	b.n	8000c22 <RCC_RTCCLKCmd+0xe>
 8000c30:	40021000 	.word	0x40021000
 8000c34:	ffff7fff 	.word	0xffff7fff

08000c38 <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <RCC_BackupResetCmd+0x1c>)
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d104      	bne.n	8000c48 <RCC_BackupResetCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8000c3e:	6a11      	ldr	r1, [r2, #32]
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <RCC_BackupResetCmd+0x20>)
 8000c42:	400b      	ands	r3, r1
 8000c44:	6213      	str	r3, [r2, #32]
  }
}
 8000c46:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	6a13      	ldr	r3, [r2, #32]
 8000c4c:	0249      	lsls	r1, r1, #9
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	6213      	str	r3, [r2, #32]
 8000c52:	e7f8      	b.n	8000c46 <RCC_BackupResetCmd+0xe>
 8000c54:	40021000 	.word	0x40021000
 8000c58:	fffeffff 	.word	0xfffeffff

08000c5c <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <RCC_AHBPeriphClockCmd+0x14>)
 8000c5e:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c60:	2900      	cmp	r1, #0
 8000c62:	d102      	bne.n	8000c6a <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c64:	4383      	bics	r3, r0
 8000c66:	6153      	str	r3, [r2, #20]
  }
}
 8000c68:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c6a:	4318      	orrs	r0, r3
 8000c6c:	6150      	str	r0, [r2, #20]
 8000c6e:	e7fb      	b.n	8000c68 <RCC_AHBPeriphClockCmd+0xc>
 8000c70:	40021000 	.word	0x40021000

08000c74 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <RCC_APB2PeriphClockCmd+0x14>)
 8000c76:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d102      	bne.n	8000c82 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c7c:	4383      	bics	r3, r0
 8000c7e:	6193      	str	r3, [r2, #24]
  }
}
 8000c80:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c82:	4318      	orrs	r0, r3
 8000c84:	6190      	str	r0, [r2, #24]
 8000c86:	e7fb      	b.n	8000c80 <RCC_APB2PeriphClockCmd+0xc>
 8000c88:	40021000 	.word	0x40021000

08000c8c <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <RCC_APB1PeriphClockCmd+0x14>)
 8000c8e:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d102      	bne.n	8000c9a <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c94:	4383      	bics	r3, r0
 8000c96:	61d3      	str	r3, [r2, #28]
  }
}
 8000c98:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c9a:	4318      	orrs	r0, r3
 8000c9c:	61d0      	str	r0, [r2, #28]
 8000c9e:	e7fb      	b.n	8000c98 <RCC_APB1PeriphClockCmd+0xc>
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <RCC_AHBPeriphResetCmd+0x14>)
 8000ca6:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d102      	bne.n	8000cb2 <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000cac:	4383      	bics	r3, r0
 8000cae:	6293      	str	r3, [r2, #40]	; 0x28
  }
}
 8000cb0:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	6290      	str	r0, [r2, #40]	; 0x28
 8000cb6:	e7fb      	b.n	8000cb0 <RCC_AHBPeriphResetCmd+0xc>
 8000cb8:	40021000 	.word	0x40021000

08000cbc <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <RCC_APB2PeriphResetCmd+0x14>)
 8000cbe:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	d102      	bne.n	8000cca <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000cc4:	4383      	bics	r3, r0
 8000cc6:	60d3      	str	r3, [r2, #12]
  }
}
 8000cc8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000cca:	4318      	orrs	r0, r3
 8000ccc:	60d0      	str	r0, [r2, #12]
 8000cce:	e7fb      	b.n	8000cc8 <RCC_APB2PeriphResetCmd+0xc>
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <RCC_APB1PeriphResetCmd+0x14>)
 8000cd6:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d102      	bne.n	8000ce2 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000cdc:	4383      	bics	r3, r0
 8000cde:	6113      	str	r3, [r2, #16]
  }
}
 8000ce0:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000ce2:	4318      	orrs	r0, r3
 8000ce4:	6110      	str	r0, [r2, #16]
 8000ce6:	e7fb      	b.n	8000ce0 <RCC_APB1PeriphResetCmd+0xc>
 8000ce8:	40021000 	.word	0x40021000

08000cec <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <RCC_ITConfig+0x14>)
 8000cee:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d102      	bne.n	8000cfa <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8000cf4:	4383      	bics	r3, r0
 8000cf6:	7013      	strb	r3, [r2, #0]
  }
}
 8000cf8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000cfa:	4318      	orrs	r0, r3
 8000cfc:	7010      	strb	r0, [r2, #0]
 8000cfe:	e7fb      	b.n	8000cf8 <RCC_ITConfig+0xc>
 8000d00:	40021009 	.word	0x40021009

08000d04 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000d04:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 8000d06:	d10b      	bne.n	8000d20 <RCC_GetFlagStatus+0x1c>
  {
    statusreg = RCC->CR;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <RCC_GetFlagStatus+0x38>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000d0c:	221f      	movs	r2, #31
 8000d0e:	4010      	ands	r0, r2
 8000d10:	2201      	movs	r2, #1
 8000d12:	4082      	lsls	r2, r0
 8000d14:	1c10      	adds	r0, r2, #0
 8000d16:	4018      	ands	r0, r3
 8000d18:	1e43      	subs	r3, r0, #1
 8000d1a:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000d1c:	b2c0      	uxtb	r0, r0
}
 8000d1e:	4770      	bx	lr

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d004      	beq.n	8000d2e <RCC_GetFlagStatus+0x2a>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d005      	beq.n	8000d34 <RCC_GetFlagStatus+0x30>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <RCC_GetFlagStatus+0x38>)
 8000d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2c:	e7ee      	b.n	8000d0c <RCC_GetFlagStatus+0x8>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <RCC_GetFlagStatus+0x38>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	e7eb      	b.n	8000d0c <RCC_GetFlagStatus+0x8>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000d34:	4b01      	ldr	r3, [pc, #4]	; (8000d3c <RCC_GetFlagStatus+0x38>)
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	e7e8      	b.n	8000d0c <RCC_GetFlagStatus+0x8>
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40021000 	.word	0x40021000

08000d40 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000d40:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 8000d42:	2300      	movs	r3, #0
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000d44:	24a0      	movs	r4, #160	; 0xa0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000d46:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 8000d48:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000d4a:	00e4      	lsls	r4, r4, #3
 8000d4c:	e001      	b.n	8000d52 <RCC_WaitForHSEStartUp+0x12>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d108      	bne.n	8000d64 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000d52:	2011      	movs	r0, #17
 8000d54:	f7ff ffd6 	bl	8000d04 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000d58:	9b01      	ldr	r3, [sp, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000d5e:	9b01      	ldr	r3, [sp, #4]
 8000d60:	42a3      	cmp	r3, r4
 8000d62:	d1f4      	bne.n	8000d4e <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000d64:	2011      	movs	r0, #17
 8000d66:	f7ff ffcd 	bl	8000d04 <RCC_GetFlagStatus>
 8000d6a:	1e43      	subs	r3, r0, #1
 8000d6c:	4198      	sbcs	r0, r3
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000d6e:	b2c0      	uxtb	r0, r0
}
 8000d70:	b002      	add	sp, #8
 8000d72:	bd10      	pop	{r4, pc}

08000d74 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <RCC_ClearFlag+0x10>)
 8000d78:	0449      	lsls	r1, r1, #17
 8000d7a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d80:	4770      	bx	lr
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	40021000 	.word	0x40021000

08000d88 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <RCC_GetITStatus+0x10>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4018      	ands	r0, r3
 8000d8e:	1e43      	subs	r3, r0, #1
 8000d90:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000d92:	b2c0      	uxtb	r0, r0
}
 8000d94:	4770      	bx	lr
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40021000 	.word	0x40021000

08000d9c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8000d9c:	4b01      	ldr	r3, [pc, #4]	; (8000da4 <RCC_ClearITPendingBit+0x8>)
 8000d9e:	7018      	strb	r0, [r3, #0]
}
 8000da0:	4770      	bx	lr
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	4002100a 	.word	0x4002100a

08000da8 <USART_DeInit>:
  * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000da8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <USART_DeInit+0x3c>)
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d00e      	beq.n	8000dce <USART_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else 
  {
    if  (USARTx == USART2)
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <USART_DeInit+0x40>)
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d000      	beq.n	8000db8 <USART_DeInit+0x10>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    }
  }
}
 8000db6:	bd08      	pop	{r3, pc}
  }
  else 
  {
    if  (USARTx == USART2)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000db8:	2080      	movs	r0, #128	; 0x80
 8000dba:	2101      	movs	r1, #1
 8000dbc:	0280      	lsls	r0, r0, #10
 8000dbe:	f7ff ff89 	bl	8000cd4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000dc2:	2080      	movs	r0, #128	; 0x80
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	0280      	lsls	r0, r0, #10
 8000dc8:	f7ff ff84 	bl	8000cd4 <RCC_APB1PeriphResetCmd>
 8000dcc:	e7f3      	b.n	8000db6 <USART_DeInit+0xe>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000dce:	2080      	movs	r0, #128	; 0x80
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	01c0      	lsls	r0, r0, #7
 8000dd4:	f7ff ff72 	bl	8000cbc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000dd8:	2080      	movs	r0, #128	; 0x80
 8000dda:	2100      	movs	r1, #0
 8000ddc:	01c0      	lsls	r0, r0, #7
 8000dde:	f7ff ff6d 	bl	8000cbc <RCC_APB2PeriphResetCmd>
 8000de2:	e7e8      	b.n	8000db6 <USART_DeInit+0xe>
 8000de4:	40013800 	.word	0x40013800
 8000de8:	40004400 	.word	0x40004400

08000dec <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000dec:	2201      	movs	r2, #1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df0:	1c0d      	adds	r5, r1, #0
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000df2:	6803      	ldr	r3, [r0, #0]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000df4:	b089      	sub	sp, #36	; 0x24
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000df6:	4393      	bics	r3, r2
 8000df8:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000dfa:	6842      	ldr	r2, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <USART_Init+0x8c>)
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000dfe:	1c04      	adds	r4, r0, #0
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000e00:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e02:	688a      	ldr	r2, [r1, #8]
 8000e04:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000e06:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000e08:	6802      	ldr	r2, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <USART_Init+0x90>)
 8000e0c:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e0e:	68cb      	ldr	r3, [r1, #12]
 8000e10:	6849      	ldr	r1, [r1, #4]
 8000e12:	430b      	orrs	r3, r1
 8000e14:	6929      	ldr	r1, [r5, #16]
 8000e16:	430b      	orrs	r3, r1
 8000e18:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8000e1a:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e1c:	6882      	ldr	r2, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <USART_Init+0x94>)
 8000e20:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000e22:	696a      	ldr	r2, [r5, #20]
 8000e24:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8000e26:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000e28:	a801      	add	r0, sp, #4
 8000e2a:	f7ff fe67 	bl	8000afc <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <USART_Init+0x98>)
 8000e30:	429c      	cmp	r4, r3
 8000e32:	d01f      	beq.n	8000e74 <USART_Init+0x88>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8000e34:	9f03      	ldr	r7, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	d500      	bpl.n	8000e3e <USART_Init+0x52>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000e3c:	007f      	lsls	r7, r7, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000e3e:	682e      	ldr	r6, [r5, #0]
 8000e40:	1c38      	adds	r0, r7, #0
 8000e42:	1c31      	adds	r1, r6, #0
 8000e44:	f002 f900 	bl	8003048 <__aeabi_uidiv>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000e48:	1c31      	adds	r1, r6, #0
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000e4a:	1c05      	adds	r5, r0, #0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000e4c:	1c38      	adds	r0, r7, #0
 8000e4e:	f002 f93f 	bl	80030d0 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8000e52:	2300      	movs	r3, #0
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8000e54:	0876      	lsrs	r6, r6, #1
  {
    divider++;
 8000e56:	42b1      	cmp	r1, r6
 8000e58:	415b      	adcs	r3, r3
 8000e5a:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	d504      	bpl.n	8000e6c <USART_Init+0x80>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <USART_Init+0x9c>)
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000e64:	072a      	lsls	r2, r5, #28
 8000e66:	0f52      	lsrs	r2, r2, #29
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000e68:	401d      	ands	r5, r3
 8000e6a:	4315      	orrs	r5, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000e6c:	b2ad      	uxth	r5, r5
 8000e6e:	81a5      	strh	r5, [r4, #12]
}
 8000e70:	b009      	add	sp, #36	; 0x24
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000e74:	9f07      	ldr	r7, [sp, #28]
 8000e76:	e7de      	b.n	8000e36 <USART_Init+0x4a>
 8000e78:	ffffcfff 	.word	0xffffcfff
 8000e7c:	ffffe9f3 	.word	0xffffe9f3
 8000e80:	fffffcff 	.word	0xfffffcff
 8000e84:	40013800 	.word	0x40013800
 8000e88:	0000fff0 	.word	0x0000fff0

08000e8c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000e8c:	2396      	movs	r3, #150	; 0x96
 8000e8e:	019b      	lsls	r3, r3, #6
 8000e90:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e92:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000e94:	2300      	movs	r3, #0
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e96:	6102      	str	r2, [r0, #16]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000e98:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000e9a:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000e9c:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000e9e:	6143      	str	r3, [r0, #20]
}
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			; (mov r8, r8)

08000ea4 <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ea4:	6842      	ldr	r2, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <USART_ClockInit+0x1c>)
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000ea8:	b510      	push	{r4, lr}
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000eaa:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000eac:	680c      	ldr	r4, [r1, #0]
 8000eae:	684b      	ldr	r3, [r1, #4]
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	688c      	ldr	r4, [r1, #8]
 8000eb4:	68c9      	ldr	r1, [r1, #12]
 8000eb6:	4323      	orrs	r3, r4
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000ebc:	6043      	str	r3, [r0, #4]
}
 8000ebe:	bd10      	pop	{r4, pc}
 8000ec0:	fffff0ff 	.word	0xfffff0ff

08000ec4 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000ec8:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000eca:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000ecc:	60c3      	str	r3, [r0, #12]
}
 8000ece:	4770      	bx	lr

08000ed0 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ed0:	2900      	cmp	r1, #0
 8000ed2:	d104      	bne.n	8000ede <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	6803      	ldr	r3, [r0, #0]
 8000ed8:	4393      	bics	r3, r2
 8000eda:	6003      	str	r3, [r0, #0]
  }
}
 8000edc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	6802      	ldr	r2, [r0, #0]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	6003      	str	r3, [r0, #0]
 8000ee6:	e7f9      	b.n	8000edc <USART_Cmd+0xc>

08000ee8 <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000ee8:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d102      	bne.n	8000ef4 <USART_DirectionModeCmd+0xc>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8000eee:	438b      	bics	r3, r1
 8000ef0:	6003      	str	r3, [r0, #0]
  }
}
 8000ef2:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000ef4:	4319      	orrs	r1, r3
 8000ef6:	6001      	str	r1, [r0, #0]
 8000ef8:	e7fb      	b.n	8000ef2 <USART_DirectionModeCmd+0xa>
 8000efa:	46c0      	nop			; (mov r8, r8)

08000efc <USART_OverSampling8Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000efc:	2900      	cmp	r1, #0
 8000efe:	d104      	bne.n	8000f0a <USART_OverSampling8Cmd+0xe>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000f00:	6802      	ldr	r2, [r0, #0]
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <USART_OverSampling8Cmd+0x1c>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	6003      	str	r3, [r0, #0]
  }
}  
 8000f08:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	0212      	lsls	r2, r2, #8
 8000f10:	4313      	orrs	r3, r2
 8000f12:	6003      	str	r3, [r0, #0]
 8000f14:	e7f8      	b.n	8000f08 <USART_OverSampling8Cmd+0xc>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	ffff7fff 	.word	0xffff7fff

08000f1c <USART_OneBitMethodCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f1c:	2900      	cmp	r1, #0
 8000f1e:	d104      	bne.n	8000f2a <USART_OneBitMethodCmd+0xe>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000f20:	6882      	ldr	r2, [r0, #8]
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <USART_OneBitMethodCmd+0x1c>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	6083      	str	r3, [r0, #8]
  }
}
 8000f28:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	6883      	ldr	r3, [r0, #8]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	4313      	orrs	r3, r2
 8000f32:	6083      	str	r3, [r0, #8]
 8000f34:	e7f8      	b.n	8000f28 <USART_OneBitMethodCmd+0xc>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	fffff7ff 	.word	0xfffff7ff

08000f3c <USART_MSBFirstCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	d104      	bne.n	8000f4a <USART_MSBFirstCmd+0xe>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000f40:	6842      	ldr	r2, [r0, #4]
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <USART_MSBFirstCmd+0x1c>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	6043      	str	r3, [r0, #4]
  }
}
 8000f48:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	6843      	ldr	r3, [r0, #4]
 8000f4e:	0312      	lsls	r2, r2, #12
 8000f50:	4313      	orrs	r3, r2
 8000f52:	6043      	str	r3, [r0, #4]
 8000f54:	e7f8      	b.n	8000f48 <USART_MSBFirstCmd+0xc>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	fff7ffff 	.word	0xfff7ffff

08000f5c <USART_DataInvCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	d104      	bne.n	8000f6a <USART_DataInvCmd+0xe>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000f60:	6842      	ldr	r2, [r0, #4]
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <USART_DataInvCmd+0x1c>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	6043      	str	r3, [r0, #4]
  }
}
 8000f68:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	6843      	ldr	r3, [r0, #4]
 8000f6e:	02d2      	lsls	r2, r2, #11
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6043      	str	r3, [r0, #4]
 8000f74:	e7f8      	b.n	8000f68 <USART_DataInvCmd+0xc>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fffbffff 	.word	0xfffbffff

08000f7c <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000f7c:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	d102      	bne.n	8000f88 <USART_InvPinCmd+0xc>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8000f82:	438b      	bics	r3, r1
 8000f84:	6043      	str	r3, [r0, #4]
  }
}
 8000f86:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	6041      	str	r1, [r0, #4]
 8000f8c:	e7fb      	b.n	8000f86 <USART_InvPinCmd+0xa>
 8000f8e:	46c0      	nop			; (mov r8, r8)

08000f90 <USART_SWAPPinCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f90:	2900      	cmp	r1, #0
 8000f92:	d104      	bne.n	8000f9e <USART_SWAPPinCmd+0xe>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000f94:	6842      	ldr	r2, [r0, #4]
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <USART_SWAPPinCmd+0x1c>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	6043      	str	r3, [r0, #4]
  }
}
 8000f9c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	6843      	ldr	r3, [r0, #4]
 8000fa2:	0212      	lsls	r2, r2, #8
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	6043      	str	r3, [r0, #4]
 8000fa8:	e7f8      	b.n	8000f9c <USART_SWAPPinCmd+0xc>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	ffff7fff 	.word	0xffff7fff

08000fb0 <USART_ReceiverTimeOutCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	d104      	bne.n	8000fbe <USART_ReceiverTimeOutCmd+0xe>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000fb4:	6842      	ldr	r2, [r0, #4]
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <USART_ReceiverTimeOutCmd+0x1c>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	6043      	str	r3, [r0, #4]
  }
}
 8000fbc:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	6843      	ldr	r3, [r0, #4]
 8000fc2:	0412      	lsls	r2, r2, #16
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	6043      	str	r3, [r0, #4]
 8000fc8:	e7f8      	b.n	8000fbc <USART_ReceiverTimeOutCmd+0xc>
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	ff7fffff 	.word	0xff7fffff

08000fd0 <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8000fd0:	6943      	ldr	r3, [r0, #20]
 8000fd2:	0e1b      	lsrs	r3, r3, #24
 8000fd4:	061b      	lsls	r3, r3, #24
 8000fd6:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8000fd8:	6943      	ldr	r3, [r0, #20]
 8000fda:	4319      	orrs	r1, r3
 8000fdc:	6141      	str	r1, [r0, #20]
}
 8000fde:	4770      	bx	lr

08000fe0 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	8a03      	ldrh	r3, [r0, #16]
 8000fe4:	4393      	bics	r3, r2
 8000fe6:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000fe8:	8a03      	ldrh	r3, [r0, #16]
 8000fea:	4319      	orrs	r1, r3
 8000fec:	8201      	strh	r1, [r0, #16]
}
 8000fee:	4770      	bx	lr

08000ff0 <USART_STOPModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ff0:	2900      	cmp	r1, #0
 8000ff2:	d104      	bne.n	8000ffe <USART_STOPModeCmd+0xe>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	6803      	ldr	r3, [r0, #0]
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	6003      	str	r3, [r0, #0]
  }
}
 8000ffc:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000ffe:	2302      	movs	r3, #2
 8001000:	6802      	ldr	r2, [r0, #0]
 8001002:	4313      	orrs	r3, r2
 8001004:	6003      	str	r3, [r0, #0]
 8001006:	e7f9      	b.n	8000ffc <USART_STOPModeCmd+0xc>

08001008 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8001008:	6882      	ldr	r2, [r0, #8]
 800100a:	4b03      	ldr	r3, [pc, #12]	; (8001018 <USART_StopModeWakeUpSourceConfig+0x10>)
 800100c:	4013      	ands	r3, r2
 800100e:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8001010:	6883      	ldr	r3, [r0, #8]
 8001012:	4319      	orrs	r1, r3
 8001014:	6081      	str	r1, [r0, #8]
}
 8001016:	4770      	bx	lr
 8001018:	ffcfffff 	.word	0xffcfffff

0800101c <USART_AutoBaudRateCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800101c:	2900      	cmp	r1, #0
 800101e:	d104      	bne.n	800102a <USART_AutoBaudRateCmd+0xe>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8001020:	6842      	ldr	r2, [r0, #4]
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <USART_AutoBaudRateCmd+0x1c>)
 8001024:	4013      	ands	r3, r2
 8001026:	6043      	str	r3, [r0, #4]
  }
}
 8001028:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	6843      	ldr	r3, [r0, #4]
 800102e:	0352      	lsls	r2, r2, #13
 8001030:	4313      	orrs	r3, r2
 8001032:	6043      	str	r3, [r0, #4]
 8001034:	e7f8      	b.n	8001028 <USART_AutoBaudRateCmd+0xc>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	ffefffff 	.word	0xffefffff

0800103c <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 800103c:	6842      	ldr	r2, [r0, #4]
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <USART_AutoBaudRateConfig+0x10>)
 8001040:	4013      	ands	r3, r2
 8001042:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8001044:	6843      	ldr	r3, [r0, #4]
 8001046:	4319      	orrs	r1, r3
 8001048:	6041      	str	r1, [r0, #4]
}
 800104a:	4770      	bx	lr
 800104c:	ff9fffff 	.word	0xff9fffff

08001050 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001050:	05c9      	lsls	r1, r1, #23
 8001052:	0dc9      	lsrs	r1, r1, #23
 8001054:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8001056:	4770      	bx	lr

08001058 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8001058:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 800105a:	05c0      	lsls	r0, r0, #23
 800105c:	0dc0      	lsrs	r0, r0, #23
}
 800105e:	4770      	bx	lr

08001060 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8001060:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8001062:	0609      	lsls	r1, r1, #24
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	6043      	str	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 800106a:	6843      	ldr	r3, [r0, #4]
 800106c:	4319      	orrs	r1, r3
 800106e:	6041      	str	r1, [r0, #4]
}
 8001070:	4770      	bx	lr
 8001072:	46c0      	nop			; (mov r8, r8)

08001074 <USART_MuteModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001074:	2900      	cmp	r1, #0
 8001076:	d104      	bne.n	8001082 <USART_MuteModeCmd+0xe>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <USART_MuteModeCmd+0x1c>)
 800107c:	4013      	ands	r3, r2
 800107e:	6003      	str	r3, [r0, #0]
  }
}
 8001080:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	0192      	lsls	r2, r2, #6
 8001088:	4313      	orrs	r3, r2
 800108a:	6003      	str	r3, [r0, #0]
 800108c:	e7f8      	b.n	8001080 <USART_MuteModeCmd+0xc>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	ffffdfff 	.word	0xffffdfff

08001094 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8001094:	6802      	ldr	r2, [r0, #0]
 8001096:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <USART_MuteModeWakeUpConfig+0x10>)
 8001098:	4013      	ands	r3, r2
 800109a:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 800109c:	6803      	ldr	r3, [r0, #0]
 800109e:	4319      	orrs	r1, r3
 80010a0:	6001      	str	r1, [r0, #0]
}
 80010a2:	4770      	bx	lr
 80010a4:	fffff7ff 	.word	0xfffff7ff

080010a8 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 80010a8:	2210      	movs	r2, #16
 80010aa:	6843      	ldr	r3, [r0, #4]
 80010ac:	4393      	bics	r3, r2
 80010ae:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 80010b0:	6843      	ldr	r3, [r0, #4]
 80010b2:	4319      	orrs	r1, r3
 80010b4:	6041      	str	r1, [r0, #4]
}
 80010b6:	4770      	bx	lr

080010b8 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 80010b8:	2220      	movs	r2, #32
 80010ba:	6843      	ldr	r3, [r0, #4]
 80010bc:	4393      	bics	r3, r2
 80010be:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80010c0:	6843      	ldr	r3, [r0, #4]
 80010c2:	4319      	orrs	r1, r3
 80010c4:	6041      	str	r1, [r0, #4]
}
 80010c6:	4770      	bx	lr

080010c8 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010c8:	2900      	cmp	r1, #0
 80010ca:	d104      	bne.n	80010d6 <USART_LINCmd+0xe>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80010cc:	6842      	ldr	r2, [r0, #4]
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <USART_LINCmd+0x1c>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	6043      	str	r3, [r0, #4]
  }
}
 80010d4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	6843      	ldr	r3, [r0, #4]
 80010da:	01d2      	lsls	r2, r2, #7
 80010dc:	4313      	orrs	r3, r2
 80010de:	6043      	str	r3, [r0, #4]
 80010e0:	e7f8      	b.n	80010d4 <USART_LINCmd+0xc>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	ffffbfff 	.word	0xffffbfff

080010e8 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d104      	bne.n	80010f6 <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 80010ec:	2208      	movs	r2, #8
 80010ee:	6883      	ldr	r3, [r0, #8]
 80010f0:	4393      	bics	r3, r2
 80010f2:	6083      	str	r3, [r0, #8]
  }
}
 80010f4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80010f6:	2308      	movs	r3, #8
 80010f8:	6882      	ldr	r2, [r0, #8]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	6083      	str	r3, [r0, #8]
 80010fe:	e7f9      	b.n	80010f4 <USART_HalfDuplexCmd+0xc>

08001100 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	8a03      	ldrh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001104:	0209      	lsls	r1, r1, #8
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001106:	4013      	ands	r3, r2
 8001108:	8203      	strh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800110a:	8a03      	ldrh	r3, [r0, #16]
 800110c:	4319      	orrs	r1, r3
 800110e:	8201      	strh	r1, [r0, #16]
}
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)

08001114 <USART_SmartCardCmd>:
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001114:	2900      	cmp	r1, #0
 8001116:	d104      	bne.n	8001122 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8001118:	2220      	movs	r2, #32
 800111a:	6883      	ldr	r3, [r0, #8]
 800111c:	4393      	bics	r3, r2
 800111e:	6083      	str	r3, [r0, #8]
  }
}
 8001120:	4770      	bx	lr
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001122:	2320      	movs	r3, #32
 8001124:	6882      	ldr	r2, [r0, #8]
 8001126:	4313      	orrs	r3, r2
 8001128:	6083      	str	r3, [r0, #8]
 800112a:	e7f9      	b.n	8001120 <USART_SmartCardCmd+0xc>

0800112c <USART_SmartCardNACKCmd>:
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800112c:	2900      	cmp	r1, #0
 800112e:	d104      	bne.n	800113a <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8001130:	2210      	movs	r2, #16
 8001132:	6883      	ldr	r3, [r0, #8]
 8001134:	4393      	bics	r3, r2
 8001136:	6083      	str	r3, [r0, #8]
  }
}
 8001138:	4770      	bx	lr
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800113a:	2310      	movs	r3, #16
 800113c:	6882      	ldr	r2, [r0, #8]
 800113e:	4313      	orrs	r3, r2
 8001140:	6083      	str	r3, [r0, #8]
 8001142:	e7f9      	b.n	8001138 <USART_SmartCardNACKCmd+0xc>

08001144 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8001144:	6882      	ldr	r2, [r0, #8]
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8001148:	0449      	lsls	r1, r1, #17
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 800114a:	4013      	ands	r3, r2
 800114c:	6083      	str	r3, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 800114e:	6883      	ldr	r3, [r0, #8]
 8001150:	4319      	orrs	r1, r3
 8001152:	6081      	str	r1, [r0, #8]
}
 8001154:	4770      	bx	lr
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	fff1ffff 	.word	0xfff1ffff

0800115c <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 800115c:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 800115e:	0609      	lsls	r1, r1, #24
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	6143      	str	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8001166:	6943      	ldr	r3, [r0, #20]
 8001168:	4319      	orrs	r1, r3
 800116a:	6141      	str	r1, [r0, #20]
}
 800116c:	4770      	bx	lr
 800116e:	46c0      	nop			; (mov r8, r8)

08001170 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8001170:	2204      	movs	r2, #4
 8001172:	6883      	ldr	r3, [r0, #8]
 8001174:	4393      	bics	r3, r2
 8001176:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8001178:	6883      	ldr	r3, [r0, #8]
 800117a:	4319      	orrs	r1, r3
 800117c:	6081      	str	r1, [r0, #8]
}
 800117e:	4770      	bx	lr

08001180 <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001180:	2900      	cmp	r1, #0
 8001182:	d104      	bne.n	800118e <USART_IrDACmd+0xe>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8001184:	2202      	movs	r2, #2
 8001186:	6883      	ldr	r3, [r0, #8]
 8001188:	4393      	bics	r3, r2
 800118a:	6083      	str	r3, [r0, #8]
  }
}
 800118c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800118e:	2302      	movs	r3, #2
 8001190:	6882      	ldr	r2, [r0, #8]
 8001192:	4313      	orrs	r3, r2
 8001194:	6083      	str	r3, [r0, #8]
 8001196:	e7f9      	b.n	800118c <USART_IrDACmd+0xc>

08001198 <USART_DECmd>:
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001198:	2900      	cmp	r1, #0
 800119a:	d104      	bne.n	80011a6 <USART_DECmd+0xe>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 800119c:	6882      	ldr	r2, [r0, #8]
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <USART_DECmd+0x1c>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	6083      	str	r3, [r0, #8]
  }
}
 80011a4:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	6883      	ldr	r3, [r0, #8]
 80011aa:	01d2      	lsls	r2, r2, #7
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6083      	str	r3, [r0, #8]
 80011b0:	e7f8      	b.n	80011a4 <USART_DECmd+0xc>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	ffffbfff 	.word	0xffffbfff

080011b8 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 80011b8:	6882      	ldr	r2, [r0, #8]
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <USART_DEPolarityConfig+0x10>)
 80011bc:	4013      	ands	r3, r2
 80011be:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 80011c0:	6883      	ldr	r3, [r0, #8]
 80011c2:	4319      	orrs	r1, r3
 80011c4:	6081      	str	r1, [r0, #8]
}
 80011c6:	4770      	bx	lr
 80011c8:	ffff7fff 	.word	0xffff7fff

080011cc <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80011d0:	0549      	lsls	r1, r1, #21
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80011d2:	4013      	ands	r3, r2
 80011d4:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	4319      	orrs	r1, r3
 80011da:	6001      	str	r1, [r0, #0]
}
 80011dc:	4770      	bx	lr
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	fc1fffff 	.word	0xfc1fffff

080011e4 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 80011e8:	0409      	lsls	r1, r1, #16
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 80011ea:	4013      	ands	r3, r2
 80011ec:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 80011ee:	6803      	ldr	r3, [r0, #0]
 80011f0:	4319      	orrs	r1, r3
 80011f2:	6001      	str	r1, [r0, #0]
}
 80011f4:	4770      	bx	lr
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	ffe0ffff 	.word	0xffe0ffff

080011fc <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80011fc:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d102      	bne.n	8001208 <USART_DMACmd+0xc>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8001202:	438b      	bics	r3, r1
 8001204:	6083      	str	r3, [r0, #8]
  }
}
 8001206:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001208:	4319      	orrs	r1, r3
 800120a:	6081      	str	r1, [r0, #8]
 800120c:	e7fb      	b.n	8001206 <USART_DMACmd+0xa>
 800120e:	46c0      	nop			; (mov r8, r8)

08001210 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8001210:	6882      	ldr	r2, [r0, #8]
 8001212:	4b03      	ldr	r3, [pc, #12]	; (8001220 <USART_DMAReceptionErrorConfig+0x10>)
 8001214:	4013      	ands	r3, r2
 8001216:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8001218:	6883      	ldr	r3, [r0, #8]
 800121a:	4319      	orrs	r1, r3
 800121c:	6081      	str	r1, [r0, #8]
}
 800121e:	4770      	bx	lr
 8001220:	ffffdfff 	.word	0xffffdfff

08001224 <USART_ITConfig>:
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001224:	23ff      	movs	r3, #255	; 0xff
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001226:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001228:	b28c      	uxth	r4, r1
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800122a:	4019      	ands	r1, r3
  itmask = (((uint32_t)0x01) << itpos);
 800122c:	2301      	movs	r3, #1
 800122e:	408b      	lsls	r3, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001230:	0a24      	lsrs	r4, r4, #8
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001232:	1c19      	adds	r1, r3, #0
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001234:	2c02      	cmp	r4, #2
 8001236:	d00a      	beq.n	800124e <USART_ITConfig+0x2a>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001238:	2c03      	cmp	r4, #3
 800123a:	d00a      	beq.n	8001252 <USART_ITConfig+0x2e>
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800123c:	6803      	ldr	r3, [r0, #0]
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800123e:	2a00      	cmp	r2, #0
 8001240:	d102      	bne.n	8001248 <USART_ITConfig+0x24>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001242:	438b      	bics	r3, r1
 8001244:	6003      	str	r3, [r0, #0]
  }
}
 8001246:	bd10      	pop	{r4, pc}
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001248:	4319      	orrs	r1, r3
 800124a:	6001      	str	r1, [r0, #0]
 800124c:	e7fb      	b.n	8001246 <USART_ITConfig+0x22>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 800124e:	3004      	adds	r0, #4
 8001250:	e7f4      	b.n	800123c <USART_ITConfig+0x18>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
  {
    usartxbase += 0x08;
 8001252:	3008      	adds	r0, #8
 8001254:	e7f2      	b.n	800123c <USART_ITConfig+0x18>
 8001256:	46c0      	nop			; (mov r8, r8)

08001258 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8001258:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800125a:	2a00      	cmp	r2, #0
 800125c:	d102      	bne.n	8001264 <USART_RequestCmd+0xc>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 800125e:	438b      	bics	r3, r1
 8001260:	8303      	strh	r3, [r0, #24]
  }
}
 8001262:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8001264:	4319      	orrs	r1, r3
 8001266:	b289      	uxth	r1, r1
 8001268:	8301      	strh	r1, [r0, #24]
 800126a:	e7fa      	b.n	8001262 <USART_RequestCmd+0xa>

0800126c <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 800126c:	6882      	ldr	r2, [r0, #8]
 800126e:	4b03      	ldr	r3, [pc, #12]	; (800127c <USART_OverrunDetectionConfig+0x10>)
 8001270:	4013      	ands	r3, r2
 8001272:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8001274:	6883      	ldr	r3, [r0, #8]
 8001276:	4319      	orrs	r1, r3
 8001278:	6081      	str	r1, [r0, #8]
}
 800127a:	4770      	bx	lr
 800127c:	ffffefff 	.word	0xffffefff

08001280 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001280:	69c0      	ldr	r0, [r0, #28]
 8001282:	4008      	ands	r0, r1
 8001284:	1e41      	subs	r1, r0, #1
 8001286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001288:	b2c0      	uxtb	r0, r0
}
 800128a:	4770      	bx	lr

0800128c <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 800128c:	6201      	str	r1, [r0, #32]
}
 800128e:	4770      	bx	lr

08001290 <USART_GetITStatus>:
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001290:	23ff      	movs	r3, #255	; 0xff
 8001292:	400b      	ands	r3, r1
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001294:	b510      	push	{r4, lr}
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001296:	1c1c      	adds	r4, r3, #0
  itmask = (uint32_t)0x01 << itmask;
 8001298:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800129a:	b28a      	uxth	r2, r1
 800129c:	0a12      	lsrs	r2, r2, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800129e:	40a3      	lsls	r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80012a0:	2a01      	cmp	r2, #1
 80012a2:	d010      	beq.n	80012c6 <USART_GetITStatus+0x36>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80012a4:	2a02      	cmp	r2, #2
 80012a6:	d011      	beq.n	80012cc <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80012a8:	6882      	ldr	r2, [r0, #8]
 80012aa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 80012ac:	69c2      	ldr	r2, [r0, #28]
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80012ae:	2000      	movs	r0, #0
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <USART_GetITStatus+0x34>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
 80012b4:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
 80012b6:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 80012b8:	408b      	lsls	r3, r1
  bitpos &= USARTx->ISR;
 80012ba:	401a      	ands	r2, r3
 80012bc:	1c10      	adds	r0, r2, #0
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80012be:	1e41      	subs	r1, r0, #1
 80012c0:	4188      	sbcs	r0, r1
  {
    bitstatus = SET;
 80012c2:	b2c0      	uxtb	r0, r0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80012c4:	bd10      	pop	{r4, pc}
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80012c6:	6802      	ldr	r2, [r0, #0]
 80012c8:	4013      	ands	r3, r2
 80012ca:	e7ef      	b.n	80012ac <USART_GetITStatus+0x1c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
 80012cc:	6842      	ldr	r2, [r0, #4]
 80012ce:	4013      	ands	r3, r2
 80012d0:	e7ec      	b.n	80012ac <USART_GetITStatus+0x1c>
 80012d2:	46c0      	nop			; (mov r8, r8)

080012d4 <USART_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80012d4:	2301      	movs	r3, #1
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80012d6:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80012d8:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 80012da:	6203      	str	r3, [r0, #32]
}
 80012dc:	4770      	bx	lr
 80012de:	46c0      	nop			; (mov r8, r8)

080012e0 <u8g_DrawHBitmap>:
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	1c17      	adds	r7, r2, #0
 80012e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012e8:	1c06      	adds	r6, r0, #0
  while( cnt > 0 )
 80012ea:	1c14      	adds	r4, r2, #0
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 80012ec:	9103      	str	r1, [sp, #12]
 80012ee:	18d5      	adds	r5, r2, r3
 80012f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012f2:	1ae1      	subs	r1, r4, r3
 80012f4:	9b03      	ldr	r3, [sp, #12]
 80012f6:	00c9      	lsls	r1, r1, #3
 80012f8:	1859      	adds	r1, r3, r1
 80012fa:	b2c9      	uxtb	r1, r1
  while( cnt > 0 )
 80012fc:	42ac      	cmp	r4, r5
 80012fe:	d008      	beq.n	8001312 <u8g_DrawHBitmap+0x32>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 8001300:	7823      	ldrb	r3, [r4, #0]
 8001302:	1c30      	adds	r0, r6, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	1c3a      	adds	r2, r7, #0
 8001308:	2300      	movs	r3, #0
 800130a:	f001 fb68 	bl	80029de <u8g_Draw8Pixel>
    bitmap++;
 800130e:	3401      	adds	r4, #1
 8001310:	e7ee      	b.n	80012f0 <u8g_DrawHBitmap+0x10>
    cnt--;
    x+=8;
  }
}
 8001312:	b005      	add	sp, #20
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001316 <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8001316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001318:	1c1d      	adds	r5, r3, #0
 800131a:	1c14      	adds	r4, r2, #0
 800131c:	b085      	sub	sp, #20
 800131e:	ab0a      	add	r3, sp, #40	; 0x28
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	1c06      	adds	r6, r0, #0
 8001324:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8001326:	9a03      	ldr	r2, [sp, #12]
 8001328:	00eb      	lsls	r3, r5, #3
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	1c22      	adds	r2, r4, #0
    x+=8;
  }
}

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8001330:	1c0f      	adds	r7, r1, #0
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8001332:	f000 f911 	bl	8001558 <u8g_IsBBXIntersection>
 8001336:	2800      	cmp	r0, #0
 8001338:	d014      	beq.n	8001364 <u8g_DrawBitmap+0x4e>
 800133a:	9b03      	ldr	r3, [sp, #12]
 800133c:	18e3      	adds	r3, r4, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	9303      	str	r3, [sp, #12]
    return;
  while( h > 0 )
 8001342:	9b03      	ldr	r3, [sp, #12]
 8001344:	429c      	cmp	r4, r3
 8001346:	d00d      	beq.n	8001364 <u8g_DrawBitmap+0x4e>
  {
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 8001348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800134a:	1c22      	adds	r2, r4, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	1c30      	adds	r0, r6, #0
 8001350:	1c2b      	adds	r3, r5, #0
 8001352:	1c39      	adds	r1, r7, #0
 8001354:	f7ff ffc4 	bl	80012e0 <u8g_DrawHBitmap>
 8001358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bitmap += cnt;
    y++;
 800135a:	3401      	adds	r4, #1
 800135c:	195b      	adds	r3, r3, r5
 800135e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001360:	b2e4      	uxtb	r4, r4
 8001362:	e7ee      	b.n	8001342 <u8g_DrawBitmap+0x2c>
    h--;
  }
}
 8001364:	b005      	add	sp, #20
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001368 <u8g_DrawHBitmapP>:


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	1c17      	adds	r7, r2, #0
 800136e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001370:	1c06      	adds	r6, r0, #0
  while( cnt > 0 )
 8001372:	1c14      	adds	r4, r2, #0
  }
}


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8001374:	9103      	str	r1, [sp, #12]
 8001376:	18d5      	adds	r5, r2, r3
 8001378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800137a:	1ae1      	subs	r1, r4, r3
 800137c:	9b03      	ldr	r3, [sp, #12]
 800137e:	00c9      	lsls	r1, r1, #3
 8001380:	1859      	adds	r1, r3, r1
 8001382:	b2c9      	uxtb	r1, r1
  while( cnt > 0 )
 8001384:	42ac      	cmp	r4, r5
 8001386:	d008      	beq.n	800139a <u8g_DrawHBitmapP+0x32>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
 8001388:	7823      	ldrb	r3, [r4, #0]
 800138a:	1c30      	adds	r0, r6, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	1c3a      	adds	r2, r7, #0
 8001390:	2300      	movs	r3, #0
 8001392:	f001 fb24 	bl	80029de <u8g_Draw8Pixel>
    bitmap++;
 8001396:	3401      	adds	r4, #1
 8001398:	e7ee      	b.n	8001378 <u8g_DrawHBitmapP+0x10>
    cnt--;
    x+=8;
  }
}
 800139a:	b005      	add	sp, #20
 800139c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800139e <u8g_DrawBitmapP>:

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 800139e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a0:	1c1d      	adds	r5, r3, #0
 80013a2:	1c14      	adds	r4, r2, #0
 80013a4:	b085      	sub	sp, #20
 80013a6:	ab0a      	add	r3, sp, #40	; 0x28
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	1c06      	adds	r6, r0, #0
 80013ac:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 80013ae:	9a03      	ldr	r2, [sp, #12]
 80013b0:	00eb      	lsls	r3, r5, #3
 80013b2:	9200      	str	r2, [sp, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	1c22      	adds	r2, r4, #0
    x+=8;
  }
}

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 80013b8:	1c0f      	adds	r7, r1, #0
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 80013ba:	f000 f8cd 	bl	8001558 <u8g_IsBBXIntersection>
 80013be:	2800      	cmp	r0, #0
 80013c0:	d014      	beq.n	80013ec <u8g_DrawBitmapP+0x4e>
 80013c2:	9b03      	ldr	r3, [sp, #12]
 80013c4:	18e3      	adds	r3, r4, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	9303      	str	r3, [sp, #12]
    return;
  while( h > 0 )
 80013ca:	9b03      	ldr	r3, [sp, #12]
 80013cc:	429c      	cmp	r4, r3
 80013ce:	d00d      	beq.n	80013ec <u8g_DrawBitmapP+0x4e>
  {
    u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
 80013d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013d2:	1c22      	adds	r2, r4, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	1c30      	adds	r0, r6, #0
 80013d8:	1c2b      	adds	r3, r5, #0
 80013da:	1c39      	adds	r1, r7, #0
 80013dc:	f7ff ffc4 	bl	8001368 <u8g_DrawHBitmapP>
 80013e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bitmap += cnt;
    y++;
 80013e2:	3401      	adds	r4, #1
 80013e4:	195b      	adds	r3, r3, r5
 80013e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80013e8:	b2e4      	uxtb	r4, r4
 80013ea:	e7ee      	b.n	80013ca <u8g_DrawBitmapP+0x2c>
    h--;
  }
}
 80013ec:	b005      	add	sp, #20
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f0 <u8g_DrawXBM>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	1c1d      	adds	r5, r3, #0
 80013f4:	b08b      	sub	sp, #44	; 0x2c
 80013f6:	ab10      	add	r3, sp, #64	; 0x40
 80013f8:	781f      	ldrb	r7, [r3, #0]
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 80013fa:	1c2b      	adds	r3, r5, #0
 80013fc:	9700      	str	r7, [sp, #0]
    } while ( w > 0 );
  }
}

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
 80013fe:	9003      	str	r0, [sp, #12]
 8001400:	1c0e      	adds	r6, r1, #0
 8001402:	1c14      	adds	r4, r2, #0
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8001404:	f000 f8a8 	bl	8001558 <u8g_IsBBXIntersection>
 8001408:	2800      	cmp	r0, #0
 800140a:	d049      	beq.n	80014a0 <u8g_DrawXBM+0xb0>

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
 800140c:	1deb      	adds	r3, r5, #7
 800140e:	b2db      	uxtb	r3, r3
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	19e7      	adds	r7, r4, r7
 8001414:	9307      	str	r3, [sp, #28]
/*=========================================================================*/

static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
 8001416:	3607      	adds	r6, #7
 8001418:	b2fb      	uxtb	r3, r7
 800141a:	9308      	str	r3, [sp, #32]
 800141c:	b2f3      	uxtb	r3, r6
 800141e:	9304      	str	r3, [sp, #16]
 8001420:	9a04      	ldr	r2, [sp, #16]
 8001422:	08eb      	lsrs	r3, r5, #3
 8001424:	9305      	str	r3, [sp, #20]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	18d3      	adds	r3, r2, r3
    x+=8;
  }
  if ( w > 0 )
  {
    d = *bitmap;
    x -= 7;
 800142a:	3b07      	subs	r3, #7
 800142c:	b2db      	uxtb	r3, r3
 800142e:	9309      	str	r3, [sp, #36]	; 0x24
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  
  while( h > 0 )
 8001430:	9b08      	ldr	r3, [sp, #32]
 8001432:	429c      	cmp	r4, r3
 8001434:	d034      	beq.n	80014a0 <u8g_DrawXBM+0xb0>
 8001436:	1c2e      	adds	r6, r5, #0
 8001438:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800143a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800143c:	1af9      	subs	r1, r7, r3
 800143e:	9b04      	ldr	r3, [sp, #16]
 8001440:	00c9      	lsls	r1, r1, #3
 8001442:	1859      	adds	r1, r3, r1
 8001444:	b2c9      	uxtb	r1, r1

static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
 8001446:	2e07      	cmp	r6, #7
 8001448:	d90a      	bls.n	8001460 <u8g_DrawXBM+0x70>
  {
    u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
 800144a:	783b      	ldrb	r3, [r7, #0]
 800144c:	9803      	ldr	r0, [sp, #12]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	1c22      	adds	r2, r4, #0
 8001452:	2302      	movs	r3, #2
    bitmap++;
    w-= 8;
 8001454:	3e08      	subs	r6, #8
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
  {
    u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
 8001456:	f001 fac2 	bl	80029de <u8g_Draw8Pixel>
    bitmap++;
 800145a:	3701      	adds	r7, #1
    w-= 8;
 800145c:	b2f6      	uxtb	r6, r6
 800145e:	e7ec      	b.n	800143a <u8g_DrawXBM+0x4a>
 8001460:	9a05      	ldr	r2, [sp, #20]
 8001462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001464:	189b      	adds	r3, r3, r2
 8001466:	2207      	movs	r2, #7
 8001468:	402a      	ands	r2, r5
 800146a:	9206      	str	r2, [sp, #24]
    x+=8;
  }
  if ( w > 0 )
 800146c:	d010      	beq.n	8001490 <u8g_DrawXBM+0xa0>
  {
    d = *bitmap;
 800146e:	2600      	movs	r6, #0
 8001470:	781f      	ldrb	r7, [r3, #0]
 8001472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001474:	1999      	adds	r1, r3, r6
 8001476:	b2c9      	uxtb	r1, r1
    x -= 7;
    do
    {
      if ( d & 1 )
 8001478:	07fb      	lsls	r3, r7, #31
 800147a:	d503      	bpl.n	8001484 <u8g_DrawXBM+0x94>
        u8g_DrawPixel(u8g, x, y);
 800147c:	9803      	ldr	r0, [sp, #12]
 800147e:	1c22      	adds	r2, r4, #0
 8001480:	f001 faa5 	bl	80029ce <u8g_DrawPixel>
 8001484:	3601      	adds	r6, #1
      x++;
      w--;
      d >>= 1;      
    } while ( w > 0 );
 8001486:	9a06      	ldr	r2, [sp, #24]
 8001488:	b2f3      	uxtb	r3, r6
    {
      if ( d & 1 )
        u8g_DrawPixel(u8g, x, y);
      x++;
      w--;
      d >>= 1;      
 800148a:	087f      	lsrs	r7, r7, #1
    } while ( w > 0 );
 800148c:	429a      	cmp	r2, r3
 800148e:	d1f0      	bne.n	8001472 <u8g_DrawXBM+0x82>
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8001490:	9a07      	ldr	r2, [sp, #28]
 8001492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001494:	4694      	mov	ip, r2
    y++;
 8001496:	3401      	adds	r4, #1
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8001498:	4463      	add	r3, ip
 800149a:	9311      	str	r3, [sp, #68]	; 0x44
    y++;
 800149c:	b2e4      	uxtb	r4, r4
 800149e:	e7c7      	b.n	8001430 <u8g_DrawXBM+0x40>
    h--;
  }
}
 80014a0:	b00b      	add	sp, #44	; 0x2c
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a4 <u8g_DrawXBMP>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	1c1d      	adds	r5, r3, #0
 80014a8:	b08b      	sub	sp, #44	; 0x2c
 80014aa:	ab10      	add	r3, sp, #64	; 0x40
 80014ac:	781f      	ldrb	r7, [r3, #0]
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 80014ae:	1c2b      	adds	r3, r5, #0
 80014b0:	9700      	str	r7, [sp, #0]
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 80014b2:	9003      	str	r0, [sp, #12]
 80014b4:	1c0e      	adds	r6, r1, #0
 80014b6:	1c14      	adds	r4, r2, #0
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 80014b8:	f000 f84e 	bl	8001558 <u8g_IsBBXIntersection>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d049      	beq.n	8001554 <u8g_DrawXBMP+0xb0>

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
 80014c0:	1deb      	adds	r3, r5, #7
 80014c2:	b2db      	uxtb	r3, r3
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 80014c4:	08db      	lsrs	r3, r3, #3
 80014c6:	19e7      	adds	r7, r4, r7
 80014c8:	9307      	str	r3, [sp, #28]
}

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
 80014ca:	3607      	adds	r6, #7
 80014cc:	b2fb      	uxtb	r3, r7
 80014ce:	9308      	str	r3, [sp, #32]
 80014d0:	b2f3      	uxtb	r3, r6
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	9a04      	ldr	r2, [sp, #16]
 80014d6:	08eb      	lsrs	r3, r5, #3
 80014d8:	9305      	str	r3, [sp, #20]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	18d3      	adds	r3, r2, r3
    x+=8;
  }
  if ( w > 0 )
  {
    d = u8g_pgm_read(bitmap);
    x -= 7;
 80014de:	3b07      	subs	r3, #7
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	9309      	str	r3, [sp, #36]	; 0x24
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
 80014e4:	9b08      	ldr	r3, [sp, #32]
 80014e6:	429c      	cmp	r4, r3
 80014e8:	d034      	beq.n	8001554 <u8g_DrawXBMP+0xb0>
 80014ea:	1c2e      	adds	r6, r5, #0
 80014ec:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80014ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80014f0:	1af9      	subs	r1, r7, r3
 80014f2:	9b04      	ldr	r3, [sp, #16]
 80014f4:	00c9      	lsls	r1, r1, #3
 80014f6:	1859      	adds	r1, r3, r1
 80014f8:	b2c9      	uxtb	r1, r1

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
 80014fa:	2e07      	cmp	r6, #7
 80014fc:	d90a      	bls.n	8001514 <u8g_DrawXBMP+0x70>
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
 80014fe:	783b      	ldrb	r3, [r7, #0]
 8001500:	9803      	ldr	r0, [sp, #12]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	1c22      	adds	r2, r4, #0
 8001506:	2302      	movs	r3, #2
    bitmap++;
    w-= 8;
 8001508:	3e08      	subs	r6, #8
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
 800150a:	f001 fa68 	bl	80029de <u8g_Draw8Pixel>
    bitmap++;
 800150e:	3701      	adds	r7, #1
    w-= 8;
 8001510:	b2f6      	uxtb	r6, r6
 8001512:	e7ec      	b.n	80014ee <u8g_DrawXBMP+0x4a>
 8001514:	9a05      	ldr	r2, [sp, #20]
 8001516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001518:	189b      	adds	r3, r3, r2
 800151a:	2207      	movs	r2, #7
 800151c:	402a      	ands	r2, r5
 800151e:	9206      	str	r2, [sp, #24]
    x+=8;
  }
  if ( w > 0 )
 8001520:	d010      	beq.n	8001544 <u8g_DrawXBMP+0xa0>
  {
    d = u8g_pgm_read(bitmap);
 8001522:	2600      	movs	r6, #0
 8001524:	781f      	ldrb	r7, [r3, #0]
 8001526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001528:	1999      	adds	r1, r3, r6
 800152a:	b2c9      	uxtb	r1, r1
    x -= 7;
    do
    {
      if ( d & 1 )
 800152c:	07fb      	lsls	r3, r7, #31
 800152e:	d503      	bpl.n	8001538 <u8g_DrawXBMP+0x94>
        u8g_DrawPixel(u8g, x, y);
 8001530:	9803      	ldr	r0, [sp, #12]
 8001532:	1c22      	adds	r2, r4, #0
 8001534:	f001 fa4b 	bl	80029ce <u8g_DrawPixel>
 8001538:	3601      	adds	r6, #1
      x++;
      w--;
      d >>= 1;      
    } while ( w > 0 );
 800153a:	9a06      	ldr	r2, [sp, #24]
 800153c:	b2f3      	uxtb	r3, r6
    {
      if ( d & 1 )
        u8g_DrawPixel(u8g, x, y);
      x++;
      w--;
      d >>= 1;      
 800153e:	087f      	lsrs	r7, r7, #1
    } while ( w > 0 );
 8001540:	429a      	cmp	r2, r3
 8001542:	d1f0      	bne.n	8001526 <u8g_DrawXBMP+0x82>
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 8001544:	9a07      	ldr	r2, [sp, #28]
 8001546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001548:	4694      	mov	ip, r2
    y++;
 800154a:	3401      	adds	r4, #1
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 800154c:	4463      	add	r3, ip
 800154e:	9311      	str	r3, [sp, #68]	; 0x44
    y++;
 8001550:	b2e4      	uxtb	r4, r4
 8001552:	e7c7      	b.n	80014e4 <u8g_DrawXBMP+0x40>
    h--;
  }
}
 8001554:	b00b      	add	sp, #44	; 0x2c
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001558 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	1c05      	adds	r5, r0, #0
 800155c:	a804      	add	r0, sp, #16
 800155e:	7804      	ldrb	r4, [r0, #0]
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8001560:	1c28      	adds	r0, r5, #0
 8001562:	3049      	adds	r0, #73	; 0x49
 8001564:	7806      	ldrb	r6, [r0, #0]
 8001566:	3002      	adds	r0, #2
 8001568:	3c01      	subs	r4, #1
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 800156a:	7800      	ldrb	r0, [r0, #0]
uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
 800156c:	1914      	adds	r4, r2, r4
 800156e:	b2e4      	uxtb	r4, r4
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8001570:	4290      	cmp	r0, r2
 8001572:	d305      	bcc.n	8001580 <u8g_IsBBXIntersection+0x28>
  {
    if ( v1 >= a0 )
 8001574:	42b4      	cmp	r4, r6
 8001576:	d208      	bcs.n	800158a <u8g_IsBBXIntersection+0x32>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8001578:	2000      	movs	r0, #0
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
 800157a:	42a2      	cmp	r2, r4
 800157c:	d919      	bls.n	80015b2 <u8g_IsBBXIntersection+0x5a>
 800157e:	e004      	b.n	800158a <u8g_IsBBXIntersection+0x32>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8001580:	2000      	movs	r0, #0
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
 8001582:	42b4      	cmp	r4, r6
 8001584:	d315      	bcc.n	80015b2 <u8g_IsBBXIntersection+0x5a>
    {
      if ( v0 > v1 )
 8001586:	42a2      	cmp	r2, r4
 8001588:	d913      	bls.n	80015b2 <u8g_IsBBXIntersection+0x5a>
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800158a:	1c2a      	adds	r2, r5, #0
 800158c:	354a      	adds	r5, #74	; 0x4a
 800158e:	3b01      	subs	r3, #1
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8001590:	7828      	ldrb	r0, [r5, #0]
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 8001592:	18cb      	adds	r3, r1, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8001594:	3248      	adds	r2, #72	; 0x48
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 8001596:	b2db      	uxtb	r3, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8001598:	7812      	ldrb	r2, [r2, #0]
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 800159a:	4288      	cmp	r0, r1
 800159c:	d303      	bcc.n	80015a6 <u8g_IsBBXIntersection+0x4e>
  {
    if ( v1 >= a0 )
    {
      return 1;
 800159e:	2001      	movs	r0, #1
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d206      	bcs.n	80015b2 <u8g_IsBBXIntersection+0x5a>
 80015a4:	e002      	b.n	80015ac <u8g_IsBBXIntersection+0x54>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 80015a6:	2000      	movs	r0, #0
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d302      	bcc.n	80015b2 <u8g_IsBBXIntersection+0x5a>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 80015ac:	428b      	cmp	r3, r1
 80015ae:	419b      	sbcs	r3, r3
 80015b0:	4258      	negs	r0, r3
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
 80015b2:	bd70      	pop	{r4, r5, r6, pc}

080015b4 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 80015b4:	1841      	adds	r1, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 80015b6:	7808      	ldrb	r0, [r1, #0]
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 80015b8:	784b      	ldrb	r3, [r1, #1]
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    pos <<= 8;
 80015ba:	0200      	lsls	r0, r0, #8
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 80015bc:	18c0      	adds	r0, r0, r3
    return pos;
 80015be:	b280      	uxth	r0, r0
}
 80015c0:	4770      	bx	lr

080015c2 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 80015c2:	2000      	movs	r0, #0
 80015c4:	4770      	bx	lr

080015c6 <u8g_font_calc_vref_bottom>:


u8g_uint_t u8g_font_calc_vref_bottom(u8g_t *u8g)
{
  /* y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent); */
  return (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent);
 80015c6:	302a      	adds	r0, #42	; 0x2a
 80015c8:	7800      	ldrb	r0, [r0, #0]
}
 80015ca:	4770      	bx	lr

080015cc <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
 80015cc:	3029      	adds	r0, #41	; 0x29
 80015ce:	7800      	ldrb	r0, [r0, #0]
  tmp++;
 80015d0:	3001      	adds	r0, #1
  return tmp;
 80015d2:	b2c0      	uxtb	r0, r0
}
 80015d4:	4770      	bx	lr

080015d6 <u8g_font_calc_vref_center>:

u8g_uint_t u8g_font_calc_vref_center(u8g_t *u8g)
{
  int8_t tmp;
  tmp = u8g->font_ref_ascent;
  tmp -= u8g->font_ref_descent;
 80015d6:	1c03      	adds	r3, r0, #0
}

u8g_uint_t u8g_font_calc_vref_center(u8g_t *u8g)
{
  int8_t tmp;
  tmp = u8g->font_ref_ascent;
 80015d8:	3029      	adds	r0, #41	; 0x29
  tmp -= u8g->font_ref_descent;
 80015da:	332a      	adds	r3, #42	; 0x2a
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	7803      	ldrb	r3, [r0, #0]
 80015e0:	1a9b      	subs	r3, r3, r2
  tmp /= 2;
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	0fd8      	lsrs	r0, r3, #31
 80015e6:	18c0      	adds	r0, r0, r3
 80015e8:	1043      	asrs	r3, r0, #1
  tmp += u8g->font_ref_descent;  
 80015ea:	18d0      	adds	r0, r2, r3
  /* y += (u8g_uint_t)(u8g_int_t)(tmp); */
  return tmp;
 80015ec:	b2c0      	uxtb	r0, r0
}
 80015ee:	4770      	bx	lr

080015f0 <u8g_font_get_char>:
/*========================================================================*/
/* string pixel width calculation */

char u8g_font_get_char(const void *s)
{
  return *(const char *)(s);
 80015f0:	7800      	ldrb	r0, [r0, #0]
}
 80015f2:	4770      	bx	lr

080015f4 <u8g_font_get_charP>:

char u8g_font_get_charP(const void *s)
{
  return u8g_pgm_read(s);
 80015f4:	7800      	ldrb	r0, [r0, #0]
}
 80015f6:	4770      	bx	lr

080015f8 <u8g_font_GetFormat.isra.0>:

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
 80015f8:	4770      	bx	lr

080015fa <u8g_font_GetFontGlyphStructureSize.isra.1>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
 80015fa:	b508      	push	{r3, lr}
{
  switch(u8g_font_GetFormat(font))
 80015fc:	f7ff fffc 	bl	80015f8 <u8g_font_GetFormat.isra.0>
 8001600:	2800      	cmp	r0, #0
 8001602:	d003      	beq.n	800160c <u8g_font_GetFontGlyphStructureSize.isra.1+0x12>
 8001604:	2802      	cmp	r0, #2
 8001606:	d001      	beq.n	800160c <u8g_font_GetFontGlyphStructureSize.isra.1+0x12>
  {
    case 0: return 6;
    case 1: return 3;
 8001608:	2003      	movs	r0, #3
 800160a:	e000      	b.n	800160e <u8g_font_GetFontGlyphStructureSize.isra.1+0x14>
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
  {
    case 0: return 6;
 800160c:	2006      	movs	r0, #6
    case 1: return 3;
    case 2: return 6;
  }
  return 3;
}
 800160e:	bd08      	pop	{r3, pc}

08001610 <u8g_font_GetCapitalAHeight>:
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
  return u8g_font_get_byte(font, 5);
 8001610:	7940      	ldrb	r0, [r0, #5]
}
 8001612:	4770      	bx	lr

08001614 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8001614:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 6);
 8001616:	2106      	movs	r1, #6
 8001618:	f7ff ffcc 	bl	80015b4 <u8g_font_get_word>
}
 800161c:	bd08      	pop	{r3, pc}

0800161e <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 800161e:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 8);
 8001620:	2108      	movs	r1, #8
 8001622:	f7ff ffc7 	bl	80015b4 <u8g_font_get_word>
}
 8001626:	bd08      	pop	{r3, pc}

08001628 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
 8001628:	7a80      	ldrb	r0, [r0, #10]
}
 800162a:	4770      	bx	lr

0800162c <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
 800162c:	7ac0      	ldrb	r0, [r0, #11]
}
 800162e:	4770      	bx	lr

08001630 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
  return u8g_font_get_byte(font, 12);
 8001630:	7b00      	ldrb	r0, [r0, #12]
 8001632:	b240      	sxtb	r0, r0
}
 8001634:	4770      	bx	lr

08001636 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
  return u8g_font_get_byte(font, 13);
 8001636:	7b40      	ldrb	r0, [r0, #13]
 8001638:	b240      	sxtb	r0, r0
}
 800163a:	4770      	bx	lr

0800163c <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
  return u8g_font_get_byte(font, 14);
 800163c:	7b80      	ldrb	r0, [r0, #14]
 800163e:	b240      	sxtb	r0, r0
}
 8001640:	4770      	bx	lr

08001642 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
  return u8g_font_get_byte(font, 15);
 8001642:	7bc0      	ldrb	r0, [r0, #15]
 8001644:	b240      	sxtb	r0, r0
}
 8001646:	4770      	bx	lr

08001648 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
  return u8g_font_get_byte(font, 16);
 8001648:	7c00      	ldrb	r0, [r0, #16]
 800164a:	b240      	sxtb	r0, r0
}
 800164c:	4770      	bx	lr

0800164e <u8g_font_GetSize>:
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
}

/* calculate the overall length of the font, only used to create the picture for the google wiki */
size_t u8g_font_GetSize(const void *font)
{
 800164e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001650:	7805      	ldrb	r5, [r0, #0]
 8001652:	1c04      	adds	r4, r0, #0
  uint8_t *p = (uint8_t *)(font);
  uint8_t font_format = u8g_font_GetFormat(font);
 8001654:	1c28      	adds	r0, r5, #0
 8001656:	f7ff ffcf 	bl	80015f8 <u8g_font_GetFormat.isra.0>
 800165a:	1c07      	adds	r7, r0, #0
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(font);
 800165c:	1c28      	adds	r0, r5, #0
 800165e:	f7ff ffcc 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
 8001662:	1c06      	adds	r6, r0, #0
  uint8_t start, end;
  uint8_t i;
  uint8_t mask = 255;
  
  start = u8g_font_GetFontStartEncoding(font);
 8001664:	1c20      	adds	r0, r4, #0
 8001666:	f7ff ffdf 	bl	8001628 <u8g_font_GetFontStartEncoding>
 800166a:	1c05      	adds	r5, r0, #0
  end = u8g_font_GetFontEndEncoding(font);
 800166c:	1c20      	adds	r0, r4, #0
 800166e:	f7ff ffdd 	bl	800162c <u8g_font_GetFontEndEncoding>
  uint8_t *p = (uint8_t *)(font);
  uint8_t font_format = u8g_font_GetFormat(font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(font);
  uint8_t start, end;
  uint8_t i;
  uint8_t mask = 255;
 8001672:	21ff      	movs	r1, #255	; 0xff
  
  start = u8g_font_GetFontStartEncoding(font);
  end = u8g_font_GetFontEndEncoding(font);

  if ( font_format == 1 )
 8001674:	2f01      	cmp	r7, #1
 8001676:	d100      	bne.n	800167a <u8g_font_GetSize+0x2c>
    mask = 15;
 8001678:	210f      	movs	r1, #15

  p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 800167a:	1c23      	adds	r3, r4, #0
 800167c:	3311      	adds	r3, #17

  i = start;  
  for(;;)
  {
    if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	2aff      	cmp	r2, #255	; 0xff
 8001682:	d101      	bne.n	8001688 <u8g_font_GetSize+0x3a>
    {
      p += 1;
 8001684:	3301      	adds	r3, #1
 8001686:	e003      	b.n	8001690 <u8g_font_GetSize+0x42>
    }
    else
    {
      p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8001688:	789a      	ldrb	r2, [r3, #2]
 800168a:	400a      	ands	r2, r1
 800168c:	1992      	adds	r2, r2, r6
      p += data_structure_size;
 800168e:	189b      	adds	r3, r3, r2
    }
    if ( i == end )
 8001690:	4285      	cmp	r5, r0
 8001692:	d002      	beq.n	800169a <u8g_font_GetSize+0x4c>
      break;
    i++;
 8001694:	3501      	adds	r5, #1
 8001696:	b2ed      	uxtb	r5, r5
  }
 8001698:	e7f1      	b.n	800167e <u8g_font_GetSize+0x30>
    
  return p - (uint8_t *)font;
 800169a:	1b18      	subs	r0, r3, r4
}
 800169c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800169e <u8g_GetFontBBXWidth>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 800169e:	6883      	ldr	r3, [r0, #8]
/*========================================================================*/
/* u8g interface, font access */

uint8_t u8g_GetFontBBXWidth(u8g_t *u8g)
{
  return u8g_font_GetBBXWidth(u8g->font);
 80016a0:	7858      	ldrb	r0, [r3, #1]
}
 80016a2:	4770      	bx	lr

080016a4 <u8g_GetFontBBXHeight>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 80016a4:	6883      	ldr	r3, [r0, #8]
  return u8g_font_GetBBXWidth(u8g->font);
}

uint8_t u8g_GetFontBBXHeight(u8g_t *u8g)
{
  return u8g_font_GetBBXHeight(u8g->font);
 80016a6:	7898      	ldrb	r0, [r3, #2]
}
 80016a8:	4770      	bx	lr

080016aa <u8g_GetFontBBXOffX>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 80016aa:	6883      	ldr	r3, [r0, #8]
}

int8_t u8g_GetFontBBXOffX(u8g_t *u8g) U8G_NOINLINE;
int8_t u8g_GetFontBBXOffX(u8g_t *u8g)
{
  return u8g_font_GetBBXOffX(u8g->font);
 80016ac:	2003      	movs	r0, #3
 80016ae:	5618      	ldrsb	r0, [r3, r0]
}
 80016b0:	4770      	bx	lr

080016b2 <u8g_GetFontBBXOffY>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 80016b2:	6883      	ldr	r3, [r0, #8]
}

int8_t u8g_GetFontBBXOffY(u8g_t *u8g) U8G_NOINLINE;
int8_t u8g_GetFontBBXOffY(u8g_t *u8g)
{
  return u8g_font_GetBBXOffY(u8g->font);
 80016b4:	2004      	movs	r0, #4
 80016b6:	5618      	ldrsb	r0, [r3, r0]
}
 80016b8:	4770      	bx	lr

080016ba <u8g_GetFontCapitalAHeight>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 80016ba:	6883      	ldr	r3, [r0, #8]
}

uint8_t u8g_GetFontCapitalAHeight(u8g_t *u8g) U8G_NOINLINE; 
uint8_t u8g_GetFontCapitalAHeight(u8g_t *u8g)
{
  return u8g_font_GetCapitalAHeight(u8g->font);
 80016bc:	7958      	ldrb	r0, [r3, #5]
}
 80016be:	4770      	bx	lr

080016c0 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *p = (uint8_t *)(u8g->font);
 80016c2:	6886      	ldr	r6, [r0, #8]
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80016c4:	b085      	sub	sp, #20
 80016c6:	7835      	ldrb	r5, [r6, #0]
 80016c8:	1c04      	adds	r4, r0, #0
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80016ca:	1c28      	adds	r0, r5, #0
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80016cc:	1c0f      	adds	r7, r1, #0
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80016ce:	f7ff ff93 	bl	80015f8 <u8g_font_GetFormat.isra.0>
 80016d2:	9000      	str	r0, [sp, #0]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 80016d4:	1c28      	adds	r0, r5, #0
 80016d6:	f7ff ff90 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 80016da:	23ff      	movs	r3, #255	; 0xff
 80016dc:	9302      	str	r3, [sp, #8]

  if ( font_format == 1 )
 80016de:	9b00      	ldr	r3, [sp, #0]
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 80016e0:	9003      	str	r0, [sp, #12]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <u8g_GetGlyph+0x2a>
    mask = 15;
 80016e6:	230f      	movs	r3, #15
 80016e8:	9302      	str	r3, [sp, #8]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 80016ea:	1c30      	adds	r0, r6, #0
 80016ec:	f7ff ff9c 	bl	8001628 <u8g_font_GetFontStartEncoding>
 80016f0:	1c05      	adds	r5, r0, #0
  end = u8g_font_GetFontEndEncoding(u8g->font);
 80016f2:	1c30      	adds	r0, r6, #0
 80016f4:	f7ff ff9a 	bl	800162c <u8g_font_GetFontEndEncoding>
 80016f8:	9001      	str	r0, [sp, #4]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 80016fa:	1c30      	adds	r0, r6, #0
 80016fc:	f7ff ff8f 	bl	800161e <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
 8001700:	2f60      	cmp	r7, #96	; 0x60
 8001702:	d904      	bls.n	800170e <u8g_GetGlyph+0x4e>
 8001704:	2800      	cmp	r0, #0
 8001706:	d002      	beq.n	800170e <u8g_GetGlyph+0x4e>
  {
    p+= pos;
 8001708:	1836      	adds	r6, r6, r0
    start = 97;
 800170a:	2561      	movs	r5, #97	; 0x61
 800170c:	e00a      	b.n	8001724 <u8g_GetGlyph+0x64>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 800170e:	1c30      	adds	r0, r6, #0
 8001710:	f7ff ff80 	bl	8001614 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
 8001714:	2f40      	cmp	r7, #64	; 0x40
 8001716:	d904      	bls.n	8001722 <u8g_GetGlyph+0x62>
 8001718:	2800      	cmp	r0, #0
 800171a:	d002      	beq.n	8001722 <u8g_GetGlyph+0x62>
    {
      p+= pos;
 800171c:	1836      	adds	r6, r6, r0
      start = 65;
 800171e:	2541      	movs	r5, #65	; 0x41
 8001720:	e000      	b.n	8001724 <u8g_GetGlyph+0x64>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8001722:	3611      	adds	r6, #17
  }
  
  if ( requested_encoding > end )
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	429f      	cmp	r7, r3
 8001728:	d907      	bls.n	800173a <u8g_GetGlyph+0x7a>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 800172a:	2600      	movs	r6, #0
  u8g->glyph_width = 0;
  u8g->glyph_height = 0;
 800172c:	1c63      	adds	r3, r4, #1
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 800172e:	7726      	strb	r6, [r4, #28]
  u8g->glyph_width = 0;
 8001730:	77e6      	strb	r6, [r4, #31]
  u8g->glyph_height = 0;
 8001732:	77de      	strb	r6, [r3, #31]
  u8g->glyph_x = 0;
 8001734:	7766      	strb	r6, [r4, #29]
  u8g->glyph_y = 0;
 8001736:	77a6      	strb	r6, [r4, #30]
 8001738:	e028      	b.n	800178c <u8g_GetGlyph+0xcc>
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
  }
  
  i = start;
  if ( i <= end )
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	429d      	cmp	r5, r3
 800173e:	d8f4      	bhi.n	800172a <u8g_GetGlyph+0x6a>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8001740:	7833      	ldrb	r3, [r6, #0]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d101      	bne.n	800174a <u8g_GetGlyph+0x8a>
      {
        p += 1;
 8001746:	3601      	adds	r6, #1
 8001748:	e029      	b.n	800179e <u8g_GetGlyph+0xde>
      }
      else
      {
        if ( i == requested_encoding )
 800174a:	42bd      	cmp	r5, r7
 800174c:	d121      	bne.n	8001792 <u8g_GetGlyph+0xd2>
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 800174e:	9a00      	ldr	r2, [sp, #0]
 8001750:	1c61      	adds	r1, r4, #1
 8001752:	2a00      	cmp	r2, #0
 8001754:	d001      	beq.n	800175a <u8g_GetGlyph+0x9a>
 8001756:	2a02      	cmp	r2, #2
 8001758:	d109      	bne.n	800176e <u8g_GetGlyph+0xae>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800175a:	77e3      	strb	r3, [r4, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800175c:	7873      	ldrb	r3, [r6, #1]
 800175e:	77cb      	strb	r3, [r1, #31]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8001760:	78f3      	ldrb	r3, [r6, #3]
 8001762:	7723      	strb	r3, [r4, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8001764:	7933      	ldrb	r3, [r6, #4]
 8001766:	7763      	strb	r3, [r4, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8001768:	7973      	ldrb	r3, [r6, #5]
 800176a:	77a3      	strb	r3, [r4, #30]
 800176c:	e00e      	b.n	800178c <u8g_GetGlyph+0xcc>
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
      u8g->glyph_y =  tmp & 15;
 800176e:	220f      	movs	r2, #15
 8001770:	1c18      	adds	r0, r3, #0
 8001772:	4010      	ands	r0, r2
      u8g->glyph_y-=2;
      tmp >>= 4;
 8001774:	091b      	lsrs	r3, r3, #4
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
      u8g->glyph_y =  tmp & 15;
      u8g->glyph_y-=2;
 8001776:	3802      	subs	r0, #2
 8001778:	77a0      	strb	r0, [r4, #30]
      tmp >>= 4;
      u8g->glyph_x =  tmp;
 800177a:	7763      	strb	r3, [r4, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800177c:	7873      	ldrb	r3, [r6, #1]
      u8g->glyph_height =  tmp & 15;
 800177e:	401a      	ands	r2, r3
      tmp >>= 4;
 8001780:	091b      	lsrs	r3, r3, #4
      u8g->glyph_y-=2;
      tmp >>= 4;
      u8g->glyph_x =  tmp;
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
      u8g->glyph_height =  tmp & 15;
 8001782:	77ca      	strb	r2, [r1, #31]
      tmp >>= 4;
      u8g->glyph_width =  tmp;
 8001784:	77e3      	strb	r3, [r4, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8001786:	78b3      	ldrb	r3, [r6, #2]
      tmp >>= 4;
 8001788:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 800178a:	7723      	strb	r3, [r4, #28]
      else
      {
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
 800178c:	1c30      	adds	r0, r6, #0
  }
  
  u8g_FillEmptyGlyphCache(u8g);
    
  return NULL;
}
 800178e:	b005      	add	sp, #20
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8001792:	78b3      	ldrb	r3, [r6, #2]
 8001794:	9a02      	ldr	r2, [sp, #8]
 8001796:	4013      	ands	r3, r2
 8001798:	9a03      	ldr	r2, [sp, #12]
 800179a:	189b      	adds	r3, r3, r2
        p += data_structure_size;
 800179c:	18f6      	adds	r6, r6, r3
      }
      if ( i == end )
 800179e:	9b01      	ldr	r3, [sp, #4]
 80017a0:	429d      	cmp	r5, r3
 80017a2:	d0c2      	beq.n	800172a <u8g_GetGlyph+0x6a>
        break;
      i++;
 80017a4:	3501      	adds	r5, #1
 80017a6:	b2ed      	uxtb	r5, r5
    }
 80017a8:	e7ca      	b.n	8001740 <u8g_GetGlyph+0x80>

080017aa <u8g_font_calc_str_min_box>:
{
  /* u8g_glyph_t g; */
  int8_t tmp;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
 80017aa:	2300      	movs	r3, #0
  u8g_uint_t w;         /* width of the overall string */
};
typedef struct u8g_str_size_struct u8g_str_size_t;

static void u8g_font_calc_str_min_box(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
  /* u8g_glyph_t g; */
  int8_t tmp;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
 80017ae:	7113      	strb	r3, [r2, #4]
    
  /* check for empty string, width is already 0, but also reset y_min and y_max to 0 */
  if ( *s == '\0' )
 80017b0:	780b      	ldrb	r3, [r1, #0]
  u8g_uint_t w;         /* width of the overall string */
};
typedef struct u8g_str_size_struct u8g_str_size_t;

static void u8g_font_calc_str_min_box(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 80017b2:	1c05      	adds	r5, r0, #0
 80017b4:	1c0e      	adds	r6, r1, #0
 80017b6:	1c14      	adds	r4, r2, #0
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
    
  /* check for empty string, width is already 0, but also reset y_min and y_max to 0 */
  if ( *s == '\0' )
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <u8g_font_calc_str_min_box+0x1c>
  {
    buf->y_min = 0;
 80017bc:	7013      	strb	r3, [r2, #0]
    buf->y_max = 0;
 80017be:	7053      	strb	r3, [r2, #1]
    buf->x = 0;
 80017c0:	7093      	strb	r3, [r2, #2]
    buf->y = 0;
 80017c2:	70d3      	strb	r3, [r2, #3]
    return;
 80017c4:	e032      	b.n	800182c <u8g_font_calc_str_min_box+0x82>
  }
  
  /* reset y_min to the largest possible value. Later we search for the smallest value */
  /* y_min contains the position [pixel] of the lower left edge of the glyph above (y_min>0) or below (y_min<0) baseline  */
  buf->y_min = 127;
 80017c6:	237f      	movs	r3, #127	; 0x7f
 80017c8:	7013      	strb	r3, [r2, #0]
  /* reset y_max to the smallest possible value. Later we search for the highest value */
  /* y_max contains the position [pixel] of the upper left edge of the glyph above (y_max>0) or below (y_max<0) baseline  */
  buf->y_max = -128;
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	7053      	strb	r3, [r2, #1]

  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  u8g_GetGlyph(u8g, *s);
 80017ce:	7809      	ldrb	r1, [r1, #0]
 80017d0:	f7ff ff76 	bl	80016c0 <u8g_GetGlyph>
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  // buf->w = - u8g_font_GetGlyphBBXOffX(u8g->font, g);
  buf->w = - u8g->glyph_x;
 80017d4:	7f6b      	ldrb	r3, [r5, #29]
 80017d6:	425b      	negs	r3, r3
 80017d8:	7123      	strb	r3, [r4, #4]
  
  /* Also copy the position of the first glyph. This is the reference point of the string (negated) */
  buf->x = u8g->glyph_x;
 80017da:	7f6b      	ldrb	r3, [r5, #29]
 80017dc:	70a3      	strb	r3, [r4, #2]
  buf->y = u8g->glyph_y;
 80017de:	7fab      	ldrb	r3, [r5, #30]
 80017e0:	70e3      	strb	r3, [r4, #3]
    
    /* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */
    /* relative to the base line */
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
 80017e2:	2100      	movs	r1, #0
  {
    
    /* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */
    /* relative to the base line */
    
    tmp = u8g->glyph_y;
 80017e4:	7faa      	ldrb	r2, [r5, #30]
    if ( buf->y_min > tmp )
 80017e6:	5661      	ldrsb	r1, [r4, r1]
 80017e8:	b253      	sxtb	r3, r2
 80017ea:	4299      	cmp	r1, r3
 80017ec:	dd00      	ble.n	80017f0 <u8g_font_calc_str_min_box+0x46>
      buf->y_min = tmp;
 80017ee:	7022      	strb	r2, [r4, #0]
    
    tmp +=u8g->glyph_height;
    if ( buf->y_max < tmp )
 80017f0:	2101      	movs	r1, #1
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
      buf->y_min = tmp;
    
    tmp +=u8g->glyph_height;
 80017f2:	1c6b      	adds	r3, r5, #1
 80017f4:	7fdb      	ldrb	r3, [r3, #31]
    if ( buf->y_max < tmp )
 80017f6:	5661      	ldrsb	r1, [r4, r1]
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
      buf->y_min = tmp;
    
    tmp +=u8g->glyph_height;
 80017f8:	18d3      	adds	r3, r2, r3
 80017fa:	b2db      	uxtb	r3, r3
    if ( buf->y_max < tmp )
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	4291      	cmp	r1, r2
 8001800:	da00      	bge.n	8001804 <u8g_font_calc_str_min_box+0x5a>
      buf->y_max = tmp;
 8001802:	7063      	strb	r3, [r4, #1]
    
    /* check and stop if the end of the string is reached */
    s++;
 8001804:	3601      	adds	r6, #1
    if ( *s == '\0' )
 8001806:	7833      	ldrb	r3, [r6, #0]
 8001808:	7922      	ldrb	r2, [r4, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <u8g_font_calc_str_min_box+0x74>
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    buf->w += u8g->glyph_dx;
 800180e:	7f2b      	ldrb	r3, [r5, #28]
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, *s);
 8001810:	1c28      	adds	r0, r5, #0
    s++;
    if ( *s == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    buf->w += u8g->glyph_dx;
 8001812:	189a      	adds	r2, r3, r2
 8001814:	7122      	strb	r2, [r4, #4]
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, *s);
 8001816:	7831      	ldrb	r1, [r6, #0]
 8001818:	f7ff ff52 	bl	80016c0 <u8g_GetGlyph>
 800181c:	e7e1      	b.n	80017e2 <u8g_font_calc_str_min_box+0x38>
  }
  
  /* finally calculate the width of the last char */
  /* if g was not updated in the for loop (strlen() == 1), then the initial offset x gets removed */
  buf->w += u8g->glyph_width;
 800181e:	7feb      	ldrb	r3, [r5, #31]
 8001820:	189b      	adds	r3, r3, r2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	7123      	strb	r3, [r4, #4]
  // buf->w += u8g_font_GetGlyphBBXOffX(u8g->font, g);
  
  buf->w += u8g->glyph_x;
 8001826:	7f6a      	ldrb	r2, [r5, #29]
 8001828:	189b      	adds	r3, r3, r2
 800182a:	7123      	strb	r3, [r4, #4]
}
 800182c:	bd70      	pop	{r4, r5, r6, pc}

0800182e <u8g_IsGlyph>:
    
  return NULL;
}

uint8_t u8g_IsGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 800182e:	b508      	push	{r3, lr}
  if ( u8g_GetGlyph(u8g, requested_encoding) != NULL )
 8001830:	f7ff ff46 	bl	80016c0 <u8g_GetGlyph>
 8001834:	1e43      	subs	r3, r0, #1
 8001836:	4198      	sbcs	r0, r3
    return 1;
  return 0;
}
 8001838:	b2c0      	uxtb	r0, r0
 800183a:	bd08      	pop	{r3, pc}

0800183c <u8g_GetGlyphDeltaX>:

int8_t u8g_GetGlyphDeltaX(u8g_t *u8g, uint8_t requested_encoding)
{
 800183c:	b510      	push	{r4, lr}
 800183e:	1c04      	adds	r4, r0, #0
  if ( u8g_GetGlyph(u8g, requested_encoding) == NULL )
 8001840:	f7ff ff3e 	bl	80016c0 <u8g_GetGlyph>
    return 0;  /* should never happen, so return something */
 8001844:	1e03      	subs	r3, r0, #0
  return 0;
}

int8_t u8g_GetGlyphDeltaX(u8g_t *u8g, uint8_t requested_encoding)
{
  if ( u8g_GetGlyph(u8g, requested_encoding) == NULL )
 8001846:	d000      	beq.n	800184a <u8g_GetGlyphDeltaX+0xe>
    return 0;  /* should never happen, so return something */
  return u8g->glyph_dx;
 8001848:	7f23      	ldrb	r3, [r4, #28]
 800184a:	b258      	sxtb	r0, r3
}
 800184c:	bd10      	pop	{r4, pc}

0800184e <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800184e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001850:	1c0f      	adds	r7, r1, #0
 8001852:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001854:	1c19      	adds	r1, r3, #0
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001856:	1c04      	adds	r4, r0, #0
 8001858:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800185a:	f7ff ff31 	bl	80016c0 <u8g_GetGlyph>
 800185e:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 8001860:	d03d      	beq.n	80018de <u8g_draw_glyph+0x90>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001862:	68a3      	ldr	r3, [r4, #8]
 8001864:	7818      	ldrb	r0, [r3, #0]
 8001866:	f7ff fec8 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800186a:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800186c:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800186e:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 8001870:	1c63      	adds	r3, r4, #1
 8001872:	7fda      	ldrb	r2, [r3, #31]
  
  x += u8g->glyph_x;
 8001874:	7f63      	ldrb	r3, [r4, #29]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8001876:	9200      	str	r2, [sp, #0]
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_x;
 8001878:	18ff      	adds	r7, r7, r3
 800187a:	b2fb      	uxtb	r3, r7
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	7fa3      	ldrb	r3, [r4, #30]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8001880:	1c20      	adds	r0, r4, #0
 8001882:	1af6      	subs	r6, r6, r3
 8001884:	b2f3      	uxtb	r3, r6
 8001886:	1a9e      	subs	r6, r3, r2
 8001888:	b2f6      	uxtb	r6, r6
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	9904      	ldr	r1, [sp, #16]
 800188e:	1c32      	adds	r2, r6, #0
 8001890:	9b03      	ldr	r3, [sp, #12]
 8001892:	f7ff fe61 	bl	8001558 <u8g_IsBBXIntersection>
 8001896:	2800      	cmp	r0, #0
 8001898:	d020      	beq.n	80018dc <u8g_draw_glyph+0x8e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800189a:	9b05      	ldr	r3, [sp, #20]
 800189c:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 800189e:	9b03      	ldr	r3, [sp, #12]
 80018a0:	3307      	adds	r3, #7
 80018a2:	b2db      	uxtb	r3, r3
  w /= 8;
 80018a4:	08db      	lsrs	r3, r3, #3
 80018a6:	9303      	str	r3, [sp, #12]
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
 80018a8:	9b02      	ldr	r3, [sp, #8]
 80018aa:	429e      	cmp	r6, r3
 80018ac:	d016      	beq.n	80018dc <u8g_draw_glyph+0x8e>
 80018ae:	1c2f      	adds	r7, r5, #0
 80018b0:	1b7b      	subs	r3, r7, r5
 80018b2:	9a04      	ldr	r2, [sp, #16]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	00d9      	lsls	r1, r3, #3
 80018b8:	1851      	adds	r1, r2, r1
  {
    ix = x;
    for( i = 0; i < w; i++ )
 80018ba:	9a03      	ldr	r2, [sp, #12]
 80018bc:	b2c9      	uxtb	r1, r1
 80018be:	4293      	cmp	r3, r2
 80018c0:	d208      	bcs.n	80018d4 <u8g_draw_glyph+0x86>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 80018c2:	783b      	ldrb	r3, [r7, #0]
 80018c4:	1c20      	adds	r0, r4, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	1c32      	adds	r2, r6, #0
 80018ca:	2300      	movs	r3, #0
 80018cc:	f001 f887 	bl	80029de <u8g_Draw8Pixel>
      data++;
 80018d0:	3701      	adds	r7, #1
 80018d2:	e7ed      	b.n	80018b0 <u8g_draw_glyph+0x62>
      ix+=8;
    }
    iy++;
 80018d4:	3601      	adds	r6, #1
 80018d6:	18ad      	adds	r5, r5, r2
 80018d8:	b2f6      	uxtb	r6, r6
 80018da:	e7e5      	b.n	80018a8 <u8g_draw_glyph+0x5a>
  }
  return u8g->glyph_dx;
 80018dc:	7f20      	ldrb	r0, [r4, #28]
 80018de:	b240      	sxtb	r0, r0
}
 80018e0:	b007      	add	sp, #28
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e4 <u8g_DrawGlyph>:

int8_t u8g_DrawGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	1c05      	adds	r5, r0, #0
 80018e8:	1c1e      	adds	r6, r3, #0
  y += u8g->font_calc_vref(u8g);
 80018ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80018ec:	1c0f      	adds	r7, r1, #0
 80018ee:	1c14      	adds	r4, r2, #0
  y += u8g->font_calc_vref(u8g);
 80018f0:	4798      	blx	r3
 80018f2:	1902      	adds	r2, r0, r4
  return u8g_draw_glyph(u8g, x, y, encoding);
 80018f4:	1c39      	adds	r1, r7, #0
 80018f6:	1c28      	adds	r0, r5, #0
 80018f8:	1c33      	adds	r3, r6, #0
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f7ff ffa7 	bl	800184e <u8g_draw_glyph>
}
 8001900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001902 <u8g_draw_glyph90>:

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001904:	1c0f      	adds	r7, r1, #0
 8001906:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001908:	1c19      	adds	r1, r3, #0
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_glyph(u8g, x, y, encoding);
}

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800190a:	1c04      	adds	r4, r0, #0
 800190c:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800190e:	f7ff fed7 	bl	80016c0 <u8g_GetGlyph>
 8001912:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 8001914:	d045      	beq.n	80019a2 <u8g_draw_glyph90+0xa0>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001916:	68a3      	ldr	r3, [r4, #8]
 8001918:	7818      	ldrb	r0, [r3, #0]
 800191a:	f7ff fe6e 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800191e:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001920:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8001922:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 8001924:	1c63      	adds	r3, r4, #1
 8001926:	7fdb      	ldrb	r3, [r3, #31]
  
  x += u8g->glyph_y;
  x++;
  y += u8g->glyph_x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
 8001928:	1c20      	adds	r0, r4, #0
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	7fa3      	ldrb	r3, [r4, #30]
 800192e:	3301      	adds	r3, #1
  
  x += u8g->glyph_y;
  x++;
 8001930:	18ff      	adds	r7, r7, r3
  y += u8g->glyph_x;
 8001932:	7f63      	ldrb	r3, [r4, #29]
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_y;
  x++;
 8001934:	b2ff      	uxtb	r7, r7
  y += u8g->glyph_x;
 8001936:	18f6      	adds	r6, r6, r3
 8001938:	b2f3      	uxtb	r3, r6
 800193a:	9304      	str	r3, [sp, #16]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
 800193c:	9b03      	ldr	r3, [sp, #12]
 800193e:	1c39      	adds	r1, r7, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	9a04      	ldr	r2, [sp, #16]
 8001944:	9b02      	ldr	r3, [sp, #8]
 8001946:	f7ff fe07 	bl	8001558 <u8g_IsBBXIntersection>
 800194a:	2800      	cmp	r0, #0
 800194c:	d028      	beq.n	80019a0 <u8g_draw_glyph90+0x9e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800194e:	9b05      	ldr	r3, [sp, #20]
 8001950:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 8001952:	9b03      	ldr	r3, [sp, #12]
 8001954:	3307      	adds	r3, #7
 8001956:	b2db      	uxtb	r3, r3
  w /= 8;
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	9b02      	ldr	r3, [sp, #8]
 800195e:	3b01      	subs	r3, #1
  
  ix = x;
  ix += h;
  ix--;
 8001960:	18ff      	adds	r7, r7, r3
 8001962:	9b02      	ldr	r3, [sp, #8]
 8001964:	b2ff      	uxtb	r7, r7
 8001966:	1afb      	subs	r3, r7, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	9302      	str	r3, [sp, #8]
  for( j = 0; j < h; j++ )
 800196c:	9b02      	ldr	r3, [sp, #8]
 800196e:	429f      	cmp	r7, r3
 8001970:	d016      	beq.n	80019a0 <u8g_draw_glyph90+0x9e>
 8001972:	1c2e      	adds	r6, r5, #0
 8001974:	1b73      	subs	r3, r6, r5
 8001976:	9904      	ldr	r1, [sp, #16]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	00da      	lsls	r2, r3, #3
 800197c:	188a      	adds	r2, r1, r2
  {
    iy = y;
    for( i = 0; i < w; i++ )
 800197e:	9903      	ldr	r1, [sp, #12]
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	428b      	cmp	r3, r1
 8001984:	d208      	bcs.n	8001998 <u8g_draw_glyph90+0x96>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 1, u8g_pgm_read(data));
 8001986:	7833      	ldrb	r3, [r6, #0]
 8001988:	1c20      	adds	r0, r4, #0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	1c39      	adds	r1, r7, #0
 800198e:	2301      	movs	r3, #1
 8001990:	f001 f825 	bl	80029de <u8g_Draw8Pixel>
      data++;
 8001994:	3601      	adds	r6, #1
 8001996:	e7ed      	b.n	8001974 <u8g_draw_glyph90+0x72>
      iy+=8;
    }
    ix--;
 8001998:	3f01      	subs	r7, #1
 800199a:	186d      	adds	r5, r5, r1
 800199c:	b2ff      	uxtb	r7, r7
 800199e:	e7e5      	b.n	800196c <u8g_draw_glyph90+0x6a>
  }
  return u8g->glyph_dx;
 80019a0:	7f20      	ldrb	r0, [r4, #28]
 80019a2:	b240      	sxtb	r0, r0
}
 80019a4:	b007      	add	sp, #28
 80019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a8 <u8g_DrawGlyph90>:

int8_t u8g_DrawGlyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	1c05      	adds	r5, r0, #0
 80019ac:	1c1e      	adds	r6, r3, #0
  x -= u8g->font_calc_vref(u8g);
 80019ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80019b0:	1c17      	adds	r7, r2, #0
 80019b2:	1c0c      	adds	r4, r1, #0
  x -= u8g->font_calc_vref(u8g);
 80019b4:	4798      	blx	r3
 80019b6:	1a21      	subs	r1, r4, r0
  return u8g_draw_glyph90(u8g, x, y, encoding);
 80019b8:	1c3a      	adds	r2, r7, #0
 80019ba:	1c28      	adds	r0, r5, #0
 80019bc:	1c33      	adds	r3, r6, #0
 80019be:	b2c9      	uxtb	r1, r1
 80019c0:	f7ff ff9f 	bl	8001902 <u8g_draw_glyph90>
}
 80019c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019c6 <u8g_draw_glyph180>:


int8_t u8g_draw_glyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80019c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c8:	1c0e      	adds	r6, r1, #0
 80019ca:	b089      	sub	sp, #36	; 0x24
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80019cc:	1c19      	adds	r1, r3, #0
  return u8g_draw_glyph90(u8g, x, y, encoding);
}


int8_t u8g_draw_glyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80019ce:	1c05      	adds	r5, r0, #0
 80019d0:	1c17      	adds	r7, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80019d2:	f7ff fe75 	bl	80016c0 <u8g_GetGlyph>
 80019d6:	9003      	str	r0, [sp, #12]
    if ( g == NULL  )
 80019d8:	2800      	cmp	r0, #0
 80019da:	d053      	beq.n	8001a84 <u8g_draw_glyph180+0xbe>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80019dc:	68ab      	ldr	r3, [r5, #8]
 80019de:	7818      	ldrb	r0, [r3, #0]
 80019e0:	f7ff fe0b 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 80019e4:	1c6b      	adds	r3, r5, #1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80019e6:	9006      	str	r0, [sp, #24]
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 80019e8:	7fdb      	ldrb	r3, [r3, #31]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80019ea:	7fec      	ldrb	r4, [r5, #31]
  h = u8g->glyph_height;
 80019ec:	9304      	str	r3, [sp, #16]
  
  x -= u8g->glyph_x;
 80019ee:	7f6b      	ldrb	r3, [r5, #29]
  y += u8g->glyph_y;
  y++;
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
 80019f0:	1c28      	adds	r0, r5, #0
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x -= u8g->glyph_x;
 80019f2:	1af6      	subs	r6, r6, r3
 80019f4:	b2f3      	uxtb	r3, r6
 80019f6:	9305      	str	r3, [sp, #20]
 80019f8:	7fab      	ldrb	r3, [r5, #30]
 80019fa:	3301      	adds	r3, #1
  y += u8g->glyph_y;
  y++;
 80019fc:	18ff      	adds	r7, r7, r3
 80019fe:	9b05      	ldr	r3, [sp, #20]
 8001a00:	b2ff      	uxtb	r7, r7
 8001a02:	1b19      	subs	r1, r3, r4
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
 8001a04:	9b04      	ldr	r3, [sp, #16]
 8001a06:	3101      	adds	r1, #1
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	b2c9      	uxtb	r1, r1
 8001a0c:	1c3a      	adds	r2, r7, #0
 8001a0e:	1c23      	adds	r3, r4, #0
 8001a10:	f7ff fda2 	bl	8001558 <u8g_IsBBXIntersection>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d034      	beq.n	8001a82 <u8g_draw_glyph180+0xbc>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001a18:	9a06      	ldr	r2, [sp, #24]
 8001a1a:	9b03      	ldr	r3, [sp, #12]
 8001a1c:	4694      	mov	ip, r2
 8001a1e:	4463      	add	r3, ip
 8001a20:	9303      	str	r3, [sp, #12]
 8001a22:	9b04      	ldr	r3, [sp, #16]
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 8001a24:	3407      	adds	r4, #7
 8001a26:	3b01      	subs	r3, #1
  w /= 8;
  
  iy = y;
  iy += h;
  iy--;
 8001a28:	18ff      	adds	r7, r7, r3
 8001a2a:	9b04      	ldr	r3, [sp, #16]
 8001a2c:	b2ff      	uxtb	r7, r7
 8001a2e:	1afb      	subs	r3, r7, r3
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 8001a30:	b2e6      	uxtb	r6, r4
 8001a32:	b2db      	uxtb	r3, r3
  w /= 8;
 8001a34:	08f6      	lsrs	r6, r6, #3
 8001a36:	9306      	str	r3, [sp, #24]
  
  iy = y;
  iy += h;
  iy--;
  for( j = 0; j < h; j++ )
 8001a38:	9b06      	ldr	r3, [sp, #24]
 8001a3a:	429f      	cmp	r7, r3
 8001a3c:	d021      	beq.n	8001a82 <u8g_draw_glyph180+0xbc>
 8001a3e:	466b      	mov	r3, sp
 8001a40:	7b1b      	ldrb	r3, [r3, #12]
 8001a42:	9a05      	ldr	r2, [sp, #20]
 8001a44:	9304      	str	r3, [sp, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	18d3      	adds	r3, r2, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	9c03      	ldr	r4, [sp, #12]
 8001a4e:	9307      	str	r3, [sp, #28]
 8001a50:	b2e3      	uxtb	r3, r4
 8001a52:	9a07      	ldr	r2, [sp, #28]
 8001a54:	00d9      	lsls	r1, r3, #3
 8001a56:	1a51      	subs	r1, r2, r1
 8001a58:	9a04      	ldr	r2, [sp, #16]
 8001a5a:	b2c9      	uxtb	r1, r1
 8001a5c:	1a9b      	subs	r3, r3, r2
  {
    ix = x;
    for( i = 0; i < w; i++ )
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	42b3      	cmp	r3, r6
 8001a62:	d208      	bcs.n	8001a76 <u8g_draw_glyph180+0xb0>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 2, u8g_pgm_read(data));
 8001a64:	7823      	ldrb	r3, [r4, #0]
 8001a66:	1c28      	adds	r0, r5, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	1c3a      	adds	r2, r7, #0
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f000 ffb6 	bl	80029de <u8g_Draw8Pixel>
      data++;
 8001a72:	3401      	adds	r4, #1
 8001a74:	e7ec      	b.n	8001a50 <u8g_draw_glyph180+0x8a>
 8001a76:	9b03      	ldr	r3, [sp, #12]
      ix-=8;
    }
    iy--;
 8001a78:	3f01      	subs	r7, #1
 8001a7a:	199b      	adds	r3, r3, r6
 8001a7c:	9303      	str	r3, [sp, #12]
 8001a7e:	b2ff      	uxtb	r7, r7
 8001a80:	e7da      	b.n	8001a38 <u8g_draw_glyph180+0x72>
  }
  return u8g->glyph_dx;
 8001a82:	7f28      	ldrb	r0, [r5, #28]
 8001a84:	b240      	sxtb	r0, r0
}
 8001a86:	b009      	add	sp, #36	; 0x24
 8001a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a8a <u8g_DrawGlyph180>:

int8_t u8g_DrawGlyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8c:	1c05      	adds	r5, r0, #0
 8001a8e:	1c1e      	adds	r6, r3, #0
  y -= u8g->font_calc_vref(u8g);
 8001a90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001a92:	1c0f      	adds	r7, r1, #0
 8001a94:	1c14      	adds	r4, r2, #0
  y -= u8g->font_calc_vref(u8g);
 8001a96:	4798      	blx	r3
 8001a98:	1a22      	subs	r2, r4, r0
  return u8g_draw_glyph180(u8g, x, y, encoding);
 8001a9a:	1c39      	adds	r1, r7, #0
 8001a9c:	1c28      	adds	r0, r5, #0
 8001a9e:	1c33      	adds	r3, r6, #0
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f7ff ff90 	bl	80019c6 <u8g_draw_glyph180>
}
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001aa8 <u8g_draw_glyph270>:


int8_t u8g_draw_glyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	1c0e      	adds	r6, r1, #0
 8001aac:	b089      	sub	sp, #36	; 0x24
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001aae:	1c19      	adds	r1, r3, #0
  return u8g_draw_glyph180(u8g, x, y, encoding);
}


int8_t u8g_draw_glyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001ab0:	1c05      	adds	r5, r0, #0
 8001ab2:	1c17      	adds	r7, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001ab4:	f7ff fe04 	bl	80016c0 <u8g_GetGlyph>
 8001ab8:	9003      	str	r0, [sp, #12]
    if ( g == NULL  )
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d04f      	beq.n	8001b5e <u8g_draw_glyph270+0xb6>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001abe:	68ab      	ldr	r3, [r5, #8]
 8001ac0:	7818      	ldrb	r0, [r3, #0]
 8001ac2:	f7ff fd9a 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8001ac6:	1c6b      	adds	r3, r5, #1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001ac8:	9006      	str	r0, [sp, #24]
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8001aca:	7fdb      	ldrb	r3, [r3, #31]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8001acc:	7fec      	ldrb	r4, [r5, #31]
  h = u8g->glyph_height;
 8001ace:	9304      	str	r3, [sp, #16]
  
  x -= u8g->glyph_y;
  x--;
  y -= u8g->glyph_x;
 8001ad0:	7f6b      	ldrb	r3, [r5, #29]
 8001ad2:	9a04      	ldr	r2, [sp, #16]
 8001ad4:	1aff      	subs	r7, r7, r3
 8001ad6:	b2fb      	uxtb	r3, r7
 8001ad8:	9305      	str	r3, [sp, #20]
 8001ada:	7fab      	ldrb	r3, [r5, #30]
  
  if ( u8g_IsBBXIntersection(u8g, x-(h-1), y-(w-1), h, w) == 0 )
 8001adc:	9400      	str	r4, [sp, #0]
 8001ade:	18d3      	adds	r3, r2, r3
 8001ae0:	1af6      	subs	r6, r6, r3
 8001ae2:	9b05      	ldr	r3, [sp, #20]
 8001ae4:	b2f6      	uxtb	r6, r6
 8001ae6:	1b1a      	subs	r2, r3, r4
 8001ae8:	3201      	adds	r2, #1
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	1c28      	adds	r0, r5, #0
 8001aee:	1c31      	adds	r1, r6, #0
 8001af0:	9b04      	ldr	r3, [sp, #16]
 8001af2:	f7ff fd31 	bl	8001558 <u8g_IsBBXIntersection>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d030      	beq.n	8001b5c <u8g_draw_glyph270+0xb4>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001afa:	9a06      	ldr	r2, [sp, #24]
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	4694      	mov	ip, r2
 8001b00:	4463      	add	r3, ip
 8001b02:	9303      	str	r3, [sp, #12]
 8001b04:	9b04      	ldr	r3, [sp, #16]
  if ( u8g_IsBBXIntersection(u8g, x-(h-1), y-(w-1), h, w) == 0 )
    return u8g->glyph_dx;
  

  /* now, w is reused as bytes per line */
  w += 7;
 8001b06:	3407      	adds	r4, #7
 8001b08:	18f3      	adds	r3, r6, r3
 8001b0a:	b2e7      	uxtb	r7, r4
 8001b0c:	b2db      	uxtb	r3, r3
  w /= 8;  
 8001b0e:	08ff      	lsrs	r7, r7, #3
 8001b10:	9306      	str	r3, [sp, #24]
      
  ix = x;
  ix -= h;
  ix++;
  
  for( j = 0; j < h; j++ )
 8001b12:	9b06      	ldr	r3, [sp, #24]
 8001b14:	429e      	cmp	r6, r3
 8001b16:	d021      	beq.n	8001b5c <u8g_draw_glyph270+0xb4>
 8001b18:	466b      	mov	r3, sp
 8001b1a:	7b1b      	ldrb	r3, [r3, #12]
 8001b1c:	9a05      	ldr	r2, [sp, #20]
 8001b1e:	9304      	str	r3, [sp, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	18d3      	adds	r3, r2, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	9c03      	ldr	r4, [sp, #12]
 8001b28:	9307      	str	r3, [sp, #28]
 8001b2a:	b2e3      	uxtb	r3, r4
 8001b2c:	9907      	ldr	r1, [sp, #28]
 8001b2e:	00da      	lsls	r2, r3, #3
 8001b30:	1a8a      	subs	r2, r1, r2
 8001b32:	9904      	ldr	r1, [sp, #16]
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	1a5b      	subs	r3, r3, r1
  {
    iy = y;
    for( i = 0; i < w; i++ )
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	42bb      	cmp	r3, r7
 8001b3c:	d208      	bcs.n	8001b50 <u8g_draw_glyph270+0xa8>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 3, u8g_pgm_read(data));
 8001b3e:	7823      	ldrb	r3, [r4, #0]
 8001b40:	1c28      	adds	r0, r5, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	1c31      	adds	r1, r6, #0
 8001b46:	2303      	movs	r3, #3
 8001b48:	f000 ff49 	bl	80029de <u8g_Draw8Pixel>
      data++;
 8001b4c:	3401      	adds	r4, #1
 8001b4e:	e7ec      	b.n	8001b2a <u8g_draw_glyph270+0x82>
 8001b50:	9b03      	ldr	r3, [sp, #12]
      iy-=8;
    }
    ix++;
 8001b52:	3601      	adds	r6, #1
 8001b54:	19db      	adds	r3, r3, r7
 8001b56:	9303      	str	r3, [sp, #12]
 8001b58:	b2f6      	uxtb	r6, r6
 8001b5a:	e7da      	b.n	8001b12 <u8g_draw_glyph270+0x6a>
  }
  return u8g->glyph_dx;
 8001b5c:	7f28      	ldrb	r0, [r5, #28]
 8001b5e:	b240      	sxtb	r0, r0
}
 8001b60:	b009      	add	sp, #36	; 0x24
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b64 <u8g_DrawGlyph270>:

int8_t u8g_DrawGlyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b66:	1c05      	adds	r5, r0, #0
 8001b68:	1c1e      	adds	r6, r3, #0
  x += u8g->font_calc_vref(u8g);
 8001b6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001b6c:	1c17      	adds	r7, r2, #0
 8001b6e:	1c0c      	adds	r4, r1, #0
  x += u8g->font_calc_vref(u8g);
 8001b70:	4798      	blx	r3
 8001b72:	1901      	adds	r1, r0, r4
  return u8g_draw_glyph270(u8g, x, y, encoding);
 8001b74:	1c3a      	adds	r2, r7, #0
 8001b76:	1c28      	adds	r0, r5, #0
 8001b78:	1c33      	adds	r3, r6, #0
 8001b7a:	b2c9      	uxtb	r1, r1
 8001b7c:	f7ff ff94 	bl	8001aa8 <u8g_draw_glyph270>
}
 8001b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b82 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b84:	1c07      	adds	r7, r0, #0
 8001b86:	1c1e      	adds	r6, r3, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b8a:	1c15      	adds	r5, r2, #0
 8001b8c:	1c0c      	adds	r4, r1, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8001b8e:	4798      	blx	r3
 8001b90:	1945      	adds	r5, r0, r5
 8001b92:	b2eb      	uxtb	r3, r5
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001b94:	2500      	movs	r5, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8001b96:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8001b98:	7833      	ldrb	r3, [r6, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <u8g_DrawStr+0x34>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 8001b9e:	1c21      	adds	r1, r4, #0
 8001ba0:	1c38      	adds	r0, r7, #0
 8001ba2:	9a01      	ldr	r2, [sp, #4]
 8001ba4:	f7ff fe53 	bl	800184e <u8g_draw_glyph>
    x += d;
 8001ba8:	b2c0      	uxtb	r0, r0
 8001baa:	1904      	adds	r4, r0, r4
    t += d;
 8001bac:	1945      	adds	r5, r0, r5
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    x += d;
 8001bae:	b2e4      	uxtb	r4, r4
    t += d;
 8001bb0:	b2ed      	uxtb	r5, r5
    s++;
 8001bb2:	3601      	adds	r6, #1
 8001bb4:	e7f0      	b.n	8001b98 <u8g_DrawStr+0x16>
  }
  return t;
}
 8001bb6:	1c28      	adds	r0, r5, #0
 8001bb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001bba <u8g_DrawStr90>:

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bbc:	1c07      	adds	r7, r0, #0
 8001bbe:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001bc2:	1c0d      	adds	r5, r1, #0
 8001bc4:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8001bc6:	4798      	blx	r3
 8001bc8:	1a2d      	subs	r5, r5, r0
 8001bca:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001bcc:	2500      	movs	r5, #0
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8001bce:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001bd0:	7833      	ldrb	r3, [r6, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <u8g_DrawStr90+0x34>
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
 8001bd6:	1c22      	adds	r2, r4, #0
 8001bd8:	1c38      	adds	r0, r7, #0
 8001bda:	9901      	ldr	r1, [sp, #4]
 8001bdc:	f7ff fe91 	bl	8001902 <u8g_draw_glyph90>
    y += d;
 8001be0:	b2c0      	uxtb	r0, r0
 8001be2:	1904      	adds	r4, r0, r4
    t += d;
 8001be4:	1945      	adds	r5, r0, r5
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
    y += d;
 8001be6:	b2e4      	uxtb	r4, r4
    t += d;
 8001be8:	b2ed      	uxtb	r5, r5
    s++;
 8001bea:	3601      	adds	r6, #1
 8001bec:	e7f0      	b.n	8001bd0 <u8g_DrawStr90+0x16>
  }
  return t;
}
 8001bee:	1c28      	adds	r0, r5, #0
 8001bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001bf2 <u8g_DrawStr180>:

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bf4:	1c07      	adds	r7, r0, #0
 8001bf6:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001bfa:	1c15      	adds	r5, r2, #0
 8001bfc:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001bfe:	4798      	blx	r3
 8001c00:	1a2d      	subs	r5, r5, r0
 8001c02:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001c04:	2500      	movs	r5, #0
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001c06:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8001c08:	7833      	ldrb	r3, [r6, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <u8g_DrawStr180+0x34>
  {
    d = u8g_draw_glyph180(u8g, x, y, *s);
 8001c0e:	1c21      	adds	r1, r4, #0
 8001c10:	1c38      	adds	r0, r7, #0
 8001c12:	9a01      	ldr	r2, [sp, #4]
 8001c14:	f7ff fed7 	bl	80019c6 <u8g_draw_glyph180>
    x -= d;
 8001c18:	b2c0      	uxtb	r0, r0
 8001c1a:	1a24      	subs	r4, r4, r0
    t += d;
 8001c1c:	1945      	adds	r5, r0, r5
  y -= u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph180(u8g, x, y, *s);
    x -= d;
 8001c1e:	b2e4      	uxtb	r4, r4
    t += d;
 8001c20:	b2ed      	uxtb	r5, r5
    s++;
 8001c22:	3601      	adds	r6, #1
 8001c24:	e7f0      	b.n	8001c08 <u8g_DrawStr180+0x16>
  }
  return t;
}
 8001c26:	1c28      	adds	r0, r5, #0
 8001c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001c2a <u8g_DrawStr270>:

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c2c:	1c07      	adds	r7, r0, #0
 8001c2e:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001c32:	1c0d      	adds	r5, r1, #0
 8001c34:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001c36:	4798      	blx	r3
 8001c38:	1945      	adds	r5, r0, r5
 8001c3a:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001c3c:	2500      	movs	r5, #0
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001c3e:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001c40:	7833      	ldrb	r3, [r6, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <u8g_DrawStr270+0x34>
  {
    d = u8g_draw_glyph270(u8g, x, y, *s);
 8001c46:	1c22      	adds	r2, r4, #0
 8001c48:	1c38      	adds	r0, r7, #0
 8001c4a:	9901      	ldr	r1, [sp, #4]
 8001c4c:	f7ff ff2c 	bl	8001aa8 <u8g_draw_glyph270>
    y -= d;
 8001c50:	b2c0      	uxtb	r0, r0
 8001c52:	1a24      	subs	r4, r4, r0
    t += d;
 8001c54:	1945      	adds	r5, r0, r5
  x += u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_draw_glyph270(u8g, x, y, *s);
    y -= d;
 8001c56:	b2e4      	uxtb	r4, r4
    t += d;
 8001c58:	b2ed      	uxtb	r5, r5
    s++;
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7f0      	b.n	8001c40 <u8g_DrawStr270+0x16>
  }
  return t;
}
 8001c5e:	1c28      	adds	r0, r5, #0
 8001c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001c62 <u8g_DrawStrDir>:

u8g_uint_t u8g_DrawStrDir(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
 8001c62:	b510      	push	{r4, lr}
 8001c64:	1c04      	adds	r4, r0, #0
    case 2:
      return u8g_DrawStr180(u8g, x, y, s);
    case 3:
      return u8g_DrawStr270(u8g, x, y, s);
  }
  return 0;
 8001c66:	2000      	movs	r0, #0
  return t;
}

u8g_uint_t u8g_DrawStrDir(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  switch(dir)
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d817      	bhi.n	8001c9c <u8g_DrawStrDir+0x3a>
 8001c6c:	1c18      	adds	r0, r3, #0
 8001c6e:	f001 f9e1 	bl	8003034 <__gnu_thumb1_case_uqi>
 8001c72:	0702      	.short	0x0702
 8001c74:	110c      	.short	0x110c
  {
    case 0:
      return u8g_DrawStr(u8g, x, y, s);
 8001c76:	1c20      	adds	r0, r4, #0
 8001c78:	9b02      	ldr	r3, [sp, #8]
 8001c7a:	f7ff ff82 	bl	8001b82 <u8g_DrawStr>
 8001c7e:	e00d      	b.n	8001c9c <u8g_DrawStrDir+0x3a>
    case 1:
      return u8g_DrawStr90(u8g, x, y, s);
 8001c80:	1c20      	adds	r0, r4, #0
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	f7ff ff99 	bl	8001bba <u8g_DrawStr90>
 8001c88:	e008      	b.n	8001c9c <u8g_DrawStrDir+0x3a>
    case 2:
      return u8g_DrawStr180(u8g, x, y, s);
 8001c8a:	1c20      	adds	r0, r4, #0
 8001c8c:	9b02      	ldr	r3, [sp, #8]
 8001c8e:	f7ff ffb0 	bl	8001bf2 <u8g_DrawStr180>
 8001c92:	e003      	b.n	8001c9c <u8g_DrawStrDir+0x3a>
    case 3:
      return u8g_DrawStr270(u8g, x, y, s);
 8001c94:	1c20      	adds	r0, r4, #0
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	f7ff ffc7 	bl	8001c2a <u8g_DrawStr270>
  }
  return 0;
}
 8001c9c:	bd10      	pop	{r4, pc}

08001c9e <u8g_DrawStrP>:

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ca0:	1c07      	adds	r7, r0, #0
 8001ca2:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return 0;
}

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001ca6:	1c15      	adds	r5, r2, #0
 8001ca8:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8001caa:	4798      	blx	r3
 8001cac:	1945      	adds	r5, r0, r5
 8001cae:	b2eb      	uxtb	r3, r5
  return 0;
}

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001cb0:	2500      	movs	r5, #0
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8001cb2:	9301      	str	r3, [sp, #4]
  
  for(;;)
  {
    c = u8g_pgm_read(s);
 8001cb4:	7833      	ldrb	r3, [r6, #0]
    if ( c == '\0' )
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <u8g_DrawStrP+0x34>
      break;
    d = u8g_draw_glyph(u8g, x, y, c);
 8001cba:	1c21      	adds	r1, r4, #0
 8001cbc:	1c38      	adds	r0, r7, #0
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	f7ff fdc5 	bl	800184e <u8g_draw_glyph>
    x += d;
 8001cc4:	b2c0      	uxtb	r0, r0
 8001cc6:	1904      	adds	r4, r0, r4
    t += d;
 8001cc8:	1945      	adds	r5, r0, r5
  {
    c = u8g_pgm_read(s);
    if ( c == '\0' )
      break;
    d = u8g_draw_glyph(u8g, x, y, c);
    x += d;
 8001cca:	b2e4      	uxtb	r4, r4
    t += d;
 8001ccc:	b2ed      	uxtb	r5, r5
    s++;
 8001cce:	3601      	adds	r6, #1
  }
 8001cd0:	e7f0      	b.n	8001cb4 <u8g_DrawStrP+0x16>
  return t;
}
 8001cd2:	1c28      	adds	r0, r5, #0
 8001cd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001cd6 <u8g_DrawStr90P>:

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cd8:	1c07      	adds	r7, r0, #0
 8001cda:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001cde:	1c0d      	adds	r5, r1, #0
 8001ce0:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8001ce2:	4798      	blx	r3
 8001ce4:	1a2d      	subs	r5, r5, r0
 8001ce6:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001ce8:	2500      	movs	r5, #0
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8001cea:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001cec:	7833      	ldrb	r3, [r6, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <u8g_DrawStr90P+0x34>
  {
    d = u8g_DrawGlyph90(u8g, x, y, u8g_pgm_read(s));
 8001cf2:	1c22      	adds	r2, r4, #0
 8001cf4:	1c38      	adds	r0, r7, #0
 8001cf6:	9901      	ldr	r1, [sp, #4]
 8001cf8:	f7ff fe56 	bl	80019a8 <u8g_DrawGlyph90>
    y += d;
 8001cfc:	b2c0      	uxtb	r0, r0
 8001cfe:	1904      	adds	r4, r0, r4
    t += d;
 8001d00:	1945      	adds	r5, r0, r5
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_DrawGlyph90(u8g, x, y, u8g_pgm_read(s));
    y += d;
 8001d02:	b2e4      	uxtb	r4, r4
    t += d;
 8001d04:	b2ed      	uxtb	r5, r5
    s++;
 8001d06:	3601      	adds	r6, #1
 8001d08:	e7f0      	b.n	8001cec <u8g_DrawStr90P+0x16>
  }
  return t;
}
 8001d0a:	1c28      	adds	r0, r5, #0
 8001d0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001d0e <u8g_DrawStr180P>:

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d10:	1c07      	adds	r7, r0, #0
 8001d12:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001d16:	1c15      	adds	r5, r2, #0
 8001d18:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001d1a:	4798      	blx	r3
 8001d1c:	1a2d      	subs	r5, r5, r0
 8001d1e:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001d20:	2500      	movs	r5, #0
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001d22:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8001d24:	7833      	ldrb	r3, [r6, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <u8g_DrawStr180P+0x34>
  {
    d = u8g_DrawGlyph180(u8g, x, y, u8g_pgm_read(s));
 8001d2a:	1c21      	adds	r1, r4, #0
 8001d2c:	1c38      	adds	r0, r7, #0
 8001d2e:	9a01      	ldr	r2, [sp, #4]
 8001d30:	f7ff feab 	bl	8001a8a <u8g_DrawGlyph180>
    x -= d;
 8001d34:	b2c0      	uxtb	r0, r0
 8001d36:	1a24      	subs	r4, r4, r0
    t += d;
 8001d38:	1945      	adds	r5, r0, r5
  y -= u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_DrawGlyph180(u8g, x, y, u8g_pgm_read(s));
    x -= d;
 8001d3a:	b2e4      	uxtb	r4, r4
    t += d;
 8001d3c:	b2ed      	uxtb	r5, r5
    s++;
 8001d3e:	3601      	adds	r6, #1
 8001d40:	e7f0      	b.n	8001d24 <u8g_DrawStr180P+0x16>
  }
  return t;
}
 8001d42:	1c28      	adds	r0, r5, #0
 8001d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001d46 <u8g_DrawStr270P>:

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d48:	1c07      	adds	r7, r0, #0
 8001d4a:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001d4e:	1c0d      	adds	r5, r1, #0
 8001d50:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001d52:	4798      	blx	r3
 8001d54:	1945      	adds	r5, r0, r5
 8001d56:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001d58:	2500      	movs	r5, #0
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001d5a:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001d5c:	7833      	ldrb	r3, [r6, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <u8g_DrawStr270P+0x34>
  {
    d = u8g_DrawGlyph270(u8g, x, y, u8g_pgm_read(s));
 8001d62:	1c22      	adds	r2, r4, #0
 8001d64:	1c38      	adds	r0, r7, #0
 8001d66:	9901      	ldr	r1, [sp, #4]
 8001d68:	f7ff fefc 	bl	8001b64 <u8g_DrawGlyph270>
    y -= d;
 8001d6c:	b2c0      	uxtb	r0, r0
 8001d6e:	1a24      	subs	r4, r4, r0
    t += d;
 8001d70:	1945      	adds	r5, r0, r5
  x += u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_DrawGlyph270(u8g, x, y, u8g_pgm_read(s));
    y -= d;
 8001d72:	b2e4      	uxtb	r4, r4
    t += d;
 8001d74:	b2ed      	uxtb	r5, r5
    s++;
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7f0      	b.n	8001d5c <u8g_DrawStr270P+0x16>
  }
  return t;
}
 8001d7a:	1c28      	adds	r0, r5, #0
 8001d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001d7e <u8g_DrawStrFontBBX>:

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
 8001d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d80:	1c1e      	adds	r6, r3, #0
 8001d82:	1c05      	adds	r5, r0, #0
 8001d84:	1c17      	adds	r7, r2, #0
 8001d86:	1c0c      	adds	r4, r1, #0
  x -= u8g_GetFontBBXOffX(u8g);
 8001d88:	f7ff fc8f 	bl	80016aa <u8g_GetFontBBXOffX>
 8001d8c:	1a24      	subs	r4, r4, r0
  y += u8g_GetFontBBXOffY(u8g);
 8001d8e:	1c28      	adds	r0, r5, #0
 8001d90:	f7ff fc8f 	bl	80016b2 <u8g_GetFontBBXOffY>
  return u8g_DrawStrDir(u8g, x, y, dir, s);
 8001d94:	9b08      	ldr	r3, [sp, #32]
}

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  x -= u8g_GetFontBBXOffX(u8g);
  y += u8g_GetFontBBXOffY(u8g);
 8001d96:	183a      	adds	r2, r7, r0
  return t;
}

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  x -= u8g_GetFontBBXOffX(u8g);
 8001d98:	b2e4      	uxtb	r4, r4
  y += u8g_GetFontBBXOffY(u8g);
  return u8g_DrawStrDir(u8g, x, y, dir, s);
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	1c28      	adds	r0, r5, #0
 8001d9e:	1c33      	adds	r3, r6, #0
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	1c21      	adds	r1, r4, #0
 8001da4:	f7ff ff5d 	bl	8001c62 <u8g_DrawStrDir>
}
 8001da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001daa <u8g_DrawGlyphFontBBX>:

/* still used by picgen.c, dir argument is ignored */
int8_t u8g_DrawGlyphFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t encoding)
{
 8001daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dac:	ab06      	add	r3, sp, #24
 8001dae:	781e      	ldrb	r6, [r3, #0]
 8001db0:	1c05      	adds	r5, r0, #0
 8001db2:	1c17      	adds	r7, r2, #0
 8001db4:	1c0c      	adds	r4, r1, #0
  x -= u8g_GetFontBBXOffX(u8g);
 8001db6:	f7ff fc78 	bl	80016aa <u8g_GetFontBBXOffX>
 8001dba:	1a24      	subs	r4, r4, r0
  y += u8g_GetFontBBXOffY(u8g);
 8001dbc:	1c28      	adds	r0, r5, #0
 8001dbe:	f7ff fc78 	bl	80016b2 <u8g_GetFontBBXOffY>
}

/* still used by picgen.c, dir argument is ignored */
int8_t u8g_DrawGlyphFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t encoding)
{
  x -= u8g_GetFontBBXOffX(u8g);
 8001dc2:	b2e4      	uxtb	r4, r4
  y += u8g_GetFontBBXOffY(u8g);
 8001dc4:	183a      	adds	r2, r7, r0
  u8g_draw_glyph(u8g, x, y, encoding);
 8001dc6:	1c33      	adds	r3, r6, #0
 8001dc8:	1c28      	adds	r0, r5, #0
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	1c21      	adds	r1, r4, #0
 8001dce:	f7ff fd3e 	bl	800184e <u8g_draw_glyph>
  return 0;
}
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001dd6 <u8g_UpdateRefHeight>:
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
  uint16_t ls;
  if ( u8g->font == NULL )
 8001dd6:	6883      	ldr	r3, [r0, #8]

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8001dd8:	b510      	push	{r4, lr}
  uint16_t ls;
  if ( u8g->font == NULL )
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d025      	beq.n	8001e2a <u8g_UpdateRefHeight+0x54>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8001dde:	1c02      	adds	r2, r0, #0
 8001de0:	1c01      	adds	r1, r0, #0
 8001de2:	3228      	adds	r2, #40	; 0x28
 8001de4:	7814      	ldrb	r4, [r2, #0]
 8001de6:	3129      	adds	r1, #41	; 0x29
 8001de8:	3202      	adds	r2, #2
 8001dea:	2c00      	cmp	r4, #0
 8001dec:	d103      	bne.n	8001df6 <u8g_UpdateRefHeight+0x20>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8001dee:	795c      	ldrb	r4, [r3, #5]
 8001df0:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8001df2:	7b1b      	ldrb	r3, [r3, #12]
 8001df4:	e008      	b.n	8001e08 <u8g_UpdateRefHeight+0x32>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d103      	bne.n	8001e02 <u8g_UpdateRefHeight+0x2c>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8001dfa:	7bdc      	ldrb	r4, [r3, #15]
 8001dfc:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8001dfe:	7c1b      	ldrb	r3, [r3, #16]
 8001e00:	e002      	b.n	8001e08 <u8g_UpdateRefHeight+0x32>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8001e02:	7b5c      	ldrb	r4, [r3, #13]
 8001e04:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8001e06:	7b9b      	ldrb	r3, [r3, #14]
 8001e08:	7013      	strb	r3, [r2, #0]
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	56cb      	ldrsb	r3, [r1, r3]
 8001e10:	b252      	sxtb	r2, r2
 8001e12:	1a9b      	subs	r3, r3, r2
  if ( u8g->font_line_spacing_factor != 64 )
 8001e14:	1c02      	adds	r2, r0, #0
 8001e16:	322b      	adds	r2, #43	; 0x2b
 8001e18:	7812      	ldrb	r2, [r2, #0]
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8001e1a:	b29b      	uxth	r3, r3
  if ( u8g->font_line_spacing_factor != 64 )
 8001e1c:	2a40      	cmp	r2, #64	; 0x40
 8001e1e:	d002      	beq.n	8001e26 <u8g_UpdateRefHeight+0x50>
  {
    ls &= 255;
 8001e20:	b2db      	uxtb	r3, r3
    ls *= u8g->font_line_spacing_factor;
    ls >>= 6;
 8001e22:	4353      	muls	r3, r2
 8001e24:	099b      	lsrs	r3, r3, #6
  }
  u8g->line_spacing = ls;
 8001e26:	302c      	adds	r0, #44	; 0x2c
 8001e28:	7003      	strb	r3, [r0, #0]
}
 8001e2a:	bd10      	pop	{r4, pc}

08001e2c <u8g_SetFontRefHeightText>:

void u8g_SetFontRefHeightText(u8g_t *u8g)
{
 8001e2c:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
 8001e2e:	1c03      	adds	r3, r0, #0
 8001e30:	2200      	movs	r2, #0
 8001e32:	3328      	adds	r3, #40	; 0x28
 8001e34:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001e36:	f7ff ffce 	bl	8001dd6 <u8g_UpdateRefHeight>
}
 8001e3a:	bd08      	pop	{r3, pc}

08001e3c <u8g_SetFontRefHeightExtendedText>:

void u8g_SetFontRefHeightExtendedText(u8g_t *u8g)
{
 8001e3c:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8001e3e:	1c03      	adds	r3, r0, #0
 8001e40:	2201      	movs	r2, #1
 8001e42:	3328      	adds	r3, #40	; 0x28
 8001e44:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001e46:	f7ff ffc6 	bl	8001dd6 <u8g_UpdateRefHeight>
}
 8001e4a:	bd08      	pop	{r3, pc}

08001e4c <u8g_SetFontRefHeightAll>:


void u8g_SetFontRefHeightAll(u8g_t *u8g)
{
 8001e4c:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_ALL;
 8001e4e:	1c03      	adds	r3, r0, #0
 8001e50:	2202      	movs	r2, #2
 8001e52:	3328      	adds	r3, #40	; 0x28
 8001e54:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001e56:	f7ff ffbe 	bl	8001dd6 <u8g_UpdateRefHeight>
}
 8001e5a:	bd08      	pop	{r3, pc}

08001e5c <u8g_SetFontLineSpacingFactor>:

/* factor = 64: linespaceing == ascent and descent */
void u8g_SetFontLineSpacingFactor(u8g_t *u8g, uint8_t  factor)
{
 8001e5c:	b508      	push	{r3, lr}
  u8g->font_line_spacing_factor = factor;
 8001e5e:	1c03      	adds	r3, r0, #0
 8001e60:	332b      	adds	r3, #43	; 0x2b
 8001e62:	7019      	strb	r1, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001e64:	f7ff ffb7 	bl	8001dd6 <u8g_UpdateRefHeight>
}
 8001e68:	bd08      	pop	{r3, pc}

08001e6a <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8001e6a:	4b01      	ldr	r3, [pc, #4]	; (8001e70 <u8g_SetFontPosBaseline+0x6>)
 8001e6c:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e6e:	4770      	bx	lr
 8001e70:	080015c3 	.word	0x080015c3

08001e74 <u8g_SetFontPosBottom>:
  return (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent);
}

void u8g_SetFontPosBottom(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_bottom;
 8001e74:	4b01      	ldr	r3, [pc, #4]	; (8001e7c <u8g_SetFontPosBottom+0x8>)
 8001e76:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e78:	4770      	bx	lr
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	080015c7 	.word	0x080015c7

08001e80 <u8g_SetFontPosTop>:
  return tmp;
}

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <u8g_SetFontPosTop+0x8>)
 8001e82:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e84:	4770      	bx	lr
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	080015cd 	.word	0x080015cd

08001e8c <u8g_SetFontPosCenter>:
  return tmp;
}

void u8g_SetFontPosCenter(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_center;
 8001e8c:	4b01      	ldr	r3, [pc, #4]	; (8001e94 <u8g_SetFontPosCenter+0x8>)
 8001e8e:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e90:	4770      	bx	lr
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	080015d7 	.word	0x080015d7

08001e98 <u8g_font_calc_str_pixel_width>:

typedef char (*u8g_font_get_char_fn)(const void *s);


u8g_uint_t u8g_font_calc_str_pixel_width(u8g_t *u8g, const char *s, u8g_font_get_char_fn get_char )
{
 8001e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e9a:	1c05      	adds	r5, r0, #0
  uint8_t enc;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  w = 0;
    
  enc = get_char(s);
 8001e9c:	1c08      	adds	r0, r1, #0

typedef char (*u8g_font_get_char_fn)(const void *s);


u8g_uint_t u8g_font_calc_str_pixel_width(u8g_t *u8g, const char *s, u8g_font_get_char_fn get_char )
{
 8001e9e:	1c0f      	adds	r7, r1, #0
 8001ea0:	9201      	str	r2, [sp, #4]
  uint8_t enc;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  w = 0;
    
  enc = get_char(s);
 8001ea2:	4790      	blx	r2
 8001ea4:	1c06      	adds	r6, r0, #0
  
  /* check for empty string, width is already 0 */
  if ( enc == '\0' )
  {
    return w;
 8001ea6:	2000      	movs	r0, #0
  w = 0;
    
  enc = get_char(s);
  
  /* check for empty string, width is already 0 */
  if ( enc == '\0' )
 8001ea8:	4286      	cmp	r6, r0
 8001eaa:	d021      	beq.n	8001ef0 <u8g_font_calc_str_pixel_width+0x58>
    return w;
  }
  
  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  /* if *s is not inside the font, then the cached parameters of the glyph are all zero */
  u8g_GetGlyph(u8g, enc);
 8001eac:	1c28      	adds	r0, r5, #0
 8001eae:	1c31      	adds	r1, r6, #0
 8001eb0:	f7ff fc06 	bl	80016c0 <u8g_GetGlyph>
  /* strlen(s) == 2:       width = - offx(s[0]) + deltax(s[0]) + offx(s[1]) + width(s[1]) */
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  w = -u8g->glyph_x;  
 8001eb4:	7f6c      	ldrb	r4, [r5, #29]
 8001eb6:	4264      	negs	r4, r4
 8001eb8:	b2e4      	uxtb	r4, r4
  for(;;)
  {
    
    /* check and stop if the end of the string is reached */
    s++;
 8001eba:	3701      	adds	r7, #1
    if ( get_char(s) == '\0' )
 8001ebc:	1c38      	adds	r0, r7, #0
 8001ebe:	9b01      	ldr	r3, [sp, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d00b      	beq.n	8001ede <u8g_font_calc_str_pixel_width+0x46>
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8001ec6:	7f28      	ldrb	r0, [r5, #28]
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
 8001ec8:	9b01      	ldr	r3, [sp, #4]
    s++;
    if ( get_char(s) == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8001eca:	1824      	adds	r4, r4, r0
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
 8001ecc:	1c38      	adds	r0, r7, #0
 8001ece:	4798      	blx	r3
 8001ed0:	1c06      	adds	r6, r0, #0
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, enc);
 8001ed2:	1c28      	adds	r0, r5, #0
 8001ed4:	1c31      	adds	r1, r6, #0
    s++;
    if ( get_char(s) == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8001ed6:	b2e4      	uxtb	r4, r4
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, enc);
 8001ed8:	f7ff fbf2 	bl	80016c0 <u8g_GetGlyph>
  }
 8001edc:	e7ed      	b.n	8001eba <u8g_font_calc_str_pixel_width+0x22>
  
  /* finally calculate the width of the last char */
  /* here is another exception, if the last char is a black, use the dx value instead */
  if ( enc != ' ' )
 8001ede:	2e20      	cmp	r6, #32
 8001ee0:	d003      	beq.n	8001eea <u8g_font_calc_str_pixel_width+0x52>
 8001ee2:	7f68      	ldrb	r0, [r5, #29]
 8001ee4:	7feb      	ldrb	r3, [r5, #31]
 8001ee6:	18c0      	adds	r0, r0, r3
 8001ee8:	e000      	b.n	8001eec <u8g_font_calc_str_pixel_width+0x54>
    w += u8g->glyph_width;
    w += u8g->glyph_x;
  }
  else
  {
    w += u8g->glyph_dx;
 8001eea:	7f28      	ldrb	r0, [r5, #28]
 8001eec:	1824      	adds	r4, r4, r0
 8001eee:	b2e0      	uxtb	r0, r4
  }
  
  
  return w;
}
 8001ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001ef2 <u8g_GetStrPixelWidth>:

u8g_uint_t u8g_GetStrPixelWidth(u8g_t *u8g, const char *s)
{
 8001ef2:	b508      	push	{r3, lr}
  return u8g_font_calc_str_pixel_width(u8g, s, u8g_font_get_char);
 8001ef4:	4a01      	ldr	r2, [pc, #4]	; (8001efc <u8g_GetStrPixelWidth+0xa>)
 8001ef6:	f7ff ffcf 	bl	8001e98 <u8g_font_calc_str_pixel_width>
}
 8001efa:	bd08      	pop	{r3, pc}
 8001efc:	080015f1 	.word	0x080015f1

08001f00 <u8g_GetStrPixelWidthP>:

u8g_uint_t u8g_GetStrPixelWidthP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001f00:	b508      	push	{r3, lr}
  return u8g_font_calc_str_pixel_width(u8g, (const char *)s, u8g_font_get_charP);
 8001f02:	4a02      	ldr	r2, [pc, #8]	; (8001f0c <u8g_GetStrPixelWidthP+0xc>)
 8001f04:	f7ff ffc8 	bl	8001e98 <u8g_font_calc_str_pixel_width>
}
 8001f08:	bd08      	pop	{r3, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	080015f5 	.word	0x080015f5

08001f10 <u8g_GetStrX>:

int8_t u8g_GetStrX(u8g_t *u8g, const char *s)
{
 8001f10:	b510      	push	{r4, lr}
  u8g_GetGlyph(u8g, *s);
 8001f12:	7809      	ldrb	r1, [r1, #0]
{
  return u8g_font_calc_str_pixel_width(u8g, (const char *)s, u8g_font_get_charP);
}

int8_t u8g_GetStrX(u8g_t *u8g, const char *s)
{
 8001f14:	1c04      	adds	r4, r0, #0
  u8g_GetGlyph(u8g, *s);
 8001f16:	f7ff fbd3 	bl	80016c0 <u8g_GetGlyph>
  return u8g->glyph_x;  
 8001f1a:	201d      	movs	r0, #29
 8001f1c:	5620      	ldrsb	r0, [r4, r0]
}
 8001f1e:	bd10      	pop	{r4, pc}

08001f20 <u8g_GetStrXP>:

int8_t u8g_GetStrXP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001f20:	b510      	push	{r4, lr}
  u8g_GetGlyph(u8g, u8g_pgm_read(s));
 8001f22:	7809      	ldrb	r1, [r1, #0]
  u8g_GetGlyph(u8g, *s);
  return u8g->glyph_x;  
}

int8_t u8g_GetStrXP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001f24:	1c04      	adds	r4, r0, #0
  u8g_GetGlyph(u8g, u8g_pgm_read(s));
 8001f26:	f7ff fbcb 	bl	80016c0 <u8g_GetGlyph>
  return u8g->glyph_x;  
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	5620      	ldrsb	r0, [r4, r0]
}
 8001f2e:	bd10      	pop	{r4, pc}

08001f30 <u8g_GetStrWidth>:

/*========================================================================*/
/* string width calculation */

u8g_uint_t u8g_GetStrWidth(u8g_t *u8g, const char *s)
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	1c06      	adds	r6, r0, #0
 8001f34:	1c0d      	adds	r5, r1, #0
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8001f36:	2400      	movs	r4, #0
  
  for(;;)
  {
    encoding = *s;
 8001f38:	7829      	ldrb	r1, [r5, #0]
    if ( encoding == 0 )
 8001f3a:	2900      	cmp	r1, #0
 8001f3c:	d007      	beq.n	8001f4e <u8g_GetStrWidth+0x1e>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
 8001f3e:	1c30      	adds	r0, r6, #0
 8001f40:	f7ff fbbe 	bl	80016c0 <u8g_GetGlyph>
    w += u8g->glyph_dx;    
 8001f44:	7f33      	ldrb	r3, [r6, #28]
    
    /* goto next char */
    s++;
 8001f46:	3501      	adds	r5, #1
    if ( encoding == 0 )
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
    w += u8g->glyph_dx;    
 8001f48:	18e4      	adds	r4, r4, r3
 8001f4a:	b2e4      	uxtb	r4, r4
    
    /* goto next char */
    s++;
  }
 8001f4c:	e7f4      	b.n	8001f38 <u8g_GetStrWidth+0x8>
  
  return w;  
}
 8001f4e:	1c20      	adds	r0, r4, #0
 8001f50:	bd70      	pop	{r4, r5, r6, pc}

08001f52 <u8g_GetStrWidthP>:


u8g_uint_t u8g_GetStrWidthP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001f52:	b570      	push	{r4, r5, r6, lr}
 8001f54:	1c06      	adds	r6, r0, #0
 8001f56:	1c0d      	adds	r5, r1, #0
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8001f58:	2400      	movs	r4, #0
  
  for(;;)
  {
    encoding = u8g_pgm_read(s);
 8001f5a:	7829      	ldrb	r1, [r5, #0]
    if ( encoding == 0 )
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	d007      	beq.n	8001f70 <u8g_GetStrWidthP+0x1e>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
 8001f60:	1c30      	adds	r0, r6, #0
 8001f62:	f7ff fbad 	bl	80016c0 <u8g_GetGlyph>
    w += u8g->glyph_dx;    
 8001f66:	7f33      	ldrb	r3, [r6, #28]
    
    /* goto next char */
    s++;
 8001f68:	3501      	adds	r5, #1
    if ( encoding == 0 )
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
    w += u8g->glyph_dx;    
 8001f6a:	18e4      	adds	r4, r4, r3
 8001f6c:	b2e4      	uxtb	r4, r4
    
    /* goto next char */
    s++;
  }
 8001f6e:	e7f4      	b.n	8001f5a <u8g_GetStrWidthP+0x8>
  
  return w;  
}
 8001f70:	1c20      	adds	r0, r4, #0
 8001f72:	bd70      	pop	{r4, r5, r6, pc}

08001f74 <u8g_font_box_min>:
  buf->w += u8g->glyph_x;
}

/* calculate minimal box */
void u8g_font_box_min(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 8001f74:	b508      	push	{r3, lr}
  u8g_font_calc_str_min_box(u8g, s, buf);
 8001f76:	f7ff fc18 	bl	80017aa <u8g_font_calc_str_min_box>
}
 8001f7a:	bd08      	pop	{r3, pc}

08001f7c <u8g_font_box_left_gA>:

/* calculate gA box, but do not calculate the overall width */
void u8g_font_box_left_gA(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
  
}
 8001f7c:	4770      	bx	lr

08001f7e <u8g_font_box_all_gA>:

/* calculate gA box, including overall width */
void u8g_font_box_all_gA(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
  
}
 8001f7e:	4770      	bx	lr

08001f80 <u8g_GetStrMinBox>:
  *height -= buf->y_min;
}


void u8g_GetStrMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8001f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  u8g_str_size_t buf;
  
  if ( *s == '\0' )
 8001f82:	780c      	ldrb	r4, [r1, #0]
 8001f84:	2c00      	cmp	r4, #0
 8001f86:	d104      	bne.n	8001f92 <u8g_GetStrMinBox+0x12>
  {
    *width= 0;
 8001f88:	9b08      	ldr	r3, [sp, #32]
 8001f8a:	701c      	strb	r4, [r3, #0]
    *height = 0;
 8001f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f8e:	701c      	strb	r4, [r3, #0]
 8001f90:	e01c      	b.n	8001fcc <u8g_GetStrMinBox+0x4c>
 8001f92:	1c04      	adds	r4, r0, #0
 8001f94:	1c0d      	adds	r5, r1, #0
 8001f96:	1c17      	adds	r7, r2, #0
    return;
  }
  
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8001f98:	466a      	mov	r2, sp
 8001f9a:	1c1e      	adds	r6, r3, #0
 8001f9c:	f7ff fc05 	bl	80017aa <u8g_font_calc_str_min_box>
{
  /*
  u8g_glyph_t g;
  g =
  */  
  u8g_GetGlyph(u8g, *s);
 8001fa0:	7829      	ldrb	r1, [r5, #0]
 8001fa2:	1c20      	adds	r0, r4, #0
 8001fa4:	f7ff fb8c 	bl	80016c0 <u8g_GetGlyph>
  *x += u8g->glyph_x;
 8001fa8:	783a      	ldrb	r2, [r7, #0]
 8001faa:	7f63      	ldrb	r3, [r4, #29]
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	703b      	strb	r3, [r7, #0]
  *width = buf->w;
 8001fb0:	466b      	mov	r3, sp
 8001fb2:	9a08      	ldr	r2, [sp, #32]
 8001fb4:	791b      	ldrb	r3, [r3, #4]
 8001fb6:	7013      	strb	r3, [r2, #0]
  *y -= buf->y_max;
 8001fb8:	466b      	mov	r3, sp
 8001fba:	7832      	ldrb	r2, [r6, #0]
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	7032      	strb	r2, [r6, #0]
  /* +1 because y_max is a height, this compensates the next step */
  //*y += 1;                      
  /* because the reference point is one below the string, this compensates the previous step */
  //*y -= 1;
  *height = buf->y_max;
  *height -= buf->y_min;
 8001fc2:	466a      	mov	r2, sp
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fca:	7013      	strb	r3, [r2, #0]
    return;
  }
  
  u8g_font_calc_str_min_box(u8g, s, &buf);
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
 8001fcc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001fce <u8g_GetStrAMinBox>:


void u8g_GetStrAMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8001fce:	b5f0      	push	{r4, r5, r6, r7, lr}
  u8g_str_size_t buf;
  uint8_t cap_a;
  
  if ( *s == '\0' )
 8001fd0:	780f      	ldrb	r7, [r1, #0]
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}


void u8g_GetStrAMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8001fd2:	b085      	sub	sp, #20
  u8g_str_size_t buf;
  uint8_t cap_a;
  
  if ( *s == '\0' )
 8001fd4:	2f00      	cmp	r7, #0
 8001fd6:	d104      	bne.n	8001fe2 <u8g_GetStrAMinBox+0x14>
  {
    *width= 0;
 8001fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fda:	701f      	strb	r7, [r3, #0]
    *height = 0;
 8001fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fde:	701f      	strb	r7, [r3, #0]
 8001fe0:	e026      	b.n	8002030 <u8g_GetStrAMinBox+0x62>
 8001fe2:	1c1d      	adds	r5, r3, #0
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001fe4:	6883      	ldr	r3, [r0, #8]
 8001fe6:	1c16      	adds	r6, r2, #0
    *height = 0;
    return;
  }
  
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8001fe8:	aa02      	add	r2, sp, #8
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001fea:	795f      	ldrb	r7, [r3, #5]
 8001fec:	9101      	str	r1, [sp, #4]
 8001fee:	1c04      	adds	r4, r0, #0
    *height = 0;
    return;
  }
  
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8001ff0:	f7ff fbdb 	bl	80017aa <u8g_font_calc_str_min_box>
  if ( buf.y_max < cap_a )
 8001ff4:	ab02      	add	r3, sp, #8
 8001ff6:	785b      	ldrb	r3, [r3, #1]
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	42bb      	cmp	r3, r7
 8001ffc:	da01      	bge.n	8002002 <u8g_GetStrAMinBox+0x34>
    buf.y_max = cap_a;
 8001ffe:	ab02      	add	r3, sp, #8
 8002000:	705f      	strb	r7, [r3, #1]
{
  /*
  u8g_glyph_t g;
  g =
  */  
  u8g_GetGlyph(u8g, *s);
 8002002:	9b01      	ldr	r3, [sp, #4]
 8002004:	1c20      	adds	r0, r4, #0
 8002006:	7819      	ldrb	r1, [r3, #0]
 8002008:	f7ff fb5a 	bl	80016c0 <u8g_GetGlyph>
  *x += u8g->glyph_x;
 800200c:	7832      	ldrb	r2, [r6, #0]
 800200e:	7f63      	ldrb	r3, [r4, #29]
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	7033      	strb	r3, [r6, #0]
  *width = buf->w;
 8002014:	ab02      	add	r3, sp, #8
 8002016:	791b      	ldrb	r3, [r3, #4]
 8002018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800201a:	7013      	strb	r3, [r2, #0]
  *y -= buf->y_max;
 800201c:	ab02      	add	r3, sp, #8
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	782a      	ldrb	r2, [r5, #0]
 8002022:	1ad2      	subs	r2, r2, r3
 8002024:	702a      	strb	r2, [r5, #0]
  /* +1 because y_max is a height, this compensates the next step */
  //*y += 1;                      
  /* because the reference point is one below the string, this compensates the previous step */
  //*y -= 1;
  *height = buf->y_max;
  *height -= buf->y_min;
 8002026:	aa02      	add	r2, sp, #8
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800202e:	7013      	strb	r3, [r2, #0]
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
 8002030:	b005      	add	sp, #20
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002034 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
  if ( u8g->font != font )
 8002034:	6883      	ldr	r3, [r0, #8]
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8002036:	b510      	push	{r4, lr}
  if ( u8g->font != font )
 8002038:	428b      	cmp	r3, r1
 800203a:	d005      	beq.n	8002048 <u8g_SetFont+0x14>
 800203c:	1c04      	adds	r4, r0, #0
  {
    u8g->font = font;
 800203e:	6081      	str	r1, [r0, #8]
    u8g_UpdateRefHeight(u8g);
 8002040:	f7ff fec9 	bl	8001dd6 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8002044:	4b01      	ldr	r3, [pc, #4]	; (800204c <u8g_SetFont+0x18>)
 8002046:	6263      	str	r3, [r4, #36]	; 0x24
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
 8002048:	bd10      	pop	{r4, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	080015c3 	.word	0x080015c3

08002050 <u8g_draw_aa_glyph>:

/*========================================================================*/
/* anti aliasing fonts */

int8_t u8g_draw_aa_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	1c0f      	adds	r7, r1, #0
 8002054:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002056:	1c19      	adds	r1, r3, #0

/*========================================================================*/
/* anti aliasing fonts */

int8_t u8g_draw_aa_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002058:	1c04      	adds	r4, r0, #0
 800205a:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800205c:	f7ff fb30 	bl	80016c0 <u8g_GetGlyph>
 8002060:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 8002062:	d03d      	beq.n	80020e0 <u8g_draw_aa_glyph+0x90>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002064:	68a3      	ldr	r3, [r4, #8]
 8002066:	7818      	ldrb	r0, [r3, #0]
 8002068:	f7ff fac7 	bl	80015fa <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800206c:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800206e:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8002070:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 8002072:	1c63      	adds	r3, r4, #1
 8002074:	7fda      	ldrb	r2, [r3, #31]
  
  x += u8g->glyph_x;
 8002076:	7f63      	ldrb	r3, [r4, #29]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002078:	9200      	str	r2, [sp, #0]
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_x;
 800207a:	18ff      	adds	r7, r7, r3
 800207c:	b2fb      	uxtb	r3, r7
 800207e:	9304      	str	r3, [sp, #16]
 8002080:	7fa3      	ldrb	r3, [r4, #30]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002082:	1c20      	adds	r0, r4, #0
 8002084:	1af6      	subs	r6, r6, r3
 8002086:	b2f3      	uxtb	r3, r6
 8002088:	1a9e      	subs	r6, r3, r2
 800208a:	b2f6      	uxtb	r6, r6
 800208c:	9302      	str	r3, [sp, #8]
 800208e:	9904      	ldr	r1, [sp, #16]
 8002090:	1c32      	adds	r2, r6, #0
 8002092:	9b03      	ldr	r3, [sp, #12]
 8002094:	f7ff fa60 	bl	8001558 <u8g_IsBBXIntersection>
 8002098:	2800      	cmp	r0, #0
 800209a:	d020      	beq.n	80020de <u8g_draw_aa_glyph+0x8e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800209c:	9b05      	ldr	r3, [sp, #20]
 800209e:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 3;
 80020a0:	9b03      	ldr	r3, [sp, #12]
 80020a2:	3303      	adds	r3, #3
 80020a4:	b2db      	uxtb	r3, r3
  w /= 4;
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	9303      	str	r3, [sp, #12]
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
 80020aa:	9b02      	ldr	r3, [sp, #8]
 80020ac:	429e      	cmp	r6, r3
 80020ae:	d016      	beq.n	80020de <u8g_draw_aa_glyph+0x8e>
 80020b0:	1c2f      	adds	r7, r5, #0
 80020b2:	1b7b      	subs	r3, r7, r5
 80020b4:	9a04      	ldr	r2, [sp, #16]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	0099      	lsls	r1, r3, #2
 80020ba:	1851      	adds	r1, r2, r1
  {
    ix = x;
    for( i = 0; i < w; i++ )
 80020bc:	9a03      	ldr	r2, [sp, #12]
 80020be:	b2c9      	uxtb	r1, r1
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d208      	bcs.n	80020d6 <u8g_draw_aa_glyph+0x86>
    {
      u8g_Draw4TPixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 80020c4:	783b      	ldrb	r3, [r7, #0]
 80020c6:	1c20      	adds	r0, r4, #0
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	1c32      	adds	r2, r6, #0
 80020cc:	2300      	movs	r3, #0
 80020ce:	f000 fc96 	bl	80029fe <u8g_Draw4TPixel>
      data++;
 80020d2:	3701      	adds	r7, #1
 80020d4:	e7ed      	b.n	80020b2 <u8g_draw_aa_glyph+0x62>
      ix+=4;
    }
    iy++;
 80020d6:	3601      	adds	r6, #1
 80020d8:	18ad      	adds	r5, r5, r2
 80020da:	b2f6      	uxtb	r6, r6
 80020dc:	e7e5      	b.n	80020aa <u8g_draw_aa_glyph+0x5a>
  }
  return u8g->glyph_dx;
 80020de:	7f20      	ldrb	r0, [r4, #28]
 80020e0:	b240      	sxtb	r0, r0
}
 80020e2:	b007      	add	sp, #28
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e6 <u8g_DrawAAGlyph>:

int8_t u8g_DrawAAGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80020e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e8:	1c05      	adds	r5, r0, #0
 80020ea:	1c1e      	adds	r6, r3, #0
  y += u8g->font_calc_vref(u8g);
 80020ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawAAGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80020ee:	1c0f      	adds	r7, r1, #0
 80020f0:	1c14      	adds	r4, r2, #0
  y += u8g->font_calc_vref(u8g);
 80020f2:	4798      	blx	r3
 80020f4:	1902      	adds	r2, r0, r4
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
 80020f6:	1c39      	adds	r1, r7, #0
 80020f8:	1c28      	adds	r0, r5, #0
 80020fa:	1c33      	adds	r3, r6, #0
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f7ff ffa7 	bl	8002050 <u8g_draw_aa_glyph>
}
 8002102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002104 <u8g_DrawAAStr>:

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002106:	1c1f      	adds	r7, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 8002108:	6883      	ldr	r3, [r0, #8]
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800210a:	1c06      	adds	r6, r0, #0
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 800210c:	7818      	ldrb	r0, [r3, #0]
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800210e:	1c0d      	adds	r5, r1, #0
 8002110:	9201      	str	r2, [sp, #4]
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 8002112:	f7ff fa71 	bl	80015f8 <u8g_font_GetFormat.isra.0>
    return 0;
 8002116:	2400      	movs	r4, #0
u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 8002118:	2802      	cmp	r0, #2
 800211a:	d115      	bne.n	8002148 <u8g_DrawAAStr+0x44>
    return 0;
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 800211c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800211e:	1c30      	adds	r0, r6, #0
 8002120:	4798      	blx	r3
 8002122:	9b01      	ldr	r3, [sp, #4]
 8002124:	18c0      	adds	r0, r0, r3
 8002126:	b2c3      	uxtb	r3, r0
 8002128:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 800212a:	783b      	ldrb	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <u8g_DrawAAStr+0x44>
  {
    d = u8g_draw_aa_glyph(u8g, x, y, *s);
 8002130:	1c29      	adds	r1, r5, #0
 8002132:	1c30      	adds	r0, r6, #0
 8002134:	9a01      	ldr	r2, [sp, #4]
 8002136:	f7ff ff8b 	bl	8002050 <u8g_draw_aa_glyph>
    x += d;
 800213a:	b2c0      	uxtb	r0, r0
 800213c:	1945      	adds	r5, r0, r5
    t += d;
 800213e:	1904      	adds	r4, r0, r4
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_aa_glyph(u8g, x, y, *s);
    x += d;
 8002140:	b2ed      	uxtb	r5, r5
    t += d;
 8002142:	b2e4      	uxtb	r4, r4
    s++;
 8002144:	3701      	adds	r7, #1
 8002146:	e7f0      	b.n	800212a <u8g_DrawAAStr+0x26>
  }
  return t;
}
 8002148:	1c20      	adds	r0, r4, #0
 800214a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800214c <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800214c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800214e:	1c05      	adds	r5, r0, #0
  switch(msg)
 8002150:	1c10      	adds	r0, r2, #0
 8002152:	380a      	subs	r0, #10
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002154:	1c0c      	adds	r4, r1, #0
 8002156:	1c16      	adds	r6, r2, #0
 8002158:	9301      	str	r3, [sp, #4]
  switch(msg)
 800215a:	280b      	cmp	r0, #11
 800215c:	d83b      	bhi.n	80021d6 <u8g_dev_ssd1306_128x64_fn+0x8a>
 800215e:	f000 ff69 	bl	8003034 <__gnu_thumb1_case_uqi>
 8002162:	3a06      	.short	0x3a06
 8002164:	3a3a3a3a 	.word	0x3a3a3a3a
 8002168:	3a3a332f 	.word	0x3a3a332f
 800216c:	103a      	.short	0x103a
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800216e:	1c28      	adds	r0, r5, #0
 8002170:	2202      	movs	r2, #2
 8002172:	f000 fe4a 	bl	8002e0a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8002176:	1c28      	adds	r0, r5, #0
 8002178:	1c21      	adds	r1, r4, #0
 800217a:	4a1a      	ldr	r2, [pc, #104]	; (80021e4 <u8g_dev_ssd1306_128x64_fn+0x98>)
 800217c:	f000 fe7c 	bl	8002e78 <u8g_WriteEscSeqP>
      break;
 8002180:	e029      	b.n	80021d6 <u8g_dev_ssd1306_128x64_fn+0x8a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8002184:	1c28      	adds	r0, r5, #0
 8002186:	3226      	adds	r2, #38	; 0x26
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002188:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 800218a:	f000 fe75 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 800218e:	23b0      	movs	r3, #176	; 0xb0
 8002190:	793a      	ldrb	r2, [r7, #4]
 8002192:	1c21      	adds	r1, r4, #0
 8002194:	431a      	orrs	r2, r3
 8002196:	1c28      	adds	r0, r5, #0
 8002198:	f000 fe5e 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800219c:	1c28      	adds	r0, r5, #0
 800219e:	1c21      	adds	r1, r4, #0
 80021a0:	2201      	movs	r2, #1
 80021a2:	f000 fe53 	bl	8002e4c <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80021a6:	1c38      	adds	r0, r7, #0
 80021a8:	1c29      	adds	r1, r5, #0
 80021aa:	1c22      	adds	r2, r4, #0
 80021ac:	f000 ff0f 	bl	8002fce <u8g_pb_WriteBuffer>
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d016      	beq.n	80021e2 <u8g_dev_ssd1306_128x64_fn+0x96>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 80021b4:	1c28      	adds	r0, r5, #0
 80021b6:	1c21      	adds	r1, r4, #0
 80021b8:	2200      	movs	r2, #0
 80021ba:	f000 fe33 	bl	8002e24 <u8g_SetChipSelect>
      }
      break;
 80021be:	e00a      	b.n	80021d6 <u8g_dev_ssd1306_128x64_fn+0x8a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80021c0:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <u8g_dev_ssd1306_128x64_fn+0x98>)
 80021c2:	1c28      	adds	r0, r5, #0
 80021c4:	322e      	adds	r2, #46	; 0x2e
 80021c6:	e002      	b.n	80021ce <u8g_dev_ssd1306_128x64_fn+0x82>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80021c8:	1c28      	adds	r0, r5, #0
 80021ca:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <u8g_dev_ssd1306_128x64_fn+0x98>)
 80021cc:	3237      	adds	r2, #55	; 0x37
 80021ce:	f000 fe53 	bl	8002e78 <u8g_WriteEscSeqP>
      return 1;
 80021d2:	2001      	movs	r0, #1
 80021d4:	e005      	b.n	80021e2 <u8g_dev_ssd1306_128x64_fn+0x96>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 80021d6:	1c28      	adds	r0, r5, #0
 80021d8:	1c21      	adds	r1, r4, #0
 80021da:	1c32      	adds	r2, r6, #0
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	f000 fdd5 	bl	8002d8c <u8g_dev_pb8v1_base_fn>
}
 80021e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80021e4:	08004be3 	.word	0x08004be3

080021e8 <u8g_dev_ssd1306_adafruit_128x64_fn>:

uint8_t u8g_dev_ssd1306_adafruit_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80021e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ea:	1c05      	adds	r5, r0, #0
  switch(msg)
 80021ec:	1c10      	adds	r0, r2, #0
 80021ee:	380a      	subs	r0, #10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_adafruit_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80021f0:	1c0c      	adds	r4, r1, #0
 80021f2:	1c16      	adds	r6, r2, #0
 80021f4:	9301      	str	r3, [sp, #4]
  switch(msg)
 80021f6:	280b      	cmp	r0, #11
 80021f8:	d83c      	bhi.n	8002274 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
 80021fa:	f000 ff1b 	bl	8003034 <__gnu_thumb1_case_uqi>
 80021fe:	3b06      	.short	0x3b06
 8002200:	3b3b3b3b 	.word	0x3b3b3b3b
 8002204:	3b3b3430 	.word	0x3b3b3430
 8002208:	113b      	.short	0x113b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800220a:	1c28      	adds	r0, r5, #0
 800220c:	2202      	movs	r2, #2
 800220e:	f000 fdfc 	bl	8002e0a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8002214:	1c28      	adds	r0, r5, #0
 8002216:	1c21      	adds	r1, r4, #0
 8002218:	3242      	adds	r2, #66	; 0x42
 800221a:	f000 fe2d 	bl	8002e78 <u8g_WriteEscSeqP>
      break;
 800221e:	e029      	b.n	8002274 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8002222:	1c28      	adds	r0, r5, #0
 8002224:	3226      	adds	r2, #38	; 0x26
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002226:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002228:	f000 fe26 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 800222c:	23b0      	movs	r3, #176	; 0xb0
 800222e:	793a      	ldrb	r2, [r7, #4]
 8002230:	1c21      	adds	r1, r4, #0
 8002232:	431a      	orrs	r2, r3
 8002234:	1c28      	adds	r0, r5, #0
 8002236:	f000 fe0f 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800223a:	1c28      	adds	r0, r5, #0
 800223c:	1c21      	adds	r1, r4, #0
 800223e:	2201      	movs	r2, #1
 8002240:	f000 fe04 	bl	8002e4c <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8002244:	1c38      	adds	r0, r7, #0
 8002246:	1c29      	adds	r1, r5, #0
 8002248:	1c22      	adds	r2, r4, #0
 800224a:	f000 fec0 	bl	8002fce <u8g_pb_WriteBuffer>
 800224e:	2800      	cmp	r0, #0
 8002250:	d016      	beq.n	8002280 <u8g_dev_ssd1306_adafruit_128x64_fn+0x98>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 8002252:	1c28      	adds	r0, r5, #0
 8002254:	1c21      	adds	r1, r4, #0
 8002256:	2200      	movs	r2, #0
 8002258:	f000 fde4 	bl	8002e24 <u8g_SetChipSelect>
      }
      break;
 800225c:	e00a      	b.n	8002274 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8002260:	1c28      	adds	r0, r5, #0
 8002262:	322e      	adds	r2, #46	; 0x2e
 8002264:	e002      	b.n	800226c <u8g_dev_ssd1306_adafruit_128x64_fn+0x84>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002266:	1c28      	adds	r0, r5, #0
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 800226a:	3237      	adds	r2, #55	; 0x37
 800226c:	f000 fe04 	bl	8002e78 <u8g_WriteEscSeqP>
      return 1;
 8002270:	2001      	movs	r0, #1
 8002272:	e005      	b.n	8002280 <u8g_dev_ssd1306_adafruit_128x64_fn+0x98>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8002274:	1c28      	adds	r0, r5, #0
 8002276:	1c21      	adds	r1, r4, #0
 8002278:	1c32      	adds	r2, r6, #0
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	f000 fd86 	bl	8002d8c <u8g_dev_pb8v1_base_fn>
}
 8002280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	08004be3 	.word	0x08004be3

08002288 <u8g_dev_sh1106_128x64_fn>:

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800228a:	1c05      	adds	r5, r0, #0
  switch(msg)
 800228c:	1c10      	adds	r0, r2, #0
 800228e:	380a      	subs	r0, #10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002290:	1c0c      	adds	r4, r1, #0
 8002292:	1c16      	adds	r6, r2, #0
 8002294:	9301      	str	r3, [sp, #4]
  switch(msg)
 8002296:	280b      	cmp	r0, #11
 8002298:	d83c      	bhi.n	8002314 <u8g_dev_sh1106_128x64_fn+0x8c>
 800229a:	f000 fecb 	bl	8003034 <__gnu_thumb1_case_uqi>
 800229e:	3b06      	.short	0x3b06
 80022a0:	3b3b3b3b 	.word	0x3b3b3b3b
 80022a4:	3b3b3430 	.word	0x3b3b3430
 80022a8:	113b      	.short	0x113b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80022aa:	1c28      	adds	r0, r5, #0
 80022ac:	2202      	movs	r2, #2
 80022ae:	f000 fdac 	bl	8002e0a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <u8g_dev_sh1106_128x64_fn+0x9c>)
 80022b4:	1c28      	adds	r0, r5, #0
 80022b6:	1c21      	adds	r1, r4, #0
 80022b8:	3242      	adds	r2, #66	; 0x42
 80022ba:	f000 fddd 	bl	8002e78 <u8g_WriteEscSeqP>
      break;
 80022be:	e029      	b.n	8002314 <u8g_dev_sh1106_128x64_fn+0x8c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <u8g_dev_sh1106_128x64_fn+0x9c>)
 80022c2:	1c28      	adds	r0, r5, #0
 80022c4:	3268      	adds	r2, #104	; 0x68
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80022c6:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80022c8:	f000 fdd6 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 80022cc:	23b0      	movs	r3, #176	; 0xb0
 80022ce:	793a      	ldrb	r2, [r7, #4]
 80022d0:	1c21      	adds	r1, r4, #0
 80022d2:	431a      	orrs	r2, r3
 80022d4:	1c28      	adds	r0, r5, #0
 80022d6:	f000 fdbf 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80022da:	1c28      	adds	r0, r5, #0
 80022dc:	1c21      	adds	r1, r4, #0
 80022de:	2201      	movs	r2, #1
 80022e0:	f000 fdb4 	bl	8002e4c <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80022e4:	1c38      	adds	r0, r7, #0
 80022e6:	1c29      	adds	r1, r5, #0
 80022e8:	1c22      	adds	r2, r4, #0
 80022ea:	f000 fe70 	bl	8002fce <u8g_pb_WriteBuffer>
 80022ee:	2800      	cmp	r0, #0
 80022f0:	d016      	beq.n	8002320 <u8g_dev_sh1106_128x64_fn+0x98>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 80022f2:	1c28      	adds	r0, r5, #0
 80022f4:	1c21      	adds	r1, r4, #0
 80022f6:	2200      	movs	r2, #0
 80022f8:	f000 fd94 	bl	8002e24 <u8g_SetChipSelect>
      }
      break;
 80022fc:	e00a      	b.n	8002314 <u8g_dev_sh1106_128x64_fn+0x8c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <u8g_dev_sh1106_128x64_fn+0x9c>)
 8002300:	1c28      	adds	r0, r5, #0
 8002302:	322e      	adds	r2, #46	; 0x2e
 8002304:	e002      	b.n	800230c <u8g_dev_sh1106_128x64_fn+0x84>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002306:	1c28      	adds	r0, r5, #0
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <u8g_dev_sh1106_128x64_fn+0x9c>)
 800230a:	3237      	adds	r2, #55	; 0x37
 800230c:	f000 fdb4 	bl	8002e78 <u8g_WriteEscSeqP>
      return 1;
 8002310:	2001      	movs	r0, #1
 8002312:	e005      	b.n	8002320 <u8g_dev_sh1106_128x64_fn+0x98>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8002314:	1c28      	adds	r0, r5, #0
 8002316:	1c21      	adds	r1, r4, #0
 8002318:	1c32      	adds	r2, r6, #0
 800231a:	9b01      	ldr	r3, [sp, #4]
 800231c:	f000 fd36 	bl	8002d8c <u8g_dev_pb8v1_base_fn>
}
 8002320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	08004be3 	.word	0x08004be3

08002328 <u8g_dev_ssd1306_128x64_2x_fn>:


uint8_t u8g_dev_ssd1306_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800232a:	1c05      	adds	r5, r0, #0
  switch(msg)
 800232c:	1c10      	adds	r0, r2, #0
 800232e:	380a      	subs	r0, #10
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}


uint8_t u8g_dev_ssd1306_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002330:	1c0c      	adds	r4, r1, #0
 8002332:	1c17      	adds	r7, r2, #0
 8002334:	9301      	str	r3, [sp, #4]
  switch(msg)
 8002336:	280b      	cmp	r0, #11
 8002338:	d861      	bhi.n	80023fe <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
 800233a:	f000 fe7b 	bl	8003034 <__gnu_thumb1_case_uqi>
 800233e:	6006      	.short	0x6006
 8002340:	60606060 	.word	0x60606060
 8002344:	60605955 	.word	0x60605955
 8002348:	1160      	.short	0x1160
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800234a:	1c28      	adds	r0, r5, #0
 800234c:	2202      	movs	r2, #2
 800234e:	f000 fd5c 	bl	8002e0a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 8002352:	4a2e      	ldr	r2, [pc, #184]	; (800240c <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8002354:	1c28      	adds	r0, r5, #0
 8002356:	1c21      	adds	r1, r4, #0
 8002358:	3242      	adds	r2, #66	; 0x42
 800235a:	f000 fd8d 	bl	8002e78 <u8g_WriteEscSeqP>
      break;
 800235e:	e04e      	b.n	80023fe <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8002362:	1c28      	adds	r0, r5, #0
 8002364:	3326      	adds	r3, #38	; 0x26
 8002366:	1c1a      	adds	r2, r3, #0
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002368:	684e      	ldr	r6, [r1, #4]
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f000 fd84 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
 8002370:	2350      	movs	r3, #80	; 0x50
 8002372:	7932      	ldrb	r2, [r6, #4]
 8002374:	425b      	negs	r3, r3
 8002376:	0052      	lsls	r2, r2, #1
 8002378:	431a      	orrs	r2, r3
 800237a:	1c21      	adds	r1, r4, #0
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	1c28      	adds	r0, r5, #0
 8002380:	f000 fd6a 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002384:	1c28      	adds	r0, r5, #0
 8002386:	1c21      	adds	r1, r4, #0
 8002388:	2201      	movs	r2, #1
 800238a:	f000 fd5f 	bl	8002e4c <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 800238e:	68b3      	ldr	r3, [r6, #8]
 8002390:	7972      	ldrb	r2, [r6, #5]
 8002392:	1c21      	adds	r1, r4, #0
 8002394:	1c28      	adds	r0, r5, #0
 8002396:	f000 fd65 	bl	8002e64 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 800239a:	1c28      	adds	r0, r5, #0
 800239c:	1c21      	adds	r1, r4, #0
 800239e:	2200      	movs	r2, #0
 80023a0:	f000 fd40 	bl	8002e24 <u8g_SetChipSelect>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80023a4:	1c21      	adds	r1, r4, #0
 80023a6:	9a00      	ldr	r2, [sp, #0]
 80023a8:	1c28      	adds	r0, r5, #0
 80023aa:	f000 fd65 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
 80023ae:	2350      	movs	r3, #80	; 0x50
 80023b0:	7932      	ldrb	r2, [r6, #4]
 80023b2:	425b      	negs	r3, r3
 80023b4:	0052      	lsls	r2, r2, #1
 80023b6:	3201      	adds	r2, #1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	1c21      	adds	r1, r4, #0
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	1c28      	adds	r0, r5, #0
 80023c0:	f000 fd4a 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80023c4:	1c28      	adds	r0, r5, #0
 80023c6:	1c21      	adds	r1, r4, #0
 80023c8:	2201      	movs	r2, #1
 80023ca:	f000 fd3f 	bl	8002e4c <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 80023ce:	7972      	ldrb	r2, [r6, #5]
 80023d0:	68b3      	ldr	r3, [r6, #8]
 80023d2:	1c21      	adds	r1, r4, #0
 80023d4:	189b      	adds	r3, r3, r2
 80023d6:	1c28      	adds	r0, r5, #0
 80023d8:	f000 fd44 	bl	8002e64 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 80023dc:	1c28      	adds	r0, r5, #0
 80023de:	1c21      	adds	r1, r4, #0
 80023e0:	2200      	movs	r2, #0
 80023e2:	f000 fd1f 	bl	8002e24 <u8g_SetChipSelect>
      }
      break;
 80023e6:	e00a      	b.n	80023fe <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 80023ea:	1c28      	adds	r0, r5, #0
 80023ec:	322e      	adds	r2, #46	; 0x2e
 80023ee:	e002      	b.n	80023f6 <u8g_dev_ssd1306_128x64_2x_fn+0xce>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80023f0:	1c28      	adds	r0, r5, #0
 80023f2:	4a06      	ldr	r2, [pc, #24]	; (800240c <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 80023f4:	3237      	adds	r2, #55	; 0x37
 80023f6:	f000 fd3f 	bl	8002e78 <u8g_WriteEscSeqP>
      return 1;
 80023fa:	2001      	movs	r0, #1
 80023fc:	e005      	b.n	800240a <u8g_dev_ssd1306_128x64_2x_fn+0xe2>
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 80023fe:	1c28      	adds	r0, r5, #0
 8002400:	1c21      	adds	r1, r4, #0
 8002402:	1c3a      	adds	r2, r7, #0
 8002404:	9b01      	ldr	r3, [sp, #4]
 8002406:	f000 fc0a 	bl	8002c1e <u8g_dev_pb16v1_base_fn>
}
 800240a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800240c:	08004be3 	.word	0x08004be3

08002410 <u8g_dev_sh1106_128x64_2x_fn>:

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002412:	1c05      	adds	r5, r0, #0
  switch(msg)
 8002414:	1c10      	adds	r0, r2, #0
 8002416:	380a      	subs	r0, #10
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002418:	1c0c      	adds	r4, r1, #0
 800241a:	1c17      	adds	r7, r2, #0
 800241c:	9301      	str	r3, [sp, #4]
  switch(msg)
 800241e:	280b      	cmp	r0, #11
 8002420:	d861      	bhi.n	80024e6 <u8g_dev_sh1106_128x64_2x_fn+0xd6>
 8002422:	f000 fe07 	bl	8003034 <__gnu_thumb1_case_uqi>
 8002426:	6006      	.short	0x6006
 8002428:	60606060 	.word	0x60606060
 800242c:	60605955 	.word	0x60605955
 8002430:	1160      	.short	0x1160
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8002432:	1c28      	adds	r0, r5, #0
 8002434:	2202      	movs	r2, #2
 8002436:	f000 fce8 	bl	8002e0a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 800243a:	4a2e      	ldr	r2, [pc, #184]	; (80024f4 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 800243c:	1c28      	adds	r0, r5, #0
 800243e:	1c21      	adds	r1, r4, #0
 8002440:	3242      	adds	r2, #66	; 0x42
 8002442:	f000 fd19 	bl	8002e78 <u8g_WriteEscSeqP>
      break;
 8002446:	e04e      	b.n	80024e6 <u8g_dev_sh1106_128x64_2x_fn+0xd6>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 800244a:	1c28      	adds	r0, r5, #0
 800244c:	3368      	adds	r3, #104	; 0x68
 800244e:	1c1a      	adds	r2, r3, #0
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002450:	684e      	ldr	r6, [r1, #4]
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f000 fd10 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
 8002458:	2350      	movs	r3, #80	; 0x50
 800245a:	7932      	ldrb	r2, [r6, #4]
 800245c:	425b      	negs	r3, r3
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	431a      	orrs	r2, r3
 8002462:	1c21      	adds	r1, r4, #0
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	1c28      	adds	r0, r5, #0
 8002468:	f000 fcf6 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800246c:	1c28      	adds	r0, r5, #0
 800246e:	1c21      	adds	r1, r4, #0
 8002470:	2201      	movs	r2, #1
 8002472:	f000 fceb 	bl	8002e4c <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 8002476:	68b3      	ldr	r3, [r6, #8]
 8002478:	7972      	ldrb	r2, [r6, #5]
 800247a:	1c21      	adds	r1, r4, #0
 800247c:	1c28      	adds	r0, r5, #0
 800247e:	f000 fcf1 	bl	8002e64 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8002482:	1c28      	adds	r0, r5, #0
 8002484:	1c21      	adds	r1, r4, #0
 8002486:	2200      	movs	r2, #0
 8002488:	f000 fccc 	bl	8002e24 <u8g_SetChipSelect>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 800248c:	1c21      	adds	r1, r4, #0
 800248e:	9a00      	ldr	r2, [sp, #0]
 8002490:	1c28      	adds	r0, r5, #0
 8002492:	f000 fcf1 	bl	8002e78 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
 8002496:	2350      	movs	r3, #80	; 0x50
 8002498:	7932      	ldrb	r2, [r6, #4]
 800249a:	425b      	negs	r3, r3
 800249c:	0052      	lsls	r2, r2, #1
 800249e:	3201      	adds	r2, #1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	1c21      	adds	r1, r4, #0
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	1c28      	adds	r0, r5, #0
 80024a8:	f000 fcd6 	bl	8002e58 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80024ac:	1c28      	adds	r0, r5, #0
 80024ae:	1c21      	adds	r1, r4, #0
 80024b0:	2201      	movs	r2, #1
 80024b2:	f000 fccb 	bl	8002e4c <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 80024b6:	7972      	ldrb	r2, [r6, #5]
 80024b8:	68b3      	ldr	r3, [r6, #8]
 80024ba:	1c21      	adds	r1, r4, #0
 80024bc:	189b      	adds	r3, r3, r2
 80024be:	1c28      	adds	r0, r5, #0
 80024c0:	f000 fcd0 	bl	8002e64 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 80024c4:	1c28      	adds	r0, r5, #0
 80024c6:	1c21      	adds	r1, r4, #0
 80024c8:	2200      	movs	r2, #0
 80024ca:	f000 fcab 	bl	8002e24 <u8g_SetChipSelect>
      }
      break;
 80024ce:	e00a      	b.n	80024e6 <u8g_dev_sh1106_128x64_2x_fn+0xd6>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80024d0:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 80024d2:	1c28      	adds	r0, r5, #0
 80024d4:	322e      	adds	r2, #46	; 0x2e
 80024d6:	e002      	b.n	80024de <u8g_dev_sh1106_128x64_2x_fn+0xce>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80024d8:	1c28      	adds	r0, r5, #0
 80024da:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 80024dc:	3237      	adds	r2, #55	; 0x37
 80024de:	f000 fccb 	bl	8002e78 <u8g_WriteEscSeqP>
      return 1;
 80024e2:	2001      	movs	r0, #1
 80024e4:	e005      	b.n	80024f2 <u8g_dev_sh1106_128x64_2x_fn+0xe2>
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 80024e6:	1c28      	adds	r0, r5, #0
 80024e8:	1c21      	adds	r1, r4, #0
 80024ea:	1c3a      	adds	r2, r7, #0
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	f000 fb96 	bl	8002c1e <u8g_dev_pb16v1_base_fn>
}
 80024f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024f4:	08004be3 	.word	0x08004be3

080024f8 <u8g_init_data>:
static void u8g_init_data(u8g_t *u8g)
{
  u8g->font = NULL;
  u8g->cursor_font = NULL;
  u8g->cursor_bg_color = 0;
  u8g->cursor_fg_color = 1;
 80024f8:	2201      	movs	r2, #1
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
 80024fa:	b538      	push	{r3, r4, r5, lr}
  u8g->font = NULL;
 80024fc:	2300      	movs	r3, #0
  u8g->cursor_font = NULL;
  u8g->cursor_bg_color = 0;
  u8g->cursor_fg_color = 1;
 80024fe:	7402      	strb	r2, [r0, #16]
  u8g->cursor_encoding = 34;
 8002500:	2222      	movs	r2, #34	; 0x22
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
  u8g->font = NULL;
 8002502:	6083      	str	r3, [r0, #8]
  u8g->cursor_font = NULL;
 8002504:	60c3      	str	r3, [r0, #12]
  u8g->cursor_bg_color = 0;
 8002506:	7443      	strb	r3, [r0, #17]
  u8g->cursor_fg_color = 1;
  u8g->cursor_encoding = 34;
 8002508:	7482      	strb	r2, [r0, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800250a:	6183      	str	r3, [r0, #24]
 800250c:	1c02      	adds	r2, r0, #0
 800250e:	1c03      	adds	r3, r0, #0
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
 8002510:	1c04      	adds	r4, r0, #0

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
 8002512:	21ff      	movs	r1, #255	; 0xff
 8002514:	3334      	adds	r3, #52	; 0x34
 8002516:	3242      	adds	r2, #66	; 0x42
 8002518:	7019      	strb	r1, [r3, #0]
 800251a:	3301      	adds	r3, #1
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
 800251c:	4293      	cmp	r3, r2
 800251e:	d1fb      	bne.n	8002518 <u8g_init_data+0x20>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002520:	1c23      	adds	r3, r4, #0
 8002522:	2501      	movs	r5, #1
 8002524:	3331      	adds	r3, #49	; 0x31
 8002526:	701d      	strb	r5, [r3, #0]
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
 8002528:	1c20      	adds	r0, r4, #0
 800252a:	f7ff fc9e 	bl	8001e6a <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 800252e:	1c23      	adds	r3, r4, #0
  u8g->font_ref_ascent = 0;
 8002530:	1c22      	adds	r2, r4, #0
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8002532:	3328      	adds	r3, #40	; 0x28
 8002534:	701d      	strb	r5, [r3, #0]
  u8g->font_ref_ascent = 0;
 8002536:	2300      	movs	r3, #0
  u8g->font_ref_descent = 0;
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8002538:	2140      	movs	r1, #64	; 0x40
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
  u8g->font_ref_ascent = 0;
 800253a:	3229      	adds	r2, #41	; 0x29
 800253c:	7013      	strb	r3, [r2, #0]
  u8g->font_ref_descent = 0;
 800253e:	7053      	strb	r3, [r2, #1]
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
  u8g->line_spacing = 0;
 8002540:	70d3      	strb	r3, [r2, #3]
  
  u8g->state_cb = u8g_state_dummy_cb;
 8002542:	4b02      	ldr	r3, [pc, #8]	; (800254c <u8g_init_data+0x54>)
  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
  u8g->font_ref_ascent = 0;
  u8g->font_ref_descent = 0;
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8002544:	7091      	strb	r1, [r2, #2]
  u8g->line_spacing = 0;
  
  u8g->state_cb = u8g_state_dummy_cb;
 8002546:	6463      	str	r3, [r4, #68]	; 0x44

}
 8002548:	bd38      	pop	{r3, r4, r5, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	08002b05 	.word	0x08002b05

08002550 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002550:	b510      	push	{r4, lr}
  return dev->dev_fn(u8g, dev, msg, arg); 
 8002552:	680c      	ldr	r4, [r1, #0]
 8002554:	47a0      	blx	r4
}
 8002556:	bd10      	pop	{r4, pc}

08002558 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	1c04      	adds	r4, r0, #0
 800255c:	1c0d      	adds	r5, r1, #0
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800255e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002560:	2002      	movs	r0, #2
 8002562:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8002564:	1c29      	adds	r1, r5, #0
 8002566:	220a      	movs	r2, #10
 8002568:	1c20      	adds	r0, r4, #0
 800256a:	2300      	movs	r3, #0
 800256c:	f7ff fff0 	bl	8002550 <u8g_call_dev_fn>
 8002570:	1c05      	adds	r5, r0, #0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002572:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002574:	2003      	movs	r0, #3
 8002576:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002578:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800257a:	2000      	movs	r0, #0
 800257c:	4798      	blx	r3
  return r;
}
 800257e:	1c28      	adds	r0, r5, #0
 8002580:	bd38      	pop	{r3, r4, r5, pc}

08002582 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002582:	b538      	push	{r3, r4, r5, lr}
 8002584:	1c04      	adds	r4, r0, #0
 8002586:	1c0d      	adds	r5, r1, #0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002588:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800258a:	2002      	movs	r0, #2
 800258c:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800258e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002590:	2001      	movs	r0, #1
 8002592:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8002594:	1c29      	adds	r1, r5, #0
 8002596:	1c20      	adds	r0, r4, #0
 8002598:	2214      	movs	r2, #20
 800259a:	2300      	movs	r3, #0
 800259c:	f7ff ffd8 	bl	8002550 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80025a0:	1c23      	adds	r3, r4, #0
 80025a2:	1c29      	adds	r1, r5, #0
 80025a4:	2217      	movs	r2, #23
 80025a6:	3348      	adds	r3, #72	; 0x48
 80025a8:	1c20      	adds	r0, r4, #0
 80025aa:	f7ff ffd1 	bl	8002550 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80025ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025b0:	2000      	movs	r0, #0
 80025b2:	4798      	blx	r3
}
 80025b4:	bd38      	pop	{r3, r4, r5, pc}

080025b6 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	1c04      	adds	r4, r0, #0
 80025ba:	1c0e      	adds	r6, r1, #0
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80025bc:	2002      	movs	r0, #2
 80025be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025c0:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80025c2:	2001      	movs	r0, #1
 80025c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025c6:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 80025c8:	1c20      	adds	r0, r4, #0
 80025ca:	1c31      	adds	r1, r6, #0
 80025cc:	2215      	movs	r2, #21
 80025ce:	2300      	movs	r3, #0
 80025d0:	f7ff ffbe 	bl	8002550 <u8g_call_dev_fn>
 80025d4:	1e05      	subs	r5, r0, #0
  if ( r != 0 )
 80025d6:	d006      	beq.n	80025e6 <u8g_NextPageLL+0x30>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80025d8:	1c23      	adds	r3, r4, #0
 80025da:	1c20      	adds	r0, r4, #0
 80025dc:	1c31      	adds	r1, r6, #0
 80025de:	2217      	movs	r2, #23
 80025e0:	3348      	adds	r3, #72	; 0x48
 80025e2:	f7ff ffb5 	bl	8002550 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80025e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025e8:	2000      	movs	r0, #0
 80025ea:	4798      	blx	r3
  return r;
}
 80025ec:	1c28      	adds	r0, r5, #0
 80025ee:	bd70      	pop	{r4, r5, r6, pc}

080025f0 <u8g_SetContrastLL>:

uint8_t u8g_SetContrastLL(u8g_t *u8g, u8g_dev_t *dev, uint8_t contrast)
{  
 80025f0:	b507      	push	{r0, r1, r2, lr}
 80025f2:	466b      	mov	r3, sp
 80025f4:	3307      	adds	r3, #7
 80025f6:	701a      	strb	r2, [r3, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
 80025f8:	220f      	movs	r2, #15
 80025fa:	f7ff ffa9 	bl	8002550 <u8g_call_dev_fn>
}
 80025fe:	bd0e      	pop	{r1, r2, r3, pc}

08002600 <u8g_DrawPixelLL>:

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
 8002600:	b510      	push	{r4, lr}
 8002602:	1c1c      	adds	r4, r3, #0
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002604:	1c03      	adds	r3, r0, #0
 8002606:	332d      	adds	r3, #45	; 0x2d
 8002608:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 800260a:	705c      	strb	r4, [r3, #1]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
 800260c:	2232      	movs	r2, #50	; 0x32
 800260e:	f7ff ff9f 	bl	8002550 <u8g_call_dev_fn>
}
 8002612:	bd10      	pop	{r4, pc}

08002614 <u8g_Draw8PixelLL>:

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	1c1e      	adds	r6, r3, #0
 8002618:	ab04      	add	r3, sp, #16
 800261a:	781d      	ldrb	r5, [r3, #0]
 800261c:	ab05      	add	r3, sp, #20
 800261e:	781c      	ldrb	r4, [r3, #0]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002620:	1c03      	adds	r3, r0, #0
 8002622:	332d      	adds	r3, #45	; 0x2d
 8002624:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8002626:	705e      	strb	r6, [r3, #1]
  arg->dir = dir;
 8002628:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 800262a:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 800262c:	223b      	movs	r2, #59	; 0x3b
 800262e:	f7ff ff8f 	bl	8002550 <u8g_call_dev_fn>
}
 8002632:	bd70      	pop	{r4, r5, r6, pc}

08002634 <u8g_Draw4TPixelLL>:

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	1c1e      	adds	r6, r3, #0
 8002638:	ab04      	add	r3, sp, #16
 800263a:	781d      	ldrb	r5, [r3, #0]
 800263c:	ab05      	add	r3, sp, #20
 800263e:	781c      	ldrb	r4, [r3, #0]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002640:	1c03      	adds	r3, r0, #0
 8002642:	332d      	adds	r3, #45	; 0x2d
 8002644:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8002646:	705e      	strb	r6, [r3, #1]
  arg->dir = dir;
 8002648:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 800264a:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
 800264c:	222d      	movs	r2, #45	; 0x2d
 800264e:	f7ff ff7f 	bl	8002550 <u8g_call_dev_fn>
}
 8002652:	bd70      	pop	{r4, r5, r6, pc}

08002654 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002654:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8002656:	466b      	mov	r3, sp
 8002658:	1ddc      	adds	r4, r3, #7
 800265a:	2246      	movs	r2, #70	; 0x46
 800265c:	1c23      	adds	r3, r4, #0
 800265e:	f7ff ff77 	bl	8002550 <u8g_call_dev_fn>
  return r;
 8002662:	7820      	ldrb	r0, [r4, #0]
}
 8002664:	bd16      	pop	{r1, r2, r4, pc}

08002666 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002666:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8002668:	466b      	mov	r3, sp
 800266a:	1ddc      	adds	r4, r3, #7
 800266c:	2247      	movs	r2, #71	; 0x47
 800266e:	1c23      	adds	r3, r4, #0
 8002670:	f7ff ff6e 	bl	8002550 <u8g_call_dev_fn>
  return r;
 8002674:	7820      	ldrb	r0, [r4, #0]
}
 8002676:	bd16      	pop	{r1, r2, r4, pc}

08002678 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002678:	b508      	push	{r3, lr}
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 800267a:	2248      	movs	r2, #72	; 0x48
 800267c:	2300      	movs	r3, #0
 800267e:	f7ff ff67 	bl	8002550 <u8g_call_dev_fn>
}
 8002682:	bd08      	pop	{r3, pc}

08002684 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8002684:	b510      	push	{r4, lr}
 8002686:	1c04      	adds	r4, r0, #0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8002688:	6861      	ldr	r1, [r4, #4]
 800268a:	f7ff ffe3 	bl	8002654 <u8g_GetWidthLL>
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800268e:	6861      	ldr	r1, [r4, #4]

/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8002690:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8002692:	1c20      	adds	r0, r4, #0
 8002694:	f7ff ffe7 	bl	8002666 <u8g_GetHeightLL>
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002698:	6861      	ldr	r1, [r4, #4]
/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800269a:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 800269c:	1c20      	adds	r0, r4, #0
 800269e:	f7ff ffeb 	bl	8002678 <u8g_GetModeLL>
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80026a2:	1c23      	adds	r3, r4, #0

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80026a4:	74e0      	strb	r0, [r4, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80026a6:	6861      	ldr	r1, [r4, #4]
 80026a8:	3348      	adds	r3, #72	; 0x48
 80026aa:	1c20      	adds	r0, r4, #0
 80026ac:	2217      	movs	r2, #23
 80026ae:	f7ff ff4f 	bl	8002550 <u8g_call_dev_fn>
}
 80026b2:	bd10      	pop	{r4, pc}

080026b4 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	1c04      	adds	r4, r0, #0
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80026b8:	6861      	ldr	r1, [r4, #4]
 80026ba:	f7ff ff4d 	bl	8002558 <u8g_InitLL>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d003      	beq.n	80026ca <u8g_Begin+0x16>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 80026c2:	1c20      	adds	r0, r4, #0
 80026c4:	f7ff ffde 	bl	8002684 <u8g_UpdateDimension>
  return 1;
 80026c8:	2001      	movs	r0, #1
}
 80026ca:	bd10      	pop	{r4, pc}

080026cc <u8g_Init>:

uint8_t u8g_Init(u8g_t *u8g, u8g_dev_t *dev)
{
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	1c0d      	adds	r5, r1, #0
 80026d0:	1c04      	adds	r4, r0, #0
  u8g_init_data(u8g);
 80026d2:	f7ff ff11 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
 80026d6:	6065      	str	r5, [r4, #4]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80026d8:	1c20      	adds	r0, r4, #0
 80026da:	f7ff ffeb 	bl	80026b4 <u8g_Begin>
}
 80026de:	bd38      	pop	{r3, r4, r5, pc}

080026e0 <u8g_InitComFn>:

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	1c04      	adds	r4, r0, #0
 80026e4:	1c0d      	adds	r5, r1, #0
 80026e6:	1c16      	adds	r6, r2, #0
  u8g_init_data(u8g);
 80026e8:	f7ff ff06 	bl	80024f8 <u8g_init_data>
 80026ec:	1c23      	adds	r3, r4, #0
 80026ee:	1c22      	adds	r2, r4, #0
  
#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
 80026f0:	21fe      	movs	r1, #254	; 0xfe
 80026f2:	3334      	adds	r3, #52	; 0x34
 80026f4:	3242      	adds	r2, #66	; 0x42
 80026f6:	7019      	strb	r1, [r3, #0]
 80026f8:	3301      	adds	r3, #1
  u8g_init_data(u8g);
  
#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d1fb      	bne.n	80026f6 <u8g_InitComFn+0x16>
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 80026fe:	6065      	str	r5, [r4, #4]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8002700:	1c20      	adds	r0, r4, #0
#endif
  
  u8g->dev = dev;
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8002702:	60ae      	str	r6, [r5, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8002704:	f7ff ffd6 	bl	80026b4 <u8g_Begin>
}
 8002708:	bd70      	pop	{r4, r5, r6, pc}

0800270a <u8g_InitSPI>:


#if defined(U8G_WITH_PINLIST)  
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
 800270a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270c:	1c04      	adds	r4, r0, #0
 800270e:	b085      	sub	sp, #20
 8002710:	1c1d      	adds	r5, r3, #0
 8002712:	ab0a      	add	r3, sp, #40	; 0x28
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	1c0f      	adds	r7, r1, #0
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	ab0b      	add	r3, sp, #44	; 0x2c
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	1c16      	adds	r6, r2, #0
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	ab0c      	add	r3, sp, #48	; 0x30
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	9303      	str	r3, [sp, #12]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 8002728:	f7ff fee6 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 800272c:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 800272e:	466a      	mov	r2, sp
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 8002730:	3338      	adds	r3, #56	; 0x38
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 8002732:	7912      	ldrb	r2, [r2, #4]
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002734:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 8002736:	3b02      	subs	r3, #2
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 8002738:	709e      	strb	r6, [r3, #2]
  u8g->pin_list[U8G_PI_MOSI] = mosi;
 800273a:	70dd      	strb	r5, [r3, #3]
  u8g->pin_list[U8G_PI_CS] = cs;
 800273c:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 800273e:	466a      	mov	r2, sp
 8002740:	7a12      	ldrb	r2, [r2, #8]
 8002742:	3b01      	subs	r3, #1
 8002744:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 8002746:	466a      	mov	r2, sp
 8002748:	7b12      	ldrb	r2, [r2, #12]
 800274a:	3b01      	subs	r3, #1
 800274c:	701a      	strb	r2, [r3, #0]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 800274e:	1c20      	adds	r0, r4, #0
 8002750:	f7ff ffb0 	bl	80026b4 <u8g_Begin>
}
 8002754:	b005      	add	sp, #20
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002758 <u8g_InitHWSPI>:

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
 8002758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800275a:	1c04      	adds	r4, r0, #0
 800275c:	1c1d      	adds	r5, r3, #0
 800275e:	ab08      	add	r3, sp, #32
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	1c0f      	adds	r7, r1, #0
 8002764:	1c16      	adds	r6, r2, #0
 8002766:	9301      	str	r3, [sp, #4]
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 8002768:	f7ff fec6 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 800276c:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_RESET] = reset;
 800276e:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 8002770:	3336      	adds	r3, #54	; 0x36

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002772:	6067      	str	r7, [r4, #4]
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_RESET] = reset;
 8002774:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 8002776:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 8002778:	3b01      	subs	r3, #1
 800277a:	701d      	strb	r5, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 800277c:	3b01      	subs	r3, #1
 800277e:	701a      	strb	r2, [r3, #0]
  
  return u8g_Begin(u8g);
 8002780:	1c20      	adds	r0, r4, #0
 8002782:	f7ff ff97 	bl	80026b4 <u8g_Begin>
}
 8002786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002788 <u8g_InitI2C>:

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	1c04      	adds	r4, r0, #0
 800278c:	1c0e      	adds	r6, r1, #0
 800278e:	1c15      	adds	r5, r2, #0
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 8002790:	f7ff feb2 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
 8002794:	1c23      	adds	r3, r4, #0
 8002796:	333f      	adds	r3, #63	; 0x3f

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002798:	6066      	str	r6, [r4, #4]
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
  
  return u8g_Begin(u8g);
 800279a:	1c20      	adds	r0, r4, #0
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
 800279c:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 800279e:	f7ff ff89 	bl	80026b4 <u8g_Begin>
}
 80027a2:	bd70      	pop	{r4, r5, r6, pc}

080027a4 <u8g_Init8BitFixedPort>:


uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
{
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	1c04      	adds	r4, r0, #0
 80027a8:	b085      	sub	sp, #20
 80027aa:	1c1d      	adds	r5, r3, #0
 80027ac:	ab0a      	add	r3, sp, #40	; 0x28
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	1c0f      	adds	r7, r1, #0
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	ab0b      	add	r3, sp, #44	; 0x2c
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	1c16      	adds	r6, r2, #0
 80027ba:	9302      	str	r3, [sp, #8]
 80027bc:	ab0c      	add	r3, sp, #48	; 0x30
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	9303      	str	r3, [sp, #12]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 80027c2:	f7ff fe99 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 80027c6:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
 80027c8:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 80027ca:	3338      	adds	r3, #56	; 0x38
uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 80027cc:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
 80027ce:	3b02      	subs	r3, #2
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 80027d0:	709e      	strb	r6, [r3, #2]
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
 80027d2:	7912      	ldrb	r2, [r2, #4]
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
 80027d4:	701d      	strb	r5, [r3, #0]
  u8g->pin_list[U8G_PI_DI] = di;
 80027d6:	3b01      	subs	r3, #1
 80027d8:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RW] = rw;
 80027da:	466a      	mov	r2, sp
 80027dc:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_RESET] = reset;

  return u8g_Begin(u8g);
 80027de:	1c20      	adds	r0, r4, #0
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
 80027e0:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RESET] = reset;
 80027e2:	466a      	mov	r2, sp
 80027e4:	7b12      	ldrb	r2, [r2, #12]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	701a      	strb	r2, [r3, #0]

  return u8g_Begin(u8g);
 80027ea:	f7ff ff63 	bl	80026b4 <u8g_Begin>
}
 80027ee:	b005      	add	sp, #20
 80027f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f2 <u8g_Init8Bit>:

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
 80027f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f4:	b08d      	sub	sp, #52	; 0x34
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	ab12      	add	r3, sp, #72	; 0x48
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	1c16      	adds	r6, r2, #0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	ab13      	add	r3, sp, #76	; 0x4c
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	aa0c      	add	r2, sp, #48	; 0x30
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	ab14      	add	r3, sp, #80	; 0x50
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	1c04      	adds	r4, r0, #0
 800280e:	9303      	str	r3, [sp, #12]
 8002810:	ab15      	add	r3, sp, #84	; 0x54
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	1c0f      	adds	r7, r1, #0
 8002816:	9304      	str	r3, [sp, #16]
 8002818:	ab16      	add	r3, sp, #88	; 0x58
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	9305      	str	r3, [sp, #20]
 800281e:	ab17      	add	r3, sp, #92	; 0x5c
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	9306      	str	r3, [sp, #24]
 8002824:	ab18      	add	r3, sp, #96	; 0x60
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	9307      	str	r3, [sp, #28]
 800282a:	ab19      	add	r3, sp, #100	; 0x64
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	9308      	str	r3, [sp, #32]
 8002830:	2319      	movs	r3, #25
 8002832:	189b      	adds	r3, r3, r2
 8002834:	7fdb      	ldrb	r3, [r3, #31]
 8002836:	9309      	str	r3, [sp, #36]	; 0x24
 8002838:	231d      	movs	r3, #29
 800283a:	189b      	adds	r3, r3, r2
 800283c:	7fdb      	ldrb	r3, [r3, #31]
 800283e:	930a      	str	r3, [sp, #40]	; 0x28
 8002840:	ab1c      	add	r3, sp, #112	; 0x70
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	930b      	str	r3, [sp, #44]	; 0x2c
 8002846:	ab1d      	add	r3, sp, #116	; 0x74
 8002848:	781d      	ldrb	r5, [r3, #0]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 800284a:	f7ff fe55 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 800284e:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8002850:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_D1] = d1;
 8002852:	7812      	ldrb	r2, [r2, #0]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8002854:	3339      	adds	r3, #57	; 0x39
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002856:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 8002858:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_D2] = d2;
 800285a:	466a      	mov	r2, sp
 800285c:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 800285e:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
 8002860:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_D3] = d3;
 8002862:	466a      	mov	r2, sp
 8002864:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
 8002866:	3b01      	subs	r3, #1
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
 8002868:	711a      	strb	r2, [r3, #4]
  u8g->pin_list[U8G_PI_D4] = d4;
 800286a:	466a      	mov	r2, sp
 800286c:	7b12      	ldrb	r2, [r2, #12]
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
 800286e:	2120      	movs	r1, #32

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
 8002870:	715a      	strb	r2, [r3, #5]
  u8g->pin_list[U8G_PI_D5] = d5;
 8002872:	466a      	mov	r2, sp
 8002874:	7c12      	ldrb	r2, [r2, #16]
  u8g->pin_list[U8G_PI_CS2] = cs2;
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
  u8g->pin_list[U8G_PI_RESET] = reset;
  
  return u8g_Begin(u8g);
 8002876:	1c20      	adds	r0, r4, #0
  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
 8002878:	719a      	strb	r2, [r3, #6]
  u8g->pin_list[U8G_PI_D6] = d6;
 800287a:	466a      	mov	r2, sp
 800287c:	7d12      	ldrb	r2, [r2, #20]
 800287e:	71da      	strb	r2, [r3, #7]
  u8g->pin_list[U8G_PI_D7] = d7;
 8002880:	466a      	mov	r2, sp
 8002882:	7e12      	ldrb	r2, [r2, #24]
 8002884:	721a      	strb	r2, [r3, #8]

  u8g->pin_list[U8G_PI_EN] = en;
 8002886:	466a      	mov	r2, sp
 8002888:	7f12      	ldrb	r2, [r2, #28]
  u8g->pin_list[U8G_PI_CS1] = cs1;
 800288a:	3b02      	subs	r3, #2
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
 800288c:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_CS1] = cs1;
 800288e:	466a      	mov	r2, sp
 8002890:	1852      	adds	r2, r2, r1
 8002892:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_CS2] = cs2;
 8002894:	2124      	movs	r1, #36	; 0x24
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
 8002896:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_CS2] = cs2;
 8002898:	466a      	mov	r2, sp
 800289a:	1852      	adds	r2, r2, r1
 800289c:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_DI] = di;
 800289e:	2128      	movs	r1, #40	; 0x28
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
  u8g->pin_list[U8G_PI_CS2] = cs2;
 80028a0:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_DI] = di;
 80028a2:	466a      	mov	r2, sp
 80028a4:	1852      	adds	r2, r2, r1
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RW] = rw;
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	466a      	mov	r2, sp
 80028b0:	1852      	adds	r2, r2, r1
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RESET] = reset;
 80028b6:	3b01      	subs	r3, #1
 80028b8:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 80028ba:	f7ff fefb 	bl	80026b4 <u8g_Begin>
}
 80028be:	b00d      	add	sp, #52	; 0x34
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c2 <u8g_InitRW8Bit>:

*/

uint8_t u8g_InitRW8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
{
 80028c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c4:	b08d      	sub	sp, #52	; 0x34
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	ab12      	add	r3, sp, #72	; 0x48
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	1c16      	adds	r6, r2, #0
 80028ce:	9302      	str	r3, [sp, #8]
 80028d0:	ab13      	add	r3, sp, #76	; 0x4c
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	aa0c      	add	r2, sp, #48	; 0x30
 80028d6:	9303      	str	r3, [sp, #12]
 80028d8:	ab14      	add	r3, sp, #80	; 0x50
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	1c04      	adds	r4, r0, #0
 80028de:	9304      	str	r3, [sp, #16]
 80028e0:	ab15      	add	r3, sp, #84	; 0x54
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	1c0f      	adds	r7, r1, #0
 80028e6:	9305      	str	r3, [sp, #20]
 80028e8:	ab16      	add	r3, sp, #88	; 0x58
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	9306      	str	r3, [sp, #24]
 80028ee:	ab17      	add	r3, sp, #92	; 0x5c
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	9307      	str	r3, [sp, #28]
 80028f4:	ab18      	add	r3, sp, #96	; 0x60
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	9308      	str	r3, [sp, #32]
 80028fa:	ab19      	add	r3, sp, #100	; 0x64
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002900:	2319      	movs	r3, #25
 8002902:	189b      	adds	r3, r3, r2
 8002904:	7fdb      	ldrb	r3, [r3, #31]
 8002906:	930a      	str	r3, [sp, #40]	; 0x28
 8002908:	231d      	movs	r3, #29
 800290a:	189b      	adds	r3, r3, r2
 800290c:	7fdb      	ldrb	r3, [r3, #31]
 800290e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002910:	ab1c      	add	r3, sp, #112	; 0x70
 8002912:	781d      	ldrb	r5, [r3, #0]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 8002914:	f7ff fdf0 	bl	80024f8 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 8002918:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 800291a:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_D1] = d1;
 800291c:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 800291e:	3339      	adds	r3, #57	; 0x39
  uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002920:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 8002922:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_D2] = d2;
 8002924:	466a      	mov	r2, sp
 8002926:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 8002928:	2120      	movs	r1, #32
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
 800292a:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_D3] = d3;
 800292c:	466a      	mov	r2, sp
 800292e:	7b12      	ldrb	r2, [r2, #12]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8002930:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
 8002932:	70da      	strb	r2, [r3, #3]
  u8g->pin_list[U8G_PI_D4] = d4;
 8002934:	466a      	mov	r2, sp
 8002936:	7c12      	ldrb	r2, [r2, #16]
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 8002938:	3b03      	subs	r3, #3

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
 800293a:	71da      	strb	r2, [r3, #7]
  u8g->pin_list[U8G_PI_D5] = d5;
 800293c:	466a      	mov	r2, sp
 800293e:	7d12      	ldrb	r2, [r2, #20]
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_WR] = wr;
  u8g->pin_list[U8G_PI_RD] = rd;
  u8g->pin_list[U8G_PI_RESET] = reset;
  
  return u8g_Begin(u8g);
 8002940:	1c20      	adds	r0, r4, #0
  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
 8002942:	721a      	strb	r2, [r3, #8]
  u8g->pin_list[U8G_PI_D6] = d6;
 8002944:	466a      	mov	r2, sp
 8002946:	7e12      	ldrb	r2, [r2, #24]
 8002948:	725a      	strb	r2, [r3, #9]
  u8g->pin_list[U8G_PI_D7] = d7;
 800294a:	466a      	mov	r2, sp
 800294c:	7f12      	ldrb	r2, [r2, #28]
 800294e:	729a      	strb	r2, [r3, #10]

  u8g->pin_list[U8G_PI_CS] = cs;
 8002950:	466a      	mov	r2, sp
 8002952:	1852      	adds	r2, r2, r1
 8002954:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 8002956:	2124      	movs	r1, #36	; 0x24
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 8002958:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 800295a:	466a      	mov	r2, sp
 800295c:	1852      	adds	r2, r2, r1
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_WR] = wr;
 8002964:	2128      	movs	r1, #40	; 0x28
 8002966:	466a      	mov	r2, sp
 8002968:	1852      	adds	r2, r2, r1
 800296a:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_RD] = rd;
 800296c:	212c      	movs	r1, #44	; 0x2c
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_WR] = wr;
 800296e:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RD] = rd;
 8002970:	466a      	mov	r2, sp
 8002972:	1852      	adds	r2, r2, r1
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	3303      	adds	r3, #3
 8002978:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 800297a:	3b04      	subs	r3, #4
 800297c:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 800297e:	f7ff fe99 	bl	80026b4 <u8g_Begin>
}
 8002982:	b00d      	add	sp, #52	; 0x34
 8002984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002986 <u8g_FirstPage>:
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8002986:	b508      	push	{r3, lr}
  u8g_FirstPageLL(u8g, u8g->dev);
 8002988:	6841      	ldr	r1, [r0, #4]
 800298a:	f7ff fdfa 	bl	8002582 <u8g_FirstPageLL>
}
 800298e:	bd08      	pop	{r3, pc}

08002990 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8002990:	6983      	ldr	r3, [r0, #24]
{
  u8g_FirstPageLL(u8g, u8g->dev);
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
 8002992:	b510      	push	{r4, lr}
 8002994:	1c04      	adds	r4, r0, #0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8002996:	2b00      	cmp	r3, #0
 8002998:	d000      	beq.n	800299c <u8g_NextPage+0xc>
  {
    u8g->cursor_fn(u8g);
 800299a:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 800299c:	6861      	ldr	r1, [r4, #4]
 800299e:	1c20      	adds	r0, r4, #0
 80029a0:	f7ff fe09 	bl	80025b6 <u8g_NextPageLL>
}
 80029a4:	bd10      	pop	{r4, pc}

080029a6 <u8g_SetContrast>:

uint8_t u8g_SetContrast(u8g_t *u8g, uint8_t contrast)
{
 80029a6:	b508      	push	{r3, lr}
 80029a8:	1c0a      	adds	r2, r1, #0
  return u8g_SetContrastLL(u8g, u8g->dev, contrast);
 80029aa:	6841      	ldr	r1, [r0, #4]
 80029ac:	f7ff fe20 	bl	80025f0 <u8g_SetContrastLL>
}
 80029b0:	bd08      	pop	{r3, pc}

080029b2 <u8g_SleepOn>:

void u8g_SleepOn(u8g_t *u8g)
{
 80029b2:	b508      	push	{r3, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_ON, NULL);
 80029b4:	6841      	ldr	r1, [r0, #4]
 80029b6:	2210      	movs	r2, #16
 80029b8:	2300      	movs	r3, #0
 80029ba:	f7ff fdc9 	bl	8002550 <u8g_call_dev_fn>
}
 80029be:	bd08      	pop	{r3, pc}

080029c0 <u8g_SleepOff>:

void u8g_SleepOff(u8g_t *u8g)
{
 80029c0:	b508      	push	{r3, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_OFF, NULL);
 80029c2:	6841      	ldr	r1, [r0, #4]
 80029c4:	2211      	movs	r2, #17
 80029c6:	2300      	movs	r3, #0
 80029c8:	f7ff fdc2 	bl	8002550 <u8g_call_dev_fn>
}
 80029cc:	bd08      	pop	{r3, pc}

080029ce <u8g_DrawPixel>:


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
 80029ce:	b510      	push	{r4, lr}
 80029d0:	1c0c      	adds	r4, r1, #0
 80029d2:	1c13      	adds	r3, r2, #0
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
 80029d4:	6841      	ldr	r1, [r0, #4]
 80029d6:	1c22      	adds	r2, r4, #0
 80029d8:	f7ff fe12 	bl	8002600 <u8g_DrawPixelLL>
}
 80029dc:	bd10      	pop	{r4, pc}

080029de <u8g_Draw8Pixel>:

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80029de:	b570      	push	{r4, r5, r6, lr}
 80029e0:	1c1d      	adds	r5, r3, #0
 80029e2:	ab04      	add	r3, sp, #16
 80029e4:	781c      	ldrb	r4, [r3, #0]
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80029e6:	1c03      	adds	r3, r0, #0
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80029e8:	1c0e      	adds	r6, r1, #0
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80029ea:	332d      	adds	r3, #45	; 0x2d
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 80029ec:	6841      	ldr	r1, [r0, #4]
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80029ee:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 80029f0:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 80029f2:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 80029f4:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 80029f6:	223b      	movs	r2, #59	; 0x3b
 80029f8:	f7ff fdaa 	bl	8002550 <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
 80029fc:	bd70      	pop	{r4, r5, r6, pc}

080029fe <u8g_Draw4TPixel>:

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80029fe:	b570      	push	{r4, r5, r6, lr}
 8002a00:	1c1d      	adds	r5, r3, #0
 8002a02:	ab04      	add	r3, sp, #16
 8002a04:	781c      	ldrb	r4, [r3, #0]
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002a06:	1c03      	adds	r3, r0, #0
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002a08:	1c0e      	adds	r6, r1, #0
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002a0a:	332d      	adds	r3, #45	; 0x2d
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8002a0c:	6841      	ldr	r1, [r0, #4]
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002a0e:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 8002a10:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8002a12:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 8002a14:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
 8002a16:	222d      	movs	r2, #45	; 0x2d
 8002a18:	f7ff fd9a 	bl	8002550 <u8g_call_dev_fn>
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}

08002a1e <u8g_SetColorEntry>:
  r: value for red (0..255)
  g: value for green (0..255)
  b: value for blue (0..255)
*/
void u8g_SetColorEntry(u8g_t *u8g, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8002a1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a20:	ac06      	add	r4, sp, #24
 8002a22:	7825      	ldrb	r5, [r4, #0]
  u8g_dev_arg_irgb_t irgb;
  irgb.idx = idx;
 8002a24:	ac01      	add	r4, sp, #4
 8002a26:	7021      	strb	r1, [r4, #0]
  irgb.r = r;
 8002a28:	7062      	strb	r2, [r4, #1]
  irgb.g = g;
 8002a2a:	70a3      	strb	r3, [r4, #2]
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
 8002a2c:	6841      	ldr	r1, [r0, #4]
 8002a2e:	223c      	movs	r2, #60	; 0x3c
 8002a30:	1c23      	adds	r3, r4, #0
{
  u8g_dev_arg_irgb_t irgb;
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
 8002a32:	70e5      	strb	r5, [r4, #3]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
 8002a34:	f7ff fd8c 	bl	8002550 <u8g_call_dev_fn>
}
 8002a38:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08002a3a <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002a3a:	3031      	adds	r0, #49	; 0x31
 8002a3c:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 8002a3e:	4770      	bx	lr

08002a40 <u8g_SetHiColor>:

void u8g_SetHiColor(u8g_t *u8g, uint16_t rgb)
{
  u8g->arg_pixel.color = rgb&255;
 8002a40:	1c03      	adds	r3, r0, #0
 8002a42:	3331      	adds	r3, #49	; 0x31
 8002a44:	7019      	strb	r1, [r3, #0]
  u8g->arg_pixel.hi_color = rgb>>8;
 8002a46:	3032      	adds	r0, #50	; 0x32
 8002a48:	0a09      	lsrs	r1, r1, #8
 8002a4a:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 8002a4c:	4770      	bx	lr

08002a4e <u8g_SetHiColorByRGB>:

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
  g >>= 2;
 8002a4e:	0892      	lsrs	r2, r2, #2
  u8g->arg_pixel.hi_color = rgb>>8;
  /*u8g->color_index = idx; */ /* must be removed */
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
 8002a50:	b510      	push	{r4, lr}
  
  r &= ~7;
  g >>= 2;
  b >>= 3;
 8002a52:	08db      	lsrs	r3, r3, #3
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
 8002a54:	0154      	lsls	r4, r2, #5
 8002a56:	4323      	orrs	r3, r4
 8002a58:	1c04      	adds	r4, r0, #0
 8002a5a:	3431      	adds	r4, #49	; 0x31
 8002a5c:	7023      	strb	r3, [r4, #0]
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
 8002a5e:	2307      	movs	r3, #7
  g >>= 2;
  b >>= 3;
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
  u8g->arg_pixel.hi_color = r;
  u8g->arg_pixel.hi_color |= (g>>3) & 7;
 8002a60:	08d2      	lsrs	r2, r2, #3
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
 8002a62:	4399      	bics	r1, r3
  g >>= 2;
  b >>= 3;
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
  u8g->arg_pixel.hi_color = r;
  u8g->arg_pixel.hi_color |= (g>>3) & 7;
 8002a64:	430a      	orrs	r2, r1
 8002a66:	3032      	adds	r0, #50	; 0x32
 8002a68:	7002      	strb	r2, [r0, #0]
  
  //u8g_SetHiColor(u8g, U8G_GET_HICOLOR_BY_RGB(r,g,b));
}
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <u8g_SetRGB>:

void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
 8002a6c:	b510      	push	{r4, lr}
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
 8002a6e:	7cc4      	ldrb	r4, [r0, #19]
 8002a70:	2c28      	cmp	r4, #40	; 0x28
 8002a72:	d109      	bne.n	8002a88 <u8g_SetRGB+0x1c>
  {
    r &= 0x0e0;
    g &= 0x0e0;
 8002a74:	241f      	movs	r4, #31
 8002a76:	43a2      	bics	r2, r4

void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
  {
    r &= 0x0e0;
 8002a78:	43a1      	bics	r1, r4
    g &= 0x0e0;
    g >>= 3;
 8002a7a:	08d2      	lsrs	r2, r2, #3
    b >>= 6;
    u8g->arg_pixel.color = r | g | b;
 8002a7c:	4311      	orrs	r1, r2
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
  {
    r &= 0x0e0;
    g &= 0x0e0;
    g >>= 3;
    b >>= 6;
 8002a7e:	099b      	lsrs	r3, r3, #6
    u8g->arg_pixel.color = r | g | b;
 8002a80:	4319      	orrs	r1, r3
 8002a82:	3031      	adds	r0, #49	; 0x31
 8002a84:	7001      	strb	r1, [r0, #0]
 8002a86:	e00c      	b.n	8002aa2 <u8g_SetRGB+0x36>
  }
  else if ( u8g->mode == U8G_MODE_HICOLOR )
 8002a88:	2c30      	cmp	r4, #48	; 0x30
 8002a8a:	d102      	bne.n	8002a92 <u8g_SetRGB+0x26>
  {
    u8g_SetHiColorByRGB(u8g, r,g,b);
 8002a8c:	f7ff ffdf 	bl	8002a4e <u8g_SetHiColorByRGB>
 8002a90:	e007      	b.n	8002aa2 <u8g_SetRGB+0x36>
  }
  else
  {
    u8g->arg_pixel.color = r;
 8002a92:	1c04      	adds	r4, r0, #0
 8002a94:	3431      	adds	r4, #49	; 0x31
 8002a96:	7021      	strb	r1, [r4, #0]
    u8g->arg_pixel.hi_color = g;
 8002a98:	1c01      	adds	r1, r0, #0
    u8g->arg_pixel.blue = b;
 8002a9a:	3033      	adds	r0, #51	; 0x33
    u8g_SetHiColorByRGB(u8g, r,g,b);
  }
  else
  {
    u8g->arg_pixel.color = r;
    u8g->arg_pixel.hi_color = g;
 8002a9c:	3132      	adds	r1, #50	; 0x32
 8002a9e:	700a      	strb	r2, [r1, #0]
    u8g->arg_pixel.blue = b;
 8002aa0:	7003      	strb	r3, [r0, #0]
  }
}
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <u8g_GetColorIndex>:


uint8_t u8g_GetColorIndex(u8g_t *u8g)
{
  return u8g->arg_pixel.color;
 8002aa4:	3031      	adds	r0, #49	; 0x31
 8002aa6:	7800      	ldrb	r0, [r0, #0]
}
 8002aa8:	4770      	bx	lr

08002aaa <u8g_GetDefaultForegroundColor>:

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
 8002aaa:	7cc3      	ldrb	r3, [r0, #19]
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
 8002aac:	20ff      	movs	r0, #255	; 0xff

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002aae:	2b28      	cmp	r3, #40	; 0x28
 8002ab0:	d003      	beq.n	8002aba <u8g_GetDefaultForegroundColor+0x10>
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
 8002ab2:	2003      	movs	r0, #3
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d000      	beq.n	8002aba <u8g_GetDefaultForegroundColor+0x10>
    return 3;         /* max intensity */
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
 8002ab8:	2001      	movs	r0, #1
  return 1;
}
 8002aba:	4770      	bx	lr

08002abc <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
 8002abc:	b510      	push	{r4, lr}
 8002abe:	1c04      	adds	r4, r0, #0
  if ( u8g->mode == U8G_MODE_HICOLOR )
 8002ac0:	7cc3      	ldrb	r3, [r0, #19]
 8002ac2:	3431      	adds	r4, #49	; 0x31
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d104      	bne.n	8002ad2 <u8g_SetDefaultForegroundColor+0x16>
  {
    u8g->arg_pixel.color = 0x0ff;
 8002ac8:	23ff      	movs	r3, #255	; 0xff
    u8g->arg_pixel.hi_color = 0x0ff;
 8002aca:	3032      	adds	r0, #50	; 0x32

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
  if ( u8g->mode == U8G_MODE_HICOLOR )
  {
    u8g->arg_pixel.color = 0x0ff;
 8002acc:	7023      	strb	r3, [r4, #0]
    u8g->arg_pixel.hi_color = 0x0ff;
 8002ace:	7003      	strb	r3, [r0, #0]
 8002ad0:	e002      	b.n	8002ad8 <u8g_SetDefaultForegroundColor+0x1c>
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
 8002ad2:	f7ff ffea 	bl	8002aaa <u8g_GetDefaultForegroundColor>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002ad6:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
 8002ad8:	bd10      	pop	{r4, pc}

08002ada <u8g_GetDefaultBackgroundColor>:

uint8_t u8g_GetDefaultBackgroundColor(u8g_t *u8g)
{
  return 0;
}
 8002ada:	2000      	movs	r0, #0
 8002adc:	4770      	bx	lr

08002ade <u8g_SetDefaultBackgroundColor>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	3031      	adds	r0, #49	; 0x31
 8002ae2:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultBackgroundColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultBackgroundColor(u8g));         /* pixel on / black */
}
 8002ae4:	4770      	bx	lr

08002ae6 <u8g_GetDefaultMidColor>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002ae6:	7cc3      	ldrb	r3, [r0, #19]
    return 0x06d;     /* gray: 01101101 */
 8002ae8:	206d      	movs	r0, #109	; 0x6d

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002aea:	2b28      	cmp	r3, #40	; 0x28
 8002aec:	d000      	beq.n	8002af0 <u8g_GetDefaultMidColor+0xa>
    return 0x06d;     /* gray: 01101101 */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
 8002aee:	2001      	movs	r0, #1
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
  return 1;   /* default */
}
 8002af0:	4770      	bx	lr

08002af2 <u8g_SetDefaultMidColor>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002af2:	7cc2      	ldrb	r2, [r0, #19]
    return 0x06d;     /* gray: 01101101 */
 8002af4:	236d      	movs	r3, #109	; 0x6d

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002af6:	2a28      	cmp	r2, #40	; 0x28
 8002af8:	d000      	beq.n	8002afc <u8g_SetDefaultMidColor+0xa>
    return 0x06d;     /* gray: 01101101 */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
 8002afa:	2301      	movs	r3, #1
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002afc:	3031      	adds	r0, #49	; 0x31
 8002afe:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultMidColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultMidColor(u8g));
}
 8002b00:	4770      	bx	lr
 8002b02:	46c0      	nop			; (mov r8, r8)

08002b04 <u8g_state_dummy_cb>:
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
  /* the dummy procedure does nothing */
}
 8002b04:	4770      	bx	lr

08002b06 <u8g_SetHardwareBackup>:

void u8g_SetHardwareBackup(u8g_t *u8g, u8g_state_cb backup_cb)
{
 8002b06:	b508      	push	{r3, lr}
  u8g->state_cb = backup_cb;
 8002b08:	6441      	str	r1, [r0, #68]	; 0x44
  /* in most cases the init message was already sent, so this will backup the */
  /* current u8g state */
  backup_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	4788      	blx	r1
}
 8002b0e:	bd08      	pop	{r3, pc}

08002b10 <u8g_backup_spi>:

#else

void u8g_backup_spi(uint8_t msg)
{
}
 8002b10:	4770      	bx	lr

08002b12 <u8g_pb16v1_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
  do
  {
    *ptr++ = 0;
 8002b12:	2100      	movs	r1, #0

void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 8002b14:	7943      	ldrb	r3, [r0, #5]
void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;


void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8002b16:	6882      	ldr	r2, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	18d3      	adds	r3, r2, r3
  do
  {
    *ptr++ = 0;
 8002b1c:	7011      	strb	r1, [r2, #0]
 8002b1e:	3201      	adds	r2, #1
  } while( ptr != end_ptr );
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1fb      	bne.n	8002b1c <u8g_pb16v1_Clear+0xa>
}
 8002b24:	4770      	bx	lr

08002b26 <u8g_pb16v1_Init>:

/* Obsolete, usually set by the init of the structure */
void u8g_pb16v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
{
 8002b26:	b508      	push	{r3, lr}
  b->buf = buf;
 8002b28:	6081      	str	r1, [r0, #8]
  b->width = width;
 8002b2a:	7142      	strb	r2, [r0, #5]
  u8g_pb16v1_Clear(b);
 8002b2c:	f7ff fff1 	bl	8002b12 <u8g_pb16v1_Clear>
}
 8002b30:	bd08      	pop	{r3, pc}

08002b32 <u8g_pb16v1_set_pixel>:

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8002b32:	b530      	push	{r4, r5, lr}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
 8002b34:	7885      	ldrb	r5, [r0, #2]
}

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8002b36:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 8002b38:	1b52      	subs	r2, r2, r5
 8002b3a:	b2d2      	uxtb	r2, r2
  if ( y >= 8 )
 8002b3c:	2a07      	cmp	r2, #7
 8002b3e:	d903      	bls.n	8002b48 <u8g_pb16v1_set_pixel+0x16>
  {
    ptr += b->width;
 8002b40:	7940      	ldrb	r0, [r0, #5]
 8002b42:	1824      	adds	r4, r4, r0
    y &= 0x07;
 8002b44:	2007      	movs	r0, #7
 8002b46:	4002      	ands	r2, r0
  }
  mask = 1;
  mask <<= y;
 8002b48:	2001      	movs	r0, #1
 8002b4a:	4090      	lsls	r0, r2
  ptr += x;
 8002b4c:	1861      	adds	r1, r4, r1
  {
    ptr += b->width;
    y &= 0x07;
  }
  mask = 1;
  mask <<= y;
 8002b4e:	b2c2      	uxtb	r2, r0
 8002b50:	7808      	ldrb	r0, [r1, #0]
  ptr += x;
  if ( color_index )
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <u8g_pb16v1_set_pixel+0x28>
  {
    *ptr |= mask;
 8002b56:	4310      	orrs	r0, r2
 8002b58:	e000      	b.n	8002b5c <u8g_pb16v1_set_pixel+0x2a>
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 8002b5a:	4390      	bics	r0, r2
 8002b5c:	7008      	strb	r0, [r1, #0]
  }
}
 8002b5e:	bd30      	pop	{r4, r5, pc}

08002b60 <u8g_pb16v1_SetPixel>:


void u8g_pb16v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8002b60:	b510      	push	{r4, lr}
  if ( arg_pixel->y < b->p.page_y0 )
 8002b62:	7883      	ldrb	r3, [r0, #2]
 8002b64:	784a      	ldrb	r2, [r1, #1]
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d80a      	bhi.n	8002b80 <u8g_pb16v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8002b6a:	78c3      	ldrb	r3, [r0, #3]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d307      	bcc.n	8002b80 <u8g_pb16v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 8002b70:	780c      	ldrb	r4, [r1, #0]
 8002b72:	7943      	ldrb	r3, [r0, #5]
 8002b74:	42a3      	cmp	r3, r4
 8002b76:	d903      	bls.n	8002b80 <u8g_pb16v1_SetPixel+0x20>
    return;
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002b78:	790b      	ldrb	r3, [r1, #4]
 8002b7a:	1c21      	adds	r1, r4, #0
 8002b7c:	f7ff ffd9 	bl	8002b32 <u8g_pb16v1_set_pixel>
}
 8002b80:	bd10      	pop	{r4, pc}

08002b82 <u8g_pb16v1_Set8PixelStd>:

void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002b82:	b570      	push	{r4, r5, r6, lr}
 8002b84:	1c06      	adds	r6, r0, #0
 8002b86:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002b88:	788d      	ldrb	r5, [r1, #2]
  do
  {
    if ( pixel & 128 )
 8002b8a:	b26b      	sxtb	r3, r5
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da03      	bge.n	8002b98 <u8g_pb16v1_Set8PixelStd+0x16>
    {
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8002b90:	1c30      	adds	r0, r6, #0
 8002b92:	1c21      	adds	r1, r4, #0
 8002b94:	f7ff ffe4 	bl	8002b60 <u8g_pb16v1_SetPixel>
    }
    switch( arg_pixel->dir )
 8002b98:	78e0      	ldrb	r0, [r4, #3]
 8002b9a:	2803      	cmp	r0, #3
 8002b9c:	d810      	bhi.n	8002bc0 <u8g_pb16v1_Set8PixelStd+0x3e>
 8002b9e:	f000 fa49 	bl	8003034 <__gnu_thumb1_case_uqi>
 8002ba2:	0502      	.short	0x0502
 8002ba4:	0c08      	.short	0x0c08
    {
      case 0: arg_pixel->x++; break;
 8002ba6:	7823      	ldrb	r3, [r4, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	e004      	b.n	8002bb6 <u8g_pb16v1_Set8PixelStd+0x34>
      case 1: arg_pixel->y++; break;
 8002bac:	7863      	ldrb	r3, [r4, #1]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	e005      	b.n	8002bbe <u8g_pb16v1_Set8PixelStd+0x3c>
      case 2: arg_pixel->x--; break;
 8002bb2:	7823      	ldrb	r3, [r4, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	7023      	strb	r3, [r4, #0]
 8002bb8:	e002      	b.n	8002bc0 <u8g_pb16v1_Set8PixelStd+0x3e>
      case 3: arg_pixel->y--; break;
 8002bba:	7863      	ldrb	r3, [r4, #1]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	7063      	strb	r3, [r4, #1]
    }
    pixel <<= 1;
 8002bc0:	006d      	lsls	r5, r5, #1
 8002bc2:	b2ed      	uxtb	r5, r5
  } while( pixel != 0  );
 8002bc4:	2d00      	cmp	r5, #0
 8002bc6:	d1e0      	bne.n	8002b8a <u8g_pb16v1_Set8PixelStd+0x8>
}
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}

08002bca <u8g_pb16v1_Set8PixelOpt2>:


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bcc:	9001      	str	r0, [sp, #4]
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002bce:	78c8      	ldrb	r0, [r1, #3]
  } while( pixel != 0  );
}


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002bd0:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002bd2:	788d      	ldrb	r5, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002bd4:	2803      	cmp	r0, #3
 8002bd6:	d80e      	bhi.n	8002bf6 <u8g_pb16v1_Set8PixelOpt2+0x2c>
 8002bd8:	f000 fa2c 	bl	8003034 <__gnu_thumb1_case_uqi>
 8002bdc:	0a070502 	.word	0x0a070502

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002be0:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
 8002be2:	2701      	movs	r7, #1
 8002be4:	e009      	b.n	8002bfa <u8g_pb16v1_Set8PixelOpt2+0x30>
    case 1: dy++; break;
 8002be6:	2601      	movs	r6, #1
 8002be8:	e003      	b.n	8002bf2 <u8g_pb16v1_Set8PixelOpt2+0x28>

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002bea:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
 8002bec:	27ff      	movs	r7, #255	; 0xff
 8002bee:	e004      	b.n	8002bfa <u8g_pb16v1_Set8PixelOpt2+0x30>
    case 3: dy--; break;
 8002bf0:	26ff      	movs	r6, #255	; 0xff


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002bf2:	2700      	movs	r7, #0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
 8002bf4:	e001      	b.n	8002bfa <u8g_pb16v1_Set8PixelOpt2+0x30>

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002bf6:	2600      	movs	r6, #0


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002bf8:	1c37      	adds	r7, r6, #0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8002bfa:	b26b      	sxtb	r3, r5
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	da03      	bge.n	8002c08 <u8g_pb16v1_Set8PixelOpt2+0x3e>
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8002c00:	9801      	ldr	r0, [sp, #4]
 8002c02:	1c21      	adds	r1, r4, #0
 8002c04:	f7ff ffac 	bl	8002b60 <u8g_pb16v1_SetPixel>
    arg_pixel->x += dx;
 8002c08:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8002c0a:	006d      	lsls	r5, r5, #1
  
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8002c10:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8002c12:	b2ed      	uxtb	r5, r5
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
    arg_pixel->y += dy;
 8002c14:	18f3      	adds	r3, r6, r3
 8002c16:	7063      	strb	r3, [r4, #1]
    pixel <<= 1;
  } while( pixel != 0  );
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d1ee      	bne.n	8002bfa <u8g_pb16v1_Set8PixelOpt2+0x30>
  
}
 8002c1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002c1e <u8g_dev_pb16v1_base_fn>:

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002c1e:	b570      	push	{r4, r5, r6, lr}
 8002c20:	1c1e      	adds	r6, r3, #0
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002c22:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8002c24:	2a32      	cmp	r2, #50	; 0x32
 8002c26:	d01f      	beq.n	8002c68 <u8g_dev_pb16v1_base_fn+0x4a>
 8002c28:	d80c      	bhi.n	8002c44 <u8g_dev_pb16v1_base_fn+0x26>
 8002c2a:	2a15      	cmp	r2, #21
 8002c2c:	d021      	beq.n	8002c72 <u8g_dev_pb16v1_base_fn+0x54>
 8002c2e:	2a17      	cmp	r2, #23
 8002c30:	d028      	beq.n	8002c84 <u8g_dev_pb16v1_base_fn+0x66>
 8002c32:	2a14      	cmp	r2, #20
 8002c34:	d12f      	bne.n	8002c96 <u8g_dev_pb16v1_base_fn+0x78>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
 8002c36:	1c28      	adds	r0, r5, #0
 8002c38:	f7ff ff6b 	bl	8002b12 <u8g_pb16v1_Clear>
      u8g_page_First(&(pb->p));
 8002c3c:	1c28      	adds	r0, r5, #0
 8002c3e:	f000 f9d1 	bl	8002fe4 <u8g_page_First>
 8002c42:	e028      	b.n	8002c96 <u8g_dev_pb16v1_base_fn+0x78>
}

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 8002c44:	2a46      	cmp	r2, #70	; 0x46
 8002c46:	d022      	beq.n	8002c8e <u8g_dev_pb16v1_base_fn+0x70>
 8002c48:	2a47      	cmp	r2, #71	; 0x47
 8002c4a:	d022      	beq.n	8002c92 <u8g_dev_pb16v1_base_fn+0x74>
 8002c4c:	2a3b      	cmp	r2, #59	; 0x3b
 8002c4e:	d122      	bne.n	8002c96 <u8g_dev_pb16v1_base_fn+0x78>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002c50:	1c28      	adds	r0, r5, #0
 8002c52:	1c19      	adds	r1, r3, #0
 8002c54:	f000 f9a8 	bl	8002fa8 <u8g_pb_Is8PixelVisible>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8002c58:	2401      	movs	r4, #1
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d01c      	beq.n	8002c98 <u8g_dev_pb16v1_base_fn+0x7a>
        u8g_pb16v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8002c5e:	1c28      	adds	r0, r5, #0
 8002c60:	1c31      	adds	r1, r6, #0
 8002c62:	f7ff ffb2 	bl	8002bca <u8g_pb16v1_Set8PixelOpt2>
 8002c66:	e017      	b.n	8002c98 <u8g_dev_pb16v1_base_fn+0x7a>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb16v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8002c68:	1c28      	adds	r0, r5, #0
 8002c6a:	1c19      	adds	r1, r3, #0
 8002c6c:	f7ff ff78 	bl	8002b60 <u8g_pb16v1_SetPixel>
 8002c70:	e011      	b.n	8002c96 <u8g_dev_pb16v1_base_fn+0x78>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8002c72:	1c28      	adds	r0, r5, #0
 8002c74:	f000 f9c5 	bl	8003002 <u8g_page_Next>
 8002c78:	1e04      	subs	r4, r0, #0
 8002c7a:	d00d      	beq.n	8002c98 <u8g_dev_pb16v1_base_fn+0x7a>
        return 0;
      u8g_pb16v1_Clear(pb);
 8002c7c:	1c28      	adds	r0, r5, #0
 8002c7e:	f7ff ff48 	bl	8002b12 <u8g_pb16v1_Clear>
 8002c82:	e008      	b.n	8002c96 <u8g_dev_pb16v1_base_fn+0x78>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8002c84:	1c28      	adds	r0, r5, #0
 8002c86:	1c19      	adds	r1, r3, #0
 8002c88:	f000 f984 	bl	8002f94 <u8g_pb_GetPageBox>
 8002c8c:	e003      	b.n	8002c96 <u8g_dev_pb16v1_base_fn+0x78>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8002c8e:	796b      	ldrb	r3, [r5, #5]
 8002c90:	e000      	b.n	8002c94 <u8g_dev_pb16v1_base_fn+0x76>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8002c92:	786b      	ldrb	r3, [r5, #1]
 8002c94:	7033      	strb	r3, [r6, #0]
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8002c96:	2401      	movs	r4, #1
  }
  return 1;
}
 8002c98:	1c20      	adds	r0, r4, #0
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}

08002c9c <u8g_pb8v1_Init>:
void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel) U8G_NOINLINE ;
void u8g_pb8v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;

/* Obsolete, usually set by the init of the structure */
void u8g_pb8v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
{
 8002c9c:	b508      	push	{r3, lr}
  b->buf = buf;
 8002c9e:	6081      	str	r1, [r0, #8]
  b->width = width;
 8002ca0:	7142      	strb	r2, [r0, #5]
  u8g_pb_Clear(b);
 8002ca2:	f000 f937 	bl	8002f14 <u8g_pb_Clear>
}
 8002ca6:	bd08      	pop	{r3, pc}

08002ca8 <u8g_pb8v1_set_pixel>:

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8002ca8:	b530      	push	{r4, r5, lr}
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
  mask = 1;
  y &= 0x07;
  mask <<= y;
 8002caa:	2407      	movs	r4, #7
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8002cac:	6885      	ldr	r5, [r0, #8]
  
  y -= b->p.page_y0;
 8002cae:	7880      	ldrb	r0, [r0, #2]
  mask = 1;
  y &= 0x07;
  mask <<= y;
  ptr += x;
 8002cb0:	1869      	adds	r1, r5, r1
void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
 8002cb2:	1a12      	subs	r2, r2, r0
  mask = 1;
  y &= 0x07;
  mask <<= y;
 8002cb4:	4022      	ands	r2, r4
 8002cb6:	2401      	movs	r4, #1
 8002cb8:	1c20      	adds	r0, r4, #0
 8002cba:	4090      	lsls	r0, r2
 8002cbc:	b2c2      	uxtb	r2, r0
 8002cbe:	7808      	ldrb	r0, [r1, #0]
  ptr += x;
  if ( color_index )
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <u8g_pb8v1_set_pixel+0x20>
  {
    *ptr |= mask;
 8002cc4:	4310      	orrs	r0, r2
 8002cc6:	e000      	b.n	8002cca <u8g_pb8v1_set_pixel+0x22>
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 8002cc8:	4390      	bics	r0, r2
 8002cca:	7008      	strb	r0, [r1, #0]
  }
}
 8002ccc:	bd30      	pop	{r4, r5, pc}

08002cce <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8002cce:	b510      	push	{r4, lr}
  if ( arg_pixel->y < b->p.page_y0 )
 8002cd0:	7883      	ldrb	r3, [r0, #2]
 8002cd2:	784a      	ldrb	r2, [r1, #1]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d80a      	bhi.n	8002cee <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8002cd8:	78c3      	ldrb	r3, [r0, #3]
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d307      	bcc.n	8002cee <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 8002cde:	780c      	ldrb	r4, [r1, #0]
 8002ce0:	7943      	ldrb	r3, [r0, #5]
 8002ce2:	42a3      	cmp	r3, r4
 8002ce4:	d903      	bls.n	8002cee <u8g_pb8v1_SetPixel+0x20>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002ce6:	790b      	ldrb	r3, [r1, #4]
 8002ce8:	1c21      	adds	r1, r4, #0
 8002cea:	f7ff ffdd 	bl	8002ca8 <u8g_pb8v1_set_pixel>
}
 8002cee:	bd10      	pop	{r4, pc}

08002cf0 <u8g_pb8v1_Set8PixelStd>:

void u8g_pb8v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	1c06      	adds	r6, r0, #0
 8002cf4:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002cf6:	788d      	ldrb	r5, [r1, #2]
  do
  {
    if ( pixel & 128 )
 8002cf8:	b26b      	sxtb	r3, r5
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da03      	bge.n	8002d06 <u8g_pb8v1_Set8PixelStd+0x16>
    {
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8002cfe:	1c30      	adds	r0, r6, #0
 8002d00:	1c21      	adds	r1, r4, #0
 8002d02:	f7ff ffe4 	bl	8002cce <u8g_pb8v1_SetPixel>
    }
    switch( arg_pixel->dir )
 8002d06:	78e0      	ldrb	r0, [r4, #3]
 8002d08:	2803      	cmp	r0, #3
 8002d0a:	d810      	bhi.n	8002d2e <u8g_pb8v1_Set8PixelStd+0x3e>
 8002d0c:	f000 f992 	bl	8003034 <__gnu_thumb1_case_uqi>
 8002d10:	0c080502 	.word	0x0c080502
    {
      case 0: arg_pixel->x++; break;
 8002d14:	7823      	ldrb	r3, [r4, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	e004      	b.n	8002d24 <u8g_pb8v1_Set8PixelStd+0x34>
      case 1: arg_pixel->y++; break;
 8002d1a:	7863      	ldrb	r3, [r4, #1]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	e005      	b.n	8002d2c <u8g_pb8v1_Set8PixelStd+0x3c>
      case 2: arg_pixel->x--; break;
 8002d20:	7823      	ldrb	r3, [r4, #0]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	7023      	strb	r3, [r4, #0]
 8002d26:	e002      	b.n	8002d2e <u8g_pb8v1_Set8PixelStd+0x3e>
      case 3: arg_pixel->y--; break;
 8002d28:	7863      	ldrb	r3, [r4, #1]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	7063      	strb	r3, [r4, #1]
    }
    pixel <<= 1;
 8002d2e:	006d      	lsls	r5, r5, #1
 8002d30:	b2ed      	uxtb	r5, r5
  } while( pixel != 0  );
 8002d32:	2d00      	cmp	r5, #0
 8002d34:	d1e0      	bne.n	8002cf8 <u8g_pb8v1_Set8PixelStd+0x8>
}
 8002d36:	bd70      	pop	{r4, r5, r6, pc}

08002d38 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d3a:	9001      	str	r0, [sp, #4]
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002d3c:	78c8      	ldrb	r0, [r1, #3]
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002d3e:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002d40:	788d      	ldrb	r5, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002d42:	2803      	cmp	r0, #3
 8002d44:	d80e      	bhi.n	8002d64 <u8g_pb8v1_Set8PixelOpt2+0x2c>
 8002d46:	f000 f975 	bl	8003034 <__gnu_thumb1_case_uqi>
 8002d4a:	0502      	.short	0x0502
 8002d4c:	0a07      	.short	0x0a07

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002d4e:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
 8002d50:	2701      	movs	r7, #1
 8002d52:	e009      	b.n	8002d68 <u8g_pb8v1_Set8PixelOpt2+0x30>
    case 1: dy++; break;
 8002d54:	2601      	movs	r6, #1
 8002d56:	e003      	b.n	8002d60 <u8g_pb8v1_Set8PixelOpt2+0x28>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002d58:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
 8002d5a:	27ff      	movs	r7, #255	; 0xff
 8002d5c:	e004      	b.n	8002d68 <u8g_pb8v1_Set8PixelOpt2+0x30>
    case 3: dy--; break;
 8002d5e:	26ff      	movs	r6, #255	; 0xff


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002d60:	2700      	movs	r7, #0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
 8002d62:	e001      	b.n	8002d68 <u8g_pb8v1_Set8PixelOpt2+0x30>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002d64:	2600      	movs	r6, #0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002d66:	1c37      	adds	r7, r6, #0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8002d68:	b26b      	sxtb	r3, r5
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da03      	bge.n	8002d76 <u8g_pb8v1_Set8PixelOpt2+0x3e>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8002d6e:	9801      	ldr	r0, [sp, #4]
 8002d70:	1c21      	adds	r1, r4, #0
 8002d72:	f7ff ffac 	bl	8002cce <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8002d76:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8002d78:	006d      	lsls	r5, r5, #1
  
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8002d7e:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8002d80:	b2ed      	uxtb	r5, r5
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
    arg_pixel->y += dy;
 8002d82:	18f3      	adds	r3, r6, r3
 8002d84:	7063      	strb	r3, [r4, #1]
    pixel <<= 1;
  } while( pixel != 0  );
 8002d86:	2d00      	cmp	r5, #0
 8002d88:	d1ee      	bne.n	8002d68 <u8g_pb8v1_Set8PixelOpt2+0x30>
  
}
 8002d8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002d8c <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	1c1e      	adds	r6, r3, #0
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002d90:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8002d92:	2a32      	cmp	r2, #50	; 0x32
 8002d94:	d01f      	beq.n	8002dd6 <u8g_dev_pb8v1_base_fn+0x4a>
 8002d96:	d80c      	bhi.n	8002db2 <u8g_dev_pb8v1_base_fn+0x26>
 8002d98:	2a15      	cmp	r2, #21
 8002d9a:	d021      	beq.n	8002de0 <u8g_dev_pb8v1_base_fn+0x54>
 8002d9c:	2a17      	cmp	r2, #23
 8002d9e:	d028      	beq.n	8002df2 <u8g_dev_pb8v1_base_fn+0x66>
 8002da0:	2a14      	cmp	r2, #20
 8002da2:	d12f      	bne.n	8002e04 <u8g_dev_pb8v1_base_fn+0x78>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8002da4:	1c28      	adds	r0, r5, #0
 8002da6:	f000 f8b5 	bl	8002f14 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8002daa:	1c28      	adds	r0, r5, #0
 8002dac:	f000 f91a 	bl	8002fe4 <u8g_page_First>
 8002db0:	e028      	b.n	8002e04 <u8g_dev_pb8v1_base_fn+0x78>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 8002db2:	2a46      	cmp	r2, #70	; 0x46
 8002db4:	d022      	beq.n	8002dfc <u8g_dev_pb8v1_base_fn+0x70>
 8002db6:	2a47      	cmp	r2, #71	; 0x47
 8002db8:	d022      	beq.n	8002e00 <u8g_dev_pb8v1_base_fn+0x74>
 8002dba:	2a3b      	cmp	r2, #59	; 0x3b
 8002dbc:	d122      	bne.n	8002e04 <u8g_dev_pb8v1_base_fn+0x78>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002dbe:	1c28      	adds	r0, r5, #0
 8002dc0:	1c19      	adds	r1, r3, #0
 8002dc2:	f000 f8f1 	bl	8002fa8 <u8g_pb_Is8PixelVisible>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8002dc6:	2401      	movs	r4, #1
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d01c      	beq.n	8002e06 <u8g_dev_pb8v1_base_fn+0x7a>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8002dcc:	1c28      	adds	r0, r5, #0
 8002dce:	1c31      	adds	r1, r6, #0
 8002dd0:	f7ff ffb2 	bl	8002d38 <u8g_pb8v1_Set8PixelOpt2>
 8002dd4:	e017      	b.n	8002e06 <u8g_dev_pb8v1_base_fn+0x7a>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8002dd6:	1c28      	adds	r0, r5, #0
 8002dd8:	1c19      	adds	r1, r3, #0
 8002dda:	f7ff ff78 	bl	8002cce <u8g_pb8v1_SetPixel>
 8002dde:	e011      	b.n	8002e04 <u8g_dev_pb8v1_base_fn+0x78>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8002de0:	1c28      	adds	r0, r5, #0
 8002de2:	f000 f90e 	bl	8003002 <u8g_page_Next>
 8002de6:	1e04      	subs	r4, r0, #0
 8002de8:	d00d      	beq.n	8002e06 <u8g_dev_pb8v1_base_fn+0x7a>
        return 0;
      u8g_pb_Clear(pb);
 8002dea:	1c28      	adds	r0, r5, #0
 8002dec:	f000 f892 	bl	8002f14 <u8g_pb_Clear>
 8002df0:	e008      	b.n	8002e04 <u8g_dev_pb8v1_base_fn+0x78>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8002df2:	1c28      	adds	r0, r5, #0
 8002df4:	1c19      	adds	r1, r3, #0
 8002df6:	f000 f8cd 	bl	8002f94 <u8g_pb_GetPageBox>
 8002dfa:	e003      	b.n	8002e04 <u8g_dev_pb8v1_base_fn+0x78>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8002dfc:	796b      	ldrb	r3, [r5, #5]
 8002dfe:	e000      	b.n	8002e02 <u8g_dev_pb8v1_base_fn+0x76>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8002e00:	786b      	ldrb	r3, [r5, #1]
 8002e02:	7033      	strb	r3, [r6, #0]
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8002e04:	2401      	movs	r4, #1
  }
  return 1;
}
 8002e06:	1c20      	adds	r0, r4, #0
 8002e08:	bd70      	pop	{r4, r5, r6, pc}

08002e0a <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8002e0a:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	688c      	ldr	r4, [r1, #8]
 8002e10:	2101      	movs	r1, #1
 8002e12:	47a0      	blx	r4
}
 8002e14:	bd10      	pop	{r4, pc}

08002e16 <u8g_StopCom>:

void u8g_StopCom(u8g_t *u8g, u8g_dev_t *dev)
{
 8002e16:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
 8002e18:	688c      	ldr	r4, [r1, #8]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	1c0a      	adds	r2, r1, #0
 8002e1e:	1c0b      	adds	r3, r1, #0
 8002e20:	47a0      	blx	r4
}
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <u8g_SetChipSelect>:

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8002e24:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8002e26:	2300      	movs	r3, #0
 8002e28:	688c      	ldr	r4, [r1, #8]
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	47a0      	blx	r4
}
 8002e2e:	bd10      	pop	{r4, pc}

08002e30 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002e30:	2200      	movs	r2, #0
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8002e32:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002e34:	1c13      	adds	r3, r2, #0
 8002e36:	688c      	ldr	r4, [r1, #8]
 8002e38:	2104      	movs	r1, #4
 8002e3a:	47a0      	blx	r4
}
 8002e3c:	bd10      	pop	{r4, pc}

08002e3e <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8002e3e:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8002e40:	2201      	movs	r2, #1
 8002e42:	688c      	ldr	r4, [r1, #8]
 8002e44:	2300      	movs	r3, #0
 8002e46:	2104      	movs	r1, #4
 8002e48:	47a0      	blx	r4
}
 8002e4a:	bd10      	pop	{r4, pc}

08002e4c <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8002e4c:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	688c      	ldr	r4, [r1, #8]
 8002e52:	2102      	movs	r1, #2
 8002e54:	47a0      	blx	r4
}
 8002e56:	bd10      	pop	{r4, pc}

08002e58 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8002e58:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	688c      	ldr	r4, [r1, #8]
 8002e5e:	2105      	movs	r1, #5
 8002e60:	47a0      	blx	r4
}
 8002e62:	bd10      	pop	{r4, pc}

08002e64 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8002e64:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8002e66:	688c      	ldr	r4, [r1, #8]
 8002e68:	2106      	movs	r1, #6
 8002e6a:	47a0      	blx	r4
}
 8002e6c:	bd10      	pop	{r4, pc}

08002e6e <u8g_WriteSequenceP>:

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
 8002e6e:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
 8002e70:	688c      	ldr	r4, [r1, #8]
 8002e72:	2107      	movs	r1, #7
 8002e74:	47a0      	blx	r4
}
 8002e76:	bd10      	pop	{r4, pc}

08002e78 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	1c05      	adds	r5, r0, #0
 8002e7c:	1c0e      	adds	r6, r1, #0
 8002e7e:	1c17      	adds	r7, r2, #0
  uint8_t is_escape = 0;
 8002e80:	2300      	movs	r3, #0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8002e82:	783c      	ldrb	r4, [r7, #0]
    if ( is_escape == 0 )
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <u8g_WriteEscSeqP+0x24>
    {
      if ( value != 255 )
 8002e88:	2cff      	cmp	r4, #255	; 0xff
 8002e8a:	d03c      	beq.n	8002f06 <u8g_WriteEscSeqP+0x8e>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8002e8c:	1c28      	adds	r0, r5, #0
 8002e8e:	1c31      	adds	r1, r6, #0
 8002e90:	1c22      	adds	r2, r4, #0
 8002e92:	f7ff ffe1 	bl	8002e58 <u8g_WriteByte>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d12e      	bne.n	8002ef8 <u8g_WriteEscSeqP+0x80>
 8002e9a:	e037      	b.n	8002f0c <u8g_WriteEscSeqP+0x94>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
 8002e9c:	2cff      	cmp	r4, #255	; 0xff
 8002e9e:	d0f5      	beq.n	8002e8c <u8g_WriteEscSeqP+0x14>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
 8002ea0:	2cfe      	cmp	r4, #254	; 0xfe
 8002ea2:	d035      	beq.n	8002f10 <u8g_WriteEscSeqP+0x98>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8002ea4:	2cef      	cmp	r4, #239	; 0xef
 8002ea6:	d827      	bhi.n	8002ef8 <u8g_WriteEscSeqP+0x80>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8002ea8:	2cdf      	cmp	r4, #223	; 0xdf
 8002eaa:	d906      	bls.n	8002eba <u8g_WriteEscSeqP+0x42>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8002eac:	220f      	movs	r2, #15
 8002eae:	1c28      	adds	r0, r5, #0
 8002eb0:	4022      	ands	r2, r4
 8002eb2:	1c31      	adds	r1, r6, #0
 8002eb4:	f7ff ffca 	bl	8002e4c <u8g_SetAddress>
 8002eb8:	e01e      	b.n	8002ef8 <u8g_WriteEscSeqP+0x80>
      }
      else if ( value >= 0xd0 )
 8002eba:	2ccf      	cmp	r4, #207	; 0xcf
 8002ebc:	d906      	bls.n	8002ecc <u8g_WriteEscSeqP+0x54>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	1c28      	adds	r0, r5, #0
 8002ec2:	4022      	ands	r2, r4
 8002ec4:	1c31      	adds	r1, r6, #0
 8002ec6:	f7ff ffad 	bl	8002e24 <u8g_SetChipSelect>
 8002eca:	e015      	b.n	8002ef8 <u8g_WriteEscSeqP+0x80>
      }
      else if ( value >= 0xc0 )
 8002ecc:	2cbf      	cmp	r4, #191	; 0xbf
 8002ece:	d915      	bls.n	8002efc <u8g_WriteEscSeqP+0x84>
      {
        u8g_SetResetLow(u8g, dev);
 8002ed0:	1c31      	adds	r1, r6, #0
 8002ed2:	1c28      	adds	r0, r5, #0
 8002ed4:	f7ff ffac 	bl	8002e30 <u8g_SetResetLow>
        value &= 0x0f;
 8002ed8:	220f      	movs	r2, #15
 8002eda:	4014      	ands	r4, r2
        value <<= 4;
 8002edc:	0124      	lsls	r4, r4, #4
        value+=2;
 8002ede:	3402      	adds	r4, #2
        u8g_Delay(value);
 8002ee0:	b2e4      	uxtb	r4, r4
 8002ee2:	b2a4      	uxth	r4, r4
 8002ee4:	1c20      	adds	r0, r4, #0
 8002ee6:	f000 fc45 	bl	8003774 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8002eea:	1c28      	adds	r0, r5, #0
 8002eec:	1c31      	adds	r1, r6, #0
 8002eee:	f7ff ffa6 	bl	8002e3e <u8g_SetResetHigh>
        u8g_Delay(value);
 8002ef2:	1c20      	adds	r0, r4, #0
 8002ef4:	f000 fc3e 	bl	8003774 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e005      	b.n	8002f08 <u8g_WriteEscSeqP+0x90>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8002efc:	b263      	sxtb	r3, r4
      {
        u8g_Delay(value);
 8002efe:	b2a0      	uxth	r0, r4
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	daf7      	bge.n	8002ef4 <u8g_WriteEscSeqP+0x7c>
 8002f04:	e7f8      	b.n	8002ef8 <u8g_WriteEscSeqP+0x80>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
 8002f06:	2301      	movs	r3, #1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
 8002f08:	3701      	adds	r7, #1
  }
 8002f0a:	e7ba      	b.n	8002e82 <u8g_WriteEscSeqP+0xa>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e000      	b.n	8002f12 <u8g_WriteEscSeqP+0x9a>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
 8002f10:	2001      	movs	r0, #1
}
 8002f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f14 <u8g_pb_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
  do
  {
    *ptr++ = 0;
 8002f14:	2100      	movs	r1, #0

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8002f16:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
 8002f18:	7942      	ldrb	r2, [r0, #5]
 8002f1a:	189a      	adds	r2, r3, r2
  do
  {
    *ptr++ = 0;
 8002f1c:	7019      	strb	r1, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
  } while( ptr != end_ptr );
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d1fb      	bne.n	8002f1c <u8g_pb_Clear+0x8>
}
 8002f24:	4770      	bx	lr

08002f26 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8002f26:	b530      	push	{r4, r5, lr}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8002f28:	2400      	movs	r4, #0
 8002f2a:	1c25      	adds	r5, r4, #0
 8002f2c:	78c3      	ldrb	r3, [r0, #3]
  c2 = v1 >= pb->p.page_y0;
 8002f2e:	7880      	ldrb	r0, [r0, #2]
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8002f30:	428b      	cmp	r3, r1
 8002f32:	4165      	adcs	r5, r4
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
 8002f34:	428a      	cmp	r2, r1
 8002f36:	419b      	sbcs	r3, r3
 8002f38:	4259      	negs	r1, r3
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
 8002f3a:	1c0b      	adds	r3, r1, #0

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
 8002f3c:	4282      	cmp	r2, r0
 8002f3e:	4164      	adcs	r4, r4
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8002f40:	b2ed      	uxtb	r5, r5
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
 8002f42:	432b      	orrs	r3, r5
 8002f44:	401c      	ands	r4, r3
  c1 |= c3;
  return c1 & 1;
 8002f46:	1c20      	adds	r0, r4, #0
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
 8002f48:	4029      	ands	r1, r5
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
 8002f4a:	4308      	orrs	r0, r1
}
 8002f4c:	bd30      	pop	{r4, r5, pc}

08002f4e <u8g_pb_IsXIntersection>:
  */
  /*
  c0 = v0 < 0;
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
 8002f4e:	7943      	ldrb	r3, [r0, #5]
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
  /*if ( c1 && c2 ) return 0;*/
  return 1;
 8002f50:	2001      	movs	r0, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8002f52:	4299      	cmp	r1, r3
 8002f54:	d903      	bls.n	8002f5e <u8g_pb_IsXIntersection+0x10>
 8002f56:	2000      	movs	r0, #0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	4140      	adcs	r0, r0
 8002f5c:	b2c0      	uxtb	r0, r0
  /*if ( c1 && c2 ) return 0;*/
  return 1;
}
 8002f5e:	4770      	bx	lr

08002f60 <u8g_pb_IsIntersection>:

uint8_t u8g_pb_IsIntersection(u8g_pb_t *pb, u8g_dev_arg_bbx_t *bbx)
{
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	1c0d      	adds	r5, r1, #0
  u8g_uint_t tmp;

  tmp = bbx->y;
 8002f64:	7849      	ldrb	r1, [r1, #1]
  tmp += bbx->h;
 8002f66:	78ea      	ldrb	r2, [r5, #3]
  /*if ( c1 && c2 ) return 0;*/
  return 1;
}

uint8_t u8g_pb_IsIntersection(u8g_pb_t *pb, u8g_dev_arg_bbx_t *bbx)
{
 8002f68:	1c04      	adds	r4, r0, #0
  u8g_uint_t tmp;

  tmp = bbx->y;
  tmp += bbx->h;
 8002f6a:	188a      	adds	r2, r1, r2
  tmp--;
 8002f6c:	3a01      	subs	r2, #1
  
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f7ff ffd9 	bl	8002f26 <u8g_pb_IsYIntersection>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d00c      	beq.n	8002f92 <u8g_pb_IsIntersection+0x32>
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
 8002f78:	7829      	ldrb	r1, [r5, #0]
  */
  /*
  c0 = v0 < 0;
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
 8002f7a:	7962      	ldrb	r2, [r4, #5]
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
  tmp += bbx->w;
 8002f7c:	78ab      	ldrb	r3, [r5, #2]
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
  /*if ( c1 && c2 ) return 0;*/
  return 1;
 8002f7e:	2001      	movs	r0, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8002f80:	4291      	cmp	r1, r2
 8002f82:	d906      	bls.n	8002f92 <u8g_pb_IsIntersection+0x32>
 8002f84:	2000      	movs	r0, #0
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
  tmp += bbx->w;
 8002f86:	18cb      	adds	r3, r1, r3
  tmp--;
 8002f88:	3b01      	subs	r3, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	4140      	adcs	r0, r0
  tmp = bbx->y;
  tmp += bbx->h;
  tmp--;
  
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
 8002f90:	b2c0      	uxtb	r0, r0
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}

08002f94 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 8002f98:	7883      	ldrb	r3, [r0, #2]
 8002f9a:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
  box->x1--;
 8002f9c:	7943      	ldrb	r3, [r0, #5]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 8002fa2:	78c3      	ldrb	r3, [r0, #3]
 8002fa4:	70cb      	strb	r3, [r1, #3]
}
 8002fa6:	4770      	bx	lr

08002fa8 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002fa8:	b508      	push	{r3, lr}
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 8002faa:	78cb      	ldrb	r3, [r1, #3]


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002fac:	784a      	ldrb	r2, [r1, #1]
  v1 = v0;
  switch( arg_pixel->dir )
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d006      	beq.n	8002fc0 <u8g_pb_Is8PixelVisible+0x18>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8002fb2:	1c11      	adds	r1, r2, #0
 8002fb4:	3908      	subs	r1, #8
 8002fb6:	b2c9      	uxtb	r1, r1
uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d005      	beq.n	8002fc8 <u8g_pb_Is8PixelVisible+0x20>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002fbc:	1c11      	adds	r1, r2, #0
 8002fbe:	e003      	b.n	8002fc8 <u8g_pb_Is8PixelVisible+0x20>
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8002fc0:	1c13      	adds	r3, r2, #0
 8002fc2:	3308      	adds	r3, #8


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002fc4:	1c11      	adds	r1, r2, #0
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8002fc6:	b2da      	uxtb	r2, r3
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8002fc8:	f7ff ffad 	bl	8002f26 <u8g_pb_IsYIntersection>
}
 8002fcc:	bd08      	pop	{r3, pc}

08002fce <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8002fce:	b508      	push	{r3, lr}
 8002fd0:	1c03      	adds	r3, r0, #0
 8002fd2:	1c08      	adds	r0, r1, #0
 8002fd4:	1c11      	adds	r1, r2, #0
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8002fd6:	795a      	ldrb	r2, [r3, #5]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f7ff ff43 	bl	8002e64 <u8g_WriteSequence>
}
 8002fde:	bd08      	pop	{r3, pc}

08002fe0 <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	4770      	bx	lr

08002fe4 <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 8002fe4:	2200      	movs	r2, #0
  p->page_y1 = p->page_height;
  p->page_y1--;
 8002fe6:	7803      	ldrb	r3, [r0, #0]
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 8002fe8:	7082      	strb	r2, [r0, #2]
  p->page_y1 = p->page_height;
  p->page_y1--;
 8002fea:	3b01      	subs	r3, #1
 8002fec:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 8002fee:	7102      	strb	r2, [r0, #4]
}
 8002ff0:	4770      	bx	lr

08002ff2 <u8g_page_Init>:
/*
  setup page count structure
  conditions: page_height <= total_height
*/
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
 8002ff2:	b508      	push	{r3, lr}
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
 8002ff4:	2300      	movs	r3, #0
  setup page count structure
  conditions: page_height <= total_height
*/
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
 8002ff6:	7001      	strb	r1, [r0, #0]
  p->total_height = total_height;
 8002ff8:	7042      	strb	r2, [r0, #1]
  p->page = 0;
 8002ffa:	7103      	strb	r3, [r0, #4]
  u8g_page_First(p);
 8002ffc:	f7ff fff2 	bl	8002fe4 <u8g_page_First>
}
 8003000:	bd08      	pop	{r3, pc}

08003002 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8003002:	b530      	push	{r4, r5, lr}
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8003004:	7884      	ldrb	r4, [r0, #2]
 8003006:	7801      	ldrb	r1, [r0, #0]
  if ( p->page_y0 >= p->total_height )
 8003008:	7845      	ldrb	r5, [r0, #1]
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 800300a:	190c      	adds	r4, r1, r4
 800300c:	b2e4      	uxtb	r4, r4
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 800300e:	1c03      	adds	r3, r0, #0
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8003010:	7084      	strb	r4, [r0, #2]
  if ( p->page_y0 >= p->total_height )
    return 0;
 8003012:	2000      	movs	r0, #0

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
 8003014:	42ac      	cmp	r4, r5
 8003016:	d20b      	bcs.n	8003030 <u8g_page_Next+0x2e>
    return 0;
  p->page++;
 8003018:	791a      	ldrb	r2, [r3, #4]
 800301a:	3201      	adds	r2, #1
 800301c:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 800301e:	78da      	ldrb	r2, [r3, #3]
  y1 += p->page_height;
 8003020:	1851      	adds	r1, r2, r1
 8003022:	b2ca      	uxtb	r2, r1
  if ( y1 >= p->total_height )
 8003024:	42aa      	cmp	r2, r5
 8003026:	d301      	bcc.n	800302c <u8g_page_Next+0x2a>
  {
    y1 = p->total_height;
    y1--;
 8003028:	1e6a      	subs	r2, r5, #1
 800302a:	b2d2      	uxtb	r2, r2
  }
  p->page_y1 = y1;
  
  return 1;
 800302c:	2001      	movs	r0, #1
  if ( y1 >= p->total_height )
  {
    y1 = p->total_height;
    y1--;
  }
  p->page_y1 = y1;
 800302e:	70da      	strb	r2, [r3, #3]
  
  return 1;
}
 8003030:	bd30      	pop	{r4, r5, pc}
	...

08003034 <__gnu_thumb1_case_uqi>:
 8003034:	b402      	push	{r1}
 8003036:	4671      	mov	r1, lr
 8003038:	0849      	lsrs	r1, r1, #1
 800303a:	0049      	lsls	r1, r1, #1
 800303c:	5c09      	ldrb	r1, [r1, r0]
 800303e:	0049      	lsls	r1, r1, #1
 8003040:	448e      	add	lr, r1
 8003042:	bc02      	pop	{r1}
 8003044:	4770      	bx	lr
 8003046:	46c0      	nop			; (mov r8, r8)

08003048 <__aeabi_uidiv>:
 8003048:	2900      	cmp	r1, #0
 800304a:	d034      	beq.n	80030b6 <.udivsi3_skip_div0_test+0x6a>

0800304c <.udivsi3_skip_div0_test>:
 800304c:	2301      	movs	r3, #1
 800304e:	2200      	movs	r2, #0
 8003050:	b410      	push	{r4}
 8003052:	4288      	cmp	r0, r1
 8003054:	d32c      	bcc.n	80030b0 <.udivsi3_skip_div0_test+0x64>
 8003056:	2401      	movs	r4, #1
 8003058:	0724      	lsls	r4, r4, #28
 800305a:	42a1      	cmp	r1, r4
 800305c:	d204      	bcs.n	8003068 <.udivsi3_skip_div0_test+0x1c>
 800305e:	4281      	cmp	r1, r0
 8003060:	d202      	bcs.n	8003068 <.udivsi3_skip_div0_test+0x1c>
 8003062:	0109      	lsls	r1, r1, #4
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	e7f8      	b.n	800305a <.udivsi3_skip_div0_test+0xe>
 8003068:	00e4      	lsls	r4, r4, #3
 800306a:	42a1      	cmp	r1, r4
 800306c:	d204      	bcs.n	8003078 <.udivsi3_skip_div0_test+0x2c>
 800306e:	4281      	cmp	r1, r0
 8003070:	d202      	bcs.n	8003078 <.udivsi3_skip_div0_test+0x2c>
 8003072:	0049      	lsls	r1, r1, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	e7f8      	b.n	800306a <.udivsi3_skip_div0_test+0x1e>
 8003078:	4288      	cmp	r0, r1
 800307a:	d301      	bcc.n	8003080 <.udivsi3_skip_div0_test+0x34>
 800307c:	1a40      	subs	r0, r0, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	084c      	lsrs	r4, r1, #1
 8003082:	42a0      	cmp	r0, r4
 8003084:	d302      	bcc.n	800308c <.udivsi3_skip_div0_test+0x40>
 8003086:	1b00      	subs	r0, r0, r4
 8003088:	085c      	lsrs	r4, r3, #1
 800308a:	4322      	orrs	r2, r4
 800308c:	088c      	lsrs	r4, r1, #2
 800308e:	42a0      	cmp	r0, r4
 8003090:	d302      	bcc.n	8003098 <.udivsi3_skip_div0_test+0x4c>
 8003092:	1b00      	subs	r0, r0, r4
 8003094:	089c      	lsrs	r4, r3, #2
 8003096:	4322      	orrs	r2, r4
 8003098:	08cc      	lsrs	r4, r1, #3
 800309a:	42a0      	cmp	r0, r4
 800309c:	d302      	bcc.n	80030a4 <.udivsi3_skip_div0_test+0x58>
 800309e:	1b00      	subs	r0, r0, r4
 80030a0:	08dc      	lsrs	r4, r3, #3
 80030a2:	4322      	orrs	r2, r4
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d003      	beq.n	80030b0 <.udivsi3_skip_div0_test+0x64>
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	d001      	beq.n	80030b0 <.udivsi3_skip_div0_test+0x64>
 80030ac:	0909      	lsrs	r1, r1, #4
 80030ae:	e7e3      	b.n	8003078 <.udivsi3_skip_div0_test+0x2c>
 80030b0:	1c10      	adds	r0, r2, #0
 80030b2:	bc10      	pop	{r4}
 80030b4:	4770      	bx	lr
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d001      	beq.n	80030be <.udivsi3_skip_div0_test+0x72>
 80030ba:	2000      	movs	r0, #0
 80030bc:	43c0      	mvns	r0, r0
 80030be:	b407      	push	{r0, r1, r2}
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <.udivsi3_skip_div0_test+0x80>)
 80030c2:	a102      	add	r1, pc, #8	; (adr r1, 80030cc <.udivsi3_skip_div0_test+0x80>)
 80030c4:	1840      	adds	r0, r0, r1
 80030c6:	9002      	str	r0, [sp, #8]
 80030c8:	bd03      	pop	{r0, r1, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	00000019 	.word	0x00000019

080030d0 <__aeabi_uidivmod>:
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d0f0      	beq.n	80030b6 <.udivsi3_skip_div0_test+0x6a>
 80030d4:	b503      	push	{r0, r1, lr}
 80030d6:	f7ff ffb9 	bl	800304c <.udivsi3_skip_div0_test>
 80030da:	bc0e      	pop	{r1, r2, r3}
 80030dc:	4342      	muls	r2, r0
 80030de:	1a89      	subs	r1, r1, r2
 80030e0:	4718      	bx	r3
 80030e2:	46c0      	nop			; (mov r8, r8)

080030e4 <__aeabi_idiv0>:
 80030e4:	4770      	bx	lr
 80030e6:	46c0      	nop			; (mov r8, r8)

080030e8 <__libc_init_array>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4e0d      	ldr	r6, [pc, #52]	; (8003120 <__libc_init_array+0x38>)
 80030ec:	4d0d      	ldr	r5, [pc, #52]	; (8003124 <__libc_init_array+0x3c>)
 80030ee:	2400      	movs	r4, #0
 80030f0:	1bad      	subs	r5, r5, r6
 80030f2:	10ad      	asrs	r5, r5, #2
 80030f4:	d005      	beq.n	8003102 <__libc_init_array+0x1a>
 80030f6:	00a3      	lsls	r3, r4, #2
 80030f8:	58f3      	ldr	r3, [r6, r3]
 80030fa:	3401      	adds	r4, #1
 80030fc:	4798      	blx	r3
 80030fe:	42a5      	cmp	r5, r4
 8003100:	d1f9      	bne.n	80030f6 <__libc_init_array+0xe>
 8003102:	f001 fda7 	bl	8004c54 <_init>
 8003106:	4e08      	ldr	r6, [pc, #32]	; (8003128 <__libc_init_array+0x40>)
 8003108:	4d08      	ldr	r5, [pc, #32]	; (800312c <__libc_init_array+0x44>)
 800310a:	2400      	movs	r4, #0
 800310c:	1bad      	subs	r5, r5, r6
 800310e:	10ad      	asrs	r5, r5, #2
 8003110:	d005      	beq.n	800311e <__libc_init_array+0x36>
 8003112:	00a3      	lsls	r3, r4, #2
 8003114:	58f3      	ldr	r3, [r6, r3]
 8003116:	3401      	adds	r4, #1
 8003118:	4798      	blx	r3
 800311a:	42a5      	cmp	r5, r4
 800311c:	d1f9      	bne.n	8003112 <__libc_init_array+0x2a>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
	...

08003130 <memcpy>:
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	2a0f      	cmp	r2, #15
 8003134:	d934      	bls.n	80031a0 <memcpy+0x70>
 8003136:	1c03      	adds	r3, r0, #0
 8003138:	430b      	orrs	r3, r1
 800313a:	079b      	lsls	r3, r3, #30
 800313c:	d134      	bne.n	80031a8 <memcpy+0x78>
 800313e:	1c15      	adds	r5, r2, #0
 8003140:	1c03      	adds	r3, r0, #0
 8003142:	3d10      	subs	r5, #16
 8003144:	092d      	lsrs	r5, r5, #4
 8003146:	3501      	adds	r5, #1
 8003148:	012d      	lsls	r5, r5, #4
 800314a:	194c      	adds	r4, r1, r5
 800314c:	680e      	ldr	r6, [r1, #0]
 800314e:	601e      	str	r6, [r3, #0]
 8003150:	684e      	ldr	r6, [r1, #4]
 8003152:	605e      	str	r6, [r3, #4]
 8003154:	688e      	ldr	r6, [r1, #8]
 8003156:	3110      	adds	r1, #16
 8003158:	609e      	str	r6, [r3, #8]
 800315a:	1f0e      	subs	r6, r1, #4
 800315c:	6837      	ldr	r7, [r6, #0]
 800315e:	3310      	adds	r3, #16
 8003160:	1f1e      	subs	r6, r3, #4
 8003162:	6037      	str	r7, [r6, #0]
 8003164:	42a1      	cmp	r1, r4
 8003166:	d1f1      	bne.n	800314c <memcpy+0x1c>
 8003168:	230f      	movs	r3, #15
 800316a:	1945      	adds	r5, r0, r5
 800316c:	4013      	ands	r3, r2
 800316e:	2b03      	cmp	r3, #3
 8003170:	d91c      	bls.n	80031ac <memcpy+0x7c>
 8003172:	2100      	movs	r1, #0
 8003174:	3b04      	subs	r3, #4
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3301      	adds	r3, #1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	5866      	ldr	r6, [r4, r1]
 800317e:	506e      	str	r6, [r5, r1]
 8003180:	3104      	adds	r1, #4
 8003182:	4299      	cmp	r1, r3
 8003184:	d1fa      	bne.n	800317c <memcpy+0x4c>
 8003186:	2303      	movs	r3, #3
 8003188:	186d      	adds	r5, r5, r1
 800318a:	401a      	ands	r2, r3
 800318c:	1861      	adds	r1, r4, r1
 800318e:	2a00      	cmp	r2, #0
 8003190:	d005      	beq.n	800319e <memcpy+0x6e>
 8003192:	2300      	movs	r3, #0
 8003194:	5ccc      	ldrb	r4, [r1, r3]
 8003196:	54ec      	strb	r4, [r5, r3]
 8003198:	3301      	adds	r3, #1
 800319a:	4293      	cmp	r3, r2
 800319c:	d1fa      	bne.n	8003194 <memcpy+0x64>
 800319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a0:	1c05      	adds	r5, r0, #0
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d1f5      	bne.n	8003192 <memcpy+0x62>
 80031a6:	e7fa      	b.n	800319e <memcpy+0x6e>
 80031a8:	1c05      	adds	r5, r0, #0
 80031aa:	e7f2      	b.n	8003192 <memcpy+0x62>
 80031ac:	1c1a      	adds	r2, r3, #0
 80031ae:	e7f8      	b.n	80031a2 <memcpy+0x72>

080031b0 <memset>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	0783      	lsls	r3, r0, #30
 80031b4:	d03e      	beq.n	8003234 <memset+0x84>
 80031b6:	1e54      	subs	r4, r2, #1
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d03a      	beq.n	8003232 <memset+0x82>
 80031bc:	b2ce      	uxtb	r6, r1
 80031be:	1c03      	adds	r3, r0, #0
 80031c0:	2503      	movs	r5, #3
 80031c2:	e003      	b.n	80031cc <memset+0x1c>
 80031c4:	1e62      	subs	r2, r4, #1
 80031c6:	2c00      	cmp	r4, #0
 80031c8:	d033      	beq.n	8003232 <memset+0x82>
 80031ca:	1c14      	adds	r4, r2, #0
 80031cc:	3301      	adds	r3, #1
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	7016      	strb	r6, [r2, #0]
 80031d2:	422b      	tst	r3, r5
 80031d4:	d1f6      	bne.n	80031c4 <memset+0x14>
 80031d6:	2c03      	cmp	r4, #3
 80031d8:	d923      	bls.n	8003222 <memset+0x72>
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	400a      	ands	r2, r1
 80031de:	0215      	lsls	r5, r2, #8
 80031e0:	432a      	orrs	r2, r5
 80031e2:	0415      	lsls	r5, r2, #16
 80031e4:	432a      	orrs	r2, r5
 80031e6:	2c0f      	cmp	r4, #15
 80031e8:	d927      	bls.n	800323a <memset+0x8a>
 80031ea:	1c25      	adds	r5, r4, #0
 80031ec:	3d10      	subs	r5, #16
 80031ee:	092d      	lsrs	r5, r5, #4
 80031f0:	3501      	adds	r5, #1
 80031f2:	012d      	lsls	r5, r5, #4
 80031f4:	195d      	adds	r5, r3, r5
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	3310      	adds	r3, #16
 80031fe:	1f1e      	subs	r6, r3, #4
 8003200:	6032      	str	r2, [r6, #0]
 8003202:	429d      	cmp	r5, r3
 8003204:	d1f7      	bne.n	80031f6 <memset+0x46>
 8003206:	260f      	movs	r6, #15
 8003208:	4034      	ands	r4, r6
 800320a:	2c03      	cmp	r4, #3
 800320c:	d909      	bls.n	8003222 <memset+0x72>
 800320e:	1f23      	subs	r3, r4, #4
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3301      	adds	r3, #1
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	18eb      	adds	r3, r5, r3
 8003218:	c504      	stmia	r5!, {r2}
 800321a:	42ab      	cmp	r3, r5
 800321c:	d1fc      	bne.n	8003218 <memset+0x68>
 800321e:	2203      	movs	r2, #3
 8003220:	4014      	ands	r4, r2
 8003222:	2c00      	cmp	r4, #0
 8003224:	d005      	beq.n	8003232 <memset+0x82>
 8003226:	b2c9      	uxtb	r1, r1
 8003228:	191c      	adds	r4, r3, r4
 800322a:	7019      	strb	r1, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	42a3      	cmp	r3, r4
 8003230:	d1fb      	bne.n	800322a <memset+0x7a>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	1c14      	adds	r4, r2, #0
 8003236:	1c03      	adds	r3, r0, #0
 8003238:	e7cd      	b.n	80031d6 <memset+0x26>
 800323a:	1c1d      	adds	r5, r3, #0
 800323c:	e7e7      	b.n	800320e <memset+0x5e>
 800323e:	46c0      	nop			; (mov r8, r8)

08003240 <USART1_IRQHandler>:

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8003240:	2280      	movs	r2, #128	; 0x80
    static char rx_buffer[256];
    static char at_buf[128];
    static char vec_buf[128];
    static char ip_buf[64];
    if(i==0){ 
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 8003242:	2090      	movs	r0, #144	; 0x90
 8003244:	2180      	movs	r1, #128	; 0x80
//    }
//}



void USART1_IRQHandler(void){
 8003246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003248:	4b58      	ldr	r3, [pc, #352]	; (80033ac <USART1_IRQHandler+0x16c>)
 800324a:	0512      	lsls	r2, r2, #20
    static int ip_index = 0;
    static char rx_buffer[256];
    static char at_buf[128];
    static char vec_buf[128];
    static char ip_buf[64];
    if(i==0){ 
 800324c:	4c58      	ldr	r4, [pc, #352]	; (80033b0 <USART1_IRQHandler+0x170>)
 800324e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003250:	6823      	ldr	r3, [r4, #0]
//    }
//}



void USART1_IRQHandler(void){
 8003252:	b085      	sub	sp, #20
    static char rx_buffer[256];
    static char at_buf[128];
    static char vec_buf[128];
    static char ip_buf[64];
    if(i==0){ 
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 8003254:	05c0      	lsls	r0, r0, #23
 8003256:	00c9      	lsls	r1, r1, #3
    static int ip_index = 0;
    static char rx_buffer[256];
    static char at_buf[128];
    static char vec_buf[128];
    static char ip_buf[64];
    if(i==0){ 
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <USART1_IRQHandler+0x24>
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 800325c:	f7fd f81a 	bl	8000294 <GPIO_SetBits>
        i=1;
 8003260:	2301      	movs	r3, #1
 8003262:	e002      	b.n	800326a <USART1_IRQHandler+0x2a>
    }else{
        GPIO_ResetBits(GPIOA, GPIO_Pin_10);
 8003264:	f7fd f818 	bl	8000298 <GPIO_ResetBits>
        i=0;
 8003268:	2300      	movs	r3, #0
    //    if(tx_index>=(sizeof(StringLoop)-1))
    //        tx_index=0;
    //}
   //while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == SET){ 
    //while(USART_GetFlagStatus(USART1, USART_IT_RXNE)==SET)//Receivedcharactersmodifystring
    if(USART_GetITStatus(USART1, USART_IT_RXNE)!=RESET)//Receivedcharactersmodifystring
 800326a:	4852      	ldr	r0, [pc, #328]	; (80033b4 <USART1_IRQHandler+0x174>)
 800326c:	4952      	ldr	r1, [pc, #328]	; (80033b8 <USART1_IRQHandler+0x178>)
    if(i==0){ 
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
        i=1;
    }else{
        GPIO_ResetBits(GPIOA, GPIO_Pin_10);
        i=0;
 800326e:	6023      	str	r3, [r4, #0]
    //    if(tx_index>=(sizeof(StringLoop)-1))
    //        tx_index=0;
    //}
   //while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == SET){ 
    //while(USART_GetFlagStatus(USART1, USART_IT_RXNE)==SET)//Receivedcharactersmodifystring
    if(USART_GetITStatus(USART1, USART_IT_RXNE)!=RESET)//Receivedcharactersmodifystring
 8003270:	f7fe f80e 	bl	8001290 <USART_GetITStatus>
 8003274:	2800      	cmp	r0, #0
 8003276:	d100      	bne.n	800327a <USART1_IRQHandler+0x3a>
 8003278:	e091      	b.n	800339e <USART1_IRQHandler+0x15e>
    {
        char rx = USART_ReceiveData(USART1); 
 800327a:	484e      	ldr	r0, [pc, #312]	; (80033b4 <USART1_IRQHandler+0x174>)
 800327c:	f7fd feec 	bl	8001058 <USART_ReceiveData>
 8003280:	b2c0      	uxtb	r0, r0
 8003282:	4c4e      	ldr	r4, [pc, #312]	; (80033bc <USART1_IRQHandler+0x17c>)
        if(rx == '{'){
 8003284:	287b      	cmp	r0, #123	; 0x7b
 8003286:	d103      	bne.n	8003290 <USART1_IRQHandler+0x50>
           resp_valid = 1;
 8003288:	2301      	movs	r3, #1
           ip_valid = 1; 
 800328a:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <USART1_IRQHandler+0x180>)
    //while(USART_GetFlagStatus(USART1, USART_IT_RXNE)==SET)//Receivedcharactersmodifystring
    if(USART_GetITStatus(USART1, USART_IT_RXNE)!=RESET)//Receivedcharactersmodifystring
    {
        char rx = USART_ReceiveData(USART1); 
        if(rx == '{'){
           resp_valid = 1;
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	e050      	b.n	8003332 <USART1_IRQHandler+0xf2>
           ip_valid = 1; 
        }
        else if(rx == ';'){
 8003290:	283b      	cmp	r0, #59	; 0x3b
 8003292:	d10f      	bne.n	80032b4 <USART1_IRQHandler+0x74>
           resp_valid = 1;
           ip_valid = 0; 
 8003294:	2200      	movs	r2, #0
        if(rx == '{'){
           resp_valid = 1;
           ip_valid = 1; 
        }
        else if(rx == ';'){
           resp_valid = 1;
 8003296:	2101      	movs	r1, #1
           ip_valid = 0; 
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <USART1_IRQHandler+0x180>)
        if(rx == '{'){
           resp_valid = 1;
           ip_valid = 1; 
        }
        else if(rx == ';'){
           resp_valid = 1;
 800329a:	6021      	str	r1, [r4, #0]
           ip_valid = 0; 
 800329c:	601a      	str	r2, [r3, #0]
           if(attacker_valid == 1){
 800329e:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <USART1_IRQHandler+0x184>)
 80032a0:	4849      	ldr	r0, [pc, #292]	; (80033c8 <USART1_IRQHandler+0x188>)
 80032a2:	681c      	ldr	r4, [r3, #0]
 80032a4:	428c      	cmp	r4, r1
 80032a6:	d102      	bne.n	80032ae <USART1_IRQHandler+0x6e>
                attacker_valid = 0;
 80032a8:	601a      	str	r2, [r3, #0]
                vector_valid = 1;
 80032aa:	6004      	str	r4, [r0, #0]
 80032ac:	e077      	b.n	800339e <USART1_IRQHandler+0x15e>
           }
           else {
               vector_valid = 0;
 80032ae:	6002      	str	r2, [r0, #0]
               attacker_valid = 1;
 80032b0:	6019      	str	r1, [r3, #0]
 80032b2:	e074      	b.n	800339e <USART1_IRQHandler+0x15e>
           }
        } 
        else if(resp_valid && rx == '}'){ //line end
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	4f45      	ldr	r7, [pc, #276]	; (80033cc <USART1_IRQHandler+0x18c>)
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d06b      	beq.n	8003394 <USART1_IRQHandler+0x154>
 80032bc:	287d      	cmp	r0, #125	; 0x7d
 80032be:	d13a      	bne.n	8003336 <USART1_IRQHandler+0xf6>
           if(rx_index !=0){
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d06b      	beq.n	800339e <USART1_IRQHandler+0x15e>
              //memcpy(rxbuffer, rx_buffer, rx_index);
              memcpy(ip_addr, ip_buf, ip_index);
 80032c6:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <USART1_IRQHandler+0x190>)
 80032c8:	4942      	ldr	r1, [pc, #264]	; (80033d4 <USART1_IRQHandler+0x194>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4842      	ldr	r0, [pc, #264]	; (80033d8 <USART1_IRQHandler+0x198>)
 80032ce:	1c1a      	adds	r2, r3, #0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	f7ff ff2d 	bl	8003130 <memcpy>
              memcpy(attacker, at_buf, attacker_index);
 80032d6:	4e41      	ldr	r6, [pc, #260]	; (80033dc <USART1_IRQHandler+0x19c>)
 80032d8:	4941      	ldr	r1, [pc, #260]	; (80033e0 <USART1_IRQHandler+0x1a0>)
 80032da:	6833      	ldr	r3, [r6, #0]
 80032dc:	4841      	ldr	r0, [pc, #260]	; (80033e4 <USART1_IRQHandler+0x1a4>)
 80032de:	1c1a      	adds	r2, r3, #0
 80032e0:	9302      	str	r3, [sp, #8]
 80032e2:	f7ff ff25 	bl	8003130 <memcpy>
              memcpy(vector, vec_buf, vector_index);
 80032e6:	4d40      	ldr	r5, [pc, #256]	; (80033e8 <USART1_IRQHandler+0x1a8>)
 80032e8:	4940      	ldr	r1, [pc, #256]	; (80033ec <USART1_IRQHandler+0x1ac>)
 80032ea:	682b      	ldr	r3, [r5, #0]
 80032ec:	4840      	ldr	r0, [pc, #256]	; (80033f0 <USART1_IRQHandler+0x1b0>)
 80032ee:	1c1a      	adds	r2, r3, #0
 80032f0:	9303      	str	r3, [sp, #12]
 80032f2:	f7ff ff1d 	bl	8003130 <memcpy>
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	2100      	movs	r1, #0
 80032fa:	0052      	lsls	r2, r2, #1
 80032fc:	483d      	ldr	r0, [pc, #244]	; (80033f4 <USART1_IRQHandler+0x1b4>)
 80032fe:	f7ff ff57 	bl	80031b0 <memset>
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <USART1_IRQHandler+0x198>)
 8003306:	9901      	ldr	r1, [sp, #4]
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
              rx_index = 0;
 8003308:	603b      	str	r3, [r7, #0]
              memcpy(attacker, at_buf, attacker_index);
              memcpy(vector, vec_buf, vector_index);
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
 800330a:	5453      	strb	r3, [r2, r1]
              attacker[attacker_index] = 0;
 800330c:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <USART1_IRQHandler+0x1a4>)
 800330e:	9902      	ldr	r1, [sp, #8]
              vector[vector_index] = 0;
              rx_index = 0;
              attacker_index = 0;
 8003310:	6033      	str	r3, [r6, #0]
              memcpy(vector, vec_buf, vector_index);
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
              attacker[attacker_index] = 0;
 8003312:	5453      	strb	r3, [r2, r1]
              vector[vector_index] = 0;
 8003314:	4a36      	ldr	r2, [pc, #216]	; (80033f0 <USART1_IRQHandler+0x1b0>)
 8003316:	9903      	ldr	r1, [sp, #12]
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
 8003318:	602b      	str	r3, [r5, #0]
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
 800331a:	5453      	strb	r3, [r2, r1]
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
              ip_index = 0;
              line_valid = 1;
 800331c:	2101      	movs	r1, #1
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
              ip_index = 0;
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <USART1_IRQHandler+0x190>)
              line_valid = 1;
              resp_valid = 0;
 8003320:	6023      	str	r3, [r4, #0]
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
              ip_index = 0;
 8003322:	6013      	str	r3, [r2, #0]
              line_valid = 1;
 8003324:	4a34      	ldr	r2, [pc, #208]	; (80033f8 <USART1_IRQHandler+0x1b8>)
 8003326:	6011      	str	r1, [r2, #0]
              resp_valid = 0;
              ip_valid = 0;
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <USART1_IRQHandler+0x180>)
 800332a:	6013      	str	r3, [r2, #0]
              attacker_valid = 0;
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <USART1_IRQHandler+0x184>)
 800332e:	6013      	str	r3, [r2, #0]
              vector_valid = 0;
 8003330:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <USART1_IRQHandler+0x188>)
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e033      	b.n	800339e <USART1_IRQHandler+0x15e>
           }
        }
        else if(resp_valid && attacker_valid){
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <USART1_IRQHandler+0x184>)
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	2900      	cmp	r1, #0
 800333c:	d00a      	beq.n	8003354 <USART1_IRQHandler+0x114>
            if(attacker_index == sizeof(at_buf)){
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <USART1_IRQHandler+0x19c>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2a80      	cmp	r2, #128	; 0x80
 8003344:	d101      	bne.n	800334a <USART1_IRQHandler+0x10a>
               attacker_index = 0;
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
            }
            at_buf[attacker_index++] = rx;
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	1c51      	adds	r1, r2, #1
 800334e:	6019      	str	r1, [r3, #0]
 8003350:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <USART1_IRQHandler+0x1a0>)
 8003352:	e00c      	b.n	800336e <USART1_IRQHandler+0x12e>
            rx_index++; 
        }
        else if(resp_valid && vector_valid){
 8003354:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <USART1_IRQHandler+0x188>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2a00      	cmp	r2, #0
 800335a:	d00d      	beq.n	8003378 <USART1_IRQHandler+0x138>
            if(vector_index == sizeof(vec_buf)){
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <USART1_IRQHandler+0x1a8>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2a80      	cmp	r2, #128	; 0x80
 8003362:	d100      	bne.n	8003366 <USART1_IRQHandler+0x126>
               vector_index = 0;
 8003364:	6019      	str	r1, [r3, #0]
            } 
            vec_buf[vector_index++] = rx;
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	1c51      	adds	r1, r2, #1
 800336a:	6019      	str	r1, [r3, #0]
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <USART1_IRQHandler+0x1ac>)
 800336e:	5498      	strb	r0, [r3, r2]
            rx_index++; 
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	e012      	b.n	800339e <USART1_IRQHandler+0x15e>
        }
        else if(resp_valid && ip_valid){
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <USART1_IRQHandler+0x180>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <USART1_IRQHandler+0x154>
            if(ip_index == sizeof(ip_buf)){
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <USART1_IRQHandler+0x190>)
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	2940      	cmp	r1, #64	; 0x40
 8003386:	d100      	bne.n	800338a <USART1_IRQHandler+0x14a>
               ip_index = 0;
 8003388:	601a      	str	r2, [r3, #0]
            } 
            ip_buf[ip_index++] = rx;
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	1c51      	adds	r1, r2, #1
 800338e:	6019      	str	r1, [r3, #0]
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <USART1_IRQHandler+0x194>)
 8003392:	e7ec      	b.n	800336e <USART1_IRQHandler+0x12e>
            rx_index++; 
        }else { 
            rx_buffer[rx_index++] = rx;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	603a      	str	r2, [r7, #0]
 800339a:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <USART1_IRQHandler+0x1b4>)
 800339c:	54d0      	strb	r0, [r2, r3]

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <USART1_IRQHandler+0x1bc>)
 80033a2:	0512      	lsls	r2, r2, #20
 80033a4:	601a      	str	r2, [r3, #0]
        }
    }
    NVIC_EnableIRQ(USART1_IRQn);
}
 80033a6:	b005      	add	sp, #20
 80033a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	e000e104 	.word	0xe000e104
 80033b0:	20000a08 	.word	0x20000a08
 80033b4:	40013800 	.word	0x40013800
 80033b8:	00050105 	.word	0x00050105
 80033bc:	20000b28 	.word	0x20000b28
 80033c0:	20000a18 	.word	0x20000a18
 80033c4:	20000c70 	.word	0x20000c70
 80033c8:	20000b24 	.word	0x20000b24
 80033cc:	20000c6c 	.word	0x20000c6c
 80033d0:	20000a1c 	.word	0x20000a1c
 80033d4:	20000c2c 	.word	0x20000c2c
 80033d8:	20000d40 	.word	0x20000d40
 80033dc:	20000a10 	.word	0x20000a10
 80033e0:	20000bac 	.word	0x20000bac
 80033e4:	20000c74 	.word	0x20000c74
 80033e8:	20000a0c 	.word	0x20000a0c
 80033ec:	20000b2c 	.word	0x20000b2c
 80033f0:	20000d9c 	.word	0x20000d9c
 80033f4:	20000a24 	.word	0x20000a24
 80033f8:	20000a14 	.word	0x20000a14
 80033fc:	e000e100 	.word	0xe000e100

08003400 <SysTick_Handler>:
  	//        tick = 0; 
    //        break;
    //    default:
    //       break; 
    //}	
    timercounter++;
 8003400:	4a02      	ldr	r2, [pc, #8]	; (800340c <SysTick_Handler+0xc>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	4770      	bx	lr
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	20000a20 	.word	0x20000a20

08003410 <initUSART1>:

void initUSART1(){
 8003410:	b510      	push	{r4, lr}
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 8003412:	2080      	movs	r0, #128	; 0x80
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 8003414:	2490      	movs	r4, #144	; 0x90
    timercounter++;
}

void initUSART1(){
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 8003416:	01c0      	lsls	r0, r0, #7
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 8003418:	05e4      	lsls	r4, r4, #23
    timercounter++;
}

void initUSART1(){
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 800341a:	2101      	movs	r1, #1
 800341c:	f7fd fc2a 	bl	8000c74 <RCC_APB2PeriphClockCmd>
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 8003420:	2201      	movs	r2, #1
 8003422:	1c20      	adds	r0, r4, #0
 8003424:	2103      	movs	r1, #3
 8003426:	f7fc ff41 	bl	80002ac <GPIO_PinAFConfig>
   
   GPIO_Init(GPIOA, &USART1_GPIO_InitStruct);
 800342a:	1c20      	adds	r0, r4, #0
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <initUSART1+0x50>)
   NVIC_Init(&NVIC_InitStructure);
   USART_Init(USART1, &USART1_InitStruct);
 800342e:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <initUSART1+0x54>)
void initUSART1(){
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
   
   GPIO_Init(GPIOA, &USART1_GPIO_InitStruct);
 8003430:	f7fc fe9a 	bl	8000168 <GPIO_Init>
   NVIC_Init(&NVIC_InitStructure);
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <initUSART1+0x58>)
 8003436:	f7fd f9c3 	bl	80007c0 <NVIC_Init>
   USART_Init(USART1, &USART1_InitStruct);
 800343a:	1c20      	adds	r0, r4, #0
 800343c:	490b      	ldr	r1, [pc, #44]	; (800346c <initUSART1+0x5c>)
 800343e:	f7fd fcd5 	bl	8000dec <USART_Init>
   
//enable the interrupt 
   USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003442:	1c20      	adds	r0, r4, #0
 8003444:	490a      	ldr	r1, [pc, #40]	; (8003470 <initUSART1+0x60>)
 8003446:	2201      	movs	r2, #1
 8003448:	f7fd feec 	bl	8001224 <USART_ITConfig>
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <initUSART1+0x64>)
 8003450:	0512      	lsls	r2, r2, #20
 8003452:	601a      	str	r2, [r3, #0]
   NVIC_EnableIRQ(USART1_IRQn);
   USART_Cmd(USART1, ENABLE);
 8003454:	1c20      	adds	r0, r4, #0
 8003456:	2101      	movs	r1, #1
 8003458:	f7fd fd3a 	bl	8000ed0 <USART_Cmd>
   //memset(rxbuffer, 0x00, sizeof(rxbuffer));
}
 800345c:	bd10      	pop	{r4, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	20000168 	.word	0x20000168
 8003464:	40013800 	.word	0x40013800
 8003468:	20000370 	.word	0x20000370
 800346c:	20000148 	.word	0x20000148
 8003470:	00050105 	.word	0x00050105
 8003474:	e000e100 	.word	0xe000e100

08003478 <draw>:


void draw(uint8_t pos)
{
 8003478:	b537      	push	{r0, r1, r2, r4, r5, lr}
  //u8g_SetFont(&u8g, u8g_font_unifont);
  //char tokenstr[256]; 
  //u8g_DrawBox(&u8g, 1,1+pos,100,100);
  u8g_DrawXBM(&u8g, pos-64,0, threatbutt_width, threatbutt_height, threatbutt_bits);
 800347a:	1c01      	adds	r1, r0, #0
 800347c:	2340      	movs	r3, #64	; 0x40
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <draw+0x5c>)
 8003480:	4c15      	ldr	r4, [pc, #84]	; (80034d8 <draw+0x60>)
 8003482:	3940      	subs	r1, #64	; 0x40
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	9201      	str	r2, [sp, #4]
   //memset(rxbuffer, 0x00, sizeof(rxbuffer));
}


void draw(uint8_t pos)
{
 8003488:	1c05      	adds	r5, r0, #0
  //u8g_SetFont(&u8g, u8g_font_unifont);
  //char tokenstr[256]; 
  //u8g_DrawBox(&u8g, 1,1+pos,100,100);
  u8g_DrawXBM(&u8g, pos-64,0, threatbutt_width, threatbutt_height, threatbutt_bits);
 800348a:	b2c9      	uxtb	r1, r1
 800348c:	1c20      	adds	r0, r4, #0
 800348e:	2200      	movs	r2, #0
 8003490:	f7fd ffae 	bl	80013f0 <u8g_DrawXBM>
  if(line_valid == 1){
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <draw+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d119      	bne.n	80034d0 <draw+0x58>
      u8g_SetFont(&u8g, u8g_font_profont22r);
 800349c:	1c20      	adds	r0, r4, #0
 800349e:	4910      	ldr	r1, [pc, #64]	; (80034e0 <draw+0x68>)
 80034a0:	f7fe fdc8 	bl	8002034 <u8g_SetFont>
      u8g_DrawStr(&u8g, pos, 20, ip_addr);
 80034a4:	2214      	movs	r2, #20
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <draw+0x6c>)
 80034a8:	1c29      	adds	r1, r5, #0
 80034aa:	1c20      	adds	r0, r4, #0
 80034ac:	f7fe fb69 	bl	8001b82 <u8g_DrawStr>
      u8g_SetFont(&u8g, u8g_font_gdr11r);
 80034b0:	1c20      	adds	r0, r4, #0
 80034b2:	490d      	ldr	r1, [pc, #52]	; (80034e8 <draw+0x70>)
 80034b4:	f7fe fdbe 	bl	8002034 <u8g_SetFont>
      u8g_DrawStr(&u8g, pos, 40, attacker);
 80034b8:	1c29      	adds	r1, r5, #0
 80034ba:	2228      	movs	r2, #40	; 0x28
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <draw+0x74>)
 80034be:	1c20      	adds	r0, r4, #0
 80034c0:	f7fe fb5f 	bl	8001b82 <u8g_DrawStr>
      //token = strtok(NULL, ';'); 
       
      u8g_DrawStr(&u8g, pos, 60, vector);
 80034c4:	1c20      	adds	r0, r4, #0
 80034c6:	1c29      	adds	r1, r5, #0
 80034c8:	223c      	movs	r2, #60	; 0x3c
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <draw+0x78>)
 80034cc:	f7fe fb59 	bl	8001b82 <u8g_DrawStr>
      //while(tokstr != NULL) {
      //  tokstr = strtok(NULL,";");
      //  u8g_DrawStr(&u8g, pos, 40, tokstr);
      //  } 
  }
}
 80034d0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	20000170 	.word	0x20000170
 80034d8:	20000cf4 	.word	0x20000cf4
 80034dc:	20000a14 	.word	0x20000a14
 80034e0:	080039f8 	.word	0x080039f8
 80034e4:	20000d40 	.word	0x20000d40
 80034e8:	08004497 	.word	0x08004497
 80034ec:	20000c74 	.word	0x20000c74
 80034f0:	20000d9c 	.word	0x20000d9c

080034f4 <main>:

int main(void)
{
 80034f4:	b538      	push	{r3, r4, r5, lr}
    //RCC_ClocksTypeDef Clocks;
    uint8_t pos = 128+64;
     
    SystemInit();
 80034f6:	f000 f869 	bl	80035cc <SystemInit>
    SystemCoreClockUpdate(); //update the system clock variable
 80034fa:	f000 f8c3 	bl	8003684 <SystemCoreClockUpdate>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80034fe:	2080      	movs	r0, #128	; 0x80
 8003500:	2101      	movs	r1, #1
 8003502:	0280      	lsls	r0, r0, #10
 8003504:	f7fd fbaa 	bl	8000c5c <RCC_AHBPeriphClockCmd>
    GPIO_Init(GPIOA, &GPIOA_InitStruct);
 8003508:	2090      	movs	r0, #144	; 0x90
 800350a:	4925      	ldr	r1, [pc, #148]	; (80035a0 <main+0xac>)
 800350c:	05c0      	lsls	r0, r0, #23
 800350e:	f7fc fe2b 	bl	8000168 <GPIO_Init>
     
    timercounter = 0;
 8003512:	2100      	movs	r1, #0
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <main+0xb0>)
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8003516:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <main+0xb4>)
 8003518:	6019      	str	r1, [r3, #0]
    //set systick to 1 every 1uS 
    SysTick_Config(SystemCoreClock/8);
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <main+0xb8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	08db      	lsrs	r3, r3, #3
 8003520:	4293      	cmp	r3, r2
 8003522:	d80d      	bhi.n	8003540 <main+0x4c>
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8003524:	24c0      	movs	r4, #192	; 0xc0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8003526:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <main+0xbc>)
 8003528:	3b01      	subs	r3, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800352a:	4822      	ldr	r0, [pc, #136]	; (80035b4 <main+0xc0>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800352c:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800352e:	6a03      	ldr	r3, [r0, #32]
 8003530:	0624      	lsls	r4, r4, #24
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	4323      	orrs	r3, r4
 8003538:	6203      	str	r3, [r0, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800353c:	6091      	str	r1, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	6013      	str	r3, [r2, #0]
    initUSART1();
 8003540:	f7ff ff66 	bl	8003410 <initUSART1>
    GPIO_SetBits(GPIOA, GPIO_Pin_10);
 8003544:	2090      	movs	r0, #144	; 0x90
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	05c0      	lsls	r0, r0, #23
 800354a:	00c9      	lsls	r1, r1, #3
 800354c:	f7fc fea2 	bl	8000294 <GPIO_SetBits>
   
    //initialize the watchdog
    
    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 8003550:	4819      	ldr	r0, [pc, #100]	; (80035b8 <main+0xc4>)
 8003552:	f7fd f903 	bl	800075c <IWDG_WriteAccessCmd>
    IWDG_SetPrescaler(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd f906 	bl	8000768 <IWDG_SetPrescaler>
    //while(IWDG_GetFlagStatus(IWDG_FLAG_PVU)==SET);
    IWDG_SetReload(0xFFFF);
 800355c:	4817      	ldr	r0, [pc, #92]	; (80035bc <main+0xc8>)
 800355e:	f7fd f909 	bl	8000774 <IWDG_SetReload>
    //while(IWDG_GetFlagStatus(IWDG_FLAG_RVU)==SET);
    //IWDG_SetWindowValue(0x0000);
    //while(IWDG_GetFlagStatus(IWDG_FLAG_PVU)==SET);
    IWDG_ReloadCounter();
 8003562:	f7fd f90d 	bl	8000780 <IWDG_ReloadCounter>
    IWDG_Enable();
 8003566:	f7fd f919 	bl	800079c <IWDG_Enable>
    static BitAction toggle = Bit_SET;
    
    int i =0;
   
    //init the u8g library
    u8g_InitComFn(&u8g,  &u8g_dev_ssd1306_128x64_i2c, u8g_com_hw_i2c_fn);
 800356a:	4c15      	ldr	r4, [pc, #84]	; (80035c0 <main+0xcc>)
 800356c:	4915      	ldr	r1, [pc, #84]	; (80035c4 <main+0xd0>)
 800356e:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <main+0xd4>)
 8003570:	1c20      	adds	r0, r4, #0
 8003572:	f7ff f8b5 	bl	80026e0 <u8g_InitComFn>
    u8g_SetDefaultForegroundColor(&u8g);
 8003576:	1c20      	adds	r0, r4, #0
 8003578:	f7ff faa0 	bl	8002abc <u8g_SetDefaultForegroundColor>
}

int main(void)
{
    //RCC_ClocksTypeDef Clocks;
    uint8_t pos = 128+64;
 800357c:	25c0      	movs	r5, #192	; 0xc0
    //init the u8g library
    u8g_InitComFn(&u8g,  &u8g_dev_ssd1306_128x64_i2c, u8g_com_hw_i2c_fn);
    u8g_SetDefaultForegroundColor(&u8g);
           
    while(1){
        u8g_FirstPage(&u8g);
 800357e:	1c20      	adds	r0, r4, #0
 8003580:	f7ff fa01 	bl	8002986 <u8g_FirstPage>
        do
        {
          IWDG_ReloadCounter();
 8003584:	f7fd f8fc 	bl	8000780 <IWDG_ReloadCounter>
          draw(pos);
 8003588:	1c28      	adds	r0, r5, #0
 800358a:	f7ff ff75 	bl	8003478 <draw>
        } while ( u8g_NextPage(&u8g) );
 800358e:	1c20      	adds	r0, r4, #0
 8003590:	f7ff f9fe 	bl	8002990 <u8g_NextPage>
 8003594:	2800      	cmp	r0, #0
 8003596:	d1f5      	bne.n	8003584 <main+0x90>
         
         /* refresh screen after some delay */
         ///* update position */
        if(pos < 128+128){  
            pos--;
 8003598:	3d01      	subs	r5, #1
 800359a:	b2ed      	uxtb	r5, r5
        }else
        { pos = 128+128;
        }
    }
 800359c:	e7ef      	b.n	800357e <main+0x8a>
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	20000160 	.word	0x20000160
 80035a4:	20000a20 	.word	0x20000a20
 80035a8:	00ffffff 	.word	0x00ffffff
 80035ac:	20000384 	.word	0x20000384
 80035b0:	e000e010 	.word	0xe000e010
 80035b4:	e000ed00 	.word	0xe000ed00
 80035b8:	00005555 	.word	0x00005555
 80035bc:	0000ffff 	.word	0x0000ffff
 80035c0:	20000cf4 	.word	0x20000cf4
 80035c4:	20000100 	.word	0x20000100
 80035c8:	08003799 	.word	0x08003799

080035cc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80035cc:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035ce:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80035d0:	240f      	movs	r4, #15
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <SystemInit+0x9c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4302      	orrs	r2, r0
 80035d8:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <SystemInit+0xa0>)
 80035de:	400a      	ands	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <SystemInit+0xa4>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	4a21      	ldr	r2, [pc, #132]	; (8003674 <SystemInit+0xa8>)
 80035ee:	400a      	ands	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	4a20      	ldr	r2, [pc, #128]	; (8003678 <SystemInit+0xac>)
 80035f6:	4011      	ands	r1, r2
 80035f8:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80035fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035fc:	43a1      	bics	r1, r4
 80035fe:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8003600:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003602:	491e      	ldr	r1, [pc, #120]	; (800367c <SystemInit+0xb0>)
 8003604:	4021      	ands	r1, r4
 8003606:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8003608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800360a:	4381      	bics	r1, r0
 800360c:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800360e:	2100      	movs	r1, #0
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8003610:	2011      	movs	r0, #17

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003612:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003614:	9100      	str	r1, [sp, #0]
 8003616:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8003618:	4919      	ldr	r1, [pc, #100]	; (8003680 <SystemInit+0xb4>)
 800361a:	6008      	str	r0, [r1, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	6059      	str	r1, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	6059      	str	r1, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	400a      	ands	r2, r1
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8003628:	21a0      	movs	r1, #160	; 0xa0
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800362a:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	0389      	lsls	r1, r1, #14
 8003630:	430a      	orrs	r2, r1
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003632:	2180      	movs	r1, #128	; 0x80
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8003634:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	0449      	lsls	r1, r1, #17
 800363a:	430a      	orrs	r2, r1

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800363c:	2180      	movs	r1, #128	; 0x80
  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800363e:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003640:	0489      	lsls	r1, r1, #18
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	4a08      	ldr	r2, [pc, #32]	; (8003668 <SystemInit+0x9c>)
 8003646:	4208      	tst	r0, r1
 8003648:	d0fb      	beq.n	8003642 <SystemInit+0x76>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800364a:	2003      	movs	r0, #3
 800364c:	6851      	ldr	r1, [r2, #4]
 800364e:	4381      	bics	r1, r0
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003650:	2002      	movs	r0, #2
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003652:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003654:	6851      	ldr	r1, [r2, #4]
 8003656:	4301      	orrs	r1, r0
 8003658:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800365a:	210c      	movs	r1, #12
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	400a      	ands	r2, r1
 8003660:	2a08      	cmp	r2, #8
 8003662:	d1fb      	bne.n	800365c <SystemInit+0x90>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8003664:	bd13      	pop	{r0, r1, r4, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	40021000 	.word	0x40021000
 800366c:	f8ffb80c 	.word	0xf8ffb80c
 8003670:	fef6ffff 	.word	0xfef6ffff
 8003674:	fffbffff 	.word	0xfffbffff
 8003678:	ffc0ffff 	.word	0xffc0ffff
 800367c:	fffffeac 	.word	0xfffffeac
 8003680:	40022000 	.word	0x40022000

08003684 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003684:	230c      	movs	r3, #12
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003686:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003688:	4d12      	ldr	r5, [pc, #72]	; (80036d4 <SystemCoreClockUpdate+0x50>)
 800368a:	4e13      	ldr	r6, [pc, #76]	; (80036d8 <SystemCoreClockUpdate+0x54>)
 800368c:	686a      	ldr	r2, [r5, #4]
 800368e:	4013      	ands	r3, r2
  
  switch (tmp)
 8003690:	2b04      	cmp	r3, #4
 8003692:	d001      	beq.n	8003698 <SystemCoreClockUpdate+0x14>
 8003694:	2b08      	cmp	r3, #8
 8003696:	d002      	beq.n	800369e <SystemCoreClockUpdate+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8003698:	4b10      	ldr	r3, [pc, #64]	; (80036dc <SystemCoreClockUpdate+0x58>)
 800369a:	6033      	str	r3, [r6, #0]
      break;
 800369c:	e011      	b.n	80036c2 <SystemCoreClockUpdate+0x3e>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800369e:	686c      	ldr	r4, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80036a0:	686b      	ldr	r3, [r5, #4]
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80036a2:	02a4      	lsls	r4, r4, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 80036a4:	0f24      	lsrs	r4, r4, #28
 80036a6:	3402      	adds	r4, #2
      
      if (pllsource == 0x00)
 80036a8:	03db      	lsls	r3, r3, #15
 80036aa:	d401      	bmi.n	80036b0 <SystemCoreClockUpdate+0x2c>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80036ac:	480c      	ldr	r0, [pc, #48]	; (80036e0 <SystemCoreClockUpdate+0x5c>)
 80036ae:	e006      	b.n	80036be <SystemCoreClockUpdate+0x3a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80036b0:	230f      	movs	r3, #15
 80036b2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <SystemCoreClockUpdate+0x58>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80036b6:	4019      	ands	r1, r3
 80036b8:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80036ba:	f7ff fcc5 	bl	8003048 <__aeabi_uidiv>
 80036be:	4344      	muls	r4, r0
 80036c0:	6034      	str	r4, [r6, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80036c2:	686b      	ldr	r3, [r5, #4]
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <SystemCoreClockUpdate+0x60>)
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	0f1b      	lsrs	r3, r3, #28
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80036cc:	6832      	ldr	r2, [r6, #0]
 80036ce:	40da      	lsrs	r2, r3
 80036d0:	6032      	str	r2, [r6, #0]
}
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	20000384 	.word	0x20000384
 80036dc:	007a1200 	.word	0x007a1200
 80036e0:	003d0900 	.word	0x003d0900
 80036e4:	20000373 	.word	0x20000373

080036e8 <_delay_system_ticks_sub>:

static void _delay_system_ticks_sub(uint32_t sys_ticks){
    uint32_t start_val, end_val, curr_val;
    uint32_t load;

    start_val = SysTick->VAL;
 80036e8:	490f      	ldr	r1, [pc, #60]	; (8003728 <_delay_system_ticks_sub+0x40>)
 80036ea:	688a      	ldr	r2, [r1, #8]
    start_val &= 0x0ffffffUL;
 80036ec:	0212      	lsls	r2, r2, #8
 80036ee:	0a12      	lsrs	r2, r2, #8
 80036f0:	1e13      	subs	r3, r2, #0
    end_val = start_val;

    if(end_val < sys_ticks)
 80036f2:	4283      	cmp	r3, r0
 80036f4:	d203      	bcs.n	80036fe <_delay_system_ticks_sub+0x16>
    {
        load = SysTick->LOAD;
 80036f6:	684b      	ldr	r3, [r1, #4]
        load &=0xffffffUL;
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	0a1b      	lsrs	r3, r3, #8
        end_val += load;
 80036fc:	189b      	adds	r3, r3, r2
    }
    end_val -= sys_ticks;
 80036fe:	1a18      	subs	r0, r3, r0
    
    if(start_val >= end_val){
 8003700:	4282      	cmp	r2, r0
 8003702:	d309      	bcc.n	8003718 <_delay_system_ticks_sub+0x30>
        for(;;){
            curr_val = SysTick->VAL;
 8003704:	688b      	ldr	r3, [r1, #8]
            curr_val &= 0x0ffffffUL;
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	0a1b      	lsrs	r3, r3, #8
            if(curr_val <= end_val)
 800370a:	4283      	cmp	r3, r0
 800370c:	d90a      	bls.n	8003724 <_delay_system_ticks_sub+0x3c>
                break;
            if(curr_val > start_val)
 800370e:	4293      	cmp	r3, r2
 8003710:	d9f8      	bls.n	8003704 <_delay_system_ticks_sub+0x1c>
 8003712:	e007      	b.n	8003724 <_delay_system_ticks_sub+0x3c>
    }
    else{
        for(;;){
            curr_val = SysTick->VAL;
            curr_val &= 0x0ffffffUL;
            if(curr_val <= end_val && curr_val > start_val)
 8003714:	4293      	cmp	r3, r2
 8003716:	d805      	bhi.n	8003724 <_delay_system_ticks_sub+0x3c>
                break;
        }
    }
    else{
        for(;;){
            curr_val = SysTick->VAL;
 8003718:	688b      	ldr	r3, [r1, #8]
            curr_val &= 0x0ffffffUL;
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	0a1b      	lsrs	r3, r3, #8
            if(curr_val <= end_val && curr_val > start_val)
 800371e:	4283      	cmp	r3, r0
 8003720:	d8fa      	bhi.n	8003718 <_delay_system_ticks_sub+0x30>
 8003722:	e7f7      	b.n	8003714 <_delay_system_ticks_sub+0x2c>
                break;
            }
        }
}
 8003724:	4770      	bx	lr
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	e000e010 	.word	0xe000e010

0800372c <delay_system_ticks>:

void delay_system_ticks(uint32_t sys_ticks){
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	1c05      	adds	r5, r0, #0
    uint32_t load4;
    load4 = SysTick->LOAD;
 8003730:	4b07      	ldr	r3, [pc, #28]	; (8003750 <delay_system_ticks+0x24>)
 8003732:	685c      	ldr	r4, [r3, #4]
    load4 &= 0x0ffffffUL;
 8003734:	0224      	lsls	r4, r4, #8
    load4 >>= 2;
 8003736:	0aa4      	lsrs	r4, r4, #10
    while(sys_ticks > load4){
 8003738:	42a5      	cmp	r5, r4
 800373a:	d904      	bls.n	8003746 <delay_system_ticks+0x1a>
        sys_ticks -= load4;
        _delay_system_ticks_sub(load4);
 800373c:	1c20      	adds	r0, r4, #0
    uint32_t load4;
    load4 = SysTick->LOAD;
    load4 &= 0x0ffffffUL;
    load4 >>= 2;
    while(sys_ticks > load4){
        sys_ticks -= load4;
 800373e:	1b2d      	subs	r5, r5, r4
        _delay_system_ticks_sub(load4);
 8003740:	f7ff ffd2 	bl	80036e8 <_delay_system_ticks_sub>
 8003744:	e7f8      	b.n	8003738 <delay_system_ticks+0xc>
    }
    _delay_system_ticks_sub(sys_ticks);
 8003746:	1c28      	adds	r0, r5, #0
 8003748:	f7ff ffce 	bl	80036e8 <_delay_system_ticks_sub>
}
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	e000e010 	.word	0xe000e010

08003754 <delay_micro_seconds>:

void delay_micro_seconds(uint32_t us){
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <delay_micro_seconds+0x18>)
        _delay_system_ticks_sub(load4);
    }
    _delay_system_ticks_sub(sys_ticks);
}

void delay_micro_seconds(uint32_t us){
 8003756:	b510      	push	{r4, lr}
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
    sys_ticks /= 1000000;
 8003758:	4905      	ldr	r1, [pc, #20]	; (8003770 <delay_micro_seconds+0x1c>)
        _delay_system_ticks_sub(load4);
    }
    _delay_system_ticks_sub(sys_ticks);
}

void delay_micro_seconds(uint32_t us){
 800375a:	1c04      	adds	r4, r0, #0
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
 800375c:	6818      	ldr	r0, [r3, #0]
    sys_ticks /= 1000000;
 800375e:	f7ff fc73 	bl	8003048 <__aeabi_uidiv>
    sys_ticks *= us;
 8003762:	4360      	muls	r0, r4
    delay_system_ticks(sys_ticks);
 8003764:	f7ff ffe2 	bl	800372c <delay_system_ticks>
}
 8003768:	bd10      	pop	{r4, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000384 	.word	0x20000384
 8003770:	000f4240 	.word	0x000f4240

08003774 <u8g_Delay>:

void u8g_Delay(uint16_t val){
 8003774:	b508      	push	{r3, lr}
    delay_micro_seconds(1000UL * (uint32_t)val);
 8003776:	23fa      	movs	r3, #250	; 0xfa
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4358      	muls	r0, r3
 800377c:	f7ff ffea 	bl	8003754 <delay_micro_seconds>
}
 8003780:	bd08      	pop	{r3, pc}

08003782 <u8g_MicroDelay>:

void u8g_MicroDelay(void)
{
 8003782:	b508      	push	{r3, lr}
    delay_micro_seconds(1);
 8003784:	2001      	movs	r0, #1
 8003786:	f7ff ffe5 	bl	8003754 <delay_micro_seconds>
}
 800378a:	bd08      	pop	{r3, pc}

0800378c <u8g_10MicroDelay>:

void u8g_10MicroDelay(void){
 800378c:	b508      	push	{r3, lr}
    delay_micro_seconds(10);
 800378e:	200a      	movs	r0, #10
 8003790:	f7ff ffe0 	bl	8003754 <delay_micro_seconds>
}
 8003794:	bd08      	pop	{r3, pc}
	...

08003798 <u8g_com_hw_i2c_fn>:
	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); 
}

uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8003798:	b537      	push	{r0, r1, r2, r4, r5, lr}
  register uint8_t *ptr = arg_ptr;
  switch(msg)
 800379a:	1e48      	subs	r0, r1, #1
 800379c:	2806      	cmp	r0, #6
 800379e:	d86a      	bhi.n	8003876 <u8g_com_hw_i2c_fn+0xde>
 80037a0:	1c1d      	adds	r5, r3, #0
 80037a2:	1c14      	adds	r4, r2, #0
 80037a4:	f7ff fc46 	bl	8003034 <__gnu_thumb1_case_uqi>
 80037a8:	67670704 	.word	0x67670704
 80037ac:	1911      	.short	0x1911
 80037ae:	19          	.byte	0x19
 80037af:	00          	.byte	0x00
  {
    case U8G_COM_MSG_STOP:
        break;
    
    case U8G_COM_MSG_INIT:
        init_i2c(); 
 80037b0:	f000 f86a 	bl	8003888 <init_i2c>
 80037b4:	e00e      	b.n	80037d4 <u8g_com_hw_i2c_fn+0x3c>
 80037b6:	4b31      	ldr	r3, [pc, #196]	; (800387c <u8g_com_hw_i2c_fn+0xe4>)
        //I2C_WrReg(0x80, 0xAF); 
        u8g_MicroDelay();
        break;
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
        if(arg_val == 0){
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	d101      	bne.n	80037c0 <u8g_com_hw_i2c_fn+0x28>
            control = 0;  //Send a Command (D/C# pin is low)
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e001      	b.n	80037c4 <u8g_com_hw_i2c_fn+0x2c>
        }
        else{
            control = 0x40; //send data 
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]
        }
        u8g_10MicroDelay(); 
 80037c4:	f7ff ffe2 	bl	800378c <u8g_10MicroDelay>
        break;
 80037c8:	e055      	b.n	8003876 <u8g_com_hw_i2c_fn+0xde>
      
    case U8G_COM_MSG_RESET:
      break;
      
    case U8G_COM_MSG_WRITE_BYTE:
        I2C_WrReg(control, arg_val); 
 80037ca:	4b2c      	ldr	r3, [pc, #176]	; (800387c <u8g_com_hw_i2c_fn+0xe4>)
 80037cc:	1c11      	adds	r1, r2, #0
 80037ce:	7818      	ldrb	r0, [r3, #0]
 80037d0:	f000 f8a0 	bl	8003914 <I2C_WrReg>
        //u8g_i2c_start(0x78);
        //u8g_i2c_send_byte(arg_val);
        //u8g_i2c_stop();
        u8g_MicroDelay();
 80037d4:	f7ff ffd5 	bl	8003782 <u8g_MicroDelay>
        break;
 80037d8:	e04d      	b.n	8003876 <u8g_com_hw_i2c_fn+0xde>
    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P:
        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET);
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	4828      	ldr	r0, [pc, #160]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 80037de:	0209      	lsls	r1, r1, #8
 80037e0:	f7fc ff98 	bl	8000714 <I2C_GetFlagStatus>
 80037e4:	2801      	cmp	r0, #1
 80037e6:	d0f8      	beq.n	80037da <u8g_com_hw_i2c_fn+0x42>
		I2C_TransferHandling(I2C1, 0x78, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	019b      	lsls	r3, r3, #6
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	4823      	ldr	r0, [pc, #140]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 80037f2:	2178      	movs	r1, #120	; 0x78
 80037f4:	2201      	movs	r2, #1
 80037f6:	045b      	lsls	r3, r3, #17
 80037f8:	f7fc feea 	bl	80005d0 <I2C_TransferHandling>
	    //Ensure the transmit interrupted flag is set
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 80037fc:	4820      	ldr	r0, [pc, #128]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 80037fe:	2102      	movs	r1, #2
 8003800:	f7fc ff88 	bl	8000714 <I2C_GetFlagStatus>
 8003804:	2800      	cmp	r0, #0
 8003806:	d0f9      	beq.n	80037fc <u8g_com_hw_i2c_fn+0x64>
	    //Send the address of the register we wish to write to
	    I2C_SendData(I2C1, control);
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <u8g_com_hw_i2c_fn+0xe4>)
 800380a:	481d      	ldr	r0, [pc, #116]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 800380c:	7819      	ldrb	r1, [r3, #0]
 800380e:	f7fc ff71 	bl	80006f4 <I2C_SendData>

	    //Ensure that the transfer complete reload flag is Set, essentially a standard
	    //TC flag
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET);
 8003812:	481b      	ldr	r0, [pc, #108]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	f7fc ff7d 	bl	8000714 <I2C_GetFlagStatus>
 800381a:	2800      	cmp	r0, #0
 800381c:	d0f9      	beq.n	8003812 <u8g_com_hw_i2c_fn+0x7a>
	    I2C_TransferHandling(I2C1, 0x78, arg_val+1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	1c62      	adds	r2, r4, #1
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	4815      	ldr	r0, [pc, #84]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 800382a:	2178      	movs	r1, #120	; 0x78
 800382c:	049b      	lsls	r3, r3, #18
 800382e:	f7fc fecf 	bl	80005d0 <I2C_TransferHandling>
	    //Again, wait until the transmit interrupted flag is set
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8003832:	4813      	ldr	r0, [pc, #76]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 8003834:	2102      	movs	r1, #2
 8003836:	f7fc ff6d 	bl	8000714 <I2C_GetFlagStatus>
 800383a:	2800      	cmp	r0, #0
 800383c:	d0f9      	beq.n	8003832 <u8g_com_hw_i2c_fn+0x9a>
 800383e:	192c      	adds	r4, r5, r4
	    //Send the value you wish you write to the register
        while( arg_val > 0 )
 8003840:	42a5      	cmp	r5, r4
 8003842:	d00b      	beq.n	800385c <u8g_com_hw_i2c_fn+0xc4>
        {
	        I2C_SendData(I2C1, *ptr++);
 8003844:	7829      	ldrb	r1, [r5, #0]
 8003846:	480e      	ldr	r0, [pc, #56]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 8003848:	f7fc ff54 	bl	80006f4 <I2C_SendData>
            arg_val--;
	        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 800384e:	2102      	movs	r1, #2
 8003850:	f7fc ff60 	bl	8000714 <I2C_GetFlagStatus>
 8003854:	2800      	cmp	r0, #0
 8003856:	d0f9      	beq.n	800384c <u8g_com_hw_i2c_fn+0xb4>
 8003858:	3501      	adds	r5, #1
 800385a:	e7f1      	b.n	8003840 <u8g_com_hw_i2c_fn+0xa8>
            //Wait for the stop flag to be set indicating a stop condition has been sent
        }
	    I2C_TransferHandling(I2C1, 0x78, 0, I2C_AutoEnd_Mode, I2C_Generate_Stop);
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	01db      	lsls	r3, r3, #7
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	4806      	ldr	r0, [pc, #24]	; (8003880 <u8g_com_hw_i2c_fn+0xe8>)
 8003866:	2178      	movs	r1, #120	; 0x78
 8003868:	2200      	movs	r2, #0
 800386a:	049b      	lsls	r3, r3, #18
 800386c:	f7fc feb0 	bl	80005d0 <I2C_TransferHandling>
        //while(I2C_GetFlagStatus(I2C1,I2C_FLAG_STOPF) == RESET);
	    //I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); 
        delay_micro_seconds(100);
 8003870:	2064      	movs	r0, #100	; 0x64
 8003872:	f7ff ff6f 	bl	8003754 <delay_micro_seconds>
        //u8g_MicroDelay();
        break;
  }
  return 1;
}
 8003876:	2001      	movs	r0, #1
 8003878:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	20000e1c 	.word	0x20000e1c
 8003880:	40005400 	.word	0x40005400

08003884 <I2C1_IRQHandler>:

void I2C1_IRQHandler(void){
   //if(I2C_GetFlagStatus(I2C1, I2C_FLAG_NACKF) == SET){
   // I2C_ClearFlag(I2C1, I2C_FLAG_NACKF);
   //}
}
 8003884:	4770      	bx	lr
	...

08003888 <init_i2c>:
//initialize the i2c periperal
void init_i2c(void){
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003888:	2080      	movs	r0, #128	; 0x80
   // I2C_ClearFlag(I2C1, I2C_FLAG_NACKF);
   //}
}

//initialize the i2c periperal
void init_i2c(void){
 800388a:	b530      	push	{r4, r5, lr}
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800388c:	02c0      	lsls	r0, r0, #11
   // I2C_ClearFlag(I2C1, I2C_FLAG_NACKF);
   //}
}

//initialize the i2c periperal
void init_i2c(void){
 800388e:	b08b      	sub	sp, #44	; 0x2c
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003890:	2101      	movs	r1, #1
 8003892:	f7fd f9e3 	bl	8000c5c <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8003896:	2080      	movs	r0, #128	; 0x80
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_1);
 8003898:	4c1a      	ldr	r4, [pc, #104]	; (8003904 <init_i2c+0x7c>)
void init_i2c(void){
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800389a:	2101      	movs	r1, #1
 800389c:	0380      	lsls	r0, r0, #14
 800389e:	f7fd f9f5 	bl	8000c8c <RCC_APB1PeriphClockCmd>
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
 80038a2:	2010      	movs	r0, #16
 80038a4:	f7fd f912 	bl	8000acc <RCC_I2CCLKConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_1);
 80038a8:	1c20      	adds	r0, r4, #0
 80038aa:	2106      	movs	r1, #6
 80038ac:	2201      	movs	r2, #1
 80038ae:	f7fc fcfd 	bl	80002ac <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_1);
 80038b2:	1c20      	adds	r0, r4, #0
 80038b4:	2107      	movs	r1, #7
 80038b6:	2201      	movs	r2, #1
 80038b8:	f7fc fcf8 	bl	80002ac <GPIO_PinAFConfig>

    GPIO_InitTypeDef GPIOB_InitStruct = {
 80038bc:	a901      	add	r1, sp, #4
 80038be:	1c0a      	adds	r2, r1, #0
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <init_i2c+0x80>)
 80038c2:	cb21      	ldmia	r3!, {r0, r5}
 80038c4:	c221      	stmia	r2!, {r0, r5}
        .GPIO_Speed = GPIO_Speed_50MHz,
        .GPIO_Mode = GPIO_Mode_AF,
        .GPIO_OType = GPIO_OType_OD,
        .GPIO_PuPd = GPIO_PuPd_UP
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
 80038c6:	1c20      	adds	r0, r4, #0
 80038c8:	f7fc fc4e 	bl	8000168 <GPIO_Init>
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
 80038cc:	1c20      	adds	r0, r4, #0
 80038ce:	2106      	movs	r1, #6
 80038d0:	f7fc fcba 	bl	8000248 <GPIO_PinLockConfig>
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
 80038d4:	1c20      	adds	r0, r4, #0
 80038d6:	2107      	movs	r1, #7
 80038d8:	f7fc fcb6 	bl	8000248 <GPIO_PinLockConfig>
    
    I2C_InitTypeDef I2C_InitStructure = {
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <init_i2c+0x84>)
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 80038de:	4c0c      	ldr	r4, [pc, #48]	; (8003910 <init_i2c+0x88>)
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
    
    I2C_InitTypeDef I2C_InitStructure = {
 80038e0:	9303      	str	r3, [sp, #12]
 80038e2:	2300      	movs	r3, #0
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 80038e4:	1c20      	adds	r0, r4, #0
 80038e6:	a903      	add	r1, sp, #12
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
    
    I2C_InitTypeDef I2C_InitStructure = {
 80038e8:	9304      	str	r3, [sp, #16]
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	9306      	str	r3, [sp, #24]
 80038ee:	9307      	str	r3, [sp, #28]
 80038f0:	9308      	str	r3, [sp, #32]
 80038f2:	9309      	str	r3, [sp, #36]	; 0x24
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 80038f4:	f7fc fd08 	bl	8000308 <I2C_Init>
    //I2C_ITConfig(USART1, I2C_IT_NACKI, ENABLE);
    //NVIC_EnableIRQ(I2C1_IRQn);
    I2C_Cmd(I2C1, ENABLE);
 80038f8:	1c20      	adds	r0, r4, #0
 80038fa:	2101      	movs	r1, #1
 80038fc:	f7fc fd42 	bl	8000384 <I2C_Cmd>
}
 8003900:	b00b      	add	sp, #44	; 0x2c
 8003902:	bd30      	pop	{r4, r5, pc}
 8003904:	48000400 	.word	0x48000400
 8003908:	080039f0 	.word	0x080039f0
 800390c:	0010020a 	.word	0x0010020a
 8003910:	40005400 	.word	0x40005400

08003914 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val){
 8003914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003916:	1c05      	adds	r5, r0, #0
 8003918:	1c0c      	adds	r4, r1, #0
    //Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET);
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	481e      	ldr	r0, [pc, #120]	; (8003998 <I2C_WrReg+0x84>)
 800391e:	0209      	lsls	r1, r1, #8
 8003920:	f7fc fef8 	bl	8000714 <I2C_GetFlagStatus>
 8003924:	2801      	cmp	r0, #1
 8003926:	d0f8      	beq.n	800391a <I2C_WrReg+0x6>
	//"Handle" a transfer - The STM32F0 series has a shocking I2C interface...
	//...Regardless! Send the address of the HMC sensor down the I2C Bus and generate
	//a start saying we're going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me and a lot of the code is
	//from the Std peripheral library
	I2C_TransferHandling(I2C1, 0x78, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	019b      	lsls	r3, r3, #6
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	4819      	ldr	r0, [pc, #100]	; (8003998 <I2C_WrReg+0x84>)
 8003932:	2178      	movs	r1, #120	; 0x78
 8003934:	2201      	movs	r2, #1
 8003936:	045b      	lsls	r3, r3, #17
 8003938:	f7fc fe4a 	bl	80005d0 <I2C_TransferHandling>

	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 800393c:	4816      	ldr	r0, [pc, #88]	; (8003998 <I2C_WrReg+0x84>)
 800393e:	2102      	movs	r1, #2
 8003940:	f7fc fee8 	bl	8000714 <I2C_GetFlagStatus>
 8003944:	2800      	cmp	r0, #0
 8003946:	d0f9      	beq.n	800393c <I2C_WrReg+0x28>

	//Send the address of the register we wish to write to
	I2C_SendData(I2C1, Reg);
 8003948:	4813      	ldr	r0, [pc, #76]	; (8003998 <I2C_WrReg+0x84>)
 800394a:	1c29      	adds	r1, r5, #0
 800394c:	f7fc fed2 	bl	80006f4 <I2C_SendData>

	//Ensure that the transfer complete reload flag is Set, essentially a standard
	//TC flag
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET);
 8003950:	4811      	ldr	r0, [pc, #68]	; (8003998 <I2C_WrReg+0x84>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	f7fc fede 	bl	8000714 <I2C_GetFlagStatus>
 8003958:	2800      	cmp	r0, #0
 800395a:	d0f9      	beq.n	8003950 <I2C_WrReg+0x3c>

	//Now that the HMC5883L knows which register we want to write to, send the address
	//again and ensure the I2C peripheral doesn't add any start or stop conditions
	I2C_TransferHandling(I2C1, 0x78, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 800395c:	2300      	movs	r3, #0
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	480d      	ldr	r0, [pc, #52]	; (8003998 <I2C_WrReg+0x84>)
 8003964:	2178      	movs	r1, #120	; 0x78
 8003966:	2201      	movs	r2, #1
 8003968:	049b      	lsls	r3, r3, #18
 800396a:	f7fc fe31 	bl	80005d0 <I2C_TransferHandling>

	//Again, wait until the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 800396e:	480a      	ldr	r0, [pc, #40]	; (8003998 <I2C_WrReg+0x84>)
 8003970:	2102      	movs	r1, #2
 8003972:	f7fc fecf 	bl	8000714 <I2C_GetFlagStatus>
 8003976:	2800      	cmp	r0, #0
 8003978:	d0f9      	beq.n	800396e <I2C_WrReg+0x5a>

	//Send the value you wish you write to the register
	I2C_SendData(I2C1, Val);
 800397a:	4807      	ldr	r0, [pc, #28]	; (8003998 <I2C_WrReg+0x84>)
 800397c:	1c21      	adds	r1, r4, #0
 800397e:	f7fc feb9 	bl	80006f4 <I2C_SendData>

	//Wait for the stop flag to be set indicating a stop condition has been sent
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET);
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <I2C_WrReg+0x84>)
 8003984:	2120      	movs	r1, #32
 8003986:	f7fc fec5 	bl	8000714 <I2C_GetFlagStatus>
 800398a:	2800      	cmp	r0, #0
 800398c:	d0f9      	beq.n	8003982 <I2C_WrReg+0x6e>

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C1, I2C_FLAG_STOPF);
 800398e:	4802      	ldr	r0, [pc, #8]	; (8003998 <I2C_WrReg+0x84>)
 8003990:	2120      	movs	r1, #32
 8003992:	f7fc fec5 	bl	8000720 <I2C_ClearFlag>
}
 8003996:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003998:	40005400 	.word	0x40005400

0800399c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800399e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039a2:	e003      	b.n	80039ac <LoopCopyDataInit>

080039a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80039a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039aa:	3104      	adds	r1, #4

080039ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80039ac:	480b      	ldr	r0, [pc, #44]	; (80039dc <LoopForever+0xa>)
  ldr r3, =_edata
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <LoopForever+0xe>)
  adds r2, r0, r1
 80039b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80039b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80039b4:	d3f6      	bcc.n	80039a4 <CopyDataInit>
  ldr r2, =_sbss
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <LoopForever+0x12>)
  b LoopFillZerobss
 80039b8:	e002      	b.n	80039c0 <LoopFillZerobss>

080039ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80039ba:	2300      	movs	r3, #0
  str  r3, [r2]
 80039bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039be:	3204      	adds	r2, #4

080039c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <LoopForever+0x16>)
  cmp r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80039c4:	d3f9      	bcc.n	80039ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039c6:	f7ff fe01 	bl	80035cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f7ff fb8d 	bl	80030e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ce:	f7ff fd91 	bl	80034f4 <main>

080039d2 <LoopForever>:
  
LoopForever:
    b LoopForever
 80039d2:	e7fe      	b.n	80039d2 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039d4:	20001000 	.word	0x20001000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80039d8:	08004c6c 	.word	0x08004c6c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80039dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80039e0:	20000388 	.word	0x20000388
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80039e4:	20000388 	.word	0x20000388
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80039e8:	20000e20 	.word	0x20000e20

080039ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039ec:	e7fe      	b.n	80039ec <ADC1_COMP_IRQHandler>
 80039ee:	0000      	movs	r0, r0
 80039f0:	000000c0 	.word	0x000000c0
 80039f4:	01010302 	.word	0x01010302

080039f8 <u8g_font_profont22r>:
 80039f8:	00150c00 75030efc 7f207107 10fc12fc     .......u.q .....
 8003a08:	000000fc 0200000c 040c0e0e c0c0c000     ................
 8003a18:	c0c0c0c0 00c0c0c0 06c0c000 020c0606     ................
 8003a28:	cccccc0a 0acccccc 000c140a 33003304     .............3.3
 8003a38:	ffc0ff00 330033c0 ffc0ff00 330033c0     .....3.3.....3.3
 8003a48:	24120a00 0cfe000c 3f000c00 ed807f00     ...$.......?....
 8003a58:	ccc0ccc0 7f00ec00 0d803f00 ccc00cc0     .........?......
 8003a68:	7fc0edc0 0c003f80 0a000c00 000c1c0e     .....?..........
 8003a78:	7fc03f00 cdc0ccc0 cf80cfc0 3f007f00     .?.............?
 8003a88:	7cc03c80 ccc0ecc0 c380c7c0 1c0e0a00     .<.|............
 8003a98:	3e00000c e3007f00 ce00c700 7800fc00     ...>...........x
 8003aa8:	fc007800 c7c0cfc0 7f80e780 02c03cc0     .x...........<..
 8003ab8:	040c0606 c0c0c00a 06c0c0c0 020c1212     ................
 8003ac8:	381c0cfe c0c0e070 c0c0c0c0 70e0c0c0     ...8p..........p
 8003ad8:	060c1c38 020c1212 70e0c0fe 0c0c1c38     8..........p8...
 8003ae8:	0c0c0c0c 381c0c0c 0ac0e070 000c140a     .......8p.......
 8003af8:	0c000c04 ffc0cc00 3f003fc0 ccc0ff00     .........?.?....
 8003b08:	0c000cc0 140a0a00 0c02000c 0c000c00     ................
 8003b18:	ff000c00 0cc0ffc0 0c000c00 05000c00     ................
 8003b28:	020c0909 787830fc 70381838 020640e0     .....0xx8.8p.@..
 8003b38:	06020c02 0404fcfc 01030c04 60f0f060     ............`..`
 8003b48:	0c28140b 6000fc00 c0006000 8001c000     ..(....`.`......
 8003b58:	00038001 00060003 000c0006 0018000c     ................
 8003b68:	00300018 00600030 00c00060 0e0a00c0     ..0.0.`.`.......
 8003b78:	00000c1c 807f003f c0c1c0e1 c0c7c0c3     ....?...........
 8003b88:	c0dcc0ce c0f0c0f8 c0e1c0e0 003f807f     ..............?.
 8003b98:	0c1c0e0a 000c0000 007c000c 000c007c     ..........|.|...
 8003ba8:	000c000c 000c000c 000c000c c0ff000c     ................
 8003bb8:	0e0ac0ff 00000c1c 807f003f c0c0c0e1     ........?.......
 8003bc8:	c001c000 00078003 001c000e 00700038     ............8.p.
 8003bd8:	c0ffc0ff 0c1c0e0a 003f0000 c0e1807f     ..........?.....
 8003be8:	c000c0c0 000f8001 c001800f c0c0c000     ................
 8003bf8:	807fc0e1 0e0a003f 00000c1c 00070003     ....?...........
 8003c08:	001f000f 0073003b 00c300e3 c0ffc0ff     ....;.s.........
 8003c18:	00030003 c00fc00f 0c1c0e0a c0ff0000     ................
 8003c28:	00c0c0ff 00ff00c0 c00180ff c000c000     ................
 8003c38:	c0c0c000 807fc0e1 0e0a003f 00000c1c     ........?.......
 8003c48:	007f003f 00c000e0 80ff00ff c0c0c0c1     ?...............
 8003c58:	c0c0c0c0 c0e1c0c0 003f807f 0c1c0e0a     ..........?.....
 8003c68:	c0ff0000 c000c0ff c000c000 8003c001     ................
 8003c78:	000e0007 000c000c 000c000c 0e0a000c     ................
 8003c88:	00000c1c 807f003f c0c0c0e1 8061c0c0     ....?.........a.
 8003c98:	807f003f c0c0c0e1 c0e1c0c0 003f807f     ?.............?.
 8003ca8:	0c1c0e0a 003f0000 c0e1807f c0c0c0c0     ......?.........
 8003cb8:	c0c0c0c0 c07fc0e0 c000c03f 803fc001     ........?.....?.
 8003cc8:	0a04003f 01030c0a 60f0f060 f0600000     ?.......`..`..`.
 8003cd8:	0f0560f0 fc020c0f 30787830 78300000     .`......0xx0..0x
 8003ce8:	38183878 0840e070 020c0e0e 0e070300     x8.8p.@.........
 8003cf8:	e070381c 1c3870e0 0a03070e 000c0c06     .8p..p8.........
 8003d08:	ffc0ff04 000000c0 ffc0ff00 0e0e08c0     ................
 8003d18:	c000020c 1c3870e0 0e07070e e070381c     .....p8......8p.
 8003d28:	1c0e0ac0 3f00000c e1807f00 00c0c0c0     .......?........
 8003d38:	03c001c0 0e000780 00000c00 0c000000     ................
 8003d48:	0a000c00 000c1c0e 7f003f00 c0c0e180     .........?......
 8003d58:	cfc0c7c0 ccc0ccc0 c7c0cfc0 e000c080     ................
 8003d68:	3fc07f00 1c0e0ac0 0c00000c 1e001e00     ...?............
 8003d78:	33003300 61806100 ffc0c080 c0c0ffc0     .3.3.a.a........
 8003d88:	c0c0c0c0 0ac0c0c0 000c1c0e ff00ff00     ................
 8003d98:	c0c0c180 c1c0c0c0 ff00ff80 c0c0c180     ................
 8003da8:	c1c0c0c0 ff80ffc0 1c0e0a00 3f00000c     ...............?
 8003db8:	e1807f00 c0c0c0c0 c000c000 c000c000     ................
 8003dc8:	c000c000 7fc0e1c0 0a003f80 000c1c0e     .........?......
 8003dd8:	ff00ff00 c0c0c180 c0c0c0c0 c0c0c0c0     ................
 8003de8:	c0c0c0c0 c1c0c0c0 ff80ffc0 1c0e0a00     ................
 8003df8:	ff00000c c0c0ffc0 c000c000 ff00c000     ................
 8003e08:	c000ff00 c000c000 ff00c000 0ac0ffc0     ................
 8003e18:	000c1c0e ffc0ff00 c000c0c0 c000c000     ................
 8003e28:	ff00ff00 c000c000 c000c000 c000c000     ................
 8003e38:	1c0e0a00 3f00000c e1807f00 c0c0c0c0     .......?........
 8003e48:	c300c000 c0c0c3c0 c0c0c0c0 7fc0e1c0     ................
 8003e58:	0a003f80 000c1c0e c0c0c000 c0c0c0c0     .?..............
 8003e68:	c0c0c0c0 ffc0ffc0 c0c0c0c0 c0c0c0c0     ................
 8003e78:	c0c0c0c0 1c0e0ac0 ff00000c 0cc0ffc0     ................
 8003e88:	0c000c00 0c000c00 0c000c00 0c000c00     ................
 8003e98:	ff000c00 0ac0ffc0 000c1c0e 00c00000     ................
 8003ea8:	00c000c0 00c000c0 00c000c0 c0c0c0c0     ................
 8003eb8:	e1c0c0c0 3f807fc0 1c0e0a00 c100000c     .......?........
 8003ec8:	c780c3c0 dc00ce00 f000f800 dc00f800     ................
 8003ed8:	c700ce00 c180c300 0ac0c0c0 000c1c0e     ................
 8003ee8:	c000c000 c000c000 c000c000 c000c000     ................
 8003ef8:	c000c000 c000c000 ffc0ff00 1c0e0ac0     ................
 8003f08:	c000000c f3c0e1c0 dec0ffc0 ccc0ccc0     ................
 8003f18:	c0c0ccc0 c0c0c0c0 c0c0c0c0 0ac0c0c0     ................
 8003f28:	000c1c0e e0c0c000 f8c0f0c0 cec0dcc0     ................
 8003f38:	c3c0c7c0 c0c0c1c0 c0c0c0c0 c0c0c0c0     ................
 8003f48:	1c0e0ac0 3f00000c e1807f00 c0c0c0c0     .......?........
 8003f58:	c0c0c0c0 c0c0c0c0 c0c0c0c0 7fc0e1c0     ................
 8003f68:	0a003f80 000c1c0e ff00ff00 c0c0c180     .?..............
 8003f78:	c1c0c0c0 ff80ffc0 c000c000 c000c000     ................
 8003f88:	c000c000 20100a00 3ffe000c e1807f00     ....... ...?....
 8003f98:	c0c0c0c0 c0c0c0c0 c0c0c0c0 ccc0c0c0     ................
 8003fa8:	7fc0efc0 01803f80 0ac000c0 000c1c0e     .....?..........
 8003fb8:	ff00ff00 c0c0c180 c1c0c0c0 ff00ff80     ................
 8003fc8:	c0c0c180 c0c0c0c0 c0c0c0c0 1c0e0ac0     ................
 8003fd8:	3f00000c e1807f00 c0c0c0c0 7f00e000     ...?............
 8003fe8:	01803f00 c0c000c0 7fc0e1c0 0a003f80     .?...........?..
 8003ff8:	000c1c0e ffc0ff00 0c000cc0 0c000c00     ................
 8004008:	0c000c00 0c000c00 0c000c00 0c000c00     ................
 8004018:	1c0e0a00 c000000c c0c0c0c0 c0c0c0c0     ................
 8004028:	c0c0c0c0 c0c0c0c0 c0c0c0c0 7fc0e1c0     ................
 8004038:	0a003f80 000c1c0e c0c0c000 c0c0c0c0     .?..............
 8004048:	c0c0c0c0 618061c0 33003380 1e001e00     .....a.a.3.3....
 8004058:	0c000c00 1c0e0a00 c000000c c0c0c0c0     ................
 8004068:	c0c0c0c0 ccc0c0c0 ccc0ccc0 ffc0dec0     ................
 8004078:	e1c0f3c0 0ac0c0c0 000c1c0e c0c0c000     ................
 8004088:	e1c0c0c0 3f8073c0 1e001e00 73003f00     .....s.?.....?.s
 8004098:	c0c0e180 c0c0c0c0 1c0e0ac0 c000000c     ................
 80040a8:	c0c0c0c0 c0c0c0c0 73c0e1c0 1e003f80     ...........s.?..
 80040b8:	0c000c00 0c000c00 0a000c00 000c1c0e     ................
 80040c8:	ffc0ff00 01c000c0 078003c0 1c000e00     ................
 80040d8:	70003800 c000e000 ffc0ff00 121204c0     .8.p............
 80040e8:	f0fe040c c0c0c0f0 c0c0c0c0 c0c0c0c0     ................
 80040f8:	f0c0c0c0 28140bf0 c0fc010c 6000c000     .......(.......`
 8004108:	30006000 18003000 0c001800 06000c00     .`.0.0..........
 8004118:	03000600 01000300 00800180 00c000c0     ................
 8004128:	04600060 020c1212 30f0f0fe 30303030     `.`........00000
 8004138:	30303030 30303030 0af0f030 000c0c06     000000000.......
 8004148:	1e000c08 73003f00 40c0e180 04020c80     .....?.s...@....
 8004158:	fffc000c 04f0fff0 020c0404 70e0c00c     ...............p
 8004168:	140a0a30 3f00000c e0c07fc0 c0c0c0c0     0......?........
 8004178:	c3c0c1c0 7ec0e7c0 0ac03cc0 000c1c0e     .......~.<......
 8004188:	c000c000 c000c000 ff00ff00 c0c0c180     ................
 8004198:	c0c0c0c0 c1c0c0c0 ff80ffc0 140a0a00     ................
 80041a8:	3f00000c e1807f00 c0c0c0c0 c000c000     ...?............
 80041b8:	7f00e000 0ac03fc0 000c1c0e 00c00000     .....?..........
 80041c8:	00c000c0 7fc03fc0 c0c0e0c0 c0c0c0c0     .....?..........
 80041d8:	e0c0c0c0 3fc07fc0 140a0ac0 3f00000c     .......?.......?
 80041e8:	e1807f00 ffc0c0c0 c0c0ffc0 7f00e000     ................
 80041f8:	08c03fc0 020c0e0e 381f0f00 30fcfc30     .?.........80..0
 8004208:	30303030 0a303030 000c1c0e 7fc03ffc     0000000......?..
 8004218:	c0c0e0c0 c0c0c0c0 e0c0c0c0 3fc07fc0     ...............?
 8004228:	01c000c0 3f803fc0 1c0e0a00 c000000c     .....?.?........
 8004238:	c000c000 ff00c000 c180ff00 c0c0c0c0     ................
 8004248:	c0c0c0c0 c0c0c0c0 06c0c0c0 020c0e0e     ................
 8004258:	00303000 30f0f000 30303030 06fcfc30     .00....000000...
 8004268:	000c1212 000c0cfc 0c3c3c00 0c0c0c0c     .........<<.....
 8004278:	0c0c0c0c 0af0f81c 000c1c0e c000c000     ................
 8004288:	c000c000 c780c300 dc00ce00 fe00fc00     ................
 8004298:	c300e700 c0c0c180 0e0e06c0 f000020c     ................
 80042a8:	303030f0 30303030 fc303030 140a0afc     .0000000000.....
 80042b8:	ff00000c cd80ff00 ccc0ccc0 ccc0ccc0     ................
 80042c8:	ccc0ccc0 0ac0ccc0 000c140a df00cf00     ................
 80042d8:	f0c0f980 c0c0e0c0 c0c0c0c0 c0c0c0c0     ................
 80042e8:	140a0ac0 3f00000c e1807f00 c0c0c0c0     .......?........
 80042f8:	c0c0c0c0 7fc0e1c0 0a003f80 000c1c0e     .........?......
 8004308:	ff00fffc c0c0c180 c0c0c0c0 c1c0c0c0     ................
 8004318:	ff80ffc0 c000c000 c000c000 1c0e0a00     ................
 8004328:	3ffc000c e0c07fc0 c0c0c0c0 c0c0c0c0     ...?............
 8004338:	7fc0e0c0 00c03fc0 00c000c0 0ac000c0     .....?..........
 8004348:	000c140a df00cf00 f0c0f980 c000e0c0     ................
 8004358:	c000c000 c000c000 140a0a00 3f00000c     ...............?
 8004368:	c0c07fc0 7f00c000 00803f00 ffc000c0     .........?......
 8004378:	0800ff80 020c0e0e 30303000 30fcfc30     .........0000..0
 8004388:	30303030 0a0f1f38 000c140a c0c0c000     00008...........
 8004398:	c0c0c0c0 c1c0c0c0 e7c0c3c0 3cc07ec0     .............~.<
 80043a8:	140a0ac0 c000000c c0c0c0c0 618061c0     .............a.a
 80043b8:	33803380 1e001e00 0a000c00 000c140a     .3.3............
 80043c8:	ccc0cc00 ccc0ccc0 ccc0ccc0 ccc0ccc0     ................
 80043d8:	33807fc0 140a0a00 c000000c 73c0e1c0     ...3...........s
 80043e8:	1e003f80 3f001e00 e1807300 0ac0c0c0     .?.....?.s......
 80043f8:	000c1c0e c0c0c0fc c0c0c0c0 c0c0c0c0     ................
 8004408:	e0c0c0c0 3fc07fc0 01c000c0 3f803fc0     .......?.....?.?
 8004418:	140a0a00 ff00000c 03c0ffc0 0e000780     ................
 8004428:	38001c00 ff007000 06c0ffc0 020c1616     ...8.p..........
 8004438:	381c0cfc 30303030 e0703030 303070e0     ...8000000p..p00
 8004448:	30303030 020c1c38 040c1212 c0c0c0fe     00008...........
 8004458:	c0c0c0c0 c0c0c0c0 c0c0c0c0 06c0c0c0     ................
 8004468:	020c1616 70e0c0fc 30303030 1c383030     .......p0000008.
 8004478:	3030381c 30303030 0ac0e070 000c0804     .8000000p.......
 8004488:	7cc03006 c380cfc0 00000000 0000000c              .0.|...........

08004497 <u8g_font_gdr11r>:
 8004497:	f7191a00 3d020bfa 7f201505 0efc0ffc     .......=.. .....
 80044a7:	000000fc 02000004 01050d0d 40404000     .............@@@
 80044b7:	40404040 00404040 060580c0 07010806     @@@@@@@.........
 80044c7:	4848c8c8 0a084848 0101080a 7f141412     ..HHHH..........
 80044d7:	48fe2824 0e079050 fe01080e 947e1010     $(.HP.........~.
 80044e7:	1c38f090 f8949414 0b0b1010 00010d16     ..8.............
 80044f7:	80a1c060 00920091 c06500a6 2012200a     `.........e.. . 
 8004507:	20222032 0d0bc041 00010c1a 0022001c     2 " A.........".
 8004517:	00220022 00380024 80d8e031 808e809c     ".".$.8.1.......
 8004527:	80870087 0602e07c 07010506 4040c0c0     ....|.........@@
 8004537:	11034040 fd010611 80404020 80808080     @@...... @@.....
 8004547:	80808080 40408080 11110320 80fd0106     ......@@ .......
 8004557:	20204040 20202020 20202020 80404020     @@           @@.
 8004567:	08080806 10300601 a47878a4 06073010     ......0..xx..0..
 8004577:	02000706 fe101010 05021010 fd010405     ................
 8004587:	4040c040 01010580 f8040106 04020202     @.@@............
 8004597:	80c00001 08111108 0201fd00 04040602     ................
 80045a7:	1008080c 20203010 06c04060 01080b0b     .....0  `@......
 80045b7:	84483000 84848484 30488484 080b0b06     .0H.......H0....
 80045c7:	f0100001 10101010 10101010 0b0b067c     ............|...
 80045d7:	1c000108 08044464 44201008 0b06fc44     ....dD.... DD...
 80045e7:	0000070b 04444438 04040c18 07788c04     ....8DD.......x.
 80045f7:	00080b0b 0c0c0400 44242414 1e0404fe     .........$$D....
 8004607:	080b0b06 407c0001 84784040 84040404     ......|@@@x.....
 8004617:	0b0b0678 0c000108 b8c04030 848484c4     x.......0@......
 8004627:	0b073848 0001080b 080484fe 10100808     H8..............
 8004637:	07602020 01090b0b c4c47800 c23c78c4       `......x...x<.
 8004647:	7c828282 080b0b06 c8380001 84848484     ...|......8.....
 8004657:	1008047c 080802e0 c0000104 00000080     |...............
 8004667:	0280c000 01040b0b 0080c0fd 40000000     ...............@
 8004677:	804040c0 08060606 38040201 0c38c0e0     .@@........8..8.
 8004687:	08040406 00fc0301 0606fc00 02010806     ................
 8004697:	1c0c70c0 0d068070 0001080d 84844438     .p..p.......8D..
 80046a7:	20100804 30002020 1e0f0d20 07fd010f     ...   .0 .......
 80046b7:	206018c0 87104010 90888888 90889088     ..` .@..........
 80046c7:	89909088 60e04e90 0f203010 160b0bc0     .....N.`.0 .....
 80046d7:	0400000b 0e000c00 12001200 1f001300     ................
 80046e7:	21002100 f1802080 0b0b08e0 fc00010a     .!.!. ..........
 80046f7:	7e444242 41414143 0b08fe43 00010a0b     BBD~CAAAC.......
 8004707:	8080423e 80808080 093c4380 010b160b     >B.......C<.....
 8004717:	4300fc00 40004100 40804080 40804080     ...C.A.@.@.@.@.@
 8004727:	43004180 0700fc00 01090b0b 4042fe00     .A.C..........B@
 8004737:	40407c40 fe424240 090b0b07 42fe0001     @|@@@BB........B
 8004747:	407c4040 40404040 160b0af0 0f00010b     @@|@@@@@........
 8004757:	40803100 80008000 83008000 408080c0     .1.@...........@
 8004767:	1f806080 160b0a00 e100010c 408040c0     .`...........@.@
 8004777:	40804080 40807f80 40804080 e1804080     .@.@...@.@.@.@..
 8004787:	0b0b03c0 e0000105 40404040 40404040     ........@@@@@@@@
 8004797:	0e06e040 fdfe060e 0808083c 08080808     @.......<.......
 80047a7:	08080808 0b09e090 00010a16 004680e7     ..............F.
 80047b7:	0048004c 00700050 00480058 00460044     L.H.P.p.X.H.D.F.
 80047c7:	0b0780e3 0001090b 404040e0 40404040     .........@@@@@@@
 80047d7:	0dfe4242 010f160b 6038e000 50606060     BB........8````P
 80047e7:	58a050a0 4d2049a0 46304630 0a78e430     .P.X.I M0F0F0.x.
 80047f7:	010c160b 60c0c100 50807080 4c804880     .......`.p.P.H.L
 8004807:	42804680 41804180 0980e080 010b160b     .F.B.A.A........
 8004817:	63001e00 80008100 80808080 80808080     ...c............
 8004827:	62004180 07003c00 01090b0b 4242fc00     .A.b.<........BB
 8004837:	605c4242 f0404040 0b1c0e0a 001efd01     BB\`@@@.........
 8004847:	00810063 80808080 80808080 00418080     c.............A.
 8004857:	003c0062 40030006 0b09c001 00010a16     b.<....@........
 8004867:	004600fc 00420042 00480044 004c0078     ..F.B.B.D.H.x.L.
 8004877:	00420046 0b0780e3 0001090b 8080c63c     F.B.........<...
 8004887:	02061c70 09f8c482 000a160b 8880ff00     p...............
 8004897:	08008880 08000800 08000800 08000800     ................
 80048a7:	0a001c00 010c160b 40c0e100 40804080     ...........@.@.@
 80048b7:	40804080 40804080 21804080 0b001e00     .@.@.@.@.@.!....
 80048c7:	000c160b 20e0f000 30802040 19801080     ....... @ .0....
 80048d7:	09000900 06000e00 0f000400 000f160b     ................
 80048e7:	211ef100 22882108 32883288 145014c8     ...!.!.".2.2..P.
 80048f7:	18301470 0b200830 000b160b 20c0f300     p.0.0. ........ 
 8004907:	1a003180 04000e00 13000e00 20803100     .1...........1. 
 8004917:	0ae0f1c0 000b160b 30c0e100 19001180     ...........0....
 8004927:	0e000a00 04000400 04000400 08000e00     ................
 8004937:	01090b0b 8486ff00 3010180c ffc14120     ...........0 A..
 8004947:	06111104 80f0fd01 80808080 80808080     ................
 8004957:	80808080 08f08080 00081111 6040c0fd     ..............@`
 8004967:	10302020 0c080810 02060404 11040102       0.............
 8004977:	fd000511 101010f0 10101010 10101010     ................
 8004987:	10101010 090907f0 10050109 4c283830     ............08(L
 8004997:	8286444c 08010107 04fefe01 00060404     LD..............
 80049a7:	2060c009 08080710 3c000108 641c8444     ..` .......<D..d
 80049b7:	08768c84 00090e0e 40c04000 4e404040     ..v......@.@@@@N
 80049c7:	41414173 063c4241 01080808 80443c00     sAAAAB<......<D.
 80049d7:	c4808080 0e0e0778 0c000109 04040404     ....x...........
 80049e7:	84c43c04 4c848484 08080676 38000108     .<.....Lv......8
 80049f7:	80fc8444 06784480 01060e0e 40281c00     D....Dx.......(@
 8004a07:	f8404040 40404040 09f04040 0008180c     @@@.@@@@@@......
 8004a17:	c2803dfc c2008200 20007c00 3f007000     .=.......|. .p.?
 8004a27:	8100c100 7c008200 0e0e0800 4000010a     .......|.......@
 8004a37:	404040c0 62724e40 42424242 0c0c03e7     .@@@@NrbBBBB....
 8004a47:	c0000105 400000c0 404040c0 05e04040     .......@.@@@@@..
 8004a57:	fe051010 001818fc 08180800 08080808     ................
 8004a67:	10080808 0e0e08e0 40000109 404040c0     ...........@.@@@
 8004a77:	50484f40 44485070 0e0e03e7 40000105     @OHPpPHD.......@
 8004a87:	404040c0 40404040 40404040 10080de0     .@@@@@@@@@@@....
 8004a97:	ce00010f 62907370 42104210 42104210     ....ps.b.B.B.B.B
 8004aa7:	0838e710 010a0808 62d24e00 42424242     ..8......N.bBBBB
 8004ab7:	080807e7 38000109 828282c4 08384482     .......8.....D8.
 8004ac7:	010a0c0c 4173cefc 62414141 4040405c     ......sAAAAb\@@@
 8004ad7:	0c0c08e0 3efc0109 82828242 023a4682     .......>B....F:.
 8004ae7:	060f0202 01070808 4064dc00 40404040     ..........d@@@@@
 8004af7:	080805e0 70000107 18608088 05f08888     .......p..`.....
 8004b07:	01060b0b 40404000 404040f8 78404040     .....@@@.@@@@@@x
 8004b17:	0a080808 42c60001 42424242 08093b46     .......BBBBBF;..
 8004b27:	00000910 006280f3 00320022 00140014     ......b.".2.....
 8004b37:	0008001c 0d10080d 38f20000 20272062     ...........8b ' 
 8004b47:	a0352025 c018c018 0809c010 00000910     % 5.............
 8004b57:	002280f7 00180014 0026001c 80f70023     ..".......&.#...
 8004b67:	09180c09 80f3fc00 00220061 00140032     ........a.".2...
 8004b77:	001c0014 00080008 00b00010 080600e0     ................
 8004b87:	00010808 101888fc fcc44020 06111105     ........ @......
 8004b97:	2018fd01 20202020 20c02020 20202020     ...       .     
 8004ba7:	01182020 02041313 808080fc 80808080       ..............
 8004bb7:	80808080 80808080 80808080 06111105     ................
 8004bc7:	a040fd00 20202020 20182020 20202020     ..@.      .     
 8004bd7:	08c04020 00090202 ffce3904               @.......9..

08004be3 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
 8004be3:	e0ffd0ff d1ffc1ff a880d5ae 4000d33f     ............?..@
 8004bf3:	0020148d 12dac8a1 f1d9cf81 a42e40db     .. ..........@..
 8004c03:	d0ffafa6 e0fffeff                                ......

08004c09 <u8g_dev_ssd1306_128x64_data_start>:
 8004c09:	d1ffe0ff feff0010                       ........

08004c11 <u8g_dev_ssd13xx_sleep_on>:
 8004c11:	d1ffe0ff ffd0ffae ffe0fffe                       .........

08004c1a <u8g_dev_ssd13xx_sleep_off>:
 8004c1a:	d1ffe0ff ff32ffaf fffeffd0                       ......2....

08004c25 <u8g_dev_ssd1306_128x64_adafruit3_init_seq>:
 8004c25:	e0ffd0ff d1ffc1ff a880d5ae 4000d33f     ............?..@
 8004c35:	0220148d 12dac8a1 f1d9cf81 a42e40db     .. ..........@..
 8004c45:	d0ffafa6 e0fffeff                                ......

08004c4b <u8g_dev_sh1106_128x64_data_start>:
 8004c4b:	d1ffe0ff feff0210 c0b5f800                       .........

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
