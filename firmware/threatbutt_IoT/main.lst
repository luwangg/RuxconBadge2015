
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000388 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccQgoBwb.o
f108f85f l       *ABS*	00000000 BootRAM
08003920 l       .text	00000000 LoopCopyDataInit
08003918 l       .text	00000000 CopyDataInit
08003934 l       .text	00000000 LoopFillZerobss
0800392e l       .text	00000000 FillZerobss
08003946 l       .text	00000000 LoopForever
08003960 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_i2c.c
00000000 l    df *ABS*	00000000 stm32f0xx_misc.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_usart.c
00000000 l    df *ABS*	00000000 u8g_bitmap.c
00000000 l    df *ABS*	00000000 u8g_clip.c
00000000 l    df *ABS*	00000000 u8g_font.c
08001550 l     F .text	0000000e u8g_font_get_word
08001594 l     F .text	00000002 u8g_font_GetFormat.isra.0
08001596 l     F .text	00000016 u8g_font_GetFontGlyphStructureSize.isra.1
08001746 l     F .text	00000084 u8g_font_calc_str_min_box
00000000 l    df *ABS*	00000000 u8g_dev_ssd1306_128x64.c
08004f1b l     O .text	00000026 u8g_dev_ssd1306_128x64_adafruit2_init_seq
08004f41 l     O .text	00000008 u8g_dev_ssd1306_128x64_data_start
08004f49 l     O .text	00000009 u8g_dev_ssd13xx_sleep_on
08004f52 l     O .text	0000000b u8g_dev_ssd13xx_sleep_off
08004f5d l     O .text	00000026 u8g_dev_ssd1306_128x64_adafruit3_init_seq
08004f83 l     O .text	00000008 u8g_dev_sh1106_128x64_data_start
00000000 l    df *ABS*	00000000 u8g_ll_api.c
08002494 l     F .text	00000058 u8g_init_data
00000000 l    df *ABS*	00000000 u8g_state.c
00000000 l    df *ABS*	00000000 u8g_pb16v1.c
00000000 l    df *ABS*	00000000 u8g_pb8v1.c
00000000 l    df *ABS*	00000000 u8g_com_api.c
00000000 l    df *ABS*	00000000 u8g_pb.c
00000000 l    df *ABS*	00000000 u8g_com_null.c
00000000 l    df *ABS*	00000000 u8g_page.c
00000000 l    df *ABS*	00000000 _thumb1_case_uqi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
08002fe8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 main.c
20000a0c l     O .bss	00000004 attacker_index.6924
20000a10 l     O .bss	00000040 vec_buf.6929
20000a54 l     O .bss	00000004 vector_index.6925
20000a5c l     O .bss	00000100 rx_buffer.6927
20000b5c l     O .bss	00000004 ip_index.6926
20000b6c l     O .bss	00000040 at_buf.6928
2000015c l     O .data	00000200 threatbutt_bits
20000bac l     O .bss	00000040 ip_buf.6930
20000bec l     O .bss	00000004 rx_index.6923
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 u8g_arm.c
08003650 l     F .text	00000044 _delay_system_ticks_sub
00000000 l    df *ABS*	00000000 i2c_func.c
00000000 l    df *ABS*	00000000 u8g_font_data.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.2/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.2/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000d20 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000d20 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
0800109c g     F .text	00000012 USART_SetGuardTime
08001180 g     F .text	00000018 USART_SetDEDeassertionTime
08000878 g     F .text	00000020 RCC_HSICmd
08001f1a g     F .text	00000002 u8g_font_box_all_gA
08002f30 g     F .text	00000014 u8g_pb_GetPageBox
0800090c g     F .text	00000018 RCC_LSEDriveConfig
08000ed8 g     F .text	00000020 USART_MSBFirstCmd
08000964 g     F .text	00000024 RCC_PLLCmd
20000bf4 g     O .bss	00000040 attacker
0800299a g     F .text	00000020 u8g_Draw4TPixel
08000c40 g     F .text	00000018 RCC_AHBPeriphResetCmd
20000010 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_i2c
080002ac g     F .text	00000024 GPIO_PinAFConfig
08002de8 g     F .text	0000000c u8g_SetAddress
20000608 g     O .bss	00000100 u8g_dev_ssd1306_128x64_2x_buf
080036dc g     F .text	0000000e u8g_Delay
08000d38 g     F .text	0000000c RCC_ClearITPendingBit
08002a8e g     F .text	00000010 u8g_SetDefaultMidColor
08000280 g     F .text	0000000c GPIO_ReadOutputDataBit
080010e0 g     F .text	00000018 USART_SetAutoRetryCount
08001caa g     F .text	00000038 u8g_DrawStr180P
08002e14 g     F .text	0000009c u8g_WriteEscSeqP
20000d1c g     O .bss	00000004 control
08003960  w    F .text	00000002 TIM1_CC_IRQHandler
080006f8 g     F .text	00000006 I2C_ReceiveData
08001dd8 g     F .text	00000010 u8g_SetFontRefHeightExtendedText
08003960  w    F .text	00000002 HardFault_Handler
08001b00 g     F .text	0000001e u8g_DrawGlyph270
200000f4 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_sw_spi_pb
200000c4 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_i2c_pb
0800259c g     F .text	00000014 u8g_DrawPixelLL
08003960  w    F .text	00000002 ADC1_COMP_IRQHandler
0800339c g     F .text	00000010 SysTick_Handler
080009c0 g     F .text	0000000c RCC_MCOConfig
0800075c g     F .text	00000060 NVIC_Init
08000430 g     F .text	00000024 I2C_OwnAddress2Config
08003960  w    F .text	00000002 PVD_IRQHandler
080017ca g     F .text	0000000e u8g_IsGlyph
08001f18 g     F .text	00000002 u8g_font_box_left_gA
08002e00 g     F .text	0000000a u8g_WriteSequence
08000a50 g     F .text	00000018 RCC_CECCLKConfig
08004fa4 g       .text	00000000 _sidata
08003960  w    F .text	00000002 PendSV_Handler
08003960  w    F .text	00000002 NMI_Handler
080037f8 g     F .text	00000002 I2C1_IRQHandler
080036ea g     F .text	0000000a u8g_MicroDelay
08000c88 g     F .text	00000018 RCC_ITConfig
20000588 g     O .bss	00000080 u8g_dev_sh1106_128x64_sw_spi_buf
08000e84 g     F .text	00000012 USART_DirectionModeCmd
080033ac g     F .text	00000068 initUSART1
080017ea g     F .text	00000096 u8g_draw_glyph
08002922 g     F .text	0000000a u8g_FirstPage
080010b0 g     F .text	00000018 USART_SmartCardCmd
0800121c g     F .text	0000000c USART_GetFlagStatus
08000f6c g     F .text	00000010 USART_SetReceiverTimeOut
08004fa4 g       .text	00000000 _etext
20000388 g       .bss	00000000 _sbss
08001ecc g     F .text	00000022 u8g_GetStrWidth
08002bba g     F .text	0000007e u8g_dev_pb16v1_base_fn
080009cc g     F .text	00000014 RCC_SYSCLKConfig
080025b0 g     F .text	00000020 u8g_Draw8PixelLL
08000678 g     F .text	0000001c I2C_TimeoutBConfig
20000c34 g     O .bss	0000004c u8g
08001030 g     F .text	00000014 USART_MuteModeWakeUpConfig
08000cdc g     F .text	00000034 RCC_WaitForHSEStartUp
08002184 g     F .text	000000a0 u8g_dev_ssd1306_adafruit_128x64_fn
08000ffc g     F .text	00000012 USART_SetAddress
08000474 g     F .text	00000020 I2C_SlaveByteControlCmd
0800133a g     F .text	00000052 u8g_DrawBitmapP
08000fd8 g     F .text	00000014 USART_AutoBaudRateConfig
08000f7c g     F .text	00000010 USART_SetPrescaler
08002aa2 g     F .text	0000000a u8g_SetHardwareBackup
0800297a g     F .text	00000020 u8g_Draw8Pixel
08000bd4 g     F .text	00000024 RCC_BackupResetCmd
08003694 g     F .text	00000028 delay_system_ticks
08000eb8 g     F .text	00000020 USART_OneBitMethodCmd
08001304 g     F .text	00000036 u8g_DrawHBitmapP
080003bc g     F .text	00000012 I2C_ITConfig
080030cc g     F .text	00000080 memcpy
080036bc g     F .text	00000020 delay_micro_seconds
08002668 g     F .text	00000014 u8g_Init
0800099c g     F .text	00000024 RCC_ClockSecuritySystemCmd
080029d6 g     F .text	00000006 u8g_SetColorIndex
08001e06 g     F .text	0000000a u8g_SetFontPosBaseline
08000d10 g     F .text	00000014 RCC_ClearFlag
08000578 g     F .text	00000020 I2C_10BitAddressHeaderCmd
08001bfe g     F .text	0000003c u8g_DrawStrDir
08002f6a g     F .text	00000012 u8g_pb_WriteBuffer
20000384 g     O .data	00000004 SystemCoreClock
20000a58 g     O .bss	00000004 ip_valid
08002aae g     F .text	00000014 u8g_pb16v1_Clear
08000ff4 g     F .text	00000008 USART_ReceiveData
20000908 g     O .bss	00000080 u8g_dev_ssd1306_128x64_hw_spi_buf
08000854 g     F .text	00000010 RCC_HSEConfig
08001de8 g     F .text	00000010 u8g_SetFontRefHeightAll
08002fe4 g     F .text	00000088 .hidden __udivsi3
200000d0 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_hw_spi
080005f0 g     F .text	00000020 I2C_SMBusAlertCmd
0800164e g     F .text	00000008 u8g_GetFontBBXOffY
08001ebc g     F .text	00000010 u8g_GetStrXP
08000c10 g     F .text	00000018 RCC_APB2PeriphClockCmd
08000700 g     F .text	00000012 I2C_DMACmd
08002b1e g     F .text	00000048 u8g_pb16v1_Set8PixelStd
200000e8 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_sw_spi
08000168 g     F .text	000000c6 GPIO_Init
08000944 g     F .text	00000020 RCC_PLLConfig
08000a1c g     F .text	00000034 RCC_ADCCLKConfig
08002da6 g     F .text	0000000c u8g_InitCom
08001e1c g     F .text	0000000c u8g_SetFontPosTop
080015c8 g     F .text	00000004 u8g_font_GetFontEndEncoding
08001962 g     F .text	000000c4 u8g_draw_glyph180
20000000 g       .data	00000000 _sdata
08003960  w    F .text	00000002 SPI1_IRQHandler
08002a7a g     F .text	00000008 u8g_SetDefaultBackgroundColor
08000e6c g     F .text	00000018 USART_Cmd
20000124 g     O .data	0000000c u8g_dev_ssd1306_128x64_hw_spi_pb
08002dda g     F .text	0000000e u8g_SetResetHigh
0800111c g     F .text	00000018 USART_IrDACmd
080007d4 g     F .text	00000020 SysTick_CLKSourceConfig
080002a8 g     F .text	00000004 GPIO_Write
08003960  w    F .text	00000002 TIM6_DAC_IRQHandler
08002ac2 g     F .text	0000000c u8g_pb16v1_Init
0800028c g     F .text	00000006 GPIO_ReadOutputData
20000508 g     O .bss	00000080 u8g_dev_sh1106_128x64_hw_spi_buf
08001ce2 g     F .text	00000038 u8g_DrawStr270P
080008ec g     F .text	00000020 RCC_LSEConfig
08002fd0 g     F .text	00000012 .hidden __gnu_thumb1_case_uqi
08000694 g     F .text	00000020 I2C_CalculatePEC
08001270 g     F .text	0000000a USART_ClearITPendingBit
0800295c g     F .text	0000000e u8g_SleepOff
08000bb0 g     F .text	00000024 RCC_RTCCLKCmd
08001572 g     F .text	0000001a u8g_font_calc_vref_center
08001e34 g     F .text	0000005a u8g_font_calc_str_pixel_width
08002942 g     F .text	0000000c u8g_SetContrast
080026a6 g     F .text	0000004e u8g_InitSPI
08002224 g     F .text	000000a0 u8g_dev_sh1106_128x64_fn
08000c28 g     F .text	00000018 RCC_APB1PeriphClockCmd
08000d24 g     F .text	00000014 RCC_GetITStatus
08001562 g     F .text	00000006 u8g_font_calc_vref_bottom
20000bf0 g     O .bss	00000004 attacker_valid
0800258c g     F .text	00000010 u8g_SetContrastLL
080004a4 g     F .text	00000020 I2C_10BitAddressingModeCmd
20000154 g     O .data	00000008 GPIOA_InitStruct
08001e8e g     F .text	0000000e u8g_GetStrPixelWidth
08002a76 g     F .text	00000004 u8g_GetDefaultBackgroundColor
08003084 g     F .text	00000048 __libc_init_array
08001b1e g     F .text	00000038 u8g_DrawStr
08000bf8 g     F .text	00000018 RCC_AHBPeriphClockCmd
080006f4 g     F .text	00000004 I2C_SendData
08002b66 g     F .text	00000054 u8g_pb16v1_Set8PixelOpt2
08003960  w    F .text	00000002 EXTI2_3_IRQHandler
080015ea g     F .text	00000050 u8g_font_GetSize
08001010 g     F .text	00000020 USART_MuteModeCmd
08001d72 g     F .text	00000056 u8g_UpdateRefHeight
2000004c g     O .data	0000000c u8g_dev_sh1106_128x64_i2c_pb
0800292c g     F .text	00000016 u8g_NextPage
08002552 g     F .text	0000003a u8g_NextPageLL
20000888 g     O .bss	00000080 u8g_dev_ssd1306_128x64_i2c_buf
08000e98 g     F .text	00000020 USART_OverSampling8Cmd
08001b56 g     F .text	00000038 u8g_DrawStr90
08004f8c g     F .text	00000000 _init
08003960  w    F .text	00000002 I2C2_IRQHandler
20000b64 g     O .bss	00000004 vector_valid
08002c8c g     F .text	00000048 u8g_pb8v1_Set8PixelStd
08001944 g     F .text	0000001e u8g_DrawGlyph90
08000308 g     F .text	00000064 I2C_Init
08003960  w    F .text	00000002 TIM17_IRQHandler
08000648 g     F .text	00000020 I2C_IdleClockTimeoutCmd
08003960  w    F .text	00000002 RTC_IRQHandler
08001c3a g     F .text	00000038 u8g_DrawStrP
08002650 g     F .text	00000018 u8g_Begin
2000035c g     O .data	00000018 USART1_InitStruct
20000d20 g       .bss	00000000 _ebss
0800267c g     F .text	0000002a u8g_InitComFn
0800122c g     F .text	00000042 USART_GetITStatus
08002ace g     F .text	0000002e u8g_pb16v1_set_pixel
080022c4 g     F .text	000000e8 u8g_dev_ssd1306_128x64_2x_fn
08003910  w    F .text	00000038 Reset_Handler
08002f8e g     F .text	00000010 u8g_page_Init
08000278 g     F .text	00000006 GPIO_ReadInputData
08001054 g     F .text	00000010 USART_LINBreakDetectLengthConfig
08002aa0 g     F .text	00000002 u8g_state_dummy_cb
08002d28 g     F .text	0000007e u8g_dev_pb8v1_base_fn
08001dc8 g     F .text	00000010 u8g_SetFontRefHeightText
20000c80 g     O .bss	00000040 ip_addr
08002f7c g     F .text	00000004 u8g_com_null_fn
08000ca0 g     F .text	0000003c RCC_GetFlagStatus
08001044 g     F .text	00000010 USART_AddressDetectionConfig
20000118 g     O .data	0000000c u8g_dev_ssd1306_128x64_hw_spi
08001e28 g     F .text	0000000c u8g_SetFontPosCenter
08000610 g     F .text	00000020 I2C_ClockTimeoutCmd
20000cc0 g     O .bss	0000001c I2C1_InitStruct
08002eea g     F .text	00000012 u8g_pb_IsXIntersection
08000294 g     F .text	00000004 GPIO_SetBits
08001eac g     F .text	00000010 u8g_GetStrX
080009e0 g     F .text	00000010 RCC_GetSYSCLKSource
0800029c g     F .text	0000000c GPIO_WriteBit
08000538 g     F .text	00000020 I2C_GenerateSTART
0800036c g     F .text	00000016 I2C_StructInit
0800296a g     F .text	00000010 u8g_DrawPixel
080026f4 g     F .text	00000030 u8g_InitHWSPI
20000708 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_i2c_buf
20000a08 g     O .bss	00000004 i
080017d8 g     F .text	00000012 u8g_GetGlyphDeltaX
08000a98 g     F .text	00000108 RCC_GetClocksFreq
08003960  w    F .text	00000002 TIM16_IRQHandler
08000d88 g     F .text	000000a0 USART_Init
08003960  w    F .text	00000002 TIM3_IRQHandler
08003960  w    F .text	00000002 EXTI4_15_IRQHandler
08003960  w    F .text	00000002 RCC_IRQHandler
08002dcc g     F .text	0000000e u8g_SetResetLow
080015ba g     F .text	0000000a u8g_font_GetEncoding97Pos
080015c4 g     F .text	00000004 u8g_font_GetFontStartEncoding
08002df4 g     F .text	0000000c u8g_WriteByte
20000388 g       .bss	00000000 _bss
08003960  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001134 g     F .text	00000020 USART_DECmd
08003960 g       .text	00000002 Default_Handler
20000058 g     O .data	0000000c u8g_dev_sh1106_128x64_hw_spi
080005d0 g     F .text	00000020 I2C_TransferHandling
20000088 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_i2c
20000374 g     O .data	00000010 AHBPrescTable
08000630 g     F .text	00000018 I2C_ExtendedClockTimeoutCmd
08001084 g     F .text	00000018 USART_HalfDuplexCmd
08000714 g     F .text	0000000c I2C_GetFlagStatus
0800165c g     F .text	000000ea u8g_GetGlyph
080029ea g     F .text	0000001e u8g_SetHiColorByRGB
08002efc g     F .text	00000034 u8g_pb_IsIntersection
08001e10 g     F .text	0000000c u8g_SetFontPosBottom
08001b8e g     F .text	00000038 u8g_DrawStr180
08002c44 g     F .text	00000026 u8g_pb8v1_set_pixel
08000ba0 g     F .text	00000010 RCC_RTCCLKConfig
08001eee g     F .text	00000022 u8g_GetStrWidthP
08002e0a g     F .text	0000000a u8g_WriteSequenceP
08003960  w    F .text	00000002 CEC_IRQHandler
08001fec g     F .text	00000096 u8g_draw_aa_glyph
080008ac g     F .text	00000020 RCC_HSI14Cmd
20000028 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_sw_spi
08003960  w    F .text	00000002 TIM14_IRQHandler
200000ac g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_pb
20000b60 g     O .bss	00000004 timercounter
080011c0 g     F .text	00000032 USART_ITConfig
08003960  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
080015ac g     F .text	00000004 u8g_font_GetCapitalAHeight
08001d1a g     F .text	0000002c u8g_DrawStrFontBBX
20000788 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_hw_spi_buf
0800138c g     F .text	000000b4 u8g_DrawXBM
08000ef8 g     F .text	00000020 USART_DataInvCmd
08002db2 g     F .text	0000000e u8g_StopCom
0800158c g     F .text	00000004 u8g_font_get_char
080002d0 g     F .text	00000038 I2C_DeInit
08001646 g     F .text	00000008 u8g_GetFontBBXOffX
08000384 g     F .text	00000018 I2C_Cmd
08000f2c g     F .text	00000020 USART_SWAPPinCmd
08000298 g     F .text	00000004 GPIO_ResetBits
08000720 g     F .text	00000004 I2C_ClearFlag
08001df8 g     F .text	0000000e u8g_SetFontLineSpacingFactor
0800285e g     F .text	000000c4 u8g_InitRW8Bit
08002afc g     F .text	00000022 u8g_pb16v1_SetPixel
0800110c g     F .text	00000010 USART_IrDAConfig
080003f0 g     F .text	00000020 I2C_StopModeCmd
08001fd0 g     F .text	0000001c u8g_SetFont
08003960  w    F .text	00000002 TIM15_IRQHandler
08000f8c g     F .text	00000018 USART_STOPModeCmd
08003960  w    F .text	00000002 EXTI0_1_IRQHandler
08003888 g     F .text	00000088 I2C_WrReg
08002a82 g     F .text	0000000c u8g_GetDefaultMidColor
08001154 g     F .text	00000014 USART_DEPolarityConfig
08003080  w    F .text	00000002 .hidden __aeabi_ldiv0
080025f0 g     F .text	00000012 u8g_GetWidthLL
080008cc g     F .text	00000020 RCC_HSI14ADCRequestCmd
08001c72 g     F .text	00000038 u8g_DrawStr90P
08001208 g     F .text	00000014 USART_OverrunDetectionConfig
08001590 g     F .text	00000004 u8g_font_get_charP
08000d44 g     F .text	00000044 USART_DeInit
080004e4 g     F .text	00000020 I2C_ReloadCmd
08002cd4 g     F .text	00000054 u8g_pb8v1_Set8PixelOpt2
080012b2 g     F .text	00000052 u8g_DrawBitmap
080020a0 g     F .text	00000048 u8g_DrawAAStr
08003960  w    F .text	00000002 SPI2_IRQHandler
080015de g     F .text	00000006 u8g_font_GetFontXAscent
08001bc6 g     F .text	00000038 u8g_DrawStr270
08002c38 g     F .text	0000000c u8g_pb8v1_Init
0800314c g     F .text	0000008e memset
08000864 g     F .text	00000014 RCC_AdjustHSICalibrationValue
08003484 g     F .text	000000b0 main
08002c6a g     F .text	00000022 u8g_pb8v1_SetPixel
2000007c g     O .data	0000000c u8g_dev_sh1106_128x64_sw_spi_pb
080005c4 g     F .text	0000000a I2C_GetTransferDirection
08000e40 g     F .text	00000020 USART_ClockInit
08002602 g     F .text	00000012 u8g_GetHeightLL
08001d46 g     F .text	0000002c u8g_DrawGlyphFontBBX
080029dc g     F .text	0000000e u8g_SetHiColor
08002fe4 g     F .text	00000000 .hidden __aeabi_uidiv
08003960  w    F .text	00000002 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
20000488 g     O .bss	00000080 u8g_dev_sh1106_128x64_i2c_buf
20000100 g     O .data	0000000c u8g_dev_ssd1306_128x64_i2c
08002740 g     F .text	0000004e u8g_Init8BitFixedPort
20000b68 g     O .bss	00000004 resp_valid
080029ba g     F .text	0000001c u8g_SetColorEntry
080004c4 g     F .text	00000020 I2C_AutoEndCmd
20000070 g     O .data	0000000c u8g_dev_sh1106_128x64_sw_spi
08002724 g     F .text	0000001c u8g_InitI2C
0800189e g     F .text	000000a6 u8g_draw_glyph90
08000454 g     F .text	00000020 I2C_GeneralCallCmd
20000988 g     O .bss	00000080 u8g_dev_ssd1306_128x64_sw_spi_buf
08001228 g     F .text	00000004 USART_ClearFlag
080023ac g     F .text	000000e8 u8g_dev_sh1106_128x64_2x_fn
0800039c g     F .text	00000020 I2C_SoftwareResetCmd
08003534 g     F .text	000000b8 SystemInit
080014f4 g     F .text	0000005c u8g_IsBBXIntersection
20000064 g     O .data	0000000c u8g_dev_sh1106_128x64_hw_spi_pb
08000898 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
08001568 g     F .text	0000000a u8g_font_calc_vref_top
08001a26 g     F .text	0000001e u8g_DrawGlyph180
080000c4 g     F .text	000000a4 GPIO_DeInit
08004f98 g     F .text	00000000 _fini
080015e4 g     F .text	00000006 u8g_font_GetFontXDescent
08001a44 g     F .text	000000bc u8g_draw_glyph270
080006b4 g     F .text	00000020 I2C_PECRequestCmd
08000518 g     F .text	00000020 I2C_MasterRequestConfig
20000808 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_sw_spi_buf
080007f4 g     F .text	00000060 RCC_DeInit
08001656 g     F .text	00000006 u8g_GetFontCapitalAHeight
20000a50 g     O .bss	00000004 line_valid
08001f1c g     F .text	0000004e u8g_GetStrMinBox
0800396c g     O .text	000015af u8g_font_unifont
08000fa4 g     F .text	00000014 USART_StopModeWakeUpSourceConfig
08001f6a g     F .text	00000066 u8g_GetStrAMinBox
080015b0 g     F .text	0000000a u8g_font_GetEncoding65Pos
080007bc g     F .text	00000018 NVIC_SystemLPConfig
08003960  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
080015cc g     F .text	00000006 u8g_font_GetLowerGDescent
2000013c g     O .data	0000000c u8g_dev_ssd1306_128x64_sw_spi_pb
08002620 g     F .text	00000030 u8g_UpdateDimension
08002dc0 g     F .text	0000000c u8g_SetChipSelect
08002f44 g     F .text	00000026 u8g_pb_Is8PixelVisible
08003960  w    F .text	00000002 WWDG_IRQHandler
2000010c g     O .data	0000000c u8g_dev_ssd1306_128x64_i2c_pb
08000c70 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08002eb0 g     F .text	00000012 u8g_pb_Clear
08002a58 g     F .text	0000001e u8g_SetDefaultForegroundColor
08000988 g     F .text	00000014 RCC_PREDIV1Config
080036f4 g     F .text	0000000a u8g_10MicroDelay
08000724 g     F .text	00000032 I2C_GetITStatus
08003960  w    F .text	00000002 TIM2_IRQHandler
2000001c g     O .data	0000000c u8g_dev_sh1106_128x64_2x_hw_spi
080024f4 g     F .text	0000002a u8g_InitLL
080020e8 g     F .text	0000009c u8g_dev_ssd1306_128x64_fn
08002a46 g     F .text	00000012 u8g_GetDefaultForegroundColor
080025d0 g     F .text	00000020 u8g_Draw4TPixelLL
080003d0 g     F .text	00000020 I2C_StretchClockCmd
0800278e g     F .text	000000d0 u8g_Init8Bit
08000230 g     F .text	00000018 GPIO_StructInit
08003960  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
08002f80 g     F .text	0000000e u8g_page_First
08000504 g     F .text	00000014 I2C_NumberOfBytesConfig
080011f4 g     F .text	00000014 USART_RequestCmd
08000fec g     F .text	00000008 USART_SendData
20001000 g       *ABS*	00000000 _estack
08002082 g     F .text	0000001e u8g_DrawAAGlyph
08002a40 g     F .text	00000006 u8g_GetColorIndex
08001880 g     F .text	0000001e u8g_DrawGlyph
0800306c g     F .text	00000012 .hidden __aeabi_uidivmod
08002aac g     F .text	00000002 u8g_backup_spi
08002614 g     F .text	0000000c u8g_GetModeLL
080006dc g     F .text	00000016 I2C_ReadRegister
20000388 g       .data	00000000 _edata
08000e28 g     F .text	00000016 USART_StructInit
08000f4c g     F .text	00000020 USART_ReceiverTimeOutCmd
08002f9e g     F .text	00000030 u8g_page_Next
200000b8 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_i2c
080015d2 g     F .text	00000006 u8g_font_GetFontAscent
20000094 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_hw_spi
08001e9c g     F .text	00000010 u8g_GetStrPixelWidthP
08000668 g     F .text	00000010 I2C_TimeoutAConfig
08003960  w    F .text	00000002 USART2_IRQHandler
080010c8 g     F .text	00000018 USART_SmartCardNACKCmd
080010f8 g     F .text	00000012 USART_SetBlockLength
0800294e g     F .text	0000000e u8g_SleepOn
08000000 g     O .isr_vector	00000000 g_pfnVectors
080006d4 g     F .text	00000006 I2C_GetPEC
080035ec g     F .text	00000064 SystemCoreClockUpdate
08001064 g     F .text	00000020 USART_LINCmd
20000148 g     O .data	00000003 NVIC_InitStructure
20000034 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_pb
08000a80 g     F .text	00000018 RCC_USARTCLKConfig
08000f18 g     F .text	00000012 USART_InvPinCmd
08000410 g     F .text	00000020 I2C_DualAddressCmd
08000494 g     F .text	00000010 I2C_SlaveAddressConfig
00000000  w      *UND*	00000000 __init_array_start
08003080  w    F .text	00000002 .hidden __aeabi_idiv0
08000a68 g     F .text	00000018 RCC_I2CCLKConfig
08003414 g     F .text	00000070 draw
08000a04 g     F .text	00000018 RCC_PCLKConfig
08002ec2 g     F .text	00000028 u8g_pb_IsYIntersection
08003960  w    F .text	00000002 FLASH_IRQHandler
08001640 g     F .text	00000006 u8g_GetFontBBXHeight
0800155e g     F .text	00000004 u8g_font_calc_vref_font
080037fc g     F .text	0000008c init_i2c
08003700 g     F .text	000000f8 u8g_com_hw_i2c_fn
08000248 g     F .text	00000024 GPIO_PinLockConfig
080031dc g     F .text	000001c0 USART1_IRQHandler
08000924 g     F .text	00000020 RCC_LSICmd
08000598 g     F .text	00000020 I2C_AcknowledgeConfig
20000130 g     O .data	0000000c u8g_dev_ssd1306_128x64_sw_spi
080024ec g     F .text	00000008 u8g_call_dev_fn
20000040 g     O .data	0000000c u8g_dev_sh1106_128x64_i2c
08000e60 g     F .text	0000000c USART_ClockStructInit
08000c58 g     F .text	00000018 RCC_APB2PeriphResetCmd
08000558 g     F .text	00000020 I2C_GenerateSTOP
08000fb8 g     F .text	00000020 USART_AutoBaudRateCmd
0800163a g     F .text	00000006 u8g_GetFontBBXWidth
08003960  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
08001f10 g     F .text	00000008 u8g_font_box_min
200000dc g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_hw_spi_pb
20000cdc g     O .bss	00000040 vector
20000388 g     O .bss	00000100 u8g_dev_sh1106_128x64_2x_buf
08000758 g     F .text	00000004 I2C_ClearITPendingBit
00000000  w      *UND*	00000000 __preinit_array_start
0800127c g     F .text	00000036 u8g_DrawHBitmap
08002a08 g     F .text	00000038 u8g_SetRGB
080015d8 g     F .text	00000006 u8g_font_GetFontDescent
08001440 g     F .text	000000b4 u8g_DrawXBMP
0800026c g     F .text	0000000c GPIO_ReadInputDataBit
08001198 g     F .text	00000012 USART_DMACmd
08001168 g     F .text	00000018 USART_SetDEAssertionTime
080005b8 g     F .text	0000000c I2C_GetAddressMatched
080009f0 g     F .text	00000014 RCC_HCLKConfig
200000a0 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_sw_spi
2000014c g     O .data	00000008 USART1_GPIO_InitStruct
080011ac g     F .text	00000014 USART_DMAReceptionErrorConfig
0800251e g     F .text	00000034 u8g_FirstPageLL



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	2101      	movs	r1, #1
 80000ec:	03c0      	lsls	r0, r0, #15
 80000ee:	f000 fda7 	bl	8000c40 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	2100      	movs	r1, #0
 80000f6:	03c0      	lsls	r0, r0, #15
 80000f8:	f000 fda2 	bl	8000c40 <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	2101      	movs	r1, #1
 8000102:	0280      	lsls	r0, r0, #10
 8000104:	f000 fd9c 	bl	8000c40 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	2100      	movs	r1, #0
 800010c:	0280      	lsls	r0, r0, #10
 800010e:	f000 fd97 	bl	8000c40 <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	2101      	movs	r1, #1
 8000118:	02c0      	lsls	r0, r0, #11
 800011a:	f000 fd91 	bl	8000c40 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	2100      	movs	r1, #0
 8000122:	02c0      	lsls	r0, r0, #11
 8000124:	f000 fd8c 	bl	8000c40 <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	2101      	movs	r1, #1
 800012e:	0300      	lsls	r0, r0, #12
 8000130:	f000 fd86 	bl	8000c40 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	2100      	movs	r1, #0
 8000138:	0300      	lsls	r0, r0, #12
 800013a:	f000 fd81 	bl	8000c40 <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	2101      	movs	r1, #1
 8000144:	0340      	lsls	r0, r0, #13
 8000146:	f000 fd7b 	bl	8000c40 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	2100      	movs	r1, #0
 800014e:	0340      	lsls	r0, r0, #13
 8000150:	f000 fd76 	bl	8000c40 <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	4644      	mov	r4, r8
 800016c:	465f      	mov	r7, fp
 800016e:	4656      	mov	r6, sl
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000174:	2403      	movs	r4, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000176:	468c      	mov	ip, r1
 8000178:	b083      	sub	sp, #12
 800017a:	6809      	ldr	r1, [r1, #0]
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	46a0      	mov	r8, r4
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d027      	beq.n	80001de <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c3c      	adds	r4, r7, #0

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000190:	1c0d      	adds	r5, r1, #0

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000192:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	4664      	mov	r4, ip
 800019c:	7924      	ldrb	r4, [r4, #4]
 800019e:	46a3      	mov	fp, r4
 80001a0:	3c01      	subs	r4, #1
 80001a2:	2c01      	cmp	r4, #1
 80001a4:	d922      	bls.n	80001ec <GPIO_Init+0x84>
 80001a6:	4644      	mov	r4, r8
 80001a8:	4094      	lsls	r4, r2
 80001aa:	43e4      	mvns	r4, r4
 80001ac:	9401      	str	r4, [sp, #4]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001ae:	6805      	ldr	r5, [r0, #0]
 80001b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001b2:	3301      	adds	r3, #1
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	402c      	ands	r4, r5
 80001b6:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001b8:	465c      	mov	r4, fp
 80001ba:	4094      	lsls	r4, r2
 80001bc:	6805      	ldr	r5, [r0, #0]
 80001be:	432c      	orrs	r4, r5

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c0:	4645      	mov	r5, r8
 80001c2:	4095      	lsls	r5, r2
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001c4:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c6:	68c4      	ldr	r4, [r0, #12]
 80001c8:	43ac      	bics	r4, r5
 80001ca:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	4664      	mov	r4, ip
 80001ce:	79e4      	ldrb	r4, [r4, #7]
 80001d0:	68c5      	ldr	r5, [r0, #12]
 80001d2:	4094      	lsls	r4, r2
 80001d4:	432c      	orrs	r4, r5
 80001d6:	60c4      	str	r4, [r0, #12]
 80001d8:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d1d7      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001de:	b003      	add	sp, #12
 80001e0:	bc3c      	pop	{r2, r3, r4, r5}
 80001e2:	4690      	mov	r8, r2
 80001e4:	4699      	mov	r9, r3
 80001e6:	46a2      	mov	sl, r4
 80001e8:	46ab      	mov	fp, r5
 80001ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001ec:	6884      	ldr	r4, [r0, #8]
 80001ee:	46a1      	mov	r9, r4
 80001f0:	4644      	mov	r4, r8
 80001f2:	4094      	lsls	r4, r2
 80001f4:	464e      	mov	r6, r9
 80001f6:	43e4      	mvns	r4, r4
 80001f8:	4026      	ands	r6, r4
 80001fa:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	6886      	ldr	r6, [r0, #8]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	9401      	str	r4, [sp, #4]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	46b2      	mov	sl, r6
 8000202:	4666      	mov	r6, ip
 8000204:	7976      	ldrb	r6, [r6, #5]
 8000206:	4096      	lsls	r6, r2
 8000208:	46b1      	mov	r9, r6
 800020a:	4656      	mov	r6, sl
 800020c:	464c      	mov	r4, r9
 800020e:	4326      	orrs	r6, r4
 8000210:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	1c26      	adds	r6, r4, #0
 8000216:	43ae      	bics	r6, r5
 8000218:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800021a:	8884      	ldrh	r4, [r0, #4]
 800021c:	46a1      	mov	r9, r4
 800021e:	4664      	mov	r4, ip
 8000220:	79a5      	ldrb	r5, [r4, #6]
 8000222:	464c      	mov	r4, r9
 8000224:	409d      	lsls	r5, r3
 8000226:	4325      	orrs	r5, r4
 8000228:	b2ad      	uxth	r5, r5
 800022a:	8085      	strh	r5, [r0, #4]
 800022c:	e7bf      	b.n	80001ae <GPIO_Init+0x46>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000232:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000234:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000236:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000238:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800023a:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800023c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800023e:	71c3      	strb	r3, [r0, #7]
}
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	0000ffff 	.word	0x0000ffff

08000248 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000248:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800024a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800024c:	025b      	lsls	r3, r3, #9
 800024e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	430b      	orrs	r3, r1
 8000254:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800025a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000260:	69c3      	ldr	r3, [r0, #28]
 8000262:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000264:	69c3      	ldr	r3, [r0, #28]
 8000266:	9301      	str	r3, [sp, #4]
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a00      	ldrh	r0, [r0, #16]
 800026e:	4008      	ands	r0, r1
 8000270:	1e41      	subs	r1, r0, #1
 8000272:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000274:	b2c0      	uxtb	r0, r0
}
 8000276:	4770      	bx	lr

08000278 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000278:	8a00      	ldrh	r0, [r0, #16]
 800027a:	b280      	uxth	r0, r0
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000280:	8a80      	ldrh	r0, [r0, #20]
 8000282:	4008      	ands	r0, r1
 8000284:	1e41      	subs	r1, r0, #1
 8000286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000288:	b2c0      	uxtb	r0, r0
}
 800028a:	4770      	bx	lr

0800028c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800028c:	8a80      	ldrh	r0, [r0, #20]
 800028e:	b280      	uxth	r0, r0
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000294:	6181      	str	r1, [r0, #24]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000298:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800029a:	4770      	bx	lr

0800029c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800029c:	2a00      	cmp	r2, #0
 800029e:	d101      	bne.n	80002a4 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80002a0:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 80002a2:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	6181      	str	r1, [r0, #24]
 80002a6:	e7fc      	b.n	80002a2 <GPIO_WriteBit+0x6>

080002a8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80002a8:	8281      	strh	r1, [r0, #20]
}
 80002aa:	4770      	bx	lr

080002ac <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ac:	2307      	movs	r3, #7
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002ae:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b0:	240f      	movs	r4, #15
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	400b      	ands	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b8:	409c      	lsls	r4, r3
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ba:	1c13      	adds	r3, r2, #0
 80002bc:	08c9      	lsrs	r1, r1, #3
 80002be:	0089      	lsls	r1, r1, #2
 80002c0:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002c2:	6a01      	ldr	r1, [r0, #32]
 80002c4:	43a1      	bics	r1, r4
 80002c6:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002c8:	6a01      	ldr	r1, [r0, #32]
 80002ca:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002cc:	6203      	str	r3, [r0, #32]
}
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80002d0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <I2C_DeInit+0x34>)
 80002d4:	4298      	cmp	r0, r3
 80002d6:	d00a      	beq.n	80002ee <I2C_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80002d8:	2080      	movs	r0, #128	; 0x80
 80002da:	2101      	movs	r1, #1
 80002dc:	03c0      	lsls	r0, r0, #15
 80002de:	f000 fcc7 	bl	8000c70 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80002e2:	2080      	movs	r0, #128	; 0x80
 80002e4:	2100      	movs	r1, #0
 80002e6:	03c0      	lsls	r0, r0, #15
 80002e8:	f000 fcc2 	bl	8000c70 <RCC_APB1PeriphResetCmd>
  }
}
 80002ec:	bd08      	pop	{r3, pc}
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	2101      	movs	r1, #1
 80002f2:	0380      	lsls	r0, r0, #14
 80002f4:	f000 fcbc 	bl	8000c70 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80002f8:	2080      	movs	r0, #128	; 0x80
 80002fa:	2100      	movs	r1, #0
 80002fc:	0380      	lsls	r0, r0, #14
 80002fe:	f000 fcb7 	bl	8000c70 <RCC_APB1PeriphResetCmd>
 8000302:	e7f3      	b.n	80002ec <I2C_DeInit+0x1c>
 8000304:	40005400 	.word	0x40005400

08000308 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000308:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800030a:	2401      	movs	r4, #1
 800030c:	6803      	ldr	r3, [r0, #0]
 800030e:	43a3      	bics	r3, r4
 8000310:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000312:	6802      	ldr	r2, [r0, #0]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <I2C_Init+0x58>)
 8000316:	4013      	ands	r3, r2
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8000318:	688a      	ldr	r2, [r1, #8]
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	4313      	orrs	r3, r2
 800031e:	684a      	ldr	r2, [r1, #4]
 8000320:	4313      	orrs	r3, r2

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000322:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8000324:	680a      	ldr	r2, [r1, #0]
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <I2C_Init+0x5c>)
 8000328:	4013      	ands	r3, r2
 800032a:	6103      	str	r3, [r0, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800032c:	6803      	ldr	r3, [r0, #0]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800032e:	698a      	ldr	r2, [r1, #24]
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000330:	431c      	orrs	r4, r3

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8000332:	2300      	movs	r3, #0
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000334:	6004      	str	r4, [r0, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8000336:	6083      	str	r3, [r0, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8000338:	60c3      	str	r3, [r0, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800033a:	690b      	ldr	r3, [r1, #16]
 800033c:	4313      	orrs	r3, r2
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 800033e:	2280      	movs	r2, #128	; 0x80
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8000340:	6083      	str	r3, [r0, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8000342:	6883      	ldr	r3, [r0, #8]
 8000344:	0212      	lsls	r2, r2, #8
 8000346:	4313      	orrs	r3, r2
 8000348:	6083      	str	r3, [r0, #8]
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 800034a:	6803      	ldr	r3, [r0, #0]
 800034c:	68ca      	ldr	r2, [r1, #12]
 800034e:	4313      	orrs	r3, r2
 8000350:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000352:	6842      	ldr	r2, [r0, #4]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <I2C_Init+0x60>)
 8000356:	4013      	ands	r3, r2
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8000358:	694a      	ldr	r2, [r1, #20]
 800035a:	4313      	orrs	r3, r2
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800035c:	6043      	str	r3, [r0, #4]
}
 800035e:	bd10      	pop	{r4, pc}
 8000360:	00cfe0ff 	.word	0x00cfe0ff
 8000364:	f0ffffff 	.word	0xf0ffffff
 8000368:	07ff7fff 	.word	0x07ff7fff

0800036c <I2C_StructInit>:
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800036c:	2280      	movs	r2, #128	; 0x80
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 800036e:	2300      	movs	r3, #0
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8000370:	0212      	lsls	r2, r2, #8
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8000372:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8000374:	6043      	str	r3, [r0, #4]
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 8000376:	6083      	str	r3, [r0, #8]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000378:	60c3      	str	r3, [r0, #12]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800037a:	6103      	str	r3, [r0, #16]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800037c:	6142      	str	r2, [r0, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800037e:	6183      	str	r3, [r0, #24]
}
 8000380:	4770      	bx	lr
 8000382:	46c0      	nop			; (mov r8, r8)

08000384 <I2C_Cmd>:
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000384:	2900      	cmp	r1, #0
 8000386:	d104      	bne.n	8000392 <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8000388:	2201      	movs	r2, #1
 800038a:	6803      	ldr	r3, [r0, #0]
 800038c:	4393      	bics	r3, r2
 800038e:	6003      	str	r3, [r0, #0]
  }
}
 8000390:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000392:	2301      	movs	r3, #1
 8000394:	6802      	ldr	r2, [r0, #0]
 8000396:	4313      	orrs	r3, r2
 8000398:	6003      	str	r3, [r0, #0]
 800039a:	e7f9      	b.n	8000390 <I2C_Cmd+0xc>

0800039c <I2C_SoftwareResetCmd>:
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800039c:	2900      	cmp	r1, #0
 800039e:	d104      	bne.n	80003aa <I2C_SoftwareResetCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SWRST);
 80003a0:	6802      	ldr	r2, [r0, #0]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <I2C_SoftwareResetCmd+0x1c>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	6003      	str	r3, [r0, #0]
  }
}
 80003a8:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	6803      	ldr	r3, [r0, #0]
 80003ae:	0192      	lsls	r2, r2, #6
 80003b0:	4313      	orrs	r3, r2
 80003b2:	6003      	str	r3, [r0, #0]
 80003b4:	e7f8      	b.n	80003a8 <I2C_SoftwareResetCmd+0xc>
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	ffffdfff 	.word	0xffffdfff

080003bc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80003bc:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d102      	bne.n	80003c8 <I2C_ITConfig+0xc>
    I2Cx->CR1 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 80003c2:	438b      	bics	r3, r1
 80003c4:	6003      	str	r3, [r0, #0]
  }
}
 80003c6:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80003c8:	4319      	orrs	r1, r3
 80003ca:	6001      	str	r1, [r0, #0]
 80003cc:	e7fb      	b.n	80003c6 <I2C_ITConfig+0xa>
 80003ce:	46c0      	nop			; (mov r8, r8)

080003d0 <I2C_StretchClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d105      	bne.n	80003e0 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	6803      	ldr	r3, [r0, #0]
 80003d8:	0292      	lsls	r2, r2, #10
 80003da:	4313      	orrs	r3, r2
 80003dc:	6003      	str	r3, [r0, #0]
  }
}
 80003de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 80003e0:	6802      	ldr	r2, [r0, #0]
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <I2C_StretchClockCmd+0x1c>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	6003      	str	r3, [r0, #0]
 80003e8:	e7f9      	b.n	80003de <I2C_StretchClockCmd+0xe>
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	fffdffff 	.word	0xfffdffff

080003f0 <I2C_StopModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d104      	bne.n	80003fe <I2C_StopModeCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 80003f4:	6802      	ldr	r2, [r0, #0]
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <I2C_StopModeCmd+0x1c>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	6003      	str	r3, [r0, #0]
  }
}
 80003fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	6803      	ldr	r3, [r0, #0]
 8000402:	02d2      	lsls	r2, r2, #11
 8000404:	4313      	orrs	r3, r2
 8000406:	6003      	str	r3, [r0, #0]
 8000408:	e7f8      	b.n	80003fc <I2C_StopModeCmd+0xc>
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	fffbffff 	.word	0xfffbffff

08000410 <I2C_DualAddressCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000410:	2900      	cmp	r1, #0
 8000412:	d104      	bne.n	800041e <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 8000414:	68c2      	ldr	r2, [r0, #12]
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <I2C_DualAddressCmd+0x1c>)
 8000418:	4013      	ands	r3, r2
 800041a:	60c3      	str	r3, [r0, #12]
  }
}    
 800041c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	68c3      	ldr	r3, [r0, #12]
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	4313      	orrs	r3, r2
 8000426:	60c3      	str	r3, [r0, #12]
 8000428:	e7f8      	b.n	800041c <I2C_DualAddressCmd+0xc>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffff7fff 	.word	0xffff7fff

08000430 <I2C_OwnAddress2Config>:
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8000430:	b510      	push	{r4, lr}
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <I2C_OwnAddress2Config+0x20>)
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8000434:	1c0c      	adds	r4, r1, #0
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000436:	68c1      	ldr	r1, [r0, #12]
  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 8000438:	0212      	lsls	r2, r2, #8
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 800043a:	400b      	ands	r3, r1

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 800043c:	21fe      	movs	r1, #254	; 0xfe
 800043e:	4021      	ands	r1, r4
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 8000440:	24e0      	movs	r4, #224	; 0xe0
 8000442:	00e4      	lsls	r4, r4, #3
 8000444:	4022      	ands	r2, r4

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 8000446:	4311      	orrs	r1, r2
 8000448:	4319      	orrs	r1, r3
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800044a:	60c1      	str	r1, [r0, #12]
}
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	fffff801 	.word	0xfffff801

08000454 <I2C_GeneralCallCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000454:	2900      	cmp	r1, #0
 8000456:	d104      	bne.n	8000462 <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_GCEN;
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 8000458:	6802      	ldr	r2, [r0, #0]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <I2C_GeneralCallCmd+0x1c>)
 800045c:	4013      	ands	r3, r2
 800045e:	6003      	str	r3, [r0, #0]
  }
} 
 8000460:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	6803      	ldr	r3, [r0, #0]
 8000466:	0312      	lsls	r2, r2, #12
 8000468:	4313      	orrs	r3, r2
 800046a:	6003      	str	r3, [r0, #0]
 800046c:	e7f8      	b.n	8000460 <I2C_GeneralCallCmd+0xc>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	fff7ffff 	.word	0xfff7ffff

08000474 <I2C_SlaveByteControlCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000474:	2900      	cmp	r1, #0
 8000476:	d104      	bne.n	8000482 <I2C_SlaveByteControlCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SBC;
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 8000478:	6802      	ldr	r2, [r0, #0]
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <I2C_SlaveByteControlCmd+0x1c>)
 800047c:	4013      	ands	r3, r2
 800047e:	6003      	str	r3, [r0, #0]
  }
}
 8000480:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	6803      	ldr	r3, [r0, #0]
 8000486:	0252      	lsls	r2, r2, #9
 8000488:	4313      	orrs	r3, r2
 800048a:	6003      	str	r3, [r0, #0]
 800048c:	e7f8      	b.n	8000480 <I2C_SlaveByteControlCmd+0xc>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	fffeffff 	.word	0xfffeffff

08000494 <I2C_SlaveAddressConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8000494:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 8000496:	0589      	lsls	r1, r1, #22
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 8000498:	0a9b      	lsrs	r3, r3, #10
 800049a:	029b      	lsls	r3, r3, #10

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 800049c:	0d89      	lsrs	r1, r1, #22
 800049e:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 80004a0:	6041      	str	r1, [r0, #4]
}
 80004a2:	4770      	bx	lr

080004a4 <I2C_10BitAddressingModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004a4:	2900      	cmp	r1, #0
 80004a6:	d104      	bne.n	80004b2 <I2C_10BitAddressingModeCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_ADD10;
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 80004a8:	6842      	ldr	r2, [r0, #4]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <I2C_10BitAddressingModeCmd+0x1c>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	6043      	str	r3, [r0, #4]
  }
} 
 80004b0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	6843      	ldr	r3, [r0, #4]
 80004b6:	0112      	lsls	r2, r2, #4
 80004b8:	4313      	orrs	r3, r2
 80004ba:	6043      	str	r3, [r0, #4]
 80004bc:	e7f8      	b.n	80004b0 <I2C_10BitAddressingModeCmd+0xc>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	fffff7ff 	.word	0xfffff7ff

080004c4 <I2C_AutoEndCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d104      	bne.n	80004d2 <I2C_AutoEndCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 80004c8:	6842      	ldr	r2, [r0, #4]
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <I2C_AutoEndCmd+0x1c>)
 80004cc:	4013      	ands	r3, r2
 80004ce:	6043      	str	r3, [r0, #4]
  }
} 
 80004d0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	6843      	ldr	r3, [r0, #4]
 80004d6:	0492      	lsls	r2, r2, #18
 80004d8:	4313      	orrs	r3, r2
 80004da:	6043      	str	r3, [r0, #4]
 80004dc:	e7f8      	b.n	80004d0 <I2C_AutoEndCmd+0xc>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	fdffffff 	.word	0xfdffffff

080004e4 <I2C_ReloadCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004e4:	2900      	cmp	r1, #0
 80004e6:	d104      	bne.n	80004f2 <I2C_ReloadCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_RELOAD;
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 80004e8:	6842      	ldr	r2, [r0, #4]
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <I2C_ReloadCmd+0x1c>)
 80004ec:	4013      	ands	r3, r2
 80004ee:	6043      	str	r3, [r0, #4]
  }
}
 80004f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	6843      	ldr	r3, [r0, #4]
 80004f6:	0452      	lsls	r2, r2, #17
 80004f8:	4313      	orrs	r3, r2
 80004fa:	6043      	str	r3, [r0, #4]
 80004fc:	e7f8      	b.n	80004f0 <I2C_ReloadCmd+0xc>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	feffffff 	.word	0xfeffffff

08000504 <I2C_NumberOfBytesConfig>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8000504:	6842      	ldr	r2, [r0, #4]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <I2C_NumberOfBytesConfig+0x10>)

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8000508:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 800050a:	4013      	ands	r3, r2

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 800050c:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 800050e:	6041      	str	r1, [r0, #4]
}  
 8000510:	4770      	bx	lr
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	ff00ffff 	.word	0xff00ffff

08000518 <I2C_MasterRequestConfig>:
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 8000518:	2900      	cmp	r1, #0
 800051a:	d005      	beq.n	8000528 <I2C_MasterRequestConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	6843      	ldr	r3, [r0, #4]
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	4313      	orrs	r3, r2
 8000524:	6043      	str	r3, [r0, #4]
  }
}  
 8000526:	4770      	bx	lr
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 8000528:	6842      	ldr	r2, [r0, #4]
 800052a:	4b02      	ldr	r3, [pc, #8]	; (8000534 <I2C_MasterRequestConfig+0x1c>)
 800052c:	4013      	ands	r3, r2
 800052e:	6043      	str	r3, [r0, #4]
 8000530:	e7f9      	b.n	8000526 <I2C_MasterRequestConfig+0xe>
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	fffffbff 	.word	0xfffffbff

08000538 <I2C_GenerateSTART>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000538:	2900      	cmp	r1, #0
 800053a:	d104      	bne.n	8000546 <I2C_GenerateSTART+0xe>
    I2Cx->CR2 |= I2C_CR2_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 800053c:	6842      	ldr	r2, [r0, #4]
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <I2C_GenerateSTART+0x1c>)
 8000540:	4013      	ands	r3, r2
 8000542:	6043      	str	r3, [r0, #4]
  }
}  
 8000544:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	6843      	ldr	r3, [r0, #4]
 800054a:	0192      	lsls	r2, r2, #6
 800054c:	4313      	orrs	r3, r2
 800054e:	6043      	str	r3, [r0, #4]
 8000550:	e7f8      	b.n	8000544 <I2C_GenerateSTART+0xc>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	ffffdfff 	.word	0xffffdfff

08000558 <I2C_GenerateSTOP>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000558:	2900      	cmp	r1, #0
 800055a:	d104      	bne.n	8000566 <I2C_GenerateSTOP+0xe>
    I2Cx->CR2 |= I2C_CR2_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 800055c:	6842      	ldr	r2, [r0, #4]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <I2C_GenerateSTOP+0x1c>)
 8000560:	4013      	ands	r3, r2
 8000562:	6043      	str	r3, [r0, #4]
  }
}  
 8000564:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	6843      	ldr	r3, [r0, #4]
 800056a:	01d2      	lsls	r2, r2, #7
 800056c:	4313      	orrs	r3, r2
 800056e:	6043      	str	r3, [r0, #4]
 8000570:	e7f8      	b.n	8000564 <I2C_GenerateSTOP+0xc>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	ffffbfff 	.word	0xffffbfff

08000578 <I2C_10BitAddressHeaderCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000578:	2900      	cmp	r1, #0
 800057a:	d104      	bne.n	8000586 <I2C_10BitAddressHeaderCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 800057c:	6842      	ldr	r2, [r0, #4]
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <I2C_10BitAddressHeaderCmd+0x1c>)
 8000580:	4013      	ands	r3, r2
 8000582:	6043      	str	r3, [r0, #4]
  }
}    
 8000584:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	6843      	ldr	r3, [r0, #4]
 800058a:	0152      	lsls	r2, r2, #5
 800058c:	4313      	orrs	r3, r2
 800058e:	6043      	str	r3, [r0, #4]
 8000590:	e7f8      	b.n	8000584 <I2C_10BitAddressHeaderCmd+0xc>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	ffffefff 	.word	0xffffefff

08000598 <I2C_AcknowledgeConfig>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000598:	2900      	cmp	r1, #0
 800059a:	d105      	bne.n	80005a8 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	6843      	ldr	r3, [r0, #4]
 80005a0:	0212      	lsls	r2, r2, #8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	6043      	str	r3, [r0, #4]
  }
}
 80005a6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 80005a8:	6842      	ldr	r2, [r0, #4]
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <I2C_AcknowledgeConfig+0x1c>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	6043      	str	r3, [r0, #4]
 80005b0:	e7f9      	b.n	80005a6 <I2C_AcknowledgeConfig+0xe>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	ffff7fff 	.word	0xffff7fff

080005b8 <I2C_GetAddressMatched>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 80005b8:	23fe      	movs	r3, #254	; 0xfe
 80005ba:	6980      	ldr	r0, [r0, #24]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	4018      	ands	r0, r3
 80005c0:	0c00      	lsrs	r0, r0, #16
}
 80005c2:	4770      	bx	lr

080005c4 <I2C_GetTransferDirection>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 80005c4:	6980      	ldr	r0, [r0, #24]
 80005c6:	03c0      	lsls	r0, r0, #15
    direction = I2C_Direction_Transmitter;
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 80005c8:	0fc0      	lsrs	r0, r0, #31
 80005ca:	0280      	lsls	r0, r0, #10
  }  
  return direction;
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80005d0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80005d2:	6844      	ldr	r4, [r0, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80005d4:	4d05      	ldr	r5, [pc, #20]	; (80005ec <I2C_TransferHandling+0x1c>)
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80005d6:	0589      	lsls	r1, r1, #22
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80005d8:	402c      	ands	r4, r5
 80005da:	9d03      	ldr	r5, [sp, #12]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80005dc:	0d89      	lsrs	r1, r1, #22
 80005de:	432c      	orrs	r4, r5
 80005e0:	4323      	orrs	r3, r4
 80005e2:	430b      	orrs	r3, r1
 80005e4:	0412      	lsls	r2, r2, #16
 80005e6:	4313      	orrs	r3, r2
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80005e8:	6043      	str	r3, [r0, #4]
}
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	fc009800 	.word	0xfc009800

080005f0 <I2C_SMBusAlertCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005f0:	2900      	cmp	r1, #0
 80005f2:	d104      	bne.n	80005fe <I2C_SMBusAlertCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 80005f4:	6802      	ldr	r2, [r0, #0]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <I2C_SMBusAlertCmd+0x1c>)
 80005f8:	4013      	ands	r3, r2
 80005fa:	6003      	str	r3, [r0, #0]
  }
}
 80005fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	4313      	orrs	r3, r2
 8000606:	6003      	str	r3, [r0, #0]
 8000608:	e7f8      	b.n	80005fc <I2C_SMBusAlertCmd+0xc>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	ffbfffff 	.word	0xffbfffff

08000610 <I2C_ClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000610:	2900      	cmp	r1, #0
 8000612:	d104      	bne.n	800061e <I2C_ClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8000614:	6942      	ldr	r2, [r0, #20]
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <I2C_ClockTimeoutCmd+0x1c>)
 8000618:	4013      	ands	r3, r2
 800061a:	6143      	str	r3, [r0, #20]
  }
}
 800061c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	6943      	ldr	r3, [r0, #20]
 8000622:	0212      	lsls	r2, r2, #8
 8000624:	4313      	orrs	r3, r2
 8000626:	6143      	str	r3, [r0, #20]
 8000628:	e7f8      	b.n	800061c <I2C_ClockTimeoutCmd+0xc>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	ffff7fff 	.word	0xffff7fff

08000630 <I2C_ExtendedClockTimeoutCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8000630:	6943      	ldr	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <I2C_ExtendedClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	6143      	str	r3, [r0, #20]
  }
}
 800063c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0612      	lsls	r2, r2, #24
 8000642:	4313      	orrs	r3, r2
 8000644:	6143      	str	r3, [r0, #20]
 8000646:	e7f9      	b.n	800063c <I2C_ExtendedClockTimeoutCmd+0xc>

08000648 <I2C_IdleClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000648:	2900      	cmp	r1, #0
 800064a:	d104      	bne.n	8000656 <I2C_IdleClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 800064c:	6942      	ldr	r2, [r0, #20]
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <I2C_IdleClockTimeoutCmd+0x1c>)
 8000650:	4013      	ands	r3, r2
 8000652:	6143      	str	r3, [r0, #20]
  }
}
 8000654:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	6943      	ldr	r3, [r0, #20]
 800065a:	0152      	lsls	r2, r2, #5
 800065c:	4313      	orrs	r3, r2
 800065e:	6143      	str	r3, [r0, #20]
 8000660:	e7f8      	b.n	8000654 <I2C_IdleClockTimeoutCmd+0xc>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	ffffefff 	.word	0xffffefff

08000668 <I2C_TimeoutAConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8000668:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 800066a:	0509      	lsls	r1, r1, #20
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 800066c:	0b1b      	lsrs	r3, r3, #12
 800066e:	031b      	lsls	r3, r3, #12

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8000670:	0d09      	lsrs	r1, r1, #20
 8000672:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8000674:	6141      	str	r1, [r0, #20]
}
 8000676:	4770      	bx	lr

08000678 <I2C_TimeoutBConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8000678:	6942      	ldr	r2, [r0, #20]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <I2C_TimeoutBConfig+0x14>)

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 800067c:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 800067e:	4013      	ands	r3, r2

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <I2C_TimeoutBConfig+0x18>)
 8000682:	4011      	ands	r1, r2
 8000684:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8000686:	6141      	str	r1, [r0, #20]
}
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	f000ffff 	.word	0xf000ffff
 8000690:	0fff0000 	.word	0x0fff0000

08000694 <I2C_CalculatePEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000694:	2900      	cmp	r1, #0
 8000696:	d104      	bne.n	80006a2 <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= I2C_CR1_PECEN;   
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 8000698:	6802      	ldr	r2, [r0, #0]
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <I2C_CalculatePEC+0x1c>)
 800069c:	4013      	ands	r3, r2
 800069e:	6003      	str	r3, [r0, #0]
  }
}
 80006a0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	6803      	ldr	r3, [r0, #0]
 80006a6:	0412      	lsls	r2, r2, #16
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6003      	str	r3, [r0, #0]
 80006ac:	e7f8      	b.n	80006a0 <I2C_CalculatePEC+0xc>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	ff7fffff 	.word	0xff7fffff

080006b4 <I2C_PECRequestCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d104      	bne.n	80006c2 <I2C_PECRequestCmd+0xe>
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 80006b8:	6802      	ldr	r2, [r0, #0]
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <I2C_PECRequestCmd+0x1c>)
 80006bc:	4013      	ands	r3, r2
 80006be:	6003      	str	r3, [r0, #0]
  }
}
 80006c0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6003      	str	r3, [r0, #0]
 80006cc:	e7f8      	b.n	80006c0 <I2C_PECRequestCmd+0xc>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	fbffffff 	.word	0xfbffffff

080006d4 <I2C_GetPEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 80006d4:	6a00      	ldr	r0, [r0, #32]
 80006d6:	b2c0      	uxtb	r0, r0
}
 80006d8:	4770      	bx	lr
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <I2C_ReadRegister>:
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 80006dc:	2300      	movs	r3, #0
  *            @arg I2C_Register_RXDR: RXDR register.
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80006de:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80006e0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 80006e2:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80006e4:	9b01      	ldr	r3, [sp, #4]
 80006e6:	18c9      	adds	r1, r1, r3
 80006e8:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	6818      	ldr	r0, [r3, #0]
}
 80006ee:	b002      	add	sp, #8
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)

080006f4 <I2C_SendData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 80006f4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006f6:	4770      	bx	lr

080006f8 <I2C_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 80006f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80006fa:	b2c0      	uxtb	r0, r0
}  
 80006fc:	4770      	bx	lr
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <I2C_DMACmd>:
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8000700:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 8000702:	2a00      	cmp	r2, #0
 8000704:	d102      	bne.n	800070c <I2C_DMACmd+0xc>
    I2Cx->CR1 |= I2C_DMAReq;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8000706:	438b      	bics	r3, r1
 8000708:	6003      	str	r3, [r0, #0]
  }
}
 800070a:	4770      	bx	lr
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 800070c:	4319      	orrs	r1, r3
 800070e:	6001      	str	r1, [r0, #0]
 8000710:	e7fb      	b.n	800070a <I2C_DMACmd+0xa>
 8000712:	46c0      	nop			; (mov r8, r8)

08000714 <I2C_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000714:	6980      	ldr	r0, [r0, #24]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8000716:	4008      	ands	r0, r1
  
  if(tmpreg != 0)
 8000718:	1e41      	subs	r1, r0, #1
 800071a:	4188      	sbcs	r0, r1
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  return bitstatus;
 800071c:	b2c0      	uxtb	r0, r0
} 
 800071e:	4770      	bx	lr

08000720 <I2C_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8000720:	61c1      	str	r1, [r0, #28]
  }
 8000722:	4770      	bx	lr

08000724 <I2C_GetITStatus>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if((I2C_IT & ERROR_IT_MASK) != 0)
 8000724:	23fc      	movs	r3, #252	; 0xfc
 8000726:	019b      	lsls	r3, r3, #6
 8000728:	4219      	tst	r1, r3
 800072a:	d00a      	beq.n	8000742 <I2C_GetITStatus+0x1e>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	6803      	ldr	r3, [r0, #0]
 8000730:	4013      	ands	r3, r2
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000732:	6982      	ldr	r2, [r0, #24]
    bitstatus = SET;
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8000734:	2000      	movs	r0, #0

  /* Get flag status */
  tmpreg &= I2C_IT;

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8000736:	420a      	tst	r2, r1
 8000738:	d002      	beq.n	8000740 <I2C_GetITStatus+0x1c>
 800073a:	1e58      	subs	r0, r3, #1
 800073c:	4183      	sbcs	r3, r0
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800073e:	b2d8      	uxtb	r0, r3
    bitstatus = RESET;
  }

  /* Return the I2C_IT status */
  return bitstatus;
}
 8000740:	4770      	bx	lr
  if((I2C_IT & ERROR_IT_MASK) != 0)
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
  }
  /* If TC interrupt */
  else if((I2C_IT & TC_IT_MASK) != 0)
 8000742:	23c0      	movs	r3, #192	; 0xc0
 8000744:	420b      	tst	r3, r1
 8000746:	d003      	beq.n	8000750 <I2C_GetITStatus+0x2c>
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	4013      	ands	r3, r2
 800074e:	e7f0      	b.n	8000732 <I2C_GetITStatus+0xe>
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	400b      	ands	r3, r1
 8000754:	e7ed      	b.n	8000732 <I2C_GetITStatus+0xe>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <I2C_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8000758:	61c1      	str	r1, [r0, #28]
}
 800075a:	4770      	bx	lr

0800075c <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800075c:	7883      	ldrb	r3, [r0, #2]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800075e:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000760:	2b00      	cmp	r3, #0
 8000762:	d109      	bne.n	8000778 <NVIC_Init+0x1c>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000764:	221f      	movs	r2, #31
 8000766:	7803      	ldrb	r3, [r0, #0]
 8000768:	4913      	ldr	r1, [pc, #76]	; (80007b8 <NVIC_Init+0x5c>)
 800076a:	4013      	ands	r3, r2
 800076c:	2201      	movs	r2, #1
 800076e:	409a      	lsls	r2, r3
 8000770:	1c13      	adds	r3, r2, #0
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	508b      	str	r3, [r1, r2]
  }
}
 8000776:	bd70      	pop	{r4, r5, r6, pc}
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8000778:	2403      	movs	r4, #3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800077a:	7802      	ldrb	r2, [r0, #0]
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <NVIC_Init+0x5c>)
 800077e:	0895      	lsrs	r5, r2, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8000780:	4022      	ands	r2, r4
 8000782:	00d4      	lsls	r4, r2, #3
 8000784:	22ff      	movs	r2, #255	; 0xff
 8000786:	1c11      	adds	r1, r2, #0
 8000788:	469c      	mov	ip, r3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800078a:	26c0      	movs	r6, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800078c:	40a1      	lsls	r1, r4
 800078e:	00ad      	lsls	r5, r5, #2
 8000790:	4465      	add	r5, ip
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8000792:	00b6      	lsls	r6, r6, #2
 8000794:	59ab      	ldr	r3, [r5, r6]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8000796:	438b      	bics	r3, r1
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8000798:	7841      	ldrb	r1, [r0, #1]
 800079a:	0189      	lsls	r1, r1, #6
 800079c:	400a      	ands	r2, r1
 800079e:	40a2      	lsls	r2, r4
 80007a0:	4313      	orrs	r3, r2
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007a2:	221f      	movs	r2, #31
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80007a4:	51ab      	str	r3, [r5, r6]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007a6:	7803      	ldrb	r3, [r0, #0]
 80007a8:	4013      	ands	r3, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	409a      	lsls	r2, r3
 80007ae:	1c13      	adds	r3, r2, #0
 80007b0:	4662      	mov	r2, ip
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e7df      	b.n	8000776 <NVIC_Init+0x1a>
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	e000e100 	.word	0xe000e100

080007bc <NVIC_SystemLPConfig>:
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <NVIC_SystemLPConfig+0x14>)
 80007be:	6913      	ldr	r3, [r2, #16]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80007c0:	2900      	cmp	r1, #0
 80007c2:	d102      	bne.n	80007ca <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80007c4:	4383      	bics	r3, r0
 80007c6:	6113      	str	r3, [r2, #16]
  }
}
 80007c8:	4770      	bx	lr
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80007ca:	4318      	orrs	r0, r3
 80007cc:	6110      	str	r0, [r2, #16]
 80007ce:	e7fb      	b.n	80007c8 <NVIC_SystemLPConfig+0xc>
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80007d4:	2804      	cmp	r0, #4
 80007d6:	d005      	beq.n	80007e4 <SysTick_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80007d8:	2104      	movs	r1, #4
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SysTick_CLKSourceConfig+0x1c>)
 80007dc:	6813      	ldr	r3, [r2, #0]
 80007de:	438b      	bics	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
  }
}
 80007e2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <SysTick_CLKSourceConfig+0x1c>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4310      	orrs	r0, r2
 80007ea:	6018      	str	r0, [r3, #0]
 80007ec:	e7f9      	b.n	80007e2 <SysTick_CLKSourceConfig+0xe>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	e000e010 	.word	0xe000e010

080007f4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007f4:	2101      	movs	r1, #1
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <RCC_DeInit+0x48>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80007fe:	6858      	ldr	r0, [r3, #4]
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <RCC_DeInit+0x4c>)
 8000802:	4002      	ands	r2, r0
 8000804:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <RCC_DeInit+0x50>)
 800080a:	4002      	ands	r2, r0
 800080c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <RCC_DeInit+0x54>)
 8000812:	4002      	ands	r2, r0
 8000814:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000816:	6858      	ldr	r0, [r3, #4]
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <RCC_DeInit+0x58>)
 800081a:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800081c:	200f      	movs	r0, #15

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800081e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4382      	bics	r2, r0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000826:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <RCC_DeInit+0x5c>)
 800082a:	4002      	ands	r2, r0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800082e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000830:	438a      	bics	r2, r1
 8000832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	4770      	bx	lr
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000
 8000840:	f8ffb80c 	.word	0xf8ffb80c
 8000844:	fef6ffff 	.word	0xfef6ffff
 8000848:	fffbffff 	.word	0xfffbffff
 800084c:	ffc0ffff 	.word	0xffc0ffff
 8000850:	fffffeac 	.word	0xfffffeac

08000854 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000854:	2200      	movs	r2, #0
 8000856:	4b02      	ldr	r3, [pc, #8]	; (8000860 <RCC_HSEConfig+0xc>)
 8000858:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800085a:	7018      	strb	r0, [r3, #0]

}
 800085c:	4770      	bx	lr
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021002 	.word	0x40021002

08000864 <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000864:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000866:	4a03      	ldr	r2, [pc, #12]	; (8000874 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000868:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 800086a:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800086c:	438b      	bics	r3, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800086e:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000870:	6010      	str	r0, [r2, #0]
}
 8000872:	4770      	bx	lr
 8000874:	40021000 	.word	0x40021000

08000878 <RCC_HSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800087a:	2800      	cmp	r0, #0
 800087c:	d104      	bne.n	8000888 <RCC_HSICmd+0x10>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 800087e:	2101      	movs	r1, #1
 8000880:	6813      	ldr	r3, [r2, #0]
 8000882:	438b      	bics	r3, r1
 8000884:	6013      	str	r3, [r2, #0]
  }
}
 8000886:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8000888:	2301      	movs	r3, #1
 800088a:	6811      	ldr	r1, [r2, #0]
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	e7f9      	b.n	8000886 <RCC_HSICmd+0xe>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000

08000898 <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000898:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 800089a:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800089c:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 800089e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80008a0:	438b      	bics	r3, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80008a2:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 80008a4:	6350      	str	r0, [r2, #52]	; 0x34
}
 80008a6:	4770      	bx	lr
 80008a8:	40021000 	.word	0x40021000

080008ac <RCC_HSI14Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d104      	bne.n	80008bc <RCC_HSI14Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 80008b2:	2101      	movs	r1, #1
 80008b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80008b6:	438b      	bics	r3, r1
 80008b8:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 80008ba:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6353      	str	r3, [r2, #52]	; 0x34
 80008c4:	e7f9      	b.n	80008ba <RCC_HSI14Cmd+0xe>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000

080008cc <RCC_HSI14ADCRequestCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d104      	bne.n	80008dc <RCC_HSI14ADCRequestCmd+0x10>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 80008d2:	2304      	movs	r3, #4
 80008d4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80008d6:	430b      	orrs	r3, r1
 80008d8:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 80008da:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80008dc:	2104      	movs	r1, #4
 80008de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80008e0:	438b      	bics	r3, r1
 80008e2:	6353      	str	r3, [r2, #52]	; 0x34
 80008e4:	e7f9      	b.n	80008da <RCC_HSI14ADCRequestCmd+0xe>
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <RCC_LSEConfig+0x1c>)
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	438a      	bics	r2, r1

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80008f4:	2104      	movs	r1, #4
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80008f6:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80008f8:	6a1a      	ldr	r2, [r3, #32]
 80008fa:	438a      	bics	r2, r1
 80008fc:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 80008fe:	6a1a      	ldr	r2, [r3, #32]
 8000900:	4310      	orrs	r0, r2
 8000902:	6218      	str	r0, [r3, #32]
}
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 800090c:	2118      	movs	r1, #24
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <RCC_LSEDriveConfig+0x14>)
 8000910:	6a1a      	ldr	r2, [r3, #32]
 8000912:	438a      	bics	r2, r1
 8000914:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8000916:	6a1a      	ldr	r2, [r3, #32]
 8000918:	4310      	orrs	r0, r2
 800091a:	6218      	str	r0, [r3, #32]
}
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40021000 	.word	0x40021000

08000924 <RCC_LSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000926:	2800      	cmp	r0, #0
 8000928:	d104      	bne.n	8000934 <RCC_LSICmd+0x10>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 800092a:	2101      	movs	r1, #1
 800092c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800092e:	438b      	bics	r3, r1
 8000930:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 8000932:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000934:	2301      	movs	r3, #1
 8000936:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000938:	430b      	orrs	r3, r1
 800093a:	6253      	str	r3, [r2, #36]	; 0x24
 800093c:	e7f9      	b.n	8000932 <RCC_LSICmd+0xe>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000946:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <RCC_PLLConfig+0x1c>)
 800094a:	685c      	ldr	r4, [r3, #4]
 800094c:	4022      	ands	r2, r4
 800094e:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	4311      	orrs	r1, r2
 8000954:	4308      	orrs	r0, r1
 8000956:	6058      	str	r0, [r3, #4]
}
 8000958:	bd10      	pop	{r4, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000
 8000960:	ffc2ffff 	.word	0xffc2ffff

08000964 <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <RCC_PLLCmd+0x1c>)
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000966:	2800      	cmp	r0, #0
 8000968:	d104      	bne.n	8000974 <RCC_PLLCmd+0x10>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 800096a:	6811      	ldr	r1, [r2, #0]
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <RCC_PLLCmd+0x20>)
 800096e:	400b      	ands	r3, r1
 8000970:	6013      	str	r3, [r2, #0]
  }
}
 8000972:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	0449      	lsls	r1, r1, #17
 800097a:	430b      	orrs	r3, r1
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	e7f8      	b.n	8000972 <RCC_PLLCmd+0xe>
 8000980:	40021000 	.word	0x40021000
 8000984:	feffffff 	.word	0xfeffffff

08000988 <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8000988:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 800098a:	4a03      	ldr	r2, [pc, #12]	; (8000998 <RCC_PREDIV1Config+0x10>)
 800098c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800098e:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8000990:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8000992:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 8000994:	4770      	bx	lr
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40021000 	.word	0x40021000

0800099c <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <RCC_ClockSecuritySystemCmd+0x1c>)
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800099e:	2800      	cmp	r0, #0
 80009a0:	d104      	bne.n	80009ac <RCC_ClockSecuritySystemCmd+0x10>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 80009a2:	6811      	ldr	r1, [r2, #0]
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <RCC_ClockSecuritySystemCmd+0x20>)
 80009a6:	400b      	ands	r3, r1
 80009a8:	6013      	str	r3, [r2, #0]
  }
}
 80009aa:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	6813      	ldr	r3, [r2, #0]
 80009b0:	0309      	lsls	r1, r1, #12
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e7f8      	b.n	80009aa <RCC_ClockSecuritySystemCmd+0xe>
 80009b8:	40021000 	.word	0x40021000
 80009bc:	fff7ffff 	.word	0xfff7ffff

080009c0 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 80009c0:	4b01      	ldr	r3, [pc, #4]	; (80009c8 <RCC_MCOConfig+0x8>)
 80009c2:	7018      	strb	r0, [r3, #0]
}
 80009c4:	4770      	bx	lr
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40021007 	.word	0x40021007

080009cc <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80009cc:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80009ce:	4a03      	ldr	r2, [pc, #12]	; (80009dc <RCC_SYSCLKConfig+0x10>)
 80009d0:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80009d2:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80009d4:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009d6:	6050      	str	r0, [r2, #4]
}
 80009d8:	4770      	bx	lr
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000

080009e0 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80009e0:	200c      	movs	r0, #12
 80009e2:	4b02      	ldr	r3, [pc, #8]	; (80009ec <RCC_GetSYSCLKSource+0xc>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4018      	ands	r0, r3
}
 80009e8:	4770      	bx	lr
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40021000 	.word	0x40021000

080009f0 <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80009f0:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <RCC_HCLKConfig+0x10>)
 80009f4:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80009f6:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80009f8:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009fa:	6050      	str	r0, [r2, #4]
}
 80009fc:	4770      	bx	lr
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000

08000a04 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000a08:	6851      	ldr	r1, [r2, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000a0a:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000a0c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a0e:	6050      	str	r0, [r2, #4]
}
 8000a10:	4770      	bx	lr
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40021000 	.word	0x40021000
 8000a18:	fffff8ff 	.word	0xfffff8ff

08000a1c <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <RCC_ADCCLKConfig+0x28>)
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <RCC_ADCCLKConfig+0x2c>)
 8000a20:	6859      	ldr	r1, [r3, #4]
 8000a22:	400a      	ands	r2, r1
 8000a24:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8000a26:	6859      	ldr	r1, [r3, #4]
 8000a28:	0402      	lsls	r2, r0, #16
 8000a2a:	0c12      	lsrs	r2, r2, #16
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000a34:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000a36:	400a      	ands	r2, r1
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a3c:	4310      	orrs	r0, r2
 8000a3e:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000a40:	4770      	bx	lr
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40021000 	.word	0x40021000
 8000a48:	ffffbfff 	.word	0xffffbfff
 8000a4c:	fffffeff 	.word	0xfffffeff

08000a50 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <RCC_CECCLKConfig+0x14>)
 8000a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a56:	438a      	bics	r2, r1
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5c:	4310      	orrs	r0, r2
 8000a5e:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40021000 	.word	0x40021000

08000a68 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <RCC_I2CCLKConfig+0x14>)
 8000a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a6e:	438a      	bics	r2, r1
 8000a70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8000a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a74:	4310      	orrs	r0, r2
 8000a76:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000a78:	4770      	bx	lr
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40021000 	.word	0x40021000

08000a80 <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8000a80:	2103      	movs	r1, #3
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <RCC_USARTCLKConfig+0x14>)
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	438a      	bics	r2, r1
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8000a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8c:	4310      	orrs	r0, r2
 8000a8e:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000a90:	4770      	bx	lr
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000

08000a98 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a98:	210c      	movs	r1, #12
 8000a9a:	4a3b      	ldr	r2, [pc, #236]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a9e:	6853      	ldr	r3, [r2, #4]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000aa0:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000aa2:	400b      	ands	r3, r1
  
  switch (tmp)
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d001      	beq.n	8000aac <RCC_GetClocksFreq+0x14>
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d051      	beq.n	8000b50 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000aac:	4837      	ldr	r0, [pc, #220]	; (8000b8c <RCC_GetClocksFreq+0xf4>)
 8000aae:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ab0:	4935      	ldr	r1, [pc, #212]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8000ab2:	4d37      	ldr	r5, [pc, #220]	; (8000b90 <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ab4:	684b      	ldr	r3, [r1, #4]
 8000ab6:	061b      	lsls	r3, r3, #24
  tmp = tmp >> 4;
 8000ab8:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 8000aba:	5cea      	ldrb	r2, [r5, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000abc:	1c03      	adds	r3, r0, #0
 8000abe:	40d3      	lsrs	r3, r2
 8000ac0:	1c1a      	adds	r2, r3, #0
 8000ac2:	6063      	str	r3, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000ac4:	684b      	ldr	r3, [r1, #4]
 8000ac6:	055b      	lsls	r3, r3, #21
  tmp = tmp >> 8;
 8000ac8:	0f5b      	lsrs	r3, r3, #29
  presc = APBAHBPrescTable[tmp];
 8000aca:	5ceb      	ldrb	r3, [r5, r3]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000acc:	40da      	lsrs	r2, r3
 8000ace:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8000ad0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	d421      	bmi.n	8000b1a <RCC_GetClocksFreq+0x82>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <RCC_GetClocksFreq+0xfc>)
 8000ad8:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	065b      	lsls	r3, r3, #25
 8000ae0:	d424      	bmi.n	8000b2c <RCC_GetClocksFreq+0x94>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <RCC_GetClocksFreq+0x100>)
 8000ae4:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	06db      	lsls	r3, r3, #27
 8000aec:	d425      	bmi.n	8000b3a <RCC_GetClocksFreq+0xa2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000af0:	4925      	ldr	r1, [pc, #148]	; (8000b88 <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000af2:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000af4:	2303      	movs	r3, #3
 8000af6:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000af8:	422b      	tst	r3, r5
 8000afa:	d024      	beq.n	8000b46 <RCC_GetClocksFreq+0xae>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000afc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000afe:	401a      	ands	r2, r3
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	d03a      	beq.n	8000b7a <RCC_GetClocksFreq+0xe2>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000b04:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000b06:	401a      	ands	r2, r3
 8000b08:	2a02      	cmp	r2, #2
 8000b0a:	d038      	beq.n	8000b7e <RCC_GetClocksFreq+0xe6>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000b0c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000b0e:	4013      	ands	r3, r2
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d101      	bne.n	8000b18 <RCC_GetClocksFreq+0x80>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <RCC_GetClocksFreq+0xf4>)
 8000b16:	61a3      	str	r3, [r4, #24]
  }
}
 8000b18:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8000b1a:	684b      	ldr	r3, [r1, #4]
 8000b1c:	045b      	lsls	r3, r3, #17
 8000b1e:	d414      	bmi.n	8000b4a <RCC_GetClocksFreq+0xb2>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8000b20:	0853      	lsrs	r3, r2, #1
 8000b22:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	065b      	lsls	r3, r3, #25
 8000b2a:	d5da      	bpl.n	8000ae2 <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	06db      	lsls	r3, r3, #27
 8000b38:	d5d9      	bpl.n	8000aee <RCC_GetClocksFreq+0x56>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	4912      	ldr	r1, [pc, #72]	; (8000b88 <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b3e:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000b40:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000b42:	422b      	tst	r3, r5
 8000b44:	d1da      	bne.n	8000afc <RCC_GetClocksFreq+0x64>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000b46:	61a2      	str	r2, [r4, #24]
 8000b48:	e7e6      	b.n	8000b18 <RCC_GetClocksFreq+0x80>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000b4a:	0893      	lsrs	r3, r2, #2
 8000b4c:	60e3      	str	r3, [r4, #12]
 8000b4e:	e7c4      	b.n	8000ada <RCC_GetClocksFreq+0x42>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b50:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b52:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b54:	0280      	lsls	r0, r0, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000b56:	0f00      	lsrs	r0, r0, #28
 8000b58:	1c85      	adds	r5, r0, #2
      
      if (pllsource == 0x00)
 8000b5a:	03db      	lsls	r3, r3, #15
 8000b5c:	d403      	bmi.n	8000b66 <RCC_GetClocksFreq+0xce>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <RCC_GetClocksFreq+0x104>)
 8000b60:	4368      	muls	r0, r5
 8000b62:	6020      	str	r0, [r4, #0]
 8000b64:	e7a4      	b.n	8000ab0 <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b66:	210f      	movs	r1, #15
 8000b68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <RCC_GetClocksFreq+0xf4>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b6c:	4019      	ands	r1, r3
 8000b6e:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b70:	f002 fa38 	bl	8002fe4 <__aeabi_uidiv>
 8000b74:	4368      	muls	r0, r5
 8000b76:	6020      	str	r0, [r4, #0]
 8000b78:	e79a      	b.n	8000ab0 <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b7a:	61a0      	str	r0, [r4, #24]
 8000b7c:	e7cc      	b.n	8000b18 <RCC_GetClocksFreq+0x80>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	61a3      	str	r3, [r4, #24]
 8000b84:	e7c8      	b.n	8000b18 <RCC_GetClocksFreq+0x80>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	007a1200 	.word	0x007a1200
 8000b90:	20000000 	.word	0x20000000
 8000b94:	00d59f80 	.word	0x00d59f80
 8000b98:	00008012 	.word	0x00008012
 8000b9c:	003d0900 	.word	0x003d0900

08000ba0 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000ba0:	4a02      	ldr	r2, [pc, #8]	; (8000bac <RCC_RTCCLKConfig+0xc>)
 8000ba2:	6a13      	ldr	r3, [r2, #32]
 8000ba4:	4318      	orrs	r0, r3
 8000ba6:	6210      	str	r0, [r2, #32]
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <RCC_RTCCLKCmd+0x1c>)
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d104      	bne.n	8000bc0 <RCC_RTCCLKCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000bb6:	6a11      	ldr	r1, [r2, #32]
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <RCC_RTCCLKCmd+0x20>)
 8000bba:	400b      	ands	r3, r1
 8000bbc:	6213      	str	r3, [r2, #32]
  }
}
 8000bbe:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	6a13      	ldr	r3, [r2, #32]
 8000bc4:	0209      	lsls	r1, r1, #8
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	6213      	str	r3, [r2, #32]
 8000bca:	e7f8      	b.n	8000bbe <RCC_RTCCLKCmd+0xe>
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	ffff7fff 	.word	0xffff7fff

08000bd4 <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <RCC_BackupResetCmd+0x1c>)
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d104      	bne.n	8000be4 <RCC_BackupResetCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8000bda:	6a11      	ldr	r1, [r2, #32]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <RCC_BackupResetCmd+0x20>)
 8000bde:	400b      	ands	r3, r1
 8000be0:	6213      	str	r3, [r2, #32]
  }
}
 8000be2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	6a13      	ldr	r3, [r2, #32]
 8000be8:	0249      	lsls	r1, r1, #9
 8000bea:	430b      	orrs	r3, r1
 8000bec:	6213      	str	r3, [r2, #32]
 8000bee:	e7f8      	b.n	8000be2 <RCC_BackupResetCmd+0xe>
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	fffeffff 	.word	0xfffeffff

08000bf8 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <RCC_AHBPeriphClockCmd+0x14>)
 8000bfa:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d102      	bne.n	8000c06 <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c00:	4383      	bics	r3, r0
 8000c02:	6153      	str	r3, [r2, #20]
  }
}
 8000c04:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c06:	4318      	orrs	r0, r3
 8000c08:	6150      	str	r0, [r2, #20]
 8000c0a:	e7fb      	b.n	8000c04 <RCC_AHBPeriphClockCmd+0xc>
 8000c0c:	40021000 	.word	0x40021000

08000c10 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <RCC_APB2PeriphClockCmd+0x14>)
 8000c12:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d102      	bne.n	8000c1e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c18:	4383      	bics	r3, r0
 8000c1a:	6193      	str	r3, [r2, #24]
  }
}
 8000c1c:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c1e:	4318      	orrs	r0, r3
 8000c20:	6190      	str	r0, [r2, #24]
 8000c22:	e7fb      	b.n	8000c1c <RCC_APB2PeriphClockCmd+0xc>
 8000c24:	40021000 	.word	0x40021000

08000c28 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <RCC_APB1PeriphClockCmd+0x14>)
 8000c2a:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d102      	bne.n	8000c36 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c30:	4383      	bics	r3, r0
 8000c32:	61d3      	str	r3, [r2, #28]
  }
}
 8000c34:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c36:	4318      	orrs	r0, r3
 8000c38:	61d0      	str	r0, [r2, #28]
 8000c3a:	e7fb      	b.n	8000c34 <RCC_APB1PeriphClockCmd+0xc>
 8000c3c:	40021000 	.word	0x40021000

08000c40 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <RCC_AHBPeriphResetCmd+0x14>)
 8000c42:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d102      	bne.n	8000c4e <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000c48:	4383      	bics	r3, r0
 8000c4a:	6293      	str	r3, [r2, #40]	; 0x28
  }
}
 8000c4c:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000c4e:	4318      	orrs	r0, r3
 8000c50:	6290      	str	r0, [r2, #40]	; 0x28
 8000c52:	e7fb      	b.n	8000c4c <RCC_AHBPeriphResetCmd+0xc>
 8000c54:	40021000 	.word	0x40021000

08000c58 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <RCC_APB2PeriphResetCmd+0x14>)
 8000c5a:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d102      	bne.n	8000c66 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000c60:	4383      	bics	r3, r0
 8000c62:	60d3      	str	r3, [r2, #12]
  }
}
 8000c64:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c66:	4318      	orrs	r0, r3
 8000c68:	60d0      	str	r0, [r2, #12]
 8000c6a:	e7fb      	b.n	8000c64 <RCC_APB2PeriphResetCmd+0xc>
 8000c6c:	40021000 	.word	0x40021000

08000c70 <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <RCC_APB1PeriphResetCmd+0x14>)
 8000c72:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c74:	2900      	cmp	r1, #0
 8000c76:	d102      	bne.n	8000c7e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000c78:	4383      	bics	r3, r0
 8000c7a:	6113      	str	r3, [r2, #16]
  }
}
 8000c7c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000c7e:	4318      	orrs	r0, r3
 8000c80:	6110      	str	r0, [r2, #16]
 8000c82:	e7fb      	b.n	8000c7c <RCC_APB1PeriphResetCmd+0xc>
 8000c84:	40021000 	.word	0x40021000

08000c88 <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <RCC_ITConfig+0x14>)
 8000c8a:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d102      	bne.n	8000c96 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8000c90:	4383      	bics	r3, r0
 8000c92:	7013      	strb	r3, [r2, #0]
  }
}
 8000c94:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000c96:	4318      	orrs	r0, r3
 8000c98:	7010      	strb	r0, [r2, #0]
 8000c9a:	e7fb      	b.n	8000c94 <RCC_ITConfig+0xc>
 8000c9c:	40021009 	.word	0x40021009

08000ca0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ca0:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 8000ca2:	d10b      	bne.n	8000cbc <RCC_GetFlagStatus+0x1c>
  {
    statusreg = RCC->CR;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <RCC_GetFlagStatus+0x38>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ca8:	221f      	movs	r2, #31
 8000caa:	4010      	ands	r0, r2
 8000cac:	2201      	movs	r2, #1
 8000cae:	4082      	lsls	r2, r0
 8000cb0:	1c10      	adds	r0, r2, #0
 8000cb2:	4018      	ands	r0, r3
 8000cb4:	1e43      	subs	r3, r0, #1
 8000cb6:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000cb8:	b2c0      	uxtb	r0, r0
}
 8000cba:	4770      	bx	lr

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d004      	beq.n	8000cca <RCC_GetFlagStatus+0x2a>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d005      	beq.n	8000cd0 <RCC_GetFlagStatus+0x30>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <RCC_GetFlagStatus+0x38>)
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc8:	e7ee      	b.n	8000ca8 <RCC_GetFlagStatus+0x8>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000cca:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <RCC_GetFlagStatus+0x38>)
 8000ccc:	6a1b      	ldr	r3, [r3, #32]
 8000cce:	e7eb      	b.n	8000ca8 <RCC_GetFlagStatus+0x8>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <RCC_GetFlagStatus+0x38>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	e7e8      	b.n	8000ca8 <RCC_GetFlagStatus+0x8>
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40021000 	.word	0x40021000

08000cdc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000cdc:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 8000cde:	2300      	movs	r3, #0
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000ce0:	24a0      	movs	r4, #160	; 0xa0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000ce2:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 8000ce4:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000ce6:	00e4      	lsls	r4, r4, #3
 8000ce8:	e001      	b.n	8000cee <RCC_WaitForHSEStartUp+0x12>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d108      	bne.n	8000d00 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000cee:	2011      	movs	r0, #17
 8000cf0:	f7ff ffd6 	bl	8000ca0 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000cf4:	9b01      	ldr	r3, [sp, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000cfa:	9b01      	ldr	r3, [sp, #4]
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d1f4      	bne.n	8000cea <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000d00:	2011      	movs	r0, #17
 8000d02:	f7ff ffcd 	bl	8000ca0 <RCC_GetFlagStatus>
 8000d06:	1e43      	subs	r3, r0, #1
 8000d08:	4198      	sbcs	r0, r3
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000d0a:	b2c0      	uxtb	r0, r0
}
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd10      	pop	{r4, pc}

08000d10 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <RCC_ClearFlag+0x10>)
 8000d14:	0449      	lsls	r1, r1, #17
 8000d16:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d1c:	4770      	bx	lr
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000

08000d24 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <RCC_GetITStatus+0x10>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	4018      	ands	r0, r3
 8000d2a:	1e43      	subs	r3, r0, #1
 8000d2c:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000d2e:	b2c0      	uxtb	r0, r0
}
 8000d30:	4770      	bx	lr
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000

08000d38 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <RCC_ClearITPendingBit+0x8>)
 8000d3a:	7018      	strb	r0, [r3, #0]
}
 8000d3c:	4770      	bx	lr
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	4002100a 	.word	0x4002100a

08000d44 <USART_DeInit>:
  * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000d44:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <USART_DeInit+0x3c>)
 8000d48:	4298      	cmp	r0, r3
 8000d4a:	d00e      	beq.n	8000d6a <USART_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else 
  {
    if  (USARTx == USART2)
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <USART_DeInit+0x40>)
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d000      	beq.n	8000d54 <USART_DeInit+0x10>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    }
  }
}
 8000d52:	bd08      	pop	{r3, pc}
  }
  else 
  {
    if  (USARTx == USART2)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d54:	2080      	movs	r0, #128	; 0x80
 8000d56:	2101      	movs	r1, #1
 8000d58:	0280      	lsls	r0, r0, #10
 8000d5a:	f7ff ff89 	bl	8000c70 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	2100      	movs	r1, #0
 8000d62:	0280      	lsls	r0, r0, #10
 8000d64:	f7ff ff84 	bl	8000c70 <RCC_APB1PeriphResetCmd>
 8000d68:	e7f3      	b.n	8000d52 <USART_DeInit+0xe>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d6a:	2080      	movs	r0, #128	; 0x80
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	01c0      	lsls	r0, r0, #7
 8000d70:	f7ff ff72 	bl	8000c58 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	2100      	movs	r1, #0
 8000d78:	01c0      	lsls	r0, r0, #7
 8000d7a:	f7ff ff6d 	bl	8000c58 <RCC_APB2PeriphResetCmd>
 8000d7e:	e7e8      	b.n	8000d52 <USART_DeInit+0xe>
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40004400 	.word	0x40004400

08000d88 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000d88:	2201      	movs	r2, #1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8c:	1c0d      	adds	r5, r1, #0
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000d8e:	6803      	ldr	r3, [r0, #0]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d90:	b089      	sub	sp, #36	; 0x24
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000d92:	4393      	bics	r3, r2
 8000d94:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000d96:	6842      	ldr	r2, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <USART_Init+0x8c>)
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d9a:	1c04      	adds	r4, r0, #0
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d9c:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000d9e:	688a      	ldr	r2, [r1, #8]
 8000da0:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000da2:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000da4:	6802      	ldr	r2, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <USART_Init+0x90>)
 8000da8:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000daa:	68cb      	ldr	r3, [r1, #12]
 8000dac:	6849      	ldr	r1, [r1, #4]
 8000dae:	430b      	orrs	r3, r1
 8000db0:	6929      	ldr	r1, [r5, #16]
 8000db2:	430b      	orrs	r3, r1
 8000db4:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8000db6:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000db8:	6882      	ldr	r2, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <USART_Init+0x94>)
 8000dbc:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000dbe:	696a      	ldr	r2, [r5, #20]
 8000dc0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8000dc2:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000dc4:	a801      	add	r0, sp, #4
 8000dc6:	f7ff fe67 	bl	8000a98 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <USART_Init+0x98>)
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	d01f      	beq.n	8000e10 <USART_Init+0x88>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8000dd0:	9f03      	ldr	r7, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	041b      	lsls	r3, r3, #16
 8000dd6:	d500      	bpl.n	8000dda <USART_Init+0x52>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000dd8:	007f      	lsls	r7, r7, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000dda:	682e      	ldr	r6, [r5, #0]
 8000ddc:	1c38      	adds	r0, r7, #0
 8000dde:	1c31      	adds	r1, r6, #0
 8000de0:	f002 f900 	bl	8002fe4 <__aeabi_uidiv>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000de4:	1c31      	adds	r1, r6, #0
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000de6:	1c05      	adds	r5, r0, #0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000de8:	1c38      	adds	r0, r7, #0
 8000dea:	f002 f93f 	bl	800306c <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8000dee:	2300      	movs	r3, #0
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8000df0:	0876      	lsrs	r6, r6, #1
  {
    divider++;
 8000df2:	42b1      	cmp	r1, r6
 8000df4:	415b      	adcs	r3, r3
 8000df6:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	041b      	lsls	r3, r3, #16
 8000dfc:	d504      	bpl.n	8000e08 <USART_Init+0x80>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <USART_Init+0x9c>)
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000e00:	072a      	lsls	r2, r5, #28
 8000e02:	0f52      	lsrs	r2, r2, #29
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000e04:	401d      	ands	r5, r3
 8000e06:	4315      	orrs	r5, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000e08:	b2ad      	uxth	r5, r5
 8000e0a:	81a5      	strh	r5, [r4, #12]
}
 8000e0c:	b009      	add	sp, #36	; 0x24
 8000e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000e10:	9f07      	ldr	r7, [sp, #28]
 8000e12:	e7de      	b.n	8000dd2 <USART_Init+0x4a>
 8000e14:	ffffcfff 	.word	0xffffcfff
 8000e18:	ffffe9f3 	.word	0xffffe9f3
 8000e1c:	fffffcff 	.word	0xfffffcff
 8000e20:	40013800 	.word	0x40013800
 8000e24:	0000fff0 	.word	0x0000fff0

08000e28 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000e28:	2396      	movs	r3, #150	; 0x96
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e2e:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000e30:	2300      	movs	r3, #0
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e32:	6102      	str	r2, [r0, #16]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000e34:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000e36:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000e38:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000e3a:	6143      	str	r3, [r0, #20]
}
 8000e3c:	4770      	bx	lr
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e40:	6842      	ldr	r2, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <USART_ClockInit+0x1c>)
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000e44:	b510      	push	{r4, lr}
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000e46:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000e48:	680c      	ldr	r4, [r1, #0]
 8000e4a:	684b      	ldr	r3, [r1, #4]
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	688c      	ldr	r4, [r1, #8]
 8000e50:	68c9      	ldr	r1, [r1, #12]
 8000e52:	4323      	orrs	r3, r4
 8000e54:	430b      	orrs	r3, r1
 8000e56:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000e58:	6043      	str	r3, [r0, #4]
}
 8000e5a:	bd10      	pop	{r4, pc}
 8000e5c:	fffff0ff 	.word	0xfffff0ff

08000e60 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000e60:	2300      	movs	r3, #0
 8000e62:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000e64:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000e66:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000e68:	60c3      	str	r3, [r0, #12]
}
 8000e6a:	4770      	bx	lr

08000e6c <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	d104      	bne.n	8000e7a <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000e70:	2201      	movs	r2, #1
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	4393      	bics	r3, r2
 8000e76:	6003      	str	r3, [r0, #0]
  }
}
 8000e78:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	6802      	ldr	r2, [r0, #0]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	6003      	str	r3, [r0, #0]
 8000e82:	e7f9      	b.n	8000e78 <USART_Cmd+0xc>

08000e84 <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000e84:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d102      	bne.n	8000e90 <USART_DirectionModeCmd+0xc>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8000e8a:	438b      	bics	r3, r1
 8000e8c:	6003      	str	r3, [r0, #0]
  }
}
 8000e8e:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000e90:	4319      	orrs	r1, r3
 8000e92:	6001      	str	r1, [r0, #0]
 8000e94:	e7fb      	b.n	8000e8e <USART_DirectionModeCmd+0xa>
 8000e96:	46c0      	nop			; (mov r8, r8)

08000e98 <USART_OverSampling8Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	d104      	bne.n	8000ea6 <USART_OverSampling8Cmd+0xe>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000e9c:	6802      	ldr	r2, [r0, #0]
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <USART_OverSampling8Cmd+0x1c>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	6003      	str	r3, [r0, #0]
  }
}  
 8000ea4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	0212      	lsls	r2, r2, #8
 8000eac:	4313      	orrs	r3, r2
 8000eae:	6003      	str	r3, [r0, #0]
 8000eb0:	e7f8      	b.n	8000ea4 <USART_OverSampling8Cmd+0xc>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	ffff7fff 	.word	0xffff7fff

08000eb8 <USART_OneBitMethodCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d104      	bne.n	8000ec6 <USART_OneBitMethodCmd+0xe>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000ebc:	6882      	ldr	r2, [r0, #8]
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <USART_OneBitMethodCmd+0x1c>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	6083      	str	r3, [r0, #8]
  }
}
 8000ec4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	6883      	ldr	r3, [r0, #8]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6083      	str	r3, [r0, #8]
 8000ed0:	e7f8      	b.n	8000ec4 <USART_OneBitMethodCmd+0xc>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	fffff7ff 	.word	0xfffff7ff

08000ed8 <USART_MSBFirstCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	d104      	bne.n	8000ee6 <USART_MSBFirstCmd+0xe>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000edc:	6842      	ldr	r2, [r0, #4]
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <USART_MSBFirstCmd+0x1c>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	6043      	str	r3, [r0, #4]
  }
}
 8000ee4:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	6843      	ldr	r3, [r0, #4]
 8000eea:	0312      	lsls	r2, r2, #12
 8000eec:	4313      	orrs	r3, r2
 8000eee:	6043      	str	r3, [r0, #4]
 8000ef0:	e7f8      	b.n	8000ee4 <USART_MSBFirstCmd+0xc>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	fff7ffff 	.word	0xfff7ffff

08000ef8 <USART_DataInvCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d104      	bne.n	8000f06 <USART_DataInvCmd+0xe>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000efc:	6842      	ldr	r2, [r0, #4]
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <USART_DataInvCmd+0x1c>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	6043      	str	r3, [r0, #4]
  }
}
 8000f04:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	6843      	ldr	r3, [r0, #4]
 8000f0a:	02d2      	lsls	r2, r2, #11
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	6043      	str	r3, [r0, #4]
 8000f10:	e7f8      	b.n	8000f04 <USART_DataInvCmd+0xc>
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	fffbffff 	.word	0xfffbffff

08000f18 <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000f18:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d102      	bne.n	8000f24 <USART_InvPinCmd+0xc>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8000f1e:	438b      	bics	r3, r1
 8000f20:	6043      	str	r3, [r0, #4]
  }
}
 8000f22:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000f24:	4319      	orrs	r1, r3
 8000f26:	6041      	str	r1, [r0, #4]
 8000f28:	e7fb      	b.n	8000f22 <USART_InvPinCmd+0xa>
 8000f2a:	46c0      	nop			; (mov r8, r8)

08000f2c <USART_SWAPPinCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	d104      	bne.n	8000f3a <USART_SWAPPinCmd+0xe>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000f30:	6842      	ldr	r2, [r0, #4]
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <USART_SWAPPinCmd+0x1c>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	6043      	str	r3, [r0, #4]
  }
}
 8000f38:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	6843      	ldr	r3, [r0, #4]
 8000f3e:	0212      	lsls	r2, r2, #8
 8000f40:	4313      	orrs	r3, r2
 8000f42:	6043      	str	r3, [r0, #4]
 8000f44:	e7f8      	b.n	8000f38 <USART_SWAPPinCmd+0xc>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	ffff7fff 	.word	0xffff7fff

08000f4c <USART_ReceiverTimeOutCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d104      	bne.n	8000f5a <USART_ReceiverTimeOutCmd+0xe>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000f50:	6842      	ldr	r2, [r0, #4]
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <USART_ReceiverTimeOutCmd+0x1c>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	6043      	str	r3, [r0, #4]
  }
}
 8000f58:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	6843      	ldr	r3, [r0, #4]
 8000f5e:	0412      	lsls	r2, r2, #16
 8000f60:	4313      	orrs	r3, r2
 8000f62:	6043      	str	r3, [r0, #4]
 8000f64:	e7f8      	b.n	8000f58 <USART_ReceiverTimeOutCmd+0xc>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	ff7fffff 	.word	0xff7fffff

08000f6c <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8000f6c:	6943      	ldr	r3, [r0, #20]
 8000f6e:	0e1b      	lsrs	r3, r3, #24
 8000f70:	061b      	lsls	r3, r3, #24
 8000f72:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8000f74:	6943      	ldr	r3, [r0, #20]
 8000f76:	4319      	orrs	r1, r3
 8000f78:	6141      	str	r1, [r0, #20]
}
 8000f7a:	4770      	bx	lr

08000f7c <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	8a03      	ldrh	r3, [r0, #16]
 8000f80:	4393      	bics	r3, r2
 8000f82:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000f84:	8a03      	ldrh	r3, [r0, #16]
 8000f86:	4319      	orrs	r1, r3
 8000f88:	8201      	strh	r1, [r0, #16]
}
 8000f8a:	4770      	bx	lr

08000f8c <USART_STOPModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f8c:	2900      	cmp	r1, #0
 8000f8e:	d104      	bne.n	8000f9a <USART_STOPModeCmd+0xe>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8000f90:	2202      	movs	r2, #2
 8000f92:	6803      	ldr	r3, [r0, #0]
 8000f94:	4393      	bics	r3, r2
 8000f96:	6003      	str	r3, [r0, #0]
  }
}
 8000f98:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	6802      	ldr	r2, [r0, #0]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	6003      	str	r3, [r0, #0]
 8000fa2:	e7f9      	b.n	8000f98 <USART_STOPModeCmd+0xc>

08000fa4 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8000fa4:	6882      	ldr	r2, [r0, #8]
 8000fa6:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <USART_StopModeWakeUpSourceConfig+0x10>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8000fac:	6883      	ldr	r3, [r0, #8]
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	6081      	str	r1, [r0, #8]
}
 8000fb2:	4770      	bx	lr
 8000fb4:	ffcfffff 	.word	0xffcfffff

08000fb8 <USART_AutoBaudRateCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fb8:	2900      	cmp	r1, #0
 8000fba:	d104      	bne.n	8000fc6 <USART_AutoBaudRateCmd+0xe>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8000fbc:	6842      	ldr	r2, [r0, #4]
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <USART_AutoBaudRateCmd+0x1c>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	6043      	str	r3, [r0, #4]
  }
}
 8000fc4:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	6843      	ldr	r3, [r0, #4]
 8000fca:	0352      	lsls	r2, r2, #13
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	6043      	str	r3, [r0, #4]
 8000fd0:	e7f8      	b.n	8000fc4 <USART_AutoBaudRateCmd+0xc>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	ffefffff 	.word	0xffefffff

08000fd8 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8000fd8:	6842      	ldr	r2, [r0, #4]
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <USART_AutoBaudRateConfig+0x10>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8000fe0:	6843      	ldr	r3, [r0, #4]
 8000fe2:	4319      	orrs	r1, r3
 8000fe4:	6041      	str	r1, [r0, #4]
}
 8000fe6:	4770      	bx	lr
 8000fe8:	ff9fffff 	.word	0xff9fffff

08000fec <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000fec:	05c9      	lsls	r1, r1, #23
 8000fee:	0dc9      	lsrs	r1, r1, #23
 8000ff0:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000ff2:	4770      	bx	lr

08000ff4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8000ff4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8000ff6:	05c0      	lsls	r0, r0, #23
 8000ff8:	0dc0      	lsrs	r0, r0, #23
}
 8000ffa:	4770      	bx	lr

08000ffc <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000ffc:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000ffe:	0609      	lsls	r1, r1, #24
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	6043      	str	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8001006:	6843      	ldr	r3, [r0, #4]
 8001008:	4319      	orrs	r1, r3
 800100a:	6041      	str	r1, [r0, #4]
}
 800100c:	4770      	bx	lr
 800100e:	46c0      	nop			; (mov r8, r8)

08001010 <USART_MuteModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001010:	2900      	cmp	r1, #0
 8001012:	d104      	bne.n	800101e <USART_MuteModeCmd+0xe>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8001014:	6802      	ldr	r2, [r0, #0]
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <USART_MuteModeCmd+0x1c>)
 8001018:	4013      	ands	r3, r2
 800101a:	6003      	str	r3, [r0, #0]
  }
}
 800101c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	6803      	ldr	r3, [r0, #0]
 8001022:	0192      	lsls	r2, r2, #6
 8001024:	4313      	orrs	r3, r2
 8001026:	6003      	str	r3, [r0, #0]
 8001028:	e7f8      	b.n	800101c <USART_MuteModeCmd+0xc>
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	ffffdfff 	.word	0xffffdfff

08001030 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8001030:	6802      	ldr	r2, [r0, #0]
 8001032:	4b03      	ldr	r3, [pc, #12]	; (8001040 <USART_MuteModeWakeUpConfig+0x10>)
 8001034:	4013      	ands	r3, r2
 8001036:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8001038:	6803      	ldr	r3, [r0, #0]
 800103a:	4319      	orrs	r1, r3
 800103c:	6001      	str	r1, [r0, #0]
}
 800103e:	4770      	bx	lr
 8001040:	fffff7ff 	.word	0xfffff7ff

08001044 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8001044:	2210      	movs	r2, #16
 8001046:	6843      	ldr	r3, [r0, #4]
 8001048:	4393      	bics	r3, r2
 800104a:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 800104c:	6843      	ldr	r3, [r0, #4]
 800104e:	4319      	orrs	r1, r3
 8001050:	6041      	str	r1, [r0, #4]
}
 8001052:	4770      	bx	lr

08001054 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8001054:	2220      	movs	r2, #32
 8001056:	6843      	ldr	r3, [r0, #4]
 8001058:	4393      	bics	r3, r2
 800105a:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800105c:	6843      	ldr	r3, [r0, #4]
 800105e:	4319      	orrs	r1, r3
 8001060:	6041      	str	r1, [r0, #4]
}
 8001062:	4770      	bx	lr

08001064 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001064:	2900      	cmp	r1, #0
 8001066:	d104      	bne.n	8001072 <USART_LINCmd+0xe>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8001068:	6842      	ldr	r2, [r0, #4]
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <USART_LINCmd+0x1c>)
 800106c:	4013      	ands	r3, r2
 800106e:	6043      	str	r3, [r0, #4]
  }
}
 8001070:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	6843      	ldr	r3, [r0, #4]
 8001076:	01d2      	lsls	r2, r2, #7
 8001078:	4313      	orrs	r3, r2
 800107a:	6043      	str	r3, [r0, #4]
 800107c:	e7f8      	b.n	8001070 <USART_LINCmd+0xc>
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	ffffbfff 	.word	0xffffbfff

08001084 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001084:	2900      	cmp	r1, #0
 8001086:	d104      	bne.n	8001092 <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8001088:	2208      	movs	r2, #8
 800108a:	6883      	ldr	r3, [r0, #8]
 800108c:	4393      	bics	r3, r2
 800108e:	6083      	str	r3, [r0, #8]
  }
}
 8001090:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001092:	2308      	movs	r3, #8
 8001094:	6882      	ldr	r2, [r0, #8]
 8001096:	4313      	orrs	r3, r2
 8001098:	6083      	str	r3, [r0, #8]
 800109a:	e7f9      	b.n	8001090 <USART_HalfDuplexCmd+0xc>

0800109c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	8a03      	ldrh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80010a0:	0209      	lsls	r1, r1, #8
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80010a2:	4013      	ands	r3, r2
 80010a4:	8203      	strh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80010a6:	8a03      	ldrh	r3, [r0, #16]
 80010a8:	4319      	orrs	r1, r3
 80010aa:	8201      	strh	r1, [r0, #16]
}
 80010ac:	4770      	bx	lr
 80010ae:	46c0      	nop			; (mov r8, r8)

080010b0 <USART_SmartCardCmd>:
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d104      	bne.n	80010be <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 80010b4:	2220      	movs	r2, #32
 80010b6:	6883      	ldr	r3, [r0, #8]
 80010b8:	4393      	bics	r3, r2
 80010ba:	6083      	str	r3, [r0, #8]
  }
}
 80010bc:	4770      	bx	lr
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80010be:	2320      	movs	r3, #32
 80010c0:	6882      	ldr	r2, [r0, #8]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	6083      	str	r3, [r0, #8]
 80010c6:	e7f9      	b.n	80010bc <USART_SmartCardCmd+0xc>

080010c8 <USART_SmartCardNACKCmd>:
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010c8:	2900      	cmp	r1, #0
 80010ca:	d104      	bne.n	80010d6 <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 80010cc:	2210      	movs	r2, #16
 80010ce:	6883      	ldr	r3, [r0, #8]
 80010d0:	4393      	bics	r3, r2
 80010d2:	6083      	str	r3, [r0, #8]
  }
}
 80010d4:	4770      	bx	lr
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80010d6:	2310      	movs	r3, #16
 80010d8:	6882      	ldr	r2, [r0, #8]
 80010da:	4313      	orrs	r3, r2
 80010dc:	6083      	str	r3, [r0, #8]
 80010de:	e7f9      	b.n	80010d4 <USART_SmartCardNACKCmd+0xc>

080010e0 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 80010e0:	6882      	ldr	r2, [r0, #8]
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 80010e4:	0449      	lsls	r1, r1, #17
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 80010e6:	4013      	ands	r3, r2
 80010e8:	6083      	str	r3, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 80010ea:	6883      	ldr	r3, [r0, #8]
 80010ec:	4319      	orrs	r1, r3
 80010ee:	6081      	str	r1, [r0, #8]
}
 80010f0:	4770      	bx	lr
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	fff1ffff 	.word	0xfff1ffff

080010f8 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 80010f8:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 80010fa:	0609      	lsls	r1, r1, #24
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	6143      	str	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8001102:	6943      	ldr	r3, [r0, #20]
 8001104:	4319      	orrs	r1, r3
 8001106:	6141      	str	r1, [r0, #20]
}
 8001108:	4770      	bx	lr
 800110a:	46c0      	nop			; (mov r8, r8)

0800110c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 800110c:	2204      	movs	r2, #4
 800110e:	6883      	ldr	r3, [r0, #8]
 8001110:	4393      	bics	r3, r2
 8001112:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8001114:	6883      	ldr	r3, [r0, #8]
 8001116:	4319      	orrs	r1, r3
 8001118:	6081      	str	r1, [r0, #8]
}
 800111a:	4770      	bx	lr

0800111c <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800111c:	2900      	cmp	r1, #0
 800111e:	d104      	bne.n	800112a <USART_IrDACmd+0xe>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8001120:	2202      	movs	r2, #2
 8001122:	6883      	ldr	r3, [r0, #8]
 8001124:	4393      	bics	r3, r2
 8001126:	6083      	str	r3, [r0, #8]
  }
}
 8001128:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800112a:	2302      	movs	r3, #2
 800112c:	6882      	ldr	r2, [r0, #8]
 800112e:	4313      	orrs	r3, r2
 8001130:	6083      	str	r3, [r0, #8]
 8001132:	e7f9      	b.n	8001128 <USART_IrDACmd+0xc>

08001134 <USART_DECmd>:
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001134:	2900      	cmp	r1, #0
 8001136:	d104      	bne.n	8001142 <USART_DECmd+0xe>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8001138:	6882      	ldr	r2, [r0, #8]
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <USART_DECmd+0x1c>)
 800113c:	4013      	ands	r3, r2
 800113e:	6083      	str	r3, [r0, #8]
  }
}
 8001140:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	6883      	ldr	r3, [r0, #8]
 8001146:	01d2      	lsls	r2, r2, #7
 8001148:	4313      	orrs	r3, r2
 800114a:	6083      	str	r3, [r0, #8]
 800114c:	e7f8      	b.n	8001140 <USART_DECmd+0xc>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	ffffbfff 	.word	0xffffbfff

08001154 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8001154:	6882      	ldr	r2, [r0, #8]
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <USART_DEPolarityConfig+0x10>)
 8001158:	4013      	ands	r3, r2
 800115a:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 800115c:	6883      	ldr	r3, [r0, #8]
 800115e:	4319      	orrs	r1, r3
 8001160:	6081      	str	r1, [r0, #8]
}
 8001162:	4770      	bx	lr
 8001164:	ffff7fff 	.word	0xffff7fff

08001168 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8001168:	6802      	ldr	r2, [r0, #0]
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 800116c:	0549      	lsls	r1, r1, #21
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 800116e:	4013      	ands	r3, r2
 8001170:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8001172:	6803      	ldr	r3, [r0, #0]
 8001174:	4319      	orrs	r1, r3
 8001176:	6001      	str	r1, [r0, #0]
}
 8001178:	4770      	bx	lr
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	fc1fffff 	.word	0xfc1fffff

08001180 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8001180:	6802      	ldr	r2, [r0, #0]
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8001184:	0409      	lsls	r1, r1, #16
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8001186:	4013      	ands	r3, r2
 8001188:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 800118a:	6803      	ldr	r3, [r0, #0]
 800118c:	4319      	orrs	r1, r3
 800118e:	6001      	str	r1, [r0, #0]
}
 8001190:	4770      	bx	lr
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	ffe0ffff 	.word	0xffe0ffff

08001198 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001198:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800119a:	2a00      	cmp	r2, #0
 800119c:	d102      	bne.n	80011a4 <USART_DMACmd+0xc>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 800119e:	438b      	bics	r3, r1
 80011a0:	6083      	str	r3, [r0, #8]
  }
}
 80011a2:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80011a4:	4319      	orrs	r1, r3
 80011a6:	6081      	str	r1, [r0, #8]
 80011a8:	e7fb      	b.n	80011a2 <USART_DMACmd+0xa>
 80011aa:	46c0      	nop			; (mov r8, r8)

080011ac <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 80011ac:	6882      	ldr	r2, [r0, #8]
 80011ae:	4b03      	ldr	r3, [pc, #12]	; (80011bc <USART_DMAReceptionErrorConfig+0x10>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 80011b4:	6883      	ldr	r3, [r0, #8]
 80011b6:	4319      	orrs	r1, r3
 80011b8:	6081      	str	r1, [r0, #8]
}
 80011ba:	4770      	bx	lr
 80011bc:	ffffdfff 	.word	0xffffdfff

080011c0 <USART_ITConfig>:
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80011c0:	23ff      	movs	r3, #255	; 0xff
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80011c2:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80011c4:	b28c      	uxth	r4, r1
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80011c6:	4019      	ands	r1, r3
  itmask = (((uint32_t)0x01) << itpos);
 80011c8:	2301      	movs	r3, #1
 80011ca:	408b      	lsls	r3, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80011cc:	0a24      	lsrs	r4, r4, #8
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80011ce:	1c19      	adds	r1, r3, #0
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 80011d0:	2c02      	cmp	r4, #2
 80011d2:	d00a      	beq.n	80011ea <USART_ITConfig+0x2a>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80011d4:	2c03      	cmp	r4, #3
 80011d6:	d00a      	beq.n	80011ee <USART_ITConfig+0x2e>
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80011d8:	6803      	ldr	r3, [r0, #0]
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80011da:	2a00      	cmp	r2, #0
 80011dc:	d102      	bne.n	80011e4 <USART_ITConfig+0x24>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80011de:	438b      	bics	r3, r1
 80011e0:	6003      	str	r3, [r0, #0]
  }
}
 80011e2:	bd10      	pop	{r4, pc}
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80011e4:	4319      	orrs	r1, r3
 80011e6:	6001      	str	r1, [r0, #0]
 80011e8:	e7fb      	b.n	80011e2 <USART_ITConfig+0x22>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 80011ea:	3004      	adds	r0, #4
 80011ec:	e7f4      	b.n	80011d8 <USART_ITConfig+0x18>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
  {
    usartxbase += 0x08;
 80011ee:	3008      	adds	r0, #8
 80011f0:	e7f2      	b.n	80011d8 <USART_ITConfig+0x18>
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 80011f4:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d102      	bne.n	8001200 <USART_RequestCmd+0xc>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 80011fa:	438b      	bics	r3, r1
 80011fc:	8303      	strh	r3, [r0, #24]
  }
}
 80011fe:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8001200:	4319      	orrs	r1, r3
 8001202:	b289      	uxth	r1, r1
 8001204:	8301      	strh	r1, [r0, #24]
 8001206:	e7fa      	b.n	80011fe <USART_RequestCmd+0xa>

08001208 <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8001208:	6882      	ldr	r2, [r0, #8]
 800120a:	4b03      	ldr	r3, [pc, #12]	; (8001218 <USART_OverrunDetectionConfig+0x10>)
 800120c:	4013      	ands	r3, r2
 800120e:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8001210:	6883      	ldr	r3, [r0, #8]
 8001212:	4319      	orrs	r1, r3
 8001214:	6081      	str	r1, [r0, #8]
}
 8001216:	4770      	bx	lr
 8001218:	ffffefff 	.word	0xffffefff

0800121c <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800121c:	69c0      	ldr	r0, [r0, #28]
 800121e:	4008      	ands	r0, r1
 8001220:	1e41      	subs	r1, r0, #1
 8001222:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001224:	b2c0      	uxtb	r0, r0
}
 8001226:	4770      	bx	lr

08001228 <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8001228:	6201      	str	r1, [r0, #32]
}
 800122a:	4770      	bx	lr

0800122c <USART_GetITStatus>:
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800122c:	23ff      	movs	r3, #255	; 0xff
 800122e:	400b      	ands	r3, r1
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001230:	b510      	push	{r4, lr}
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001232:	1c1c      	adds	r4, r3, #0
  itmask = (uint32_t)0x01 << itmask;
 8001234:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001236:	b28a      	uxth	r2, r1
 8001238:	0a12      	lsrs	r2, r2, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800123a:	40a3      	lsls	r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800123c:	2a01      	cmp	r2, #1
 800123e:	d010      	beq.n	8001262 <USART_GetITStatus+0x36>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001240:	2a02      	cmp	r2, #2
 8001242:	d011      	beq.n	8001268 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001244:	6882      	ldr	r2, [r0, #8]
 8001246:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 8001248:	69c2      	ldr	r2, [r0, #28]
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800124a:	2000      	movs	r0, #0
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <USART_GetITStatus+0x34>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
 8001250:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
 8001252:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 8001254:	408b      	lsls	r3, r1
  bitpos &= USARTx->ISR;
 8001256:	401a      	ands	r2, r3
 8001258:	1c10      	adds	r0, r2, #0
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800125a:	1e41      	subs	r1, r0, #1
 800125c:	4188      	sbcs	r0, r1
  {
    bitstatus = SET;
 800125e:	b2c0      	uxtb	r0, r0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8001260:	bd10      	pop	{r4, pc}
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8001262:	6802      	ldr	r2, [r0, #0]
 8001264:	4013      	ands	r3, r2
 8001266:	e7ef      	b.n	8001248 <USART_GetITStatus+0x1c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
 8001268:	6842      	ldr	r2, [r0, #4]
 800126a:	4013      	ands	r3, r2
 800126c:	e7ec      	b.n	8001248 <USART_GetITStatus+0x1c>
 800126e:	46c0      	nop			; (mov r8, r8)

08001270 <USART_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8001270:	2301      	movs	r3, #1
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8001272:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8001274:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 8001276:	6203      	str	r3, [r0, #32]
}
 8001278:	4770      	bx	lr
 800127a:	46c0      	nop			; (mov r8, r8)

0800127c <u8g_DrawHBitmap>:
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	1c17      	adds	r7, r2, #0
 8001282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001284:	1c06      	adds	r6, r0, #0
  while( cnt > 0 )
 8001286:	1c14      	adds	r4, r2, #0
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 8001288:	9103      	str	r1, [sp, #12]
 800128a:	18d5      	adds	r5, r2, r3
 800128c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800128e:	1ae1      	subs	r1, r4, r3
 8001290:	9b03      	ldr	r3, [sp, #12]
 8001292:	00c9      	lsls	r1, r1, #3
 8001294:	1859      	adds	r1, r3, r1
 8001296:	b2c9      	uxtb	r1, r1
  while( cnt > 0 )
 8001298:	42ac      	cmp	r4, r5
 800129a:	d008      	beq.n	80012ae <u8g_DrawHBitmap+0x32>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 800129c:	7823      	ldrb	r3, [r4, #0]
 800129e:	1c30      	adds	r0, r6, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	1c3a      	adds	r2, r7, #0
 80012a4:	2300      	movs	r3, #0
 80012a6:	f001 fb68 	bl	800297a <u8g_Draw8Pixel>
    bitmap++;
 80012aa:	3401      	adds	r4, #1
 80012ac:	e7ee      	b.n	800128c <u8g_DrawHBitmap+0x10>
    cnt--;
    x+=8;
  }
}
 80012ae:	b005      	add	sp, #20
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012b2 <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 80012b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b4:	1c1d      	adds	r5, r3, #0
 80012b6:	1c14      	adds	r4, r2, #0
 80012b8:	b085      	sub	sp, #20
 80012ba:	ab0a      	add	r3, sp, #40	; 0x28
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	1c06      	adds	r6, r0, #0
 80012c0:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 80012c2:	9a03      	ldr	r2, [sp, #12]
 80012c4:	00eb      	lsls	r3, r5, #3
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	1c22      	adds	r2, r4, #0
    x+=8;
  }
}

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 80012cc:	1c0f      	adds	r7, r1, #0
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 80012ce:	f000 f911 	bl	80014f4 <u8g_IsBBXIntersection>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d014      	beq.n	8001300 <u8g_DrawBitmap+0x4e>
 80012d6:	9b03      	ldr	r3, [sp, #12]
 80012d8:	18e3      	adds	r3, r4, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	9303      	str	r3, [sp, #12]
    return;
  while( h > 0 )
 80012de:	9b03      	ldr	r3, [sp, #12]
 80012e0:	429c      	cmp	r4, r3
 80012e2:	d00d      	beq.n	8001300 <u8g_DrawBitmap+0x4e>
  {
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 80012e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012e6:	1c22      	adds	r2, r4, #0
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	1c30      	adds	r0, r6, #0
 80012ec:	1c2b      	adds	r3, r5, #0
 80012ee:	1c39      	adds	r1, r7, #0
 80012f0:	f7ff ffc4 	bl	800127c <u8g_DrawHBitmap>
 80012f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bitmap += cnt;
    y++;
 80012f6:	3401      	adds	r4, #1
 80012f8:	195b      	adds	r3, r3, r5
 80012fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80012fc:	b2e4      	uxtb	r4, r4
 80012fe:	e7ee      	b.n	80012de <u8g_DrawBitmap+0x2c>
    h--;
  }
}
 8001300:	b005      	add	sp, #20
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001304 <u8g_DrawHBitmapP>:


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b085      	sub	sp, #20
 8001308:	1c17      	adds	r7, r2, #0
 800130a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800130c:	1c06      	adds	r6, r0, #0
  while( cnt > 0 )
 800130e:	1c14      	adds	r4, r2, #0
  }
}


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8001310:	9103      	str	r1, [sp, #12]
 8001312:	18d5      	adds	r5, r2, r3
 8001314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001316:	1ae1      	subs	r1, r4, r3
 8001318:	9b03      	ldr	r3, [sp, #12]
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	1859      	adds	r1, r3, r1
 800131e:	b2c9      	uxtb	r1, r1
  while( cnt > 0 )
 8001320:	42ac      	cmp	r4, r5
 8001322:	d008      	beq.n	8001336 <u8g_DrawHBitmapP+0x32>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
 8001324:	7823      	ldrb	r3, [r4, #0]
 8001326:	1c30      	adds	r0, r6, #0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	1c3a      	adds	r2, r7, #0
 800132c:	2300      	movs	r3, #0
 800132e:	f001 fb24 	bl	800297a <u8g_Draw8Pixel>
    bitmap++;
 8001332:	3401      	adds	r4, #1
 8001334:	e7ee      	b.n	8001314 <u8g_DrawHBitmapP+0x10>
    cnt--;
    x+=8;
  }
}
 8001336:	b005      	add	sp, #20
 8001338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800133a <u8g_DrawBitmapP>:

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 800133a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133c:	1c1d      	adds	r5, r3, #0
 800133e:	1c14      	adds	r4, r2, #0
 8001340:	b085      	sub	sp, #20
 8001342:	ab0a      	add	r3, sp, #40	; 0x28
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	1c06      	adds	r6, r0, #0
 8001348:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 800134a:	9a03      	ldr	r2, [sp, #12]
 800134c:	00eb      	lsls	r3, r5, #3
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	1c22      	adds	r2, r4, #0
    x+=8;
  }
}

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8001354:	1c0f      	adds	r7, r1, #0
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8001356:	f000 f8cd 	bl	80014f4 <u8g_IsBBXIntersection>
 800135a:	2800      	cmp	r0, #0
 800135c:	d014      	beq.n	8001388 <u8g_DrawBitmapP+0x4e>
 800135e:	9b03      	ldr	r3, [sp, #12]
 8001360:	18e3      	adds	r3, r4, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	9303      	str	r3, [sp, #12]
    return;
  while( h > 0 )
 8001366:	9b03      	ldr	r3, [sp, #12]
 8001368:	429c      	cmp	r4, r3
 800136a:	d00d      	beq.n	8001388 <u8g_DrawBitmapP+0x4e>
  {
    u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
 800136c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800136e:	1c22      	adds	r2, r4, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	1c30      	adds	r0, r6, #0
 8001374:	1c2b      	adds	r3, r5, #0
 8001376:	1c39      	adds	r1, r7, #0
 8001378:	f7ff ffc4 	bl	8001304 <u8g_DrawHBitmapP>
 800137c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bitmap += cnt;
    y++;
 800137e:	3401      	adds	r4, #1
 8001380:	195b      	adds	r3, r3, r5
 8001382:	930b      	str	r3, [sp, #44]	; 0x2c
 8001384:	b2e4      	uxtb	r4, r4
 8001386:	e7ee      	b.n	8001366 <u8g_DrawBitmapP+0x2c>
    h--;
  }
}
 8001388:	b005      	add	sp, #20
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800138c <u8g_DrawXBM>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	1c1d      	adds	r5, r3, #0
 8001390:	b08b      	sub	sp, #44	; 0x2c
 8001392:	ab10      	add	r3, sp, #64	; 0x40
 8001394:	781f      	ldrb	r7, [r3, #0]
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8001396:	1c2b      	adds	r3, r5, #0
 8001398:	9700      	str	r7, [sp, #0]
    } while ( w > 0 );
  }
}

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
 800139a:	9003      	str	r0, [sp, #12]
 800139c:	1c0e      	adds	r6, r1, #0
 800139e:	1c14      	adds	r4, r2, #0
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 80013a0:	f000 f8a8 	bl	80014f4 <u8g_IsBBXIntersection>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d049      	beq.n	800143c <u8g_DrawXBM+0xb0>

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
 80013a8:	1deb      	adds	r3, r5, #7
 80013aa:	b2db      	uxtb	r3, r3
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	19e7      	adds	r7, r4, r7
 80013b0:	9307      	str	r3, [sp, #28]
/*=========================================================================*/

static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
 80013b2:	3607      	adds	r6, #7
 80013b4:	b2fb      	uxtb	r3, r7
 80013b6:	9308      	str	r3, [sp, #32]
 80013b8:	b2f3      	uxtb	r3, r6
 80013ba:	9304      	str	r3, [sp, #16]
 80013bc:	9a04      	ldr	r2, [sp, #16]
 80013be:	08eb      	lsrs	r3, r5, #3
 80013c0:	9305      	str	r3, [sp, #20]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	18d3      	adds	r3, r2, r3
    x+=8;
  }
  if ( w > 0 )
  {
    d = *bitmap;
    x -= 7;
 80013c6:	3b07      	subs	r3, #7
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	9309      	str	r3, [sp, #36]	; 0x24
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  
  while( h > 0 )
 80013cc:	9b08      	ldr	r3, [sp, #32]
 80013ce:	429c      	cmp	r4, r3
 80013d0:	d034      	beq.n	800143c <u8g_DrawXBM+0xb0>
 80013d2:	1c2e      	adds	r6, r5, #0
 80013d4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80013d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80013d8:	1af9      	subs	r1, r7, r3
 80013da:	9b04      	ldr	r3, [sp, #16]
 80013dc:	00c9      	lsls	r1, r1, #3
 80013de:	1859      	adds	r1, r3, r1
 80013e0:	b2c9      	uxtb	r1, r1

static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
 80013e2:	2e07      	cmp	r6, #7
 80013e4:	d90a      	bls.n	80013fc <u8g_DrawXBM+0x70>
  {
    u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
 80013e6:	783b      	ldrb	r3, [r7, #0]
 80013e8:	9803      	ldr	r0, [sp, #12]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	1c22      	adds	r2, r4, #0
 80013ee:	2302      	movs	r3, #2
    bitmap++;
    w-= 8;
 80013f0:	3e08      	subs	r6, #8
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
  {
    u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
 80013f2:	f001 fac2 	bl	800297a <u8g_Draw8Pixel>
    bitmap++;
 80013f6:	3701      	adds	r7, #1
    w-= 8;
 80013f8:	b2f6      	uxtb	r6, r6
 80013fa:	e7ec      	b.n	80013d6 <u8g_DrawXBM+0x4a>
 80013fc:	9a05      	ldr	r2, [sp, #20]
 80013fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001400:	189b      	adds	r3, r3, r2
 8001402:	2207      	movs	r2, #7
 8001404:	402a      	ands	r2, r5
 8001406:	9206      	str	r2, [sp, #24]
    x+=8;
  }
  if ( w > 0 )
 8001408:	d010      	beq.n	800142c <u8g_DrawXBM+0xa0>
  {
    d = *bitmap;
 800140a:	2600      	movs	r6, #0
 800140c:	781f      	ldrb	r7, [r3, #0]
 800140e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001410:	1999      	adds	r1, r3, r6
 8001412:	b2c9      	uxtb	r1, r1
    x -= 7;
    do
    {
      if ( d & 1 )
 8001414:	07fb      	lsls	r3, r7, #31
 8001416:	d503      	bpl.n	8001420 <u8g_DrawXBM+0x94>
        u8g_DrawPixel(u8g, x, y);
 8001418:	9803      	ldr	r0, [sp, #12]
 800141a:	1c22      	adds	r2, r4, #0
 800141c:	f001 faa5 	bl	800296a <u8g_DrawPixel>
 8001420:	3601      	adds	r6, #1
      x++;
      w--;
      d >>= 1;      
    } while ( w > 0 );
 8001422:	9a06      	ldr	r2, [sp, #24]
 8001424:	b2f3      	uxtb	r3, r6
    {
      if ( d & 1 )
        u8g_DrawPixel(u8g, x, y);
      x++;
      w--;
      d >>= 1;      
 8001426:	087f      	lsrs	r7, r7, #1
    } while ( w > 0 );
 8001428:	429a      	cmp	r2, r3
 800142a:	d1f0      	bne.n	800140e <u8g_DrawXBM+0x82>
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 800142c:	9a07      	ldr	r2, [sp, #28]
 800142e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001430:	4694      	mov	ip, r2
    y++;
 8001432:	3401      	adds	r4, #1
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8001434:	4463      	add	r3, ip
 8001436:	9311      	str	r3, [sp, #68]	; 0x44
    y++;
 8001438:	b2e4      	uxtb	r4, r4
 800143a:	e7c7      	b.n	80013cc <u8g_DrawXBM+0x40>
    h--;
  }
}
 800143c:	b00b      	add	sp, #44	; 0x2c
 800143e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001440 <u8g_DrawXBMP>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	1c1d      	adds	r5, r3, #0
 8001444:	b08b      	sub	sp, #44	; 0x2c
 8001446:	ab10      	add	r3, sp, #64	; 0x40
 8001448:	781f      	ldrb	r7, [r3, #0]
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 800144a:	1c2b      	adds	r3, r5, #0
 800144c:	9700      	str	r7, [sp, #0]
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 800144e:	9003      	str	r0, [sp, #12]
 8001450:	1c0e      	adds	r6, r1, #0
 8001452:	1c14      	adds	r4, r2, #0
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8001454:	f000 f84e 	bl	80014f4 <u8g_IsBBXIntersection>
 8001458:	2800      	cmp	r0, #0
 800145a:	d049      	beq.n	80014f0 <u8g_DrawXBMP+0xb0>

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
 800145c:	1deb      	adds	r3, r5, #7
 800145e:	b2db      	uxtb	r3, r3
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	19e7      	adds	r7, r4, r7
 8001464:	9307      	str	r3, [sp, #28]
}

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
 8001466:	3607      	adds	r6, #7
 8001468:	b2fb      	uxtb	r3, r7
 800146a:	9308      	str	r3, [sp, #32]
 800146c:	b2f3      	uxtb	r3, r6
 800146e:	9304      	str	r3, [sp, #16]
 8001470:	9a04      	ldr	r2, [sp, #16]
 8001472:	08eb      	lsrs	r3, r5, #3
 8001474:	9305      	str	r3, [sp, #20]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	18d3      	adds	r3, r2, r3
    x+=8;
  }
  if ( w > 0 )
  {
    d = u8g_pgm_read(bitmap);
    x -= 7;
 800147a:	3b07      	subs	r3, #7
 800147c:	b2db      	uxtb	r3, r3
 800147e:	9309      	str	r3, [sp, #36]	; 0x24
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
 8001480:	9b08      	ldr	r3, [sp, #32]
 8001482:	429c      	cmp	r4, r3
 8001484:	d034      	beq.n	80014f0 <u8g_DrawXBMP+0xb0>
 8001486:	1c2e      	adds	r6, r5, #0
 8001488:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800148a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800148c:	1af9      	subs	r1, r7, r3
 800148e:	9b04      	ldr	r3, [sp, #16]
 8001490:	00c9      	lsls	r1, r1, #3
 8001492:	1859      	adds	r1, r3, r1
 8001494:	b2c9      	uxtb	r1, r1

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
 8001496:	2e07      	cmp	r6, #7
 8001498:	d90a      	bls.n	80014b0 <u8g_DrawXBMP+0x70>
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
 800149a:	783b      	ldrb	r3, [r7, #0]
 800149c:	9803      	ldr	r0, [sp, #12]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	1c22      	adds	r2, r4, #0
 80014a2:	2302      	movs	r3, #2
    bitmap++;
    w-= 8;
 80014a4:	3e08      	subs	r6, #8
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
 80014a6:	f001 fa68 	bl	800297a <u8g_Draw8Pixel>
    bitmap++;
 80014aa:	3701      	adds	r7, #1
    w-= 8;
 80014ac:	b2f6      	uxtb	r6, r6
 80014ae:	e7ec      	b.n	800148a <u8g_DrawXBMP+0x4a>
 80014b0:	9a05      	ldr	r2, [sp, #20]
 80014b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	2207      	movs	r2, #7
 80014b8:	402a      	ands	r2, r5
 80014ba:	9206      	str	r2, [sp, #24]
    x+=8;
  }
  if ( w > 0 )
 80014bc:	d010      	beq.n	80014e0 <u8g_DrawXBMP+0xa0>
  {
    d = u8g_pgm_read(bitmap);
 80014be:	2600      	movs	r6, #0
 80014c0:	781f      	ldrb	r7, [r3, #0]
 80014c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014c4:	1999      	adds	r1, r3, r6
 80014c6:	b2c9      	uxtb	r1, r1
    x -= 7;
    do
    {
      if ( d & 1 )
 80014c8:	07fb      	lsls	r3, r7, #31
 80014ca:	d503      	bpl.n	80014d4 <u8g_DrawXBMP+0x94>
        u8g_DrawPixel(u8g, x, y);
 80014cc:	9803      	ldr	r0, [sp, #12]
 80014ce:	1c22      	adds	r2, r4, #0
 80014d0:	f001 fa4b 	bl	800296a <u8g_DrawPixel>
 80014d4:	3601      	adds	r6, #1
      x++;
      w--;
      d >>= 1;      
    } while ( w > 0 );
 80014d6:	9a06      	ldr	r2, [sp, #24]
 80014d8:	b2f3      	uxtb	r3, r6
    {
      if ( d & 1 )
        u8g_DrawPixel(u8g, x, y);
      x++;
      w--;
      d >>= 1;      
 80014da:	087f      	lsrs	r7, r7, #1
    } while ( w > 0 );
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1f0      	bne.n	80014c2 <u8g_DrawXBMP+0x82>
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 80014e0:	9a07      	ldr	r2, [sp, #28]
 80014e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80014e4:	4694      	mov	ip, r2
    y++;
 80014e6:	3401      	adds	r4, #1
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 80014e8:	4463      	add	r3, ip
 80014ea:	9311      	str	r3, [sp, #68]	; 0x44
    y++;
 80014ec:	b2e4      	uxtb	r4, r4
 80014ee:	e7c7      	b.n	8001480 <u8g_DrawXBMP+0x40>
    h--;
  }
}
 80014f0:	b00b      	add	sp, #44	; 0x2c
 80014f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f4 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	1c05      	adds	r5, r0, #0
 80014f8:	a804      	add	r0, sp, #16
 80014fa:	7804      	ldrb	r4, [r0, #0]
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 80014fc:	1c28      	adds	r0, r5, #0
 80014fe:	3049      	adds	r0, #73	; 0x49
 8001500:	7806      	ldrb	r6, [r0, #0]
 8001502:	3002      	adds	r0, #2
 8001504:	3c01      	subs	r4, #1
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8001506:	7800      	ldrb	r0, [r0, #0]
uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
 8001508:	1914      	adds	r4, r2, r4
 800150a:	b2e4      	uxtb	r4, r4
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 800150c:	4290      	cmp	r0, r2
 800150e:	d305      	bcc.n	800151c <u8g_IsBBXIntersection+0x28>
  {
    if ( v1 >= a0 )
 8001510:	42b4      	cmp	r4, r6
 8001512:	d208      	bcs.n	8001526 <u8g_IsBBXIntersection+0x32>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8001514:	2000      	movs	r0, #0
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
 8001516:	42a2      	cmp	r2, r4
 8001518:	d919      	bls.n	800154e <u8g_IsBBXIntersection+0x5a>
 800151a:	e004      	b.n	8001526 <u8g_IsBBXIntersection+0x32>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 800151c:	2000      	movs	r0, #0
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
 800151e:	42b4      	cmp	r4, r6
 8001520:	d315      	bcc.n	800154e <u8g_IsBBXIntersection+0x5a>
    {
      if ( v0 > v1 )
 8001522:	42a2      	cmp	r2, r4
 8001524:	d913      	bls.n	800154e <u8g_IsBBXIntersection+0x5a>
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8001526:	1c2a      	adds	r2, r5, #0
 8001528:	354a      	adds	r5, #74	; 0x4a
 800152a:	3b01      	subs	r3, #1
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 800152c:	7828      	ldrb	r0, [r5, #0]
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 800152e:	18cb      	adds	r3, r1, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8001530:	3248      	adds	r2, #72	; 0x48
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 8001532:	b2db      	uxtb	r3, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8001534:	7812      	ldrb	r2, [r2, #0]
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8001536:	4288      	cmp	r0, r1
 8001538:	d303      	bcc.n	8001542 <u8g_IsBBXIntersection+0x4e>
  {
    if ( v1 >= a0 )
    {
      return 1;
 800153a:	2001      	movs	r0, #1
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
 800153c:	4293      	cmp	r3, r2
 800153e:	d206      	bcs.n	800154e <u8g_IsBBXIntersection+0x5a>
 8001540:	e002      	b.n	8001548 <u8g_IsBBXIntersection+0x54>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8001542:	2000      	movs	r0, #0
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
 8001544:	4293      	cmp	r3, r2
 8001546:	d302      	bcc.n	800154e <u8g_IsBBXIntersection+0x5a>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8001548:	428b      	cmp	r3, r1
 800154a:	419b      	sbcs	r3, r3
 800154c:	4258      	negs	r0, r3
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
 800154e:	bd70      	pop	{r4, r5, r6, pc}

08001550 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8001550:	1841      	adds	r1, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8001552:	7808      	ldrb	r0, [r1, #0]
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8001554:	784b      	ldrb	r3, [r1, #1]
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    pos <<= 8;
 8001556:	0200      	lsls	r0, r0, #8
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8001558:	18c0      	adds	r0, r0, r3
    return pos;
 800155a:	b280      	uxth	r0, r0
}
 800155c:	4770      	bx	lr

0800155e <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 800155e:	2000      	movs	r0, #0
 8001560:	4770      	bx	lr

08001562 <u8g_font_calc_vref_bottom>:


u8g_uint_t u8g_font_calc_vref_bottom(u8g_t *u8g)
{
  /* y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent); */
  return (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent);
 8001562:	302a      	adds	r0, #42	; 0x2a
 8001564:	7800      	ldrb	r0, [r0, #0]
}
 8001566:	4770      	bx	lr

08001568 <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
 8001568:	3029      	adds	r0, #41	; 0x29
 800156a:	7800      	ldrb	r0, [r0, #0]
  tmp++;
 800156c:	3001      	adds	r0, #1
  return tmp;
 800156e:	b2c0      	uxtb	r0, r0
}
 8001570:	4770      	bx	lr

08001572 <u8g_font_calc_vref_center>:

u8g_uint_t u8g_font_calc_vref_center(u8g_t *u8g)
{
  int8_t tmp;
  tmp = u8g->font_ref_ascent;
  tmp -= u8g->font_ref_descent;
 8001572:	1c03      	adds	r3, r0, #0
}

u8g_uint_t u8g_font_calc_vref_center(u8g_t *u8g)
{
  int8_t tmp;
  tmp = u8g->font_ref_ascent;
 8001574:	3029      	adds	r0, #41	; 0x29
  tmp -= u8g->font_ref_descent;
 8001576:	332a      	adds	r3, #42	; 0x2a
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	7803      	ldrb	r3, [r0, #0]
 800157c:	1a9b      	subs	r3, r3, r2
  tmp /= 2;
 800157e:	b25b      	sxtb	r3, r3
 8001580:	0fd8      	lsrs	r0, r3, #31
 8001582:	18c0      	adds	r0, r0, r3
 8001584:	1043      	asrs	r3, r0, #1
  tmp += u8g->font_ref_descent;  
 8001586:	18d0      	adds	r0, r2, r3
  /* y += (u8g_uint_t)(u8g_int_t)(tmp); */
  return tmp;
 8001588:	b2c0      	uxtb	r0, r0
}
 800158a:	4770      	bx	lr

0800158c <u8g_font_get_char>:
/*========================================================================*/
/* string pixel width calculation */

char u8g_font_get_char(const void *s)
{
  return *(const char *)(s);
 800158c:	7800      	ldrb	r0, [r0, #0]
}
 800158e:	4770      	bx	lr

08001590 <u8g_font_get_charP>:

char u8g_font_get_charP(const void *s)
{
  return u8g_pgm_read(s);
 8001590:	7800      	ldrb	r0, [r0, #0]
}
 8001592:	4770      	bx	lr

08001594 <u8g_font_GetFormat.isra.0>:

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
 8001594:	4770      	bx	lr

08001596 <u8g_font_GetFontGlyphStructureSize.isra.1>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
 8001596:	b508      	push	{r3, lr}
{
  switch(u8g_font_GetFormat(font))
 8001598:	f7ff fffc 	bl	8001594 <u8g_font_GetFormat.isra.0>
 800159c:	2800      	cmp	r0, #0
 800159e:	d003      	beq.n	80015a8 <u8g_font_GetFontGlyphStructureSize.isra.1+0x12>
 80015a0:	2802      	cmp	r0, #2
 80015a2:	d001      	beq.n	80015a8 <u8g_font_GetFontGlyphStructureSize.isra.1+0x12>
  {
    case 0: return 6;
    case 1: return 3;
 80015a4:	2003      	movs	r0, #3
 80015a6:	e000      	b.n	80015aa <u8g_font_GetFontGlyphStructureSize.isra.1+0x14>
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
  {
    case 0: return 6;
 80015a8:	2006      	movs	r0, #6
    case 1: return 3;
    case 2: return 6;
  }
  return 3;
}
 80015aa:	bd08      	pop	{r3, pc}

080015ac <u8g_font_GetCapitalAHeight>:
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
  return u8g_font_get_byte(font, 5);
 80015ac:	7940      	ldrb	r0, [r0, #5]
}
 80015ae:	4770      	bx	lr

080015b0 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 80015b0:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 6);
 80015b2:	2106      	movs	r1, #6
 80015b4:	f7ff ffcc 	bl	8001550 <u8g_font_get_word>
}
 80015b8:	bd08      	pop	{r3, pc}

080015ba <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 80015ba:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 8);
 80015bc:	2108      	movs	r1, #8
 80015be:	f7ff ffc7 	bl	8001550 <u8g_font_get_word>
}
 80015c2:	bd08      	pop	{r3, pc}

080015c4 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
 80015c4:	7a80      	ldrb	r0, [r0, #10]
}
 80015c6:	4770      	bx	lr

080015c8 <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
 80015c8:	7ac0      	ldrb	r0, [r0, #11]
}
 80015ca:	4770      	bx	lr

080015cc <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
  return u8g_font_get_byte(font, 12);
 80015cc:	7b00      	ldrb	r0, [r0, #12]
 80015ce:	b240      	sxtb	r0, r0
}
 80015d0:	4770      	bx	lr

080015d2 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
  return u8g_font_get_byte(font, 13);
 80015d2:	7b40      	ldrb	r0, [r0, #13]
 80015d4:	b240      	sxtb	r0, r0
}
 80015d6:	4770      	bx	lr

080015d8 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
  return u8g_font_get_byte(font, 14);
 80015d8:	7b80      	ldrb	r0, [r0, #14]
 80015da:	b240      	sxtb	r0, r0
}
 80015dc:	4770      	bx	lr

080015de <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
  return u8g_font_get_byte(font, 15);
 80015de:	7bc0      	ldrb	r0, [r0, #15]
 80015e0:	b240      	sxtb	r0, r0
}
 80015e2:	4770      	bx	lr

080015e4 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
  return u8g_font_get_byte(font, 16);
 80015e4:	7c00      	ldrb	r0, [r0, #16]
 80015e6:	b240      	sxtb	r0, r0
}
 80015e8:	4770      	bx	lr

080015ea <u8g_font_GetSize>:
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
}

/* calculate the overall length of the font, only used to create the picture for the google wiki */
size_t u8g_font_GetSize(const void *font)
{
 80015ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ec:	7805      	ldrb	r5, [r0, #0]
 80015ee:	1c04      	adds	r4, r0, #0
  uint8_t *p = (uint8_t *)(font);
  uint8_t font_format = u8g_font_GetFormat(font);
 80015f0:	1c28      	adds	r0, r5, #0
 80015f2:	f7ff ffcf 	bl	8001594 <u8g_font_GetFormat.isra.0>
 80015f6:	1c07      	adds	r7, r0, #0
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(font);
 80015f8:	1c28      	adds	r0, r5, #0
 80015fa:	f7ff ffcc 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
 80015fe:	1c06      	adds	r6, r0, #0
  uint8_t start, end;
  uint8_t i;
  uint8_t mask = 255;
  
  start = u8g_font_GetFontStartEncoding(font);
 8001600:	1c20      	adds	r0, r4, #0
 8001602:	f7ff ffdf 	bl	80015c4 <u8g_font_GetFontStartEncoding>
 8001606:	1c05      	adds	r5, r0, #0
  end = u8g_font_GetFontEndEncoding(font);
 8001608:	1c20      	adds	r0, r4, #0
 800160a:	f7ff ffdd 	bl	80015c8 <u8g_font_GetFontEndEncoding>
  uint8_t *p = (uint8_t *)(font);
  uint8_t font_format = u8g_font_GetFormat(font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(font);
  uint8_t start, end;
  uint8_t i;
  uint8_t mask = 255;
 800160e:	21ff      	movs	r1, #255	; 0xff
  
  start = u8g_font_GetFontStartEncoding(font);
  end = u8g_font_GetFontEndEncoding(font);

  if ( font_format == 1 )
 8001610:	2f01      	cmp	r7, #1
 8001612:	d100      	bne.n	8001616 <u8g_font_GetSize+0x2c>
    mask = 15;
 8001614:	210f      	movs	r1, #15

  p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8001616:	1c23      	adds	r3, r4, #0
 8001618:	3311      	adds	r3, #17

  i = start;  
  for(;;)
  {
    if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	2aff      	cmp	r2, #255	; 0xff
 800161e:	d101      	bne.n	8001624 <u8g_font_GetSize+0x3a>
    {
      p += 1;
 8001620:	3301      	adds	r3, #1
 8001622:	e003      	b.n	800162c <u8g_font_GetSize+0x42>
    }
    else
    {
      p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8001624:	789a      	ldrb	r2, [r3, #2]
 8001626:	400a      	ands	r2, r1
 8001628:	1992      	adds	r2, r2, r6
      p += data_structure_size;
 800162a:	189b      	adds	r3, r3, r2
    }
    if ( i == end )
 800162c:	4285      	cmp	r5, r0
 800162e:	d002      	beq.n	8001636 <u8g_font_GetSize+0x4c>
      break;
    i++;
 8001630:	3501      	adds	r5, #1
 8001632:	b2ed      	uxtb	r5, r5
  }
 8001634:	e7f1      	b.n	800161a <u8g_font_GetSize+0x30>
    
  return p - (uint8_t *)font;
 8001636:	1b18      	subs	r0, r3, r4
}
 8001638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800163a <u8g_GetFontBBXWidth>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 800163a:	6883      	ldr	r3, [r0, #8]
/*========================================================================*/
/* u8g interface, font access */

uint8_t u8g_GetFontBBXWidth(u8g_t *u8g)
{
  return u8g_font_GetBBXWidth(u8g->font);
 800163c:	7858      	ldrb	r0, [r3, #1]
}
 800163e:	4770      	bx	lr

08001640 <u8g_GetFontBBXHeight>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001640:	6883      	ldr	r3, [r0, #8]
  return u8g_font_GetBBXWidth(u8g->font);
}

uint8_t u8g_GetFontBBXHeight(u8g_t *u8g)
{
  return u8g_font_GetBBXHeight(u8g->font);
 8001642:	7898      	ldrb	r0, [r3, #2]
}
 8001644:	4770      	bx	lr

08001646 <u8g_GetFontBBXOffX>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001646:	6883      	ldr	r3, [r0, #8]
}

int8_t u8g_GetFontBBXOffX(u8g_t *u8g) U8G_NOINLINE;
int8_t u8g_GetFontBBXOffX(u8g_t *u8g)
{
  return u8g_font_GetBBXOffX(u8g->font);
 8001648:	2003      	movs	r0, #3
 800164a:	5618      	ldrsb	r0, [r3, r0]
}
 800164c:	4770      	bx	lr

0800164e <u8g_GetFontBBXOffY>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 800164e:	6883      	ldr	r3, [r0, #8]
}

int8_t u8g_GetFontBBXOffY(u8g_t *u8g) U8G_NOINLINE;
int8_t u8g_GetFontBBXOffY(u8g_t *u8g)
{
  return u8g_font_GetBBXOffY(u8g->font);
 8001650:	2004      	movs	r0, #4
 8001652:	5618      	ldrsb	r0, [r3, r0]
}
 8001654:	4770      	bx	lr

08001656 <u8g_GetFontCapitalAHeight>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001656:	6883      	ldr	r3, [r0, #8]
}

uint8_t u8g_GetFontCapitalAHeight(u8g_t *u8g) U8G_NOINLINE; 
uint8_t u8g_GetFontCapitalAHeight(u8g_t *u8g)
{
  return u8g_font_GetCapitalAHeight(u8g->font);
 8001658:	7958      	ldrb	r0, [r3, #5]
}
 800165a:	4770      	bx	lr

0800165c <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *p = (uint8_t *)(u8g->font);
 800165e:	6886      	ldr	r6, [r0, #8]
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8001660:	b085      	sub	sp, #20
 8001662:	7835      	ldrb	r5, [r6, #0]
 8001664:	1c04      	adds	r4, r0, #0
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8001666:	1c28      	adds	r0, r5, #0
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8001668:	1c0f      	adds	r7, r1, #0
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 800166a:	f7ff ff93 	bl	8001594 <u8g_font_GetFormat.isra.0>
 800166e:	9000      	str	r0, [sp, #0]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8001670:	1c28      	adds	r0, r5, #0
 8001672:	f7ff ff90 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8001676:	23ff      	movs	r3, #255	; 0xff
 8001678:	9302      	str	r3, [sp, #8]

  if ( font_format == 1 )
 800167a:	9b00      	ldr	r3, [sp, #0]
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 800167c:	9003      	str	r0, [sp, #12]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <u8g_GetGlyph+0x2a>
    mask = 15;
 8001682:	230f      	movs	r3, #15
 8001684:	9302      	str	r3, [sp, #8]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8001686:	1c30      	adds	r0, r6, #0
 8001688:	f7ff ff9c 	bl	80015c4 <u8g_font_GetFontStartEncoding>
 800168c:	1c05      	adds	r5, r0, #0
  end = u8g_font_GetFontEndEncoding(u8g->font);
 800168e:	1c30      	adds	r0, r6, #0
 8001690:	f7ff ff9a 	bl	80015c8 <u8g_font_GetFontEndEncoding>
 8001694:	9001      	str	r0, [sp, #4]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8001696:	1c30      	adds	r0, r6, #0
 8001698:	f7ff ff8f 	bl	80015ba <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
 800169c:	2f60      	cmp	r7, #96	; 0x60
 800169e:	d904      	bls.n	80016aa <u8g_GetGlyph+0x4e>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d002      	beq.n	80016aa <u8g_GetGlyph+0x4e>
  {
    p+= pos;
 80016a4:	1836      	adds	r6, r6, r0
    start = 97;
 80016a6:	2561      	movs	r5, #97	; 0x61
 80016a8:	e00a      	b.n	80016c0 <u8g_GetGlyph+0x64>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 80016aa:	1c30      	adds	r0, r6, #0
 80016ac:	f7ff ff80 	bl	80015b0 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
 80016b0:	2f40      	cmp	r7, #64	; 0x40
 80016b2:	d904      	bls.n	80016be <u8g_GetGlyph+0x62>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d002      	beq.n	80016be <u8g_GetGlyph+0x62>
    {
      p+= pos;
 80016b8:	1836      	adds	r6, r6, r0
      start = 65;
 80016ba:	2541      	movs	r5, #65	; 0x41
 80016bc:	e000      	b.n	80016c0 <u8g_GetGlyph+0x64>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 80016be:	3611      	adds	r6, #17
  }
  
  if ( requested_encoding > end )
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	429f      	cmp	r7, r3
 80016c4:	d907      	bls.n	80016d6 <u8g_GetGlyph+0x7a>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 80016c6:	2600      	movs	r6, #0
  u8g->glyph_width = 0;
  u8g->glyph_height = 0;
 80016c8:	1c63      	adds	r3, r4, #1
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 80016ca:	7726      	strb	r6, [r4, #28]
  u8g->glyph_width = 0;
 80016cc:	77e6      	strb	r6, [r4, #31]
  u8g->glyph_height = 0;
 80016ce:	77de      	strb	r6, [r3, #31]
  u8g->glyph_x = 0;
 80016d0:	7766      	strb	r6, [r4, #29]
  u8g->glyph_y = 0;
 80016d2:	77a6      	strb	r6, [r4, #30]
 80016d4:	e028      	b.n	8001728 <u8g_GetGlyph+0xcc>
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
  }
  
  i = start;
  if ( i <= end )
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	429d      	cmp	r5, r3
 80016da:	d8f4      	bhi.n	80016c6 <u8g_GetGlyph+0x6a>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 80016dc:	7833      	ldrb	r3, [r6, #0]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d101      	bne.n	80016e6 <u8g_GetGlyph+0x8a>
      {
        p += 1;
 80016e2:	3601      	adds	r6, #1
 80016e4:	e029      	b.n	800173a <u8g_GetGlyph+0xde>
      }
      else
      {
        if ( i == requested_encoding )
 80016e6:	42bd      	cmp	r5, r7
 80016e8:	d121      	bne.n	800172e <u8g_GetGlyph+0xd2>
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 80016ea:	9a00      	ldr	r2, [sp, #0]
 80016ec:	1c61      	adds	r1, r4, #1
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d001      	beq.n	80016f6 <u8g_GetGlyph+0x9a>
 80016f2:	2a02      	cmp	r2, #2
 80016f4:	d109      	bne.n	800170a <u8g_GetGlyph+0xae>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 80016f6:	77e3      	strb	r3, [r4, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80016f8:	7873      	ldrb	r3, [r6, #1]
 80016fa:	77cb      	strb	r3, [r1, #31]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 80016fc:	78f3      	ldrb	r3, [r6, #3]
 80016fe:	7723      	strb	r3, [r4, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8001700:	7933      	ldrb	r3, [r6, #4]
 8001702:	7763      	strb	r3, [r4, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8001704:	7973      	ldrb	r3, [r6, #5]
 8001706:	77a3      	strb	r3, [r4, #30]
 8001708:	e00e      	b.n	8001728 <u8g_GetGlyph+0xcc>
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
      u8g->glyph_y =  tmp & 15;
 800170a:	220f      	movs	r2, #15
 800170c:	1c18      	adds	r0, r3, #0
 800170e:	4010      	ands	r0, r2
      u8g->glyph_y-=2;
      tmp >>= 4;
 8001710:	091b      	lsrs	r3, r3, #4
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
      u8g->glyph_y =  tmp & 15;
      u8g->glyph_y-=2;
 8001712:	3802      	subs	r0, #2
 8001714:	77a0      	strb	r0, [r4, #30]
      tmp >>= 4;
      u8g->glyph_x =  tmp;
 8001716:	7763      	strb	r3, [r4, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8001718:	7873      	ldrb	r3, [r6, #1]
      u8g->glyph_height =  tmp & 15;
 800171a:	401a      	ands	r2, r3
      tmp >>= 4;
 800171c:	091b      	lsrs	r3, r3, #4
      u8g->glyph_y-=2;
      tmp >>= 4;
      u8g->glyph_x =  tmp;
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
      u8g->glyph_height =  tmp & 15;
 800171e:	77ca      	strb	r2, [r1, #31]
      tmp >>= 4;
      u8g->glyph_width =  tmp;
 8001720:	77e3      	strb	r3, [r4, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8001722:	78b3      	ldrb	r3, [r6, #2]
      tmp >>= 4;
 8001724:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 8001726:	7723      	strb	r3, [r4, #28]
      else
      {
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
 8001728:	1c30      	adds	r0, r6, #0
  }
  
  u8g_FillEmptyGlyphCache(u8g);
    
  return NULL;
}
 800172a:	b005      	add	sp, #20
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 800172e:	78b3      	ldrb	r3, [r6, #2]
 8001730:	9a02      	ldr	r2, [sp, #8]
 8001732:	4013      	ands	r3, r2
 8001734:	9a03      	ldr	r2, [sp, #12]
 8001736:	189b      	adds	r3, r3, r2
        p += data_structure_size;
 8001738:	18f6      	adds	r6, r6, r3
      }
      if ( i == end )
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	429d      	cmp	r5, r3
 800173e:	d0c2      	beq.n	80016c6 <u8g_GetGlyph+0x6a>
        break;
      i++;
 8001740:	3501      	adds	r5, #1
 8001742:	b2ed      	uxtb	r5, r5
    }
 8001744:	e7ca      	b.n	80016dc <u8g_GetGlyph+0x80>

08001746 <u8g_font_calc_str_min_box>:
{
  /* u8g_glyph_t g; */
  int8_t tmp;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
 8001746:	2300      	movs	r3, #0
  u8g_uint_t w;         /* width of the overall string */
};
typedef struct u8g_str_size_struct u8g_str_size_t;

static void u8g_font_calc_str_min_box(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  /* u8g_glyph_t g; */
  int8_t tmp;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
 800174a:	7113      	strb	r3, [r2, #4]
    
  /* check for empty string, width is already 0, but also reset y_min and y_max to 0 */
  if ( *s == '\0' )
 800174c:	780b      	ldrb	r3, [r1, #0]
  u8g_uint_t w;         /* width of the overall string */
};
typedef struct u8g_str_size_struct u8g_str_size_t;

static void u8g_font_calc_str_min_box(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 800174e:	1c05      	adds	r5, r0, #0
 8001750:	1c0e      	adds	r6, r1, #0
 8001752:	1c14      	adds	r4, r2, #0
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
    
  /* check for empty string, width is already 0, but also reset y_min and y_max to 0 */
  if ( *s == '\0' )
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <u8g_font_calc_str_min_box+0x1c>
  {
    buf->y_min = 0;
 8001758:	7013      	strb	r3, [r2, #0]
    buf->y_max = 0;
 800175a:	7053      	strb	r3, [r2, #1]
    buf->x = 0;
 800175c:	7093      	strb	r3, [r2, #2]
    buf->y = 0;
 800175e:	70d3      	strb	r3, [r2, #3]
    return;
 8001760:	e032      	b.n	80017c8 <u8g_font_calc_str_min_box+0x82>
  }
  
  /* reset y_min to the largest possible value. Later we search for the smallest value */
  /* y_min contains the position [pixel] of the lower left edge of the glyph above (y_min>0) or below (y_min<0) baseline  */
  buf->y_min = 127;
 8001762:	237f      	movs	r3, #127	; 0x7f
 8001764:	7013      	strb	r3, [r2, #0]
  /* reset y_max to the smallest possible value. Later we search for the highest value */
  /* y_max contains the position [pixel] of the upper left edge of the glyph above (y_max>0) or below (y_max<0) baseline  */
  buf->y_max = -128;
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	7053      	strb	r3, [r2, #1]

  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  u8g_GetGlyph(u8g, *s);
 800176a:	7809      	ldrb	r1, [r1, #0]
 800176c:	f7ff ff76 	bl	800165c <u8g_GetGlyph>
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  // buf->w = - u8g_font_GetGlyphBBXOffX(u8g->font, g);
  buf->w = - u8g->glyph_x;
 8001770:	7f6b      	ldrb	r3, [r5, #29]
 8001772:	425b      	negs	r3, r3
 8001774:	7123      	strb	r3, [r4, #4]
  
  /* Also copy the position of the first glyph. This is the reference point of the string (negated) */
  buf->x = u8g->glyph_x;
 8001776:	7f6b      	ldrb	r3, [r5, #29]
 8001778:	70a3      	strb	r3, [r4, #2]
  buf->y = u8g->glyph_y;
 800177a:	7fab      	ldrb	r3, [r5, #30]
 800177c:	70e3      	strb	r3, [r4, #3]
    
    /* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */
    /* relative to the base line */
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
 800177e:	2100      	movs	r1, #0
  {
    
    /* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */
    /* relative to the base line */
    
    tmp = u8g->glyph_y;
 8001780:	7faa      	ldrb	r2, [r5, #30]
    if ( buf->y_min > tmp )
 8001782:	5661      	ldrsb	r1, [r4, r1]
 8001784:	b253      	sxtb	r3, r2
 8001786:	4299      	cmp	r1, r3
 8001788:	dd00      	ble.n	800178c <u8g_font_calc_str_min_box+0x46>
      buf->y_min = tmp;
 800178a:	7022      	strb	r2, [r4, #0]
    
    tmp +=u8g->glyph_height;
    if ( buf->y_max < tmp )
 800178c:	2101      	movs	r1, #1
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
      buf->y_min = tmp;
    
    tmp +=u8g->glyph_height;
 800178e:	1c6b      	adds	r3, r5, #1
 8001790:	7fdb      	ldrb	r3, [r3, #31]
    if ( buf->y_max < tmp )
 8001792:	5661      	ldrsb	r1, [r4, r1]
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
      buf->y_min = tmp;
    
    tmp +=u8g->glyph_height;
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	b2db      	uxtb	r3, r3
    if ( buf->y_max < tmp )
 8001798:	b25a      	sxtb	r2, r3
 800179a:	4291      	cmp	r1, r2
 800179c:	da00      	bge.n	80017a0 <u8g_font_calc_str_min_box+0x5a>
      buf->y_max = tmp;
 800179e:	7063      	strb	r3, [r4, #1]
    
    /* check and stop if the end of the string is reached */
    s++;
 80017a0:	3601      	adds	r6, #1
    if ( *s == '\0' )
 80017a2:	7833      	ldrb	r3, [r6, #0]
 80017a4:	7922      	ldrb	r2, [r4, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <u8g_font_calc_str_min_box+0x74>
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    buf->w += u8g->glyph_dx;
 80017aa:	7f2b      	ldrb	r3, [r5, #28]
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, *s);
 80017ac:	1c28      	adds	r0, r5, #0
    s++;
    if ( *s == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    buf->w += u8g->glyph_dx;
 80017ae:	189a      	adds	r2, r3, r2
 80017b0:	7122      	strb	r2, [r4, #4]
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, *s);
 80017b2:	7831      	ldrb	r1, [r6, #0]
 80017b4:	f7ff ff52 	bl	800165c <u8g_GetGlyph>
 80017b8:	e7e1      	b.n	800177e <u8g_font_calc_str_min_box+0x38>
  }
  
  /* finally calculate the width of the last char */
  /* if g was not updated in the for loop (strlen() == 1), then the initial offset x gets removed */
  buf->w += u8g->glyph_width;
 80017ba:	7feb      	ldrb	r3, [r5, #31]
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	7123      	strb	r3, [r4, #4]
  // buf->w += u8g_font_GetGlyphBBXOffX(u8g->font, g);
  
  buf->w += u8g->glyph_x;
 80017c2:	7f6a      	ldrb	r2, [r5, #29]
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	7123      	strb	r3, [r4, #4]
}
 80017c8:	bd70      	pop	{r4, r5, r6, pc}

080017ca <u8g_IsGlyph>:
    
  return NULL;
}

uint8_t u8g_IsGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80017ca:	b508      	push	{r3, lr}
  if ( u8g_GetGlyph(u8g, requested_encoding) != NULL )
 80017cc:	f7ff ff46 	bl	800165c <u8g_GetGlyph>
 80017d0:	1e43      	subs	r3, r0, #1
 80017d2:	4198      	sbcs	r0, r3
    return 1;
  return 0;
}
 80017d4:	b2c0      	uxtb	r0, r0
 80017d6:	bd08      	pop	{r3, pc}

080017d8 <u8g_GetGlyphDeltaX>:

int8_t u8g_GetGlyphDeltaX(u8g_t *u8g, uint8_t requested_encoding)
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	1c04      	adds	r4, r0, #0
  if ( u8g_GetGlyph(u8g, requested_encoding) == NULL )
 80017dc:	f7ff ff3e 	bl	800165c <u8g_GetGlyph>
    return 0;  /* should never happen, so return something */
 80017e0:	1e03      	subs	r3, r0, #0
  return 0;
}

int8_t u8g_GetGlyphDeltaX(u8g_t *u8g, uint8_t requested_encoding)
{
  if ( u8g_GetGlyph(u8g, requested_encoding) == NULL )
 80017e2:	d000      	beq.n	80017e6 <u8g_GetGlyphDeltaX+0xe>
    return 0;  /* should never happen, so return something */
  return u8g->glyph_dx;
 80017e4:	7f23      	ldrb	r3, [r4, #28]
 80017e6:	b258      	sxtb	r0, r3
}
 80017e8:	bd10      	pop	{r4, pc}

080017ea <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ec:	1c0f      	adds	r7, r1, #0
 80017ee:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80017f0:	1c19      	adds	r1, r3, #0
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80017f2:	1c04      	adds	r4, r0, #0
 80017f4:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80017f6:	f7ff ff31 	bl	800165c <u8g_GetGlyph>
 80017fa:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 80017fc:	d03d      	beq.n	800187a <u8g_draw_glyph+0x90>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80017fe:	68a3      	ldr	r3, [r4, #8]
 8001800:	7818      	ldrb	r0, [r3, #0]
 8001802:	f7ff fec8 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8001806:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001808:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800180a:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 800180c:	1c63      	adds	r3, r4, #1
 800180e:	7fda      	ldrb	r2, [r3, #31]
  
  x += u8g->glyph_x;
 8001810:	7f63      	ldrb	r3, [r4, #29]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8001812:	9200      	str	r2, [sp, #0]
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_x;
 8001814:	18ff      	adds	r7, r7, r3
 8001816:	b2fb      	uxtb	r3, r7
 8001818:	9304      	str	r3, [sp, #16]
 800181a:	7fa3      	ldrb	r3, [r4, #30]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 800181c:	1c20      	adds	r0, r4, #0
 800181e:	1af6      	subs	r6, r6, r3
 8001820:	b2f3      	uxtb	r3, r6
 8001822:	1a9e      	subs	r6, r3, r2
 8001824:	b2f6      	uxtb	r6, r6
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	9904      	ldr	r1, [sp, #16]
 800182a:	1c32      	adds	r2, r6, #0
 800182c:	9b03      	ldr	r3, [sp, #12]
 800182e:	f7ff fe61 	bl	80014f4 <u8g_IsBBXIntersection>
 8001832:	2800      	cmp	r0, #0
 8001834:	d020      	beq.n	8001878 <u8g_draw_glyph+0x8e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001836:	9b05      	ldr	r3, [sp, #20]
 8001838:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 800183a:	9b03      	ldr	r3, [sp, #12]
 800183c:	3307      	adds	r3, #7
 800183e:	b2db      	uxtb	r3, r3
  w /= 8;
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	9303      	str	r3, [sp, #12]
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
 8001844:	9b02      	ldr	r3, [sp, #8]
 8001846:	429e      	cmp	r6, r3
 8001848:	d016      	beq.n	8001878 <u8g_draw_glyph+0x8e>
 800184a:	1c2f      	adds	r7, r5, #0
 800184c:	1b7b      	subs	r3, r7, r5
 800184e:	9a04      	ldr	r2, [sp, #16]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	00d9      	lsls	r1, r3, #3
 8001854:	1851      	adds	r1, r2, r1
  {
    ix = x;
    for( i = 0; i < w; i++ )
 8001856:	9a03      	ldr	r2, [sp, #12]
 8001858:	b2c9      	uxtb	r1, r1
 800185a:	4293      	cmp	r3, r2
 800185c:	d208      	bcs.n	8001870 <u8g_draw_glyph+0x86>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 800185e:	783b      	ldrb	r3, [r7, #0]
 8001860:	1c20      	adds	r0, r4, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	1c32      	adds	r2, r6, #0
 8001866:	2300      	movs	r3, #0
 8001868:	f001 f887 	bl	800297a <u8g_Draw8Pixel>
      data++;
 800186c:	3701      	adds	r7, #1
 800186e:	e7ed      	b.n	800184c <u8g_draw_glyph+0x62>
      ix+=8;
    }
    iy++;
 8001870:	3601      	adds	r6, #1
 8001872:	18ad      	adds	r5, r5, r2
 8001874:	b2f6      	uxtb	r6, r6
 8001876:	e7e5      	b.n	8001844 <u8g_draw_glyph+0x5a>
  }
  return u8g->glyph_dx;
 8001878:	7f20      	ldrb	r0, [r4, #28]
 800187a:	b240      	sxtb	r0, r0
}
 800187c:	b007      	add	sp, #28
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001880 <u8g_DrawGlyph>:

int8_t u8g_DrawGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	1c05      	adds	r5, r0, #0
 8001884:	1c1e      	adds	r6, r3, #0
  y += u8g->font_calc_vref(u8g);
 8001886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001888:	1c0f      	adds	r7, r1, #0
 800188a:	1c14      	adds	r4, r2, #0
  y += u8g->font_calc_vref(u8g);
 800188c:	4798      	blx	r3
 800188e:	1902      	adds	r2, r0, r4
  return u8g_draw_glyph(u8g, x, y, encoding);
 8001890:	1c39      	adds	r1, r7, #0
 8001892:	1c28      	adds	r0, r5, #0
 8001894:	1c33      	adds	r3, r6, #0
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f7ff ffa7 	bl	80017ea <u8g_draw_glyph>
}
 800189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800189e <u8g_draw_glyph90>:

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800189e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a0:	1c0f      	adds	r7, r1, #0
 80018a2:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80018a4:	1c19      	adds	r1, r3, #0
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_glyph(u8g, x, y, encoding);
}

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80018a6:	1c04      	adds	r4, r0, #0
 80018a8:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80018aa:	f7ff fed7 	bl	800165c <u8g_GetGlyph>
 80018ae:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 80018b0:	d045      	beq.n	800193e <u8g_draw_glyph90+0xa0>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80018b2:	68a3      	ldr	r3, [r4, #8]
 80018b4:	7818      	ldrb	r0, [r3, #0]
 80018b6:	f7ff fe6e 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80018ba:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80018bc:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80018be:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 80018c0:	1c63      	adds	r3, r4, #1
 80018c2:	7fdb      	ldrb	r3, [r3, #31]
  
  x += u8g->glyph_y;
  x++;
  y += u8g->glyph_x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
 80018c4:	1c20      	adds	r0, r4, #0
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	7fa3      	ldrb	r3, [r4, #30]
 80018ca:	3301      	adds	r3, #1
  
  x += u8g->glyph_y;
  x++;
 80018cc:	18ff      	adds	r7, r7, r3
  y += u8g->glyph_x;
 80018ce:	7f63      	ldrb	r3, [r4, #29]
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_y;
  x++;
 80018d0:	b2ff      	uxtb	r7, r7
  y += u8g->glyph_x;
 80018d2:	18f6      	adds	r6, r6, r3
 80018d4:	b2f3      	uxtb	r3, r6
 80018d6:	9304      	str	r3, [sp, #16]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
 80018d8:	9b03      	ldr	r3, [sp, #12]
 80018da:	1c39      	adds	r1, r7, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	9a04      	ldr	r2, [sp, #16]
 80018e0:	9b02      	ldr	r3, [sp, #8]
 80018e2:	f7ff fe07 	bl	80014f4 <u8g_IsBBXIntersection>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d028      	beq.n	800193c <u8g_draw_glyph90+0x9e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80018ea:	9b05      	ldr	r3, [sp, #20]
 80018ec:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 80018ee:	9b03      	ldr	r3, [sp, #12]
 80018f0:	3307      	adds	r3, #7
 80018f2:	b2db      	uxtb	r3, r3
  w /= 8;
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	9303      	str	r3, [sp, #12]
 80018f8:	9b02      	ldr	r3, [sp, #8]
 80018fa:	3b01      	subs	r3, #1
  
  ix = x;
  ix += h;
  ix--;
 80018fc:	18ff      	adds	r7, r7, r3
 80018fe:	9b02      	ldr	r3, [sp, #8]
 8001900:	b2ff      	uxtb	r7, r7
 8001902:	1afb      	subs	r3, r7, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	9302      	str	r3, [sp, #8]
  for( j = 0; j < h; j++ )
 8001908:	9b02      	ldr	r3, [sp, #8]
 800190a:	429f      	cmp	r7, r3
 800190c:	d016      	beq.n	800193c <u8g_draw_glyph90+0x9e>
 800190e:	1c2e      	adds	r6, r5, #0
 8001910:	1b73      	subs	r3, r6, r5
 8001912:	9904      	ldr	r1, [sp, #16]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	00da      	lsls	r2, r3, #3
 8001918:	188a      	adds	r2, r1, r2
  {
    iy = y;
    for( i = 0; i < w; i++ )
 800191a:	9903      	ldr	r1, [sp, #12]
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	428b      	cmp	r3, r1
 8001920:	d208      	bcs.n	8001934 <u8g_draw_glyph90+0x96>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 1, u8g_pgm_read(data));
 8001922:	7833      	ldrb	r3, [r6, #0]
 8001924:	1c20      	adds	r0, r4, #0
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	1c39      	adds	r1, r7, #0
 800192a:	2301      	movs	r3, #1
 800192c:	f001 f825 	bl	800297a <u8g_Draw8Pixel>
      data++;
 8001930:	3601      	adds	r6, #1
 8001932:	e7ed      	b.n	8001910 <u8g_draw_glyph90+0x72>
      iy+=8;
    }
    ix--;
 8001934:	3f01      	subs	r7, #1
 8001936:	186d      	adds	r5, r5, r1
 8001938:	b2ff      	uxtb	r7, r7
 800193a:	e7e5      	b.n	8001908 <u8g_draw_glyph90+0x6a>
  }
  return u8g->glyph_dx;
 800193c:	7f20      	ldrb	r0, [r4, #28]
 800193e:	b240      	sxtb	r0, r0
}
 8001940:	b007      	add	sp, #28
 8001942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001944 <u8g_DrawGlyph90>:

int8_t u8g_DrawGlyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	1c05      	adds	r5, r0, #0
 8001948:	1c1e      	adds	r6, r3, #0
  x -= u8g->font_calc_vref(u8g);
 800194a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800194c:	1c17      	adds	r7, r2, #0
 800194e:	1c0c      	adds	r4, r1, #0
  x -= u8g->font_calc_vref(u8g);
 8001950:	4798      	blx	r3
 8001952:	1a21      	subs	r1, r4, r0
  return u8g_draw_glyph90(u8g, x, y, encoding);
 8001954:	1c3a      	adds	r2, r7, #0
 8001956:	1c28      	adds	r0, r5, #0
 8001958:	1c33      	adds	r3, r6, #0
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	f7ff ff9f 	bl	800189e <u8g_draw_glyph90>
}
 8001960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001962 <u8g_draw_glyph180>:


int8_t u8g_draw_glyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001964:	1c0e      	adds	r6, r1, #0
 8001966:	b089      	sub	sp, #36	; 0x24
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001968:	1c19      	adds	r1, r3, #0
  return u8g_draw_glyph90(u8g, x, y, encoding);
}


int8_t u8g_draw_glyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800196a:	1c05      	adds	r5, r0, #0
 800196c:	1c17      	adds	r7, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800196e:	f7ff fe75 	bl	800165c <u8g_GetGlyph>
 8001972:	9003      	str	r0, [sp, #12]
    if ( g == NULL  )
 8001974:	2800      	cmp	r0, #0
 8001976:	d053      	beq.n	8001a20 <u8g_draw_glyph180+0xbe>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001978:	68ab      	ldr	r3, [r5, #8]
 800197a:	7818      	ldrb	r0, [r3, #0]
 800197c:	f7ff fe0b 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8001980:	1c6b      	adds	r3, r5, #1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001982:	9006      	str	r0, [sp, #24]
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8001984:	7fdb      	ldrb	r3, [r3, #31]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8001986:	7fec      	ldrb	r4, [r5, #31]
  h = u8g->glyph_height;
 8001988:	9304      	str	r3, [sp, #16]
  
  x -= u8g->glyph_x;
 800198a:	7f6b      	ldrb	r3, [r5, #29]
  y += u8g->glyph_y;
  y++;
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
 800198c:	1c28      	adds	r0, r5, #0
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x -= u8g->glyph_x;
 800198e:	1af6      	subs	r6, r6, r3
 8001990:	b2f3      	uxtb	r3, r6
 8001992:	9305      	str	r3, [sp, #20]
 8001994:	7fab      	ldrb	r3, [r5, #30]
 8001996:	3301      	adds	r3, #1
  y += u8g->glyph_y;
  y++;
 8001998:	18ff      	adds	r7, r7, r3
 800199a:	9b05      	ldr	r3, [sp, #20]
 800199c:	b2ff      	uxtb	r7, r7
 800199e:	1b19      	subs	r1, r3, r4
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
 80019a0:	9b04      	ldr	r3, [sp, #16]
 80019a2:	3101      	adds	r1, #1
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	b2c9      	uxtb	r1, r1
 80019a8:	1c3a      	adds	r2, r7, #0
 80019aa:	1c23      	adds	r3, r4, #0
 80019ac:	f7ff fda2 	bl	80014f4 <u8g_IsBBXIntersection>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d034      	beq.n	8001a1e <u8g_draw_glyph180+0xbc>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80019b4:	9a06      	ldr	r2, [sp, #24]
 80019b6:	9b03      	ldr	r3, [sp, #12]
 80019b8:	4694      	mov	ip, r2
 80019ba:	4463      	add	r3, ip
 80019bc:	9303      	str	r3, [sp, #12]
 80019be:	9b04      	ldr	r3, [sp, #16]
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 80019c0:	3407      	adds	r4, #7
 80019c2:	3b01      	subs	r3, #1
  w /= 8;
  
  iy = y;
  iy += h;
  iy--;
 80019c4:	18ff      	adds	r7, r7, r3
 80019c6:	9b04      	ldr	r3, [sp, #16]
 80019c8:	b2ff      	uxtb	r7, r7
 80019ca:	1afb      	subs	r3, r7, r3
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 80019cc:	b2e6      	uxtb	r6, r4
 80019ce:	b2db      	uxtb	r3, r3
  w /= 8;
 80019d0:	08f6      	lsrs	r6, r6, #3
 80019d2:	9306      	str	r3, [sp, #24]
  
  iy = y;
  iy += h;
  iy--;
  for( j = 0; j < h; j++ )
 80019d4:	9b06      	ldr	r3, [sp, #24]
 80019d6:	429f      	cmp	r7, r3
 80019d8:	d021      	beq.n	8001a1e <u8g_draw_glyph180+0xbc>
 80019da:	466b      	mov	r3, sp
 80019dc:	7b1b      	ldrb	r3, [r3, #12]
 80019de:	9a05      	ldr	r2, [sp, #20]
 80019e0:	9304      	str	r3, [sp, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	18d3      	adds	r3, r2, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	9c03      	ldr	r4, [sp, #12]
 80019ea:	9307      	str	r3, [sp, #28]
 80019ec:	b2e3      	uxtb	r3, r4
 80019ee:	9a07      	ldr	r2, [sp, #28]
 80019f0:	00d9      	lsls	r1, r3, #3
 80019f2:	1a51      	subs	r1, r2, r1
 80019f4:	9a04      	ldr	r2, [sp, #16]
 80019f6:	b2c9      	uxtb	r1, r1
 80019f8:	1a9b      	subs	r3, r3, r2
  {
    ix = x;
    for( i = 0; i < w; i++ )
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	42b3      	cmp	r3, r6
 80019fe:	d208      	bcs.n	8001a12 <u8g_draw_glyph180+0xb0>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 2, u8g_pgm_read(data));
 8001a00:	7823      	ldrb	r3, [r4, #0]
 8001a02:	1c28      	adds	r0, r5, #0
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	1c3a      	adds	r2, r7, #0
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f000 ffb6 	bl	800297a <u8g_Draw8Pixel>
      data++;
 8001a0e:	3401      	adds	r4, #1
 8001a10:	e7ec      	b.n	80019ec <u8g_draw_glyph180+0x8a>
 8001a12:	9b03      	ldr	r3, [sp, #12]
      ix-=8;
    }
    iy--;
 8001a14:	3f01      	subs	r7, #1
 8001a16:	199b      	adds	r3, r3, r6
 8001a18:	9303      	str	r3, [sp, #12]
 8001a1a:	b2ff      	uxtb	r7, r7
 8001a1c:	e7da      	b.n	80019d4 <u8g_draw_glyph180+0x72>
  }
  return u8g->glyph_dx;
 8001a1e:	7f28      	ldrb	r0, [r5, #28]
 8001a20:	b240      	sxtb	r0, r0
}
 8001a22:	b009      	add	sp, #36	; 0x24
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a26 <u8g_DrawGlyph180>:

int8_t u8g_DrawGlyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a28:	1c05      	adds	r5, r0, #0
 8001a2a:	1c1e      	adds	r6, r3, #0
  y -= u8g->font_calc_vref(u8g);
 8001a2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001a2e:	1c0f      	adds	r7, r1, #0
 8001a30:	1c14      	adds	r4, r2, #0
  y -= u8g->font_calc_vref(u8g);
 8001a32:	4798      	blx	r3
 8001a34:	1a22      	subs	r2, r4, r0
  return u8g_draw_glyph180(u8g, x, y, encoding);
 8001a36:	1c39      	adds	r1, r7, #0
 8001a38:	1c28      	adds	r0, r5, #0
 8001a3a:	1c33      	adds	r3, r6, #0
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f7ff ff90 	bl	8001962 <u8g_draw_glyph180>
}
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a44 <u8g_draw_glyph270>:


int8_t u8g_draw_glyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	1c0e      	adds	r6, r1, #0
 8001a48:	b089      	sub	sp, #36	; 0x24
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001a4a:	1c19      	adds	r1, r3, #0
  return u8g_draw_glyph180(u8g, x, y, encoding);
}


int8_t u8g_draw_glyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001a4c:	1c05      	adds	r5, r0, #0
 8001a4e:	1c17      	adds	r7, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001a50:	f7ff fe04 	bl	800165c <u8g_GetGlyph>
 8001a54:	9003      	str	r0, [sp, #12]
    if ( g == NULL  )
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d04f      	beq.n	8001afa <u8g_draw_glyph270+0xb6>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001a5a:	68ab      	ldr	r3, [r5, #8]
 8001a5c:	7818      	ldrb	r0, [r3, #0]
 8001a5e:	f7ff fd9a 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8001a62:	1c6b      	adds	r3, r5, #1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001a64:	9006      	str	r0, [sp, #24]
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8001a66:	7fdb      	ldrb	r3, [r3, #31]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8001a68:	7fec      	ldrb	r4, [r5, #31]
  h = u8g->glyph_height;
 8001a6a:	9304      	str	r3, [sp, #16]
  
  x -= u8g->glyph_y;
  x--;
  y -= u8g->glyph_x;
 8001a6c:	7f6b      	ldrb	r3, [r5, #29]
 8001a6e:	9a04      	ldr	r2, [sp, #16]
 8001a70:	1aff      	subs	r7, r7, r3
 8001a72:	b2fb      	uxtb	r3, r7
 8001a74:	9305      	str	r3, [sp, #20]
 8001a76:	7fab      	ldrb	r3, [r5, #30]
  
  if ( u8g_IsBBXIntersection(u8g, x-(h-1), y-(w-1), h, w) == 0 )
 8001a78:	9400      	str	r4, [sp, #0]
 8001a7a:	18d3      	adds	r3, r2, r3
 8001a7c:	1af6      	subs	r6, r6, r3
 8001a7e:	9b05      	ldr	r3, [sp, #20]
 8001a80:	b2f6      	uxtb	r6, r6
 8001a82:	1b1a      	subs	r2, r3, r4
 8001a84:	3201      	adds	r2, #1
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	1c28      	adds	r0, r5, #0
 8001a8a:	1c31      	adds	r1, r6, #0
 8001a8c:	9b04      	ldr	r3, [sp, #16]
 8001a8e:	f7ff fd31 	bl	80014f4 <u8g_IsBBXIntersection>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d030      	beq.n	8001af8 <u8g_draw_glyph270+0xb4>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001a96:	9a06      	ldr	r2, [sp, #24]
 8001a98:	9b03      	ldr	r3, [sp, #12]
 8001a9a:	4694      	mov	ip, r2
 8001a9c:	4463      	add	r3, ip
 8001a9e:	9303      	str	r3, [sp, #12]
 8001aa0:	9b04      	ldr	r3, [sp, #16]
  if ( u8g_IsBBXIntersection(u8g, x-(h-1), y-(w-1), h, w) == 0 )
    return u8g->glyph_dx;
  

  /* now, w is reused as bytes per line */
  w += 7;
 8001aa2:	3407      	adds	r4, #7
 8001aa4:	18f3      	adds	r3, r6, r3
 8001aa6:	b2e7      	uxtb	r7, r4
 8001aa8:	b2db      	uxtb	r3, r3
  w /= 8;  
 8001aaa:	08ff      	lsrs	r7, r7, #3
 8001aac:	9306      	str	r3, [sp, #24]
      
  ix = x;
  ix -= h;
  ix++;
  
  for( j = 0; j < h; j++ )
 8001aae:	9b06      	ldr	r3, [sp, #24]
 8001ab0:	429e      	cmp	r6, r3
 8001ab2:	d021      	beq.n	8001af8 <u8g_draw_glyph270+0xb4>
 8001ab4:	466b      	mov	r3, sp
 8001ab6:	7b1b      	ldrb	r3, [r3, #12]
 8001ab8:	9a05      	ldr	r2, [sp, #20]
 8001aba:	9304      	str	r3, [sp, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	18d3      	adds	r3, r2, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	9c03      	ldr	r4, [sp, #12]
 8001ac4:	9307      	str	r3, [sp, #28]
 8001ac6:	b2e3      	uxtb	r3, r4
 8001ac8:	9907      	ldr	r1, [sp, #28]
 8001aca:	00da      	lsls	r2, r3, #3
 8001acc:	1a8a      	subs	r2, r1, r2
 8001ace:	9904      	ldr	r1, [sp, #16]
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	1a5b      	subs	r3, r3, r1
  {
    iy = y;
    for( i = 0; i < w; i++ )
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	42bb      	cmp	r3, r7
 8001ad8:	d208      	bcs.n	8001aec <u8g_draw_glyph270+0xa8>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 3, u8g_pgm_read(data));
 8001ada:	7823      	ldrb	r3, [r4, #0]
 8001adc:	1c28      	adds	r0, r5, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	1c31      	adds	r1, r6, #0
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	f000 ff49 	bl	800297a <u8g_Draw8Pixel>
      data++;
 8001ae8:	3401      	adds	r4, #1
 8001aea:	e7ec      	b.n	8001ac6 <u8g_draw_glyph270+0x82>
 8001aec:	9b03      	ldr	r3, [sp, #12]
      iy-=8;
    }
    ix++;
 8001aee:	3601      	adds	r6, #1
 8001af0:	19db      	adds	r3, r3, r7
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	b2f6      	uxtb	r6, r6
 8001af6:	e7da      	b.n	8001aae <u8g_draw_glyph270+0x6a>
  }
  return u8g->glyph_dx;
 8001af8:	7f28      	ldrb	r0, [r5, #28]
 8001afa:	b240      	sxtb	r0, r0
}
 8001afc:	b009      	add	sp, #36	; 0x24
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b00 <u8g_DrawGlyph270>:

int8_t u8g_DrawGlyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	1c05      	adds	r5, r0, #0
 8001b04:	1c1e      	adds	r6, r3, #0
  x += u8g->font_calc_vref(u8g);
 8001b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001b08:	1c17      	adds	r7, r2, #0
 8001b0a:	1c0c      	adds	r4, r1, #0
  x += u8g->font_calc_vref(u8g);
 8001b0c:	4798      	blx	r3
 8001b0e:	1901      	adds	r1, r0, r4
  return u8g_draw_glyph270(u8g, x, y, encoding);
 8001b10:	1c3a      	adds	r2, r7, #0
 8001b12:	1c28      	adds	r0, r5, #0
 8001b14:	1c33      	adds	r3, r6, #0
 8001b16:	b2c9      	uxtb	r1, r1
 8001b18:	f7ff ff94 	bl	8001a44 <u8g_draw_glyph270>
}
 8001b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b1e <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b20:	1c07      	adds	r7, r0, #0
 8001b22:	1c1e      	adds	r6, r3, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b26:	1c15      	adds	r5, r2, #0
 8001b28:	1c0c      	adds	r4, r1, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8001b2a:	4798      	blx	r3
 8001b2c:	1945      	adds	r5, r0, r5
 8001b2e:	b2eb      	uxtb	r3, r5
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001b30:	2500      	movs	r5, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8001b32:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8001b34:	7833      	ldrb	r3, [r6, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <u8g_DrawStr+0x34>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 8001b3a:	1c21      	adds	r1, r4, #0
 8001b3c:	1c38      	adds	r0, r7, #0
 8001b3e:	9a01      	ldr	r2, [sp, #4]
 8001b40:	f7ff fe53 	bl	80017ea <u8g_draw_glyph>
    x += d;
 8001b44:	b2c0      	uxtb	r0, r0
 8001b46:	1904      	adds	r4, r0, r4
    t += d;
 8001b48:	1945      	adds	r5, r0, r5
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    x += d;
 8001b4a:	b2e4      	uxtb	r4, r4
    t += d;
 8001b4c:	b2ed      	uxtb	r5, r5
    s++;
 8001b4e:	3601      	adds	r6, #1
 8001b50:	e7f0      	b.n	8001b34 <u8g_DrawStr+0x16>
  }
  return t;
}
 8001b52:	1c28      	adds	r0, r5, #0
 8001b54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001b56 <u8g_DrawStr90>:

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b58:	1c07      	adds	r7, r0, #0
 8001b5a:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b5e:	1c0d      	adds	r5, r1, #0
 8001b60:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8001b62:	4798      	blx	r3
 8001b64:	1a2d      	subs	r5, r5, r0
 8001b66:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001b68:	2500      	movs	r5, #0
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8001b6a:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001b6c:	7833      	ldrb	r3, [r6, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <u8g_DrawStr90+0x34>
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
 8001b72:	1c22      	adds	r2, r4, #0
 8001b74:	1c38      	adds	r0, r7, #0
 8001b76:	9901      	ldr	r1, [sp, #4]
 8001b78:	f7ff fe91 	bl	800189e <u8g_draw_glyph90>
    y += d;
 8001b7c:	b2c0      	uxtb	r0, r0
 8001b7e:	1904      	adds	r4, r0, r4
    t += d;
 8001b80:	1945      	adds	r5, r0, r5
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
    y += d;
 8001b82:	b2e4      	uxtb	r4, r4
    t += d;
 8001b84:	b2ed      	uxtb	r5, r5
    s++;
 8001b86:	3601      	adds	r6, #1
 8001b88:	e7f0      	b.n	8001b6c <u8g_DrawStr90+0x16>
  }
  return t;
}
 8001b8a:	1c28      	adds	r0, r5, #0
 8001b8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001b8e <u8g_DrawStr180>:

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b90:	1c07      	adds	r7, r0, #0
 8001b92:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001b96:	1c15      	adds	r5, r2, #0
 8001b98:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001b9a:	4798      	blx	r3
 8001b9c:	1a2d      	subs	r5, r5, r0
 8001b9e:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001ba0:	2500      	movs	r5, #0
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001ba2:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8001ba4:	7833      	ldrb	r3, [r6, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <u8g_DrawStr180+0x34>
  {
    d = u8g_draw_glyph180(u8g, x, y, *s);
 8001baa:	1c21      	adds	r1, r4, #0
 8001bac:	1c38      	adds	r0, r7, #0
 8001bae:	9a01      	ldr	r2, [sp, #4]
 8001bb0:	f7ff fed7 	bl	8001962 <u8g_draw_glyph180>
    x -= d;
 8001bb4:	b2c0      	uxtb	r0, r0
 8001bb6:	1a24      	subs	r4, r4, r0
    t += d;
 8001bb8:	1945      	adds	r5, r0, r5
  y -= u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph180(u8g, x, y, *s);
    x -= d;
 8001bba:	b2e4      	uxtb	r4, r4
    t += d;
 8001bbc:	b2ed      	uxtb	r5, r5
    s++;
 8001bbe:	3601      	adds	r6, #1
 8001bc0:	e7f0      	b.n	8001ba4 <u8g_DrawStr180+0x16>
  }
  return t;
}
 8001bc2:	1c28      	adds	r0, r5, #0
 8001bc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001bc6 <u8g_DrawStr270>:

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bc8:	1c07      	adds	r7, r0, #0
 8001bca:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8001bce:	1c0d      	adds	r5, r1, #0
 8001bd0:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001bd2:	4798      	blx	r3
 8001bd4:	1945      	adds	r5, r0, r5
 8001bd6:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8001bd8:	2500      	movs	r5, #0
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001bda:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001bdc:	7833      	ldrb	r3, [r6, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <u8g_DrawStr270+0x34>
  {
    d = u8g_draw_glyph270(u8g, x, y, *s);
 8001be2:	1c22      	adds	r2, r4, #0
 8001be4:	1c38      	adds	r0, r7, #0
 8001be6:	9901      	ldr	r1, [sp, #4]
 8001be8:	f7ff ff2c 	bl	8001a44 <u8g_draw_glyph270>
    y -= d;
 8001bec:	b2c0      	uxtb	r0, r0
 8001bee:	1a24      	subs	r4, r4, r0
    t += d;
 8001bf0:	1945      	adds	r5, r0, r5
  x += u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_draw_glyph270(u8g, x, y, *s);
    y -= d;
 8001bf2:	b2e4      	uxtb	r4, r4
    t += d;
 8001bf4:	b2ed      	uxtb	r5, r5
    s++;
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7f0      	b.n	8001bdc <u8g_DrawStr270+0x16>
  }
  return t;
}
 8001bfa:	1c28      	adds	r0, r5, #0
 8001bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001bfe <u8g_DrawStrDir>:

u8g_uint_t u8g_DrawStrDir(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
 8001bfe:	b510      	push	{r4, lr}
 8001c00:	1c04      	adds	r4, r0, #0
    case 2:
      return u8g_DrawStr180(u8g, x, y, s);
    case 3:
      return u8g_DrawStr270(u8g, x, y, s);
  }
  return 0;
 8001c02:	2000      	movs	r0, #0
  return t;
}

u8g_uint_t u8g_DrawStrDir(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  switch(dir)
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d817      	bhi.n	8001c38 <u8g_DrawStrDir+0x3a>
 8001c08:	1c18      	adds	r0, r3, #0
 8001c0a:	f001 f9e1 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 8001c0e:	0702      	.short	0x0702
 8001c10:	110c      	.short	0x110c
  {
    case 0:
      return u8g_DrawStr(u8g, x, y, s);
 8001c12:	1c20      	adds	r0, r4, #0
 8001c14:	9b02      	ldr	r3, [sp, #8]
 8001c16:	f7ff ff82 	bl	8001b1e <u8g_DrawStr>
 8001c1a:	e00d      	b.n	8001c38 <u8g_DrawStrDir+0x3a>
    case 1:
      return u8g_DrawStr90(u8g, x, y, s);
 8001c1c:	1c20      	adds	r0, r4, #0
 8001c1e:	9b02      	ldr	r3, [sp, #8]
 8001c20:	f7ff ff99 	bl	8001b56 <u8g_DrawStr90>
 8001c24:	e008      	b.n	8001c38 <u8g_DrawStrDir+0x3a>
    case 2:
      return u8g_DrawStr180(u8g, x, y, s);
 8001c26:	1c20      	adds	r0, r4, #0
 8001c28:	9b02      	ldr	r3, [sp, #8]
 8001c2a:	f7ff ffb0 	bl	8001b8e <u8g_DrawStr180>
 8001c2e:	e003      	b.n	8001c38 <u8g_DrawStrDir+0x3a>
    case 3:
      return u8g_DrawStr270(u8g, x, y, s);
 8001c30:	1c20      	adds	r0, r4, #0
 8001c32:	9b02      	ldr	r3, [sp, #8]
 8001c34:	f7ff ffc7 	bl	8001bc6 <u8g_DrawStr270>
  }
  return 0;
}
 8001c38:	bd10      	pop	{r4, pc}

08001c3a <u8g_DrawStrP>:

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c3c:	1c07      	adds	r7, r0, #0
 8001c3e:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return 0;
}

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001c42:	1c15      	adds	r5, r2, #0
 8001c44:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8001c46:	4798      	blx	r3
 8001c48:	1945      	adds	r5, r0, r5
 8001c4a:	b2eb      	uxtb	r3, r5
  return 0;
}

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001c4c:	2500      	movs	r5, #0
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8001c4e:	9301      	str	r3, [sp, #4]
  
  for(;;)
  {
    c = u8g_pgm_read(s);
 8001c50:	7833      	ldrb	r3, [r6, #0]
    if ( c == '\0' )
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <u8g_DrawStrP+0x34>
      break;
    d = u8g_draw_glyph(u8g, x, y, c);
 8001c56:	1c21      	adds	r1, r4, #0
 8001c58:	1c38      	adds	r0, r7, #0
 8001c5a:	9a01      	ldr	r2, [sp, #4]
 8001c5c:	f7ff fdc5 	bl	80017ea <u8g_draw_glyph>
    x += d;
 8001c60:	b2c0      	uxtb	r0, r0
 8001c62:	1904      	adds	r4, r0, r4
    t += d;
 8001c64:	1945      	adds	r5, r0, r5
  {
    c = u8g_pgm_read(s);
    if ( c == '\0' )
      break;
    d = u8g_draw_glyph(u8g, x, y, c);
    x += d;
 8001c66:	b2e4      	uxtb	r4, r4
    t += d;
 8001c68:	b2ed      	uxtb	r5, r5
    s++;
 8001c6a:	3601      	adds	r6, #1
  }
 8001c6c:	e7f0      	b.n	8001c50 <u8g_DrawStrP+0x16>
  return t;
}
 8001c6e:	1c28      	adds	r0, r5, #0
 8001c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001c72 <u8g_DrawStr90P>:

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c74:	1c07      	adds	r7, r0, #0
 8001c76:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001c7a:	1c0d      	adds	r5, r1, #0
 8001c7c:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8001c7e:	4798      	blx	r3
 8001c80:	1a2d      	subs	r5, r5, r0
 8001c82:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001c84:	2500      	movs	r5, #0
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8001c86:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001c88:	7833      	ldrb	r3, [r6, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <u8g_DrawStr90P+0x34>
  {
    d = u8g_DrawGlyph90(u8g, x, y, u8g_pgm_read(s));
 8001c8e:	1c22      	adds	r2, r4, #0
 8001c90:	1c38      	adds	r0, r7, #0
 8001c92:	9901      	ldr	r1, [sp, #4]
 8001c94:	f7ff fe56 	bl	8001944 <u8g_DrawGlyph90>
    y += d;
 8001c98:	b2c0      	uxtb	r0, r0
 8001c9a:	1904      	adds	r4, r0, r4
    t += d;
 8001c9c:	1945      	adds	r5, r0, r5
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_DrawGlyph90(u8g, x, y, u8g_pgm_read(s));
    y += d;
 8001c9e:	b2e4      	uxtb	r4, r4
    t += d;
 8001ca0:	b2ed      	uxtb	r5, r5
    s++;
 8001ca2:	3601      	adds	r6, #1
 8001ca4:	e7f0      	b.n	8001c88 <u8g_DrawStr90P+0x16>
  }
  return t;
}
 8001ca6:	1c28      	adds	r0, r5, #0
 8001ca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001caa <u8g_DrawStr180P>:

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cac:	1c07      	adds	r7, r0, #0
 8001cae:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001cb2:	1c15      	adds	r5, r2, #0
 8001cb4:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001cb6:	4798      	blx	r3
 8001cb8:	1a2d      	subs	r5, r5, r0
 8001cba:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001cbc:	2500      	movs	r5, #0
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8001cbe:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8001cc0:	7833      	ldrb	r3, [r6, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <u8g_DrawStr180P+0x34>
  {
    d = u8g_DrawGlyph180(u8g, x, y, u8g_pgm_read(s));
 8001cc6:	1c21      	adds	r1, r4, #0
 8001cc8:	1c38      	adds	r0, r7, #0
 8001cca:	9a01      	ldr	r2, [sp, #4]
 8001ccc:	f7ff feab 	bl	8001a26 <u8g_DrawGlyph180>
    x -= d;
 8001cd0:	b2c0      	uxtb	r0, r0
 8001cd2:	1a24      	subs	r4, r4, r0
    t += d;
 8001cd4:	1945      	adds	r5, r0, r5
  y -= u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_DrawGlyph180(u8g, x, y, u8g_pgm_read(s));
    x -= d;
 8001cd6:	b2e4      	uxtb	r4, r4
    t += d;
 8001cd8:	b2ed      	uxtb	r5, r5
    s++;
 8001cda:	3601      	adds	r6, #1
 8001cdc:	e7f0      	b.n	8001cc0 <u8g_DrawStr180P+0x16>
  }
  return t;
}
 8001cde:	1c28      	adds	r0, r5, #0
 8001ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001ce2 <u8g_DrawStr270P>:

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ce4:	1c07      	adds	r7, r0, #0
 8001ce6:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8001cea:	1c0d      	adds	r5, r1, #0
 8001cec:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001cee:	4798      	blx	r3
 8001cf0:	1945      	adds	r5, r0, r5
 8001cf2:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8001cf4:	2500      	movs	r5, #0
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8001cf6:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8001cf8:	7833      	ldrb	r3, [r6, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <u8g_DrawStr270P+0x34>
  {
    d = u8g_DrawGlyph270(u8g, x, y, u8g_pgm_read(s));
 8001cfe:	1c22      	adds	r2, r4, #0
 8001d00:	1c38      	adds	r0, r7, #0
 8001d02:	9901      	ldr	r1, [sp, #4]
 8001d04:	f7ff fefc 	bl	8001b00 <u8g_DrawGlyph270>
    y -= d;
 8001d08:	b2c0      	uxtb	r0, r0
 8001d0a:	1a24      	subs	r4, r4, r0
    t += d;
 8001d0c:	1945      	adds	r5, r0, r5
  x += u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_DrawGlyph270(u8g, x, y, u8g_pgm_read(s));
    y -= d;
 8001d0e:	b2e4      	uxtb	r4, r4
    t += d;
 8001d10:	b2ed      	uxtb	r5, r5
    s++;
 8001d12:	3601      	adds	r6, #1
 8001d14:	e7f0      	b.n	8001cf8 <u8g_DrawStr270P+0x16>
  }
  return t;
}
 8001d16:	1c28      	adds	r0, r5, #0
 8001d18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001d1a <u8g_DrawStrFontBBX>:

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
 8001d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d1c:	1c1e      	adds	r6, r3, #0
 8001d1e:	1c05      	adds	r5, r0, #0
 8001d20:	1c17      	adds	r7, r2, #0
 8001d22:	1c0c      	adds	r4, r1, #0
  x -= u8g_GetFontBBXOffX(u8g);
 8001d24:	f7ff fc8f 	bl	8001646 <u8g_GetFontBBXOffX>
 8001d28:	1a24      	subs	r4, r4, r0
  y += u8g_GetFontBBXOffY(u8g);
 8001d2a:	1c28      	adds	r0, r5, #0
 8001d2c:	f7ff fc8f 	bl	800164e <u8g_GetFontBBXOffY>
  return u8g_DrawStrDir(u8g, x, y, dir, s);
 8001d30:	9b08      	ldr	r3, [sp, #32]
}

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  x -= u8g_GetFontBBXOffX(u8g);
  y += u8g_GetFontBBXOffY(u8g);
 8001d32:	183a      	adds	r2, r7, r0
  return t;
}

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  x -= u8g_GetFontBBXOffX(u8g);
 8001d34:	b2e4      	uxtb	r4, r4
  y += u8g_GetFontBBXOffY(u8g);
  return u8g_DrawStrDir(u8g, x, y, dir, s);
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	1c28      	adds	r0, r5, #0
 8001d3a:	1c33      	adds	r3, r6, #0
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	1c21      	adds	r1, r4, #0
 8001d40:	f7ff ff5d 	bl	8001bfe <u8g_DrawStrDir>
}
 8001d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001d46 <u8g_DrawGlyphFontBBX>:

/* still used by picgen.c, dir argument is ignored */
int8_t u8g_DrawGlyphFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t encoding)
{
 8001d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d48:	ab06      	add	r3, sp, #24
 8001d4a:	781e      	ldrb	r6, [r3, #0]
 8001d4c:	1c05      	adds	r5, r0, #0
 8001d4e:	1c17      	adds	r7, r2, #0
 8001d50:	1c0c      	adds	r4, r1, #0
  x -= u8g_GetFontBBXOffX(u8g);
 8001d52:	f7ff fc78 	bl	8001646 <u8g_GetFontBBXOffX>
 8001d56:	1a24      	subs	r4, r4, r0
  y += u8g_GetFontBBXOffY(u8g);
 8001d58:	1c28      	adds	r0, r5, #0
 8001d5a:	f7ff fc78 	bl	800164e <u8g_GetFontBBXOffY>
}

/* still used by picgen.c, dir argument is ignored */
int8_t u8g_DrawGlyphFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t encoding)
{
  x -= u8g_GetFontBBXOffX(u8g);
 8001d5e:	b2e4      	uxtb	r4, r4
  y += u8g_GetFontBBXOffY(u8g);
 8001d60:	183a      	adds	r2, r7, r0
  u8g_draw_glyph(u8g, x, y, encoding);
 8001d62:	1c33      	adds	r3, r6, #0
 8001d64:	1c28      	adds	r0, r5, #0
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	1c21      	adds	r1, r4, #0
 8001d6a:	f7ff fd3e 	bl	80017ea <u8g_draw_glyph>
  return 0;
}
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d72 <u8g_UpdateRefHeight>:
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
  uint16_t ls;
  if ( u8g->font == NULL )
 8001d72:	6883      	ldr	r3, [r0, #8]

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8001d74:	b510      	push	{r4, lr}
  uint16_t ls;
  if ( u8g->font == NULL )
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d025      	beq.n	8001dc6 <u8g_UpdateRefHeight+0x54>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8001d7a:	1c02      	adds	r2, r0, #0
 8001d7c:	1c01      	adds	r1, r0, #0
 8001d7e:	3228      	adds	r2, #40	; 0x28
 8001d80:	7814      	ldrb	r4, [r2, #0]
 8001d82:	3129      	adds	r1, #41	; 0x29
 8001d84:	3202      	adds	r2, #2
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d103      	bne.n	8001d92 <u8g_UpdateRefHeight+0x20>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8001d8a:	795c      	ldrb	r4, [r3, #5]
 8001d8c:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	e008      	b.n	8001da4 <u8g_UpdateRefHeight+0x32>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8001d92:	2c01      	cmp	r4, #1
 8001d94:	d103      	bne.n	8001d9e <u8g_UpdateRefHeight+0x2c>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8001d96:	7bdc      	ldrb	r4, [r3, #15]
 8001d98:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8001d9a:	7c1b      	ldrb	r3, [r3, #16]
 8001d9c:	e002      	b.n	8001da4 <u8g_UpdateRefHeight+0x32>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8001d9e:	7b5c      	ldrb	r4, [r3, #13]
 8001da0:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8001da2:	7b9b      	ldrb	r3, [r3, #14]
 8001da4:	7013      	strb	r3, [r2, #0]
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8001da6:	2300      	movs	r3, #0
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	56cb      	ldrsb	r3, [r1, r3]
 8001dac:	b252      	sxtb	r2, r2
 8001dae:	1a9b      	subs	r3, r3, r2
  if ( u8g->font_line_spacing_factor != 64 )
 8001db0:	1c02      	adds	r2, r0, #0
 8001db2:	322b      	adds	r2, #43	; 0x2b
 8001db4:	7812      	ldrb	r2, [r2, #0]
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8001db6:	b29b      	uxth	r3, r3
  if ( u8g->font_line_spacing_factor != 64 )
 8001db8:	2a40      	cmp	r2, #64	; 0x40
 8001dba:	d002      	beq.n	8001dc2 <u8g_UpdateRefHeight+0x50>
  {
    ls &= 255;
 8001dbc:	b2db      	uxtb	r3, r3
    ls *= u8g->font_line_spacing_factor;
    ls >>= 6;
 8001dbe:	4353      	muls	r3, r2
 8001dc0:	099b      	lsrs	r3, r3, #6
  }
  u8g->line_spacing = ls;
 8001dc2:	302c      	adds	r0, #44	; 0x2c
 8001dc4:	7003      	strb	r3, [r0, #0]
}
 8001dc6:	bd10      	pop	{r4, pc}

08001dc8 <u8g_SetFontRefHeightText>:

void u8g_SetFontRefHeightText(u8g_t *u8g)
{
 8001dc8:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
 8001dca:	1c03      	adds	r3, r0, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	3328      	adds	r3, #40	; 0x28
 8001dd0:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001dd2:	f7ff ffce 	bl	8001d72 <u8g_UpdateRefHeight>
}
 8001dd6:	bd08      	pop	{r3, pc}

08001dd8 <u8g_SetFontRefHeightExtendedText>:

void u8g_SetFontRefHeightExtendedText(u8g_t *u8g)
{
 8001dd8:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8001dda:	1c03      	adds	r3, r0, #0
 8001ddc:	2201      	movs	r2, #1
 8001dde:	3328      	adds	r3, #40	; 0x28
 8001de0:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001de2:	f7ff ffc6 	bl	8001d72 <u8g_UpdateRefHeight>
}
 8001de6:	bd08      	pop	{r3, pc}

08001de8 <u8g_SetFontRefHeightAll>:


void u8g_SetFontRefHeightAll(u8g_t *u8g)
{
 8001de8:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_ALL;
 8001dea:	1c03      	adds	r3, r0, #0
 8001dec:	2202      	movs	r2, #2
 8001dee:	3328      	adds	r3, #40	; 0x28
 8001df0:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001df2:	f7ff ffbe 	bl	8001d72 <u8g_UpdateRefHeight>
}
 8001df6:	bd08      	pop	{r3, pc}

08001df8 <u8g_SetFontLineSpacingFactor>:

/* factor = 64: linespaceing == ascent and descent */
void u8g_SetFontLineSpacingFactor(u8g_t *u8g, uint8_t  factor)
{
 8001df8:	b508      	push	{r3, lr}
  u8g->font_line_spacing_factor = factor;
 8001dfa:	1c03      	adds	r3, r0, #0
 8001dfc:	332b      	adds	r3, #43	; 0x2b
 8001dfe:	7019      	strb	r1, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8001e00:	f7ff ffb7 	bl	8001d72 <u8g_UpdateRefHeight>
}
 8001e04:	bd08      	pop	{r3, pc}

08001e06 <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8001e06:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <u8g_SetFontPosBaseline+0x6>)
 8001e08:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e0a:	4770      	bx	lr
 8001e0c:	0800155f 	.word	0x0800155f

08001e10 <u8g_SetFontPosBottom>:
  return (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent);
}

void u8g_SetFontPosBottom(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_bottom;
 8001e10:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <u8g_SetFontPosBottom+0x8>)
 8001e12:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e14:	4770      	bx	lr
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	08001563 	.word	0x08001563

08001e1c <u8g_SetFontPosTop>:
  return tmp;
}

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
 8001e1c:	4b01      	ldr	r3, [pc, #4]	; (8001e24 <u8g_SetFontPosTop+0x8>)
 8001e1e:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e20:	4770      	bx	lr
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	08001569 	.word	0x08001569

08001e28 <u8g_SetFontPosCenter>:
  return tmp;
}

void u8g_SetFontPosCenter(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_center;
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <u8g_SetFontPosCenter+0x8>)
 8001e2a:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001e2c:	4770      	bx	lr
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	08001573 	.word	0x08001573

08001e34 <u8g_font_calc_str_pixel_width>:

typedef char (*u8g_font_get_char_fn)(const void *s);


u8g_uint_t u8g_font_calc_str_pixel_width(u8g_t *u8g, const char *s, u8g_font_get_char_fn get_char )
{
 8001e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e36:	1c05      	adds	r5, r0, #0
  uint8_t enc;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  w = 0;
    
  enc = get_char(s);
 8001e38:	1c08      	adds	r0, r1, #0

typedef char (*u8g_font_get_char_fn)(const void *s);


u8g_uint_t u8g_font_calc_str_pixel_width(u8g_t *u8g, const char *s, u8g_font_get_char_fn get_char )
{
 8001e3a:	1c0f      	adds	r7, r1, #0
 8001e3c:	9201      	str	r2, [sp, #4]
  uint8_t enc;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  w = 0;
    
  enc = get_char(s);
 8001e3e:	4790      	blx	r2
 8001e40:	1c06      	adds	r6, r0, #0
  
  /* check for empty string, width is already 0 */
  if ( enc == '\0' )
  {
    return w;
 8001e42:	2000      	movs	r0, #0
  w = 0;
    
  enc = get_char(s);
  
  /* check for empty string, width is already 0 */
  if ( enc == '\0' )
 8001e44:	4286      	cmp	r6, r0
 8001e46:	d021      	beq.n	8001e8c <u8g_font_calc_str_pixel_width+0x58>
    return w;
  }
  
  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  /* if *s is not inside the font, then the cached parameters of the glyph are all zero */
  u8g_GetGlyph(u8g, enc);
 8001e48:	1c28      	adds	r0, r5, #0
 8001e4a:	1c31      	adds	r1, r6, #0
 8001e4c:	f7ff fc06 	bl	800165c <u8g_GetGlyph>
  /* strlen(s) == 2:       width = - offx(s[0]) + deltax(s[0]) + offx(s[1]) + width(s[1]) */
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  w = -u8g->glyph_x;  
 8001e50:	7f6c      	ldrb	r4, [r5, #29]
 8001e52:	4264      	negs	r4, r4
 8001e54:	b2e4      	uxtb	r4, r4
  for(;;)
  {
    
    /* check and stop if the end of the string is reached */
    s++;
 8001e56:	3701      	adds	r7, #1
    if ( get_char(s) == '\0' )
 8001e58:	1c38      	adds	r0, r7, #0
 8001e5a:	9b01      	ldr	r3, [sp, #4]
 8001e5c:	4798      	blx	r3
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d00b      	beq.n	8001e7a <u8g_font_calc_str_pixel_width+0x46>
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8001e62:	7f28      	ldrb	r0, [r5, #28]
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
 8001e64:	9b01      	ldr	r3, [sp, #4]
    s++;
    if ( get_char(s) == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8001e66:	1824      	adds	r4, r4, r0
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
 8001e68:	1c38      	adds	r0, r7, #0
 8001e6a:	4798      	blx	r3
 8001e6c:	1c06      	adds	r6, r0, #0
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, enc);
 8001e6e:	1c28      	adds	r0, r5, #0
 8001e70:	1c31      	adds	r1, r6, #0
    s++;
    if ( get_char(s) == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8001e72:	b2e4      	uxtb	r4, r4
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, enc);
 8001e74:	f7ff fbf2 	bl	800165c <u8g_GetGlyph>
  }
 8001e78:	e7ed      	b.n	8001e56 <u8g_font_calc_str_pixel_width+0x22>
  
  /* finally calculate the width of the last char */
  /* here is another exception, if the last char is a black, use the dx value instead */
  if ( enc != ' ' )
 8001e7a:	2e20      	cmp	r6, #32
 8001e7c:	d003      	beq.n	8001e86 <u8g_font_calc_str_pixel_width+0x52>
 8001e7e:	7f68      	ldrb	r0, [r5, #29]
 8001e80:	7feb      	ldrb	r3, [r5, #31]
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	e000      	b.n	8001e88 <u8g_font_calc_str_pixel_width+0x54>
    w += u8g->glyph_width;
    w += u8g->glyph_x;
  }
  else
  {
    w += u8g->glyph_dx;
 8001e86:	7f28      	ldrb	r0, [r5, #28]
 8001e88:	1824      	adds	r4, r4, r0
 8001e8a:	b2e0      	uxtb	r0, r4
  }
  
  
  return w;
}
 8001e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001e8e <u8g_GetStrPixelWidth>:

u8g_uint_t u8g_GetStrPixelWidth(u8g_t *u8g, const char *s)
{
 8001e8e:	b508      	push	{r3, lr}
  return u8g_font_calc_str_pixel_width(u8g, s, u8g_font_get_char);
 8001e90:	4a01      	ldr	r2, [pc, #4]	; (8001e98 <u8g_GetStrPixelWidth+0xa>)
 8001e92:	f7ff ffcf 	bl	8001e34 <u8g_font_calc_str_pixel_width>
}
 8001e96:	bd08      	pop	{r3, pc}
 8001e98:	0800158d 	.word	0x0800158d

08001e9c <u8g_GetStrPixelWidthP>:

u8g_uint_t u8g_GetStrPixelWidthP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001e9c:	b508      	push	{r3, lr}
  return u8g_font_calc_str_pixel_width(u8g, (const char *)s, u8g_font_get_charP);
 8001e9e:	4a02      	ldr	r2, [pc, #8]	; (8001ea8 <u8g_GetStrPixelWidthP+0xc>)
 8001ea0:	f7ff ffc8 	bl	8001e34 <u8g_font_calc_str_pixel_width>
}
 8001ea4:	bd08      	pop	{r3, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	08001591 	.word	0x08001591

08001eac <u8g_GetStrX>:

int8_t u8g_GetStrX(u8g_t *u8g, const char *s)
{
 8001eac:	b510      	push	{r4, lr}
  u8g_GetGlyph(u8g, *s);
 8001eae:	7809      	ldrb	r1, [r1, #0]
{
  return u8g_font_calc_str_pixel_width(u8g, (const char *)s, u8g_font_get_charP);
}

int8_t u8g_GetStrX(u8g_t *u8g, const char *s)
{
 8001eb0:	1c04      	adds	r4, r0, #0
  u8g_GetGlyph(u8g, *s);
 8001eb2:	f7ff fbd3 	bl	800165c <u8g_GetGlyph>
  return u8g->glyph_x;  
 8001eb6:	201d      	movs	r0, #29
 8001eb8:	5620      	ldrsb	r0, [r4, r0]
}
 8001eba:	bd10      	pop	{r4, pc}

08001ebc <u8g_GetStrXP>:

int8_t u8g_GetStrXP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001ebc:	b510      	push	{r4, lr}
  u8g_GetGlyph(u8g, u8g_pgm_read(s));
 8001ebe:	7809      	ldrb	r1, [r1, #0]
  u8g_GetGlyph(u8g, *s);
  return u8g->glyph_x;  
}

int8_t u8g_GetStrXP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001ec0:	1c04      	adds	r4, r0, #0
  u8g_GetGlyph(u8g, u8g_pgm_read(s));
 8001ec2:	f7ff fbcb 	bl	800165c <u8g_GetGlyph>
  return u8g->glyph_x;  
 8001ec6:	201d      	movs	r0, #29
 8001ec8:	5620      	ldrsb	r0, [r4, r0]
}
 8001eca:	bd10      	pop	{r4, pc}

08001ecc <u8g_GetStrWidth>:

/*========================================================================*/
/* string width calculation */

u8g_uint_t u8g_GetStrWidth(u8g_t *u8g, const char *s)
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	1c06      	adds	r6, r0, #0
 8001ed0:	1c0d      	adds	r5, r1, #0
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8001ed2:	2400      	movs	r4, #0
  
  for(;;)
  {
    encoding = *s;
 8001ed4:	7829      	ldrb	r1, [r5, #0]
    if ( encoding == 0 )
 8001ed6:	2900      	cmp	r1, #0
 8001ed8:	d007      	beq.n	8001eea <u8g_GetStrWidth+0x1e>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
 8001eda:	1c30      	adds	r0, r6, #0
 8001edc:	f7ff fbbe 	bl	800165c <u8g_GetGlyph>
    w += u8g->glyph_dx;    
 8001ee0:	7f33      	ldrb	r3, [r6, #28]
    
    /* goto next char */
    s++;
 8001ee2:	3501      	adds	r5, #1
    if ( encoding == 0 )
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
    w += u8g->glyph_dx;    
 8001ee4:	18e4      	adds	r4, r4, r3
 8001ee6:	b2e4      	uxtb	r4, r4
    
    /* goto next char */
    s++;
  }
 8001ee8:	e7f4      	b.n	8001ed4 <u8g_GetStrWidth+0x8>
  
  return w;  
}
 8001eea:	1c20      	adds	r0, r4, #0
 8001eec:	bd70      	pop	{r4, r5, r6, pc}

08001eee <u8g_GetStrWidthP>:


u8g_uint_t u8g_GetStrWidthP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8001eee:	b570      	push	{r4, r5, r6, lr}
 8001ef0:	1c06      	adds	r6, r0, #0
 8001ef2:	1c0d      	adds	r5, r1, #0
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8001ef4:	2400      	movs	r4, #0
  
  for(;;)
  {
    encoding = u8g_pgm_read(s);
 8001ef6:	7829      	ldrb	r1, [r5, #0]
    if ( encoding == 0 )
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d007      	beq.n	8001f0c <u8g_GetStrWidthP+0x1e>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
 8001efc:	1c30      	adds	r0, r6, #0
 8001efe:	f7ff fbad 	bl	800165c <u8g_GetGlyph>
    w += u8g->glyph_dx;    
 8001f02:	7f33      	ldrb	r3, [r6, #28]
    
    /* goto next char */
    s++;
 8001f04:	3501      	adds	r5, #1
    if ( encoding == 0 )
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
    w += u8g->glyph_dx;    
 8001f06:	18e4      	adds	r4, r4, r3
 8001f08:	b2e4      	uxtb	r4, r4
    
    /* goto next char */
    s++;
  }
 8001f0a:	e7f4      	b.n	8001ef6 <u8g_GetStrWidthP+0x8>
  
  return w;  
}
 8001f0c:	1c20      	adds	r0, r4, #0
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}

08001f10 <u8g_font_box_min>:
  buf->w += u8g->glyph_x;
}

/* calculate minimal box */
void u8g_font_box_min(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 8001f10:	b508      	push	{r3, lr}
  u8g_font_calc_str_min_box(u8g, s, buf);
 8001f12:	f7ff fc18 	bl	8001746 <u8g_font_calc_str_min_box>
}
 8001f16:	bd08      	pop	{r3, pc}

08001f18 <u8g_font_box_left_gA>:

/* calculate gA box, but do not calculate the overall width */
void u8g_font_box_left_gA(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
  
}
 8001f18:	4770      	bx	lr

08001f1a <u8g_font_box_all_gA>:

/* calculate gA box, including overall width */
void u8g_font_box_all_gA(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
  
}
 8001f1a:	4770      	bx	lr

08001f1c <u8g_GetStrMinBox>:
  *height -= buf->y_min;
}


void u8g_GetStrMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8001f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  u8g_str_size_t buf;
  
  if ( *s == '\0' )
 8001f1e:	780c      	ldrb	r4, [r1, #0]
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d104      	bne.n	8001f2e <u8g_GetStrMinBox+0x12>
  {
    *width= 0;
 8001f24:	9b08      	ldr	r3, [sp, #32]
 8001f26:	701c      	strb	r4, [r3, #0]
    *height = 0;
 8001f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f2a:	701c      	strb	r4, [r3, #0]
 8001f2c:	e01c      	b.n	8001f68 <u8g_GetStrMinBox+0x4c>
 8001f2e:	1c04      	adds	r4, r0, #0
 8001f30:	1c0d      	adds	r5, r1, #0
 8001f32:	1c17      	adds	r7, r2, #0
    return;
  }
  
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8001f34:	466a      	mov	r2, sp
 8001f36:	1c1e      	adds	r6, r3, #0
 8001f38:	f7ff fc05 	bl	8001746 <u8g_font_calc_str_min_box>
{
  /*
  u8g_glyph_t g;
  g =
  */  
  u8g_GetGlyph(u8g, *s);
 8001f3c:	7829      	ldrb	r1, [r5, #0]
 8001f3e:	1c20      	adds	r0, r4, #0
 8001f40:	f7ff fb8c 	bl	800165c <u8g_GetGlyph>
  *x += u8g->glyph_x;
 8001f44:	783a      	ldrb	r2, [r7, #0]
 8001f46:	7f63      	ldrb	r3, [r4, #29]
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	703b      	strb	r3, [r7, #0]
  *width = buf->w;
 8001f4c:	466b      	mov	r3, sp
 8001f4e:	9a08      	ldr	r2, [sp, #32]
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	7013      	strb	r3, [r2, #0]
  *y -= buf->y_max;
 8001f54:	466b      	mov	r3, sp
 8001f56:	7832      	ldrb	r2, [r6, #0]
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	7032      	strb	r2, [r6, #0]
  /* +1 because y_max is a height, this compensates the next step */
  //*y += 1;                      
  /* because the reference point is one below the string, this compensates the previous step */
  //*y -= 1;
  *height = buf->y_max;
  *height -= buf->y_min;
 8001f5e:	466a      	mov	r2, sp
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f66:	7013      	strb	r3, [r2, #0]
    return;
  }
  
  u8g_font_calc_str_min_box(u8g, s, &buf);
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
 8001f68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001f6a <u8g_GetStrAMinBox>:


void u8g_GetStrAMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8001f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  u8g_str_size_t buf;
  uint8_t cap_a;
  
  if ( *s == '\0' )
 8001f6c:	780f      	ldrb	r7, [r1, #0]
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}


void u8g_GetStrAMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8001f6e:	b085      	sub	sp, #20
  u8g_str_size_t buf;
  uint8_t cap_a;
  
  if ( *s == '\0' )
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	d104      	bne.n	8001f7e <u8g_GetStrAMinBox+0x14>
  {
    *width= 0;
 8001f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f76:	701f      	strb	r7, [r3, #0]
    *height = 0;
 8001f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f7a:	701f      	strb	r7, [r3, #0]
 8001f7c:	e026      	b.n	8001fcc <u8g_GetStrAMinBox+0x62>
 8001f7e:	1c1d      	adds	r5, r3, #0
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001f80:	6883      	ldr	r3, [r0, #8]
 8001f82:	1c16      	adds	r6, r2, #0
    *height = 0;
    return;
  }
  
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8001f84:	aa02      	add	r2, sp, #8
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001f86:	795f      	ldrb	r7, [r3, #5]
 8001f88:	9101      	str	r1, [sp, #4]
 8001f8a:	1c04      	adds	r4, r0, #0
    *height = 0;
    return;
  }
  
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8001f8c:	f7ff fbdb 	bl	8001746 <u8g_font_calc_str_min_box>
  if ( buf.y_max < cap_a )
 8001f90:	ab02      	add	r3, sp, #8
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	42bb      	cmp	r3, r7
 8001f98:	da01      	bge.n	8001f9e <u8g_GetStrAMinBox+0x34>
    buf.y_max = cap_a;
 8001f9a:	ab02      	add	r3, sp, #8
 8001f9c:	705f      	strb	r7, [r3, #1]
{
  /*
  u8g_glyph_t g;
  g =
  */  
  u8g_GetGlyph(u8g, *s);
 8001f9e:	9b01      	ldr	r3, [sp, #4]
 8001fa0:	1c20      	adds	r0, r4, #0
 8001fa2:	7819      	ldrb	r1, [r3, #0]
 8001fa4:	f7ff fb5a 	bl	800165c <u8g_GetGlyph>
  *x += u8g->glyph_x;
 8001fa8:	7832      	ldrb	r2, [r6, #0]
 8001faa:	7f63      	ldrb	r3, [r4, #29]
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	7033      	strb	r3, [r6, #0]
  *width = buf->w;
 8001fb0:	ab02      	add	r3, sp, #8
 8001fb2:	791b      	ldrb	r3, [r3, #4]
 8001fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fb6:	7013      	strb	r3, [r2, #0]
  *y -= buf->y_max;
 8001fb8:	ab02      	add	r3, sp, #8
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	782a      	ldrb	r2, [r5, #0]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	702a      	strb	r2, [r5, #0]
  /* +1 because y_max is a height, this compensates the next step */
  //*y += 1;                      
  /* because the reference point is one below the string, this compensates the previous step */
  //*y -= 1;
  *height = buf->y_max;
  *height -= buf->y_min;
 8001fc2:	aa02      	add	r2, sp, #8
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001fca:	7013      	strb	r3, [r2, #0]
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
 8001fcc:	b005      	add	sp, #20
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fd0 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
  if ( u8g->font != font )
 8001fd0:	6883      	ldr	r3, [r0, #8]
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8001fd2:	b510      	push	{r4, lr}
  if ( u8g->font != font )
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d005      	beq.n	8001fe4 <u8g_SetFont+0x14>
 8001fd8:	1c04      	adds	r4, r0, #0
  {
    u8g->font = font;
 8001fda:	6081      	str	r1, [r0, #8]
    u8g_UpdateRefHeight(u8g);
 8001fdc:	f7ff fec9 	bl	8001d72 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8001fe0:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <u8g_SetFont+0x18>)
 8001fe2:	6263      	str	r3, [r4, #36]	; 0x24
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	0800155f 	.word	0x0800155f

08001fec <u8g_draw_aa_glyph>:

/*========================================================================*/
/* anti aliasing fonts */

int8_t u8g_draw_aa_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	1c0f      	adds	r7, r1, #0
 8001ff0:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001ff2:	1c19      	adds	r1, r3, #0

/*========================================================================*/
/* anti aliasing fonts */

int8_t u8g_draw_aa_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001ff4:	1c04      	adds	r4, r0, #0
 8001ff6:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001ff8:	f7ff fb30 	bl	800165c <u8g_GetGlyph>
 8001ffc:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 8001ffe:	d03d      	beq.n	800207c <u8g_draw_aa_glyph+0x90>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002000:	68a3      	ldr	r3, [r4, #8]
 8002002:	7818      	ldrb	r0, [r3, #0]
 8002004:	f7ff fac7 	bl	8001596 <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8002008:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800200a:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800200c:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 800200e:	1c63      	adds	r3, r4, #1
 8002010:	7fda      	ldrb	r2, [r3, #31]
  
  x += u8g->glyph_x;
 8002012:	7f63      	ldrb	r3, [r4, #29]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002014:	9200      	str	r2, [sp, #0]
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_x;
 8002016:	18ff      	adds	r7, r7, r3
 8002018:	b2fb      	uxtb	r3, r7
 800201a:	9304      	str	r3, [sp, #16]
 800201c:	7fa3      	ldrb	r3, [r4, #30]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 800201e:	1c20      	adds	r0, r4, #0
 8002020:	1af6      	subs	r6, r6, r3
 8002022:	b2f3      	uxtb	r3, r6
 8002024:	1a9e      	subs	r6, r3, r2
 8002026:	b2f6      	uxtb	r6, r6
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	9904      	ldr	r1, [sp, #16]
 800202c:	1c32      	adds	r2, r6, #0
 800202e:	9b03      	ldr	r3, [sp, #12]
 8002030:	f7ff fa60 	bl	80014f4 <u8g_IsBBXIntersection>
 8002034:	2800      	cmp	r0, #0
 8002036:	d020      	beq.n	800207a <u8g_draw_aa_glyph+0x8e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002038:	9b05      	ldr	r3, [sp, #20]
 800203a:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 3;
 800203c:	9b03      	ldr	r3, [sp, #12]
 800203e:	3303      	adds	r3, #3
 8002040:	b2db      	uxtb	r3, r3
  w /= 4;
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	9303      	str	r3, [sp, #12]
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
 8002046:	9b02      	ldr	r3, [sp, #8]
 8002048:	429e      	cmp	r6, r3
 800204a:	d016      	beq.n	800207a <u8g_draw_aa_glyph+0x8e>
 800204c:	1c2f      	adds	r7, r5, #0
 800204e:	1b7b      	subs	r3, r7, r5
 8002050:	9a04      	ldr	r2, [sp, #16]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	0099      	lsls	r1, r3, #2
 8002056:	1851      	adds	r1, r2, r1
  {
    ix = x;
    for( i = 0; i < w; i++ )
 8002058:	9a03      	ldr	r2, [sp, #12]
 800205a:	b2c9      	uxtb	r1, r1
 800205c:	4293      	cmp	r3, r2
 800205e:	d208      	bcs.n	8002072 <u8g_draw_aa_glyph+0x86>
    {
      u8g_Draw4TPixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002060:	783b      	ldrb	r3, [r7, #0]
 8002062:	1c20      	adds	r0, r4, #0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	1c32      	adds	r2, r6, #0
 8002068:	2300      	movs	r3, #0
 800206a:	f000 fc96 	bl	800299a <u8g_Draw4TPixel>
      data++;
 800206e:	3701      	adds	r7, #1
 8002070:	e7ed      	b.n	800204e <u8g_draw_aa_glyph+0x62>
      ix+=4;
    }
    iy++;
 8002072:	3601      	adds	r6, #1
 8002074:	18ad      	adds	r5, r5, r2
 8002076:	b2f6      	uxtb	r6, r6
 8002078:	e7e5      	b.n	8002046 <u8g_draw_aa_glyph+0x5a>
  }
  return u8g->glyph_dx;
 800207a:	7f20      	ldrb	r0, [r4, #28]
 800207c:	b240      	sxtb	r0, r0
}
 800207e:	b007      	add	sp, #28
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002082 <u8g_DrawAAGlyph>:

int8_t u8g_DrawAAGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002084:	1c05      	adds	r5, r0, #0
 8002086:	1c1e      	adds	r6, r3, #0
  y += u8g->font_calc_vref(u8g);
 8002088:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawAAGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800208a:	1c0f      	adds	r7, r1, #0
 800208c:	1c14      	adds	r4, r2, #0
  y += u8g->font_calc_vref(u8g);
 800208e:	4798      	blx	r3
 8002090:	1902      	adds	r2, r0, r4
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
 8002092:	1c39      	adds	r1, r7, #0
 8002094:	1c28      	adds	r0, r5, #0
 8002096:	1c33      	adds	r3, r6, #0
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f7ff ffa7 	bl	8001fec <u8g_draw_aa_glyph>
}
 800209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020a0 <u8g_DrawAAStr>:

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 80020a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020a2:	1c1f      	adds	r7, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 80020a4:	6883      	ldr	r3, [r0, #8]
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 80020a6:	1c06      	adds	r6, r0, #0
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 80020a8:	7818      	ldrb	r0, [r3, #0]
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 80020aa:	1c0d      	adds	r5, r1, #0
 80020ac:	9201      	str	r2, [sp, #4]
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 80020ae:	f7ff fa71 	bl	8001594 <u8g_font_GetFormat.isra.0>
    return 0;
 80020b2:	2400      	movs	r4, #0
u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 80020b4:	2802      	cmp	r0, #2
 80020b6:	d115      	bne.n	80020e4 <u8g_DrawAAStr+0x44>
    return 0;
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 80020b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80020ba:	1c30      	adds	r0, r6, #0
 80020bc:	4798      	blx	r3
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	18c0      	adds	r0, r0, r3
 80020c2:	b2c3      	uxtb	r3, r0
 80020c4:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 80020c6:	783b      	ldrb	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <u8g_DrawAAStr+0x44>
  {
    d = u8g_draw_aa_glyph(u8g, x, y, *s);
 80020cc:	1c29      	adds	r1, r5, #0
 80020ce:	1c30      	adds	r0, r6, #0
 80020d0:	9a01      	ldr	r2, [sp, #4]
 80020d2:	f7ff ff8b 	bl	8001fec <u8g_draw_aa_glyph>
    x += d;
 80020d6:	b2c0      	uxtb	r0, r0
 80020d8:	1945      	adds	r5, r0, r5
    t += d;
 80020da:	1904      	adds	r4, r0, r4
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_aa_glyph(u8g, x, y, *s);
    x += d;
 80020dc:	b2ed      	uxtb	r5, r5
    t += d;
 80020de:	b2e4      	uxtb	r4, r4
    s++;
 80020e0:	3701      	adds	r7, #1
 80020e2:	e7f0      	b.n	80020c6 <u8g_DrawAAStr+0x26>
  }
  return t;
}
 80020e4:	1c20      	adds	r0, r4, #0
 80020e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080020e8 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80020e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ea:	1c05      	adds	r5, r0, #0
  switch(msg)
 80020ec:	1c10      	adds	r0, r2, #0
 80020ee:	380a      	subs	r0, #10
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80020f0:	1c0c      	adds	r4, r1, #0
 80020f2:	1c16      	adds	r6, r2, #0
 80020f4:	9301      	str	r3, [sp, #4]
  switch(msg)
 80020f6:	280b      	cmp	r0, #11
 80020f8:	d83b      	bhi.n	8002172 <u8g_dev_ssd1306_128x64_fn+0x8a>
 80020fa:	f000 ff69 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 80020fe:	3a06      	.short	0x3a06
 8002100:	3a3a3a3a 	.word	0x3a3a3a3a
 8002104:	3a3a332f 	.word	0x3a3a332f
 8002108:	103a      	.short	0x103a
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800210a:	1c28      	adds	r0, r5, #0
 800210c:	2202      	movs	r2, #2
 800210e:	f000 fe4a 	bl	8002da6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8002112:	1c28      	adds	r0, r5, #0
 8002114:	1c21      	adds	r1, r4, #0
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8002118:	f000 fe7c 	bl	8002e14 <u8g_WriteEscSeqP>
      break;
 800211c:	e029      	b.n	8002172 <u8g_dev_ssd1306_128x64_fn+0x8a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8002120:	1c28      	adds	r0, r5, #0
 8002122:	3226      	adds	r2, #38	; 0x26
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002124:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002126:	f000 fe75 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 800212a:	23b0      	movs	r3, #176	; 0xb0
 800212c:	793a      	ldrb	r2, [r7, #4]
 800212e:	1c21      	adds	r1, r4, #0
 8002130:	431a      	orrs	r2, r3
 8002132:	1c28      	adds	r0, r5, #0
 8002134:	f000 fe5e 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002138:	1c28      	adds	r0, r5, #0
 800213a:	1c21      	adds	r1, r4, #0
 800213c:	2201      	movs	r2, #1
 800213e:	f000 fe53 	bl	8002de8 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8002142:	1c38      	adds	r0, r7, #0
 8002144:	1c29      	adds	r1, r5, #0
 8002146:	1c22      	adds	r2, r4, #0
 8002148:	f000 ff0f 	bl	8002f6a <u8g_pb_WriteBuffer>
 800214c:	2800      	cmp	r0, #0
 800214e:	d016      	beq.n	800217e <u8g_dev_ssd1306_128x64_fn+0x96>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 8002150:	1c28      	adds	r0, r5, #0
 8002152:	1c21      	adds	r1, r4, #0
 8002154:	2200      	movs	r2, #0
 8002156:	f000 fe33 	bl	8002dc0 <u8g_SetChipSelect>
      }
      break;
 800215a:	e00a      	b.n	8002172 <u8g_dev_ssd1306_128x64_fn+0x8a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <u8g_dev_ssd1306_128x64_fn+0x98>)
 800215e:	1c28      	adds	r0, r5, #0
 8002160:	322e      	adds	r2, #46	; 0x2e
 8002162:	e002      	b.n	800216a <u8g_dev_ssd1306_128x64_fn+0x82>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002164:	1c28      	adds	r0, r5, #0
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8002168:	3237      	adds	r2, #55	; 0x37
 800216a:	f000 fe53 	bl	8002e14 <u8g_WriteEscSeqP>
      return 1;
 800216e:	2001      	movs	r0, #1
 8002170:	e005      	b.n	800217e <u8g_dev_ssd1306_128x64_fn+0x96>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8002172:	1c28      	adds	r0, r5, #0
 8002174:	1c21      	adds	r1, r4, #0
 8002176:	1c32      	adds	r2, r6, #0
 8002178:	9b01      	ldr	r3, [sp, #4]
 800217a:	f000 fdd5 	bl	8002d28 <u8g_dev_pb8v1_base_fn>
}
 800217e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002180:	08004f1b 	.word	0x08004f1b

08002184 <u8g_dev_ssd1306_adafruit_128x64_fn>:

uint8_t u8g_dev_ssd1306_adafruit_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002186:	1c05      	adds	r5, r0, #0
  switch(msg)
 8002188:	1c10      	adds	r0, r2, #0
 800218a:	380a      	subs	r0, #10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_adafruit_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800218c:	1c0c      	adds	r4, r1, #0
 800218e:	1c16      	adds	r6, r2, #0
 8002190:	9301      	str	r3, [sp, #4]
  switch(msg)
 8002192:	280b      	cmp	r0, #11
 8002194:	d83c      	bhi.n	8002210 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
 8002196:	f000 ff1b 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 800219a:	3b06      	.short	0x3b06
 800219c:	3b3b3b3b 	.word	0x3b3b3b3b
 80021a0:	3b3b3430 	.word	0x3b3b3430
 80021a4:	113b      	.short	0x113b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80021a6:	1c28      	adds	r0, r5, #0
 80021a8:	2202      	movs	r2, #2
 80021aa:	f000 fdfc 	bl	8002da6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 80021ae:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 80021b0:	1c28      	adds	r0, r5, #0
 80021b2:	1c21      	adds	r1, r4, #0
 80021b4:	3242      	adds	r2, #66	; 0x42
 80021b6:	f000 fe2d 	bl	8002e14 <u8g_WriteEscSeqP>
      break;
 80021ba:	e029      	b.n	8002210 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 80021be:	1c28      	adds	r0, r5, #0
 80021c0:	3226      	adds	r2, #38	; 0x26
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80021c2:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80021c4:	f000 fe26 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 80021c8:	23b0      	movs	r3, #176	; 0xb0
 80021ca:	793a      	ldrb	r2, [r7, #4]
 80021cc:	1c21      	adds	r1, r4, #0
 80021ce:	431a      	orrs	r2, r3
 80021d0:	1c28      	adds	r0, r5, #0
 80021d2:	f000 fe0f 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80021d6:	1c28      	adds	r0, r5, #0
 80021d8:	1c21      	adds	r1, r4, #0
 80021da:	2201      	movs	r2, #1
 80021dc:	f000 fe04 	bl	8002de8 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80021e0:	1c38      	adds	r0, r7, #0
 80021e2:	1c29      	adds	r1, r5, #0
 80021e4:	1c22      	adds	r2, r4, #0
 80021e6:	f000 fec0 	bl	8002f6a <u8g_pb_WriteBuffer>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d016      	beq.n	800221c <u8g_dev_ssd1306_adafruit_128x64_fn+0x98>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 80021ee:	1c28      	adds	r0, r5, #0
 80021f0:	1c21      	adds	r1, r4, #0
 80021f2:	2200      	movs	r2, #0
 80021f4:	f000 fde4 	bl	8002dc0 <u8g_SetChipSelect>
      }
      break;
 80021f8:	e00a      	b.n	8002210 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 80021fc:	1c28      	adds	r0, r5, #0
 80021fe:	322e      	adds	r2, #46	; 0x2e
 8002200:	e002      	b.n	8002208 <u8g_dev_ssd1306_adafruit_128x64_fn+0x84>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002202:	1c28      	adds	r0, r5, #0
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8002206:	3237      	adds	r2, #55	; 0x37
 8002208:	f000 fe04 	bl	8002e14 <u8g_WriteEscSeqP>
      return 1;
 800220c:	2001      	movs	r0, #1
 800220e:	e005      	b.n	800221c <u8g_dev_ssd1306_adafruit_128x64_fn+0x98>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8002210:	1c28      	adds	r0, r5, #0
 8002212:	1c21      	adds	r1, r4, #0
 8002214:	1c32      	adds	r2, r6, #0
 8002216:	9b01      	ldr	r3, [sp, #4]
 8002218:	f000 fd86 	bl	8002d28 <u8g_dev_pb8v1_base_fn>
}
 800221c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	08004f1b 	.word	0x08004f1b

08002224 <u8g_dev_sh1106_128x64_fn>:

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002226:	1c05      	adds	r5, r0, #0
  switch(msg)
 8002228:	1c10      	adds	r0, r2, #0
 800222a:	380a      	subs	r0, #10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800222c:	1c0c      	adds	r4, r1, #0
 800222e:	1c16      	adds	r6, r2, #0
 8002230:	9301      	str	r3, [sp, #4]
  switch(msg)
 8002232:	280b      	cmp	r0, #11
 8002234:	d83c      	bhi.n	80022b0 <u8g_dev_sh1106_128x64_fn+0x8c>
 8002236:	f000 fecb 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 800223a:	3b06      	.short	0x3b06
 800223c:	3b3b3b3b 	.word	0x3b3b3b3b
 8002240:	3b3b3430 	.word	0x3b3b3430
 8002244:	113b      	.short	0x113b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8002246:	1c28      	adds	r0, r5, #0
 8002248:	2202      	movs	r2, #2
 800224a:	f000 fdac 	bl	8002da6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <u8g_dev_sh1106_128x64_fn+0x9c>)
 8002250:	1c28      	adds	r0, r5, #0
 8002252:	1c21      	adds	r1, r4, #0
 8002254:	3242      	adds	r2, #66	; 0x42
 8002256:	f000 fddd 	bl	8002e14 <u8g_WriteEscSeqP>
      break;
 800225a:	e029      	b.n	80022b0 <u8g_dev_sh1106_128x64_fn+0x8c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <u8g_dev_sh1106_128x64_fn+0x9c>)
 800225e:	1c28      	adds	r0, r5, #0
 8002260:	3268      	adds	r2, #104	; 0x68
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002262:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8002264:	f000 fdd6 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8002268:	23b0      	movs	r3, #176	; 0xb0
 800226a:	793a      	ldrb	r2, [r7, #4]
 800226c:	1c21      	adds	r1, r4, #0
 800226e:	431a      	orrs	r2, r3
 8002270:	1c28      	adds	r0, r5, #0
 8002272:	f000 fdbf 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002276:	1c28      	adds	r0, r5, #0
 8002278:	1c21      	adds	r1, r4, #0
 800227a:	2201      	movs	r2, #1
 800227c:	f000 fdb4 	bl	8002de8 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8002280:	1c38      	adds	r0, r7, #0
 8002282:	1c29      	adds	r1, r5, #0
 8002284:	1c22      	adds	r2, r4, #0
 8002286:	f000 fe70 	bl	8002f6a <u8g_pb_WriteBuffer>
 800228a:	2800      	cmp	r0, #0
 800228c:	d016      	beq.n	80022bc <u8g_dev_sh1106_128x64_fn+0x98>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 800228e:	1c28      	adds	r0, r5, #0
 8002290:	1c21      	adds	r1, r4, #0
 8002292:	2200      	movs	r2, #0
 8002294:	f000 fd94 	bl	8002dc0 <u8g_SetChipSelect>
      }
      break;
 8002298:	e00a      	b.n	80022b0 <u8g_dev_sh1106_128x64_fn+0x8c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <u8g_dev_sh1106_128x64_fn+0x9c>)
 800229c:	1c28      	adds	r0, r5, #0
 800229e:	322e      	adds	r2, #46	; 0x2e
 80022a0:	e002      	b.n	80022a8 <u8g_dev_sh1106_128x64_fn+0x84>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80022a2:	1c28      	adds	r0, r5, #0
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <u8g_dev_sh1106_128x64_fn+0x9c>)
 80022a6:	3237      	adds	r2, #55	; 0x37
 80022a8:	f000 fdb4 	bl	8002e14 <u8g_WriteEscSeqP>
      return 1;
 80022ac:	2001      	movs	r0, #1
 80022ae:	e005      	b.n	80022bc <u8g_dev_sh1106_128x64_fn+0x98>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 80022b0:	1c28      	adds	r0, r5, #0
 80022b2:	1c21      	adds	r1, r4, #0
 80022b4:	1c32      	adds	r2, r6, #0
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	f000 fd36 	bl	8002d28 <u8g_dev_pb8v1_base_fn>
}
 80022bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	08004f1b 	.word	0x08004f1b

080022c4 <u8g_dev_ssd1306_128x64_2x_fn>:


uint8_t u8g_dev_ssd1306_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80022c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022c6:	1c05      	adds	r5, r0, #0
  switch(msg)
 80022c8:	1c10      	adds	r0, r2, #0
 80022ca:	380a      	subs	r0, #10
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}


uint8_t u8g_dev_ssd1306_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80022cc:	1c0c      	adds	r4, r1, #0
 80022ce:	1c17      	adds	r7, r2, #0
 80022d0:	9301      	str	r3, [sp, #4]
  switch(msg)
 80022d2:	280b      	cmp	r0, #11
 80022d4:	d861      	bhi.n	800239a <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
 80022d6:	f000 fe7b 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 80022da:	6006      	.short	0x6006
 80022dc:	60606060 	.word	0x60606060
 80022e0:	60605955 	.word	0x60605955
 80022e4:	1160      	.short	0x1160
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80022e6:	1c28      	adds	r0, r5, #0
 80022e8:	2202      	movs	r2, #2
 80022ea:	f000 fd5c 	bl	8002da6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 80022f0:	1c28      	adds	r0, r5, #0
 80022f2:	1c21      	adds	r1, r4, #0
 80022f4:	3242      	adds	r2, #66	; 0x42
 80022f6:	f000 fd8d 	bl	8002e14 <u8g_WriteEscSeqP>
      break;
 80022fa:	e04e      	b.n	800239a <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 80022fe:	1c28      	adds	r0, r5, #0
 8002300:	3326      	adds	r3, #38	; 0x26
 8002302:	1c1a      	adds	r2, r3, #0
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002304:	684e      	ldr	r6, [r1, #4]
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f000 fd84 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
 800230c:	2350      	movs	r3, #80	; 0x50
 800230e:	7932      	ldrb	r2, [r6, #4]
 8002310:	425b      	negs	r3, r3
 8002312:	0052      	lsls	r2, r2, #1
 8002314:	431a      	orrs	r2, r3
 8002316:	1c21      	adds	r1, r4, #0
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	1c28      	adds	r0, r5, #0
 800231c:	f000 fd6a 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002320:	1c28      	adds	r0, r5, #0
 8002322:	1c21      	adds	r1, r4, #0
 8002324:	2201      	movs	r2, #1
 8002326:	f000 fd5f 	bl	8002de8 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 800232a:	68b3      	ldr	r3, [r6, #8]
 800232c:	7972      	ldrb	r2, [r6, #5]
 800232e:	1c21      	adds	r1, r4, #0
 8002330:	1c28      	adds	r0, r5, #0
 8002332:	f000 fd65 	bl	8002e00 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8002336:	1c28      	adds	r0, r5, #0
 8002338:	1c21      	adds	r1, r4, #0
 800233a:	2200      	movs	r2, #0
 800233c:	f000 fd40 	bl	8002dc0 <u8g_SetChipSelect>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002340:	1c21      	adds	r1, r4, #0
 8002342:	9a00      	ldr	r2, [sp, #0]
 8002344:	1c28      	adds	r0, r5, #0
 8002346:	f000 fd65 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
 800234a:	2350      	movs	r3, #80	; 0x50
 800234c:	7932      	ldrb	r2, [r6, #4]
 800234e:	425b      	negs	r3, r3
 8002350:	0052      	lsls	r2, r2, #1
 8002352:	3201      	adds	r2, #1
 8002354:	431a      	orrs	r2, r3
 8002356:	1c21      	adds	r1, r4, #0
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	1c28      	adds	r0, r5, #0
 800235c:	f000 fd4a 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002360:	1c28      	adds	r0, r5, #0
 8002362:	1c21      	adds	r1, r4, #0
 8002364:	2201      	movs	r2, #1
 8002366:	f000 fd3f 	bl	8002de8 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 800236a:	7972      	ldrb	r2, [r6, #5]
 800236c:	68b3      	ldr	r3, [r6, #8]
 800236e:	1c21      	adds	r1, r4, #0
 8002370:	189b      	adds	r3, r3, r2
 8002372:	1c28      	adds	r0, r5, #0
 8002374:	f000 fd44 	bl	8002e00 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8002378:	1c28      	adds	r0, r5, #0
 800237a:	1c21      	adds	r1, r4, #0
 800237c:	2200      	movs	r2, #0
 800237e:	f000 fd1f 	bl	8002dc0 <u8g_SetChipSelect>
      }
      break;
 8002382:	e00a      	b.n	800239a <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8002384:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8002386:	1c28      	adds	r0, r5, #0
 8002388:	322e      	adds	r2, #46	; 0x2e
 800238a:	e002      	b.n	8002392 <u8g_dev_ssd1306_128x64_2x_fn+0xce>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800238c:	1c28      	adds	r0, r5, #0
 800238e:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8002390:	3237      	adds	r2, #55	; 0x37
 8002392:	f000 fd3f 	bl	8002e14 <u8g_WriteEscSeqP>
      return 1;
 8002396:	2001      	movs	r0, #1
 8002398:	e005      	b.n	80023a6 <u8g_dev_ssd1306_128x64_2x_fn+0xe2>
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 800239a:	1c28      	adds	r0, r5, #0
 800239c:	1c21      	adds	r1, r4, #0
 800239e:	1c3a      	adds	r2, r7, #0
 80023a0:	9b01      	ldr	r3, [sp, #4]
 80023a2:	f000 fc0a 	bl	8002bba <u8g_dev_pb16v1_base_fn>
}
 80023a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023a8:	08004f1b 	.word	0x08004f1b

080023ac <u8g_dev_sh1106_128x64_2x_fn>:

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80023ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ae:	1c05      	adds	r5, r0, #0
  switch(msg)
 80023b0:	1c10      	adds	r0, r2, #0
 80023b2:	380a      	subs	r0, #10
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80023b4:	1c0c      	adds	r4, r1, #0
 80023b6:	1c17      	adds	r7, r2, #0
 80023b8:	9301      	str	r3, [sp, #4]
  switch(msg)
 80023ba:	280b      	cmp	r0, #11
 80023bc:	d861      	bhi.n	8002482 <u8g_dev_sh1106_128x64_2x_fn+0xd6>
 80023be:	f000 fe07 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 80023c2:	6006      	.short	0x6006
 80023c4:	60606060 	.word	0x60606060
 80023c8:	60605955 	.word	0x60605955
 80023cc:	1160      	.short	0x1160
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80023ce:	1c28      	adds	r0, r5, #0
 80023d0:	2202      	movs	r2, #2
 80023d2:	f000 fce8 	bl	8002da6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 80023d6:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 80023d8:	1c28      	adds	r0, r5, #0
 80023da:	1c21      	adds	r1, r4, #0
 80023dc:	3242      	adds	r2, #66	; 0x42
 80023de:	f000 fd19 	bl	8002e14 <u8g_WriteEscSeqP>
      break;
 80023e2:	e04e      	b.n	8002482 <u8g_dev_sh1106_128x64_2x_fn+0xd6>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 80023e6:	1c28      	adds	r0, r5, #0
 80023e8:	3368      	adds	r3, #104	; 0x68
 80023ea:	1c1a      	adds	r2, r3, #0
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80023ec:	684e      	ldr	r6, [r1, #4]
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f000 fd10 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
 80023f4:	2350      	movs	r3, #80	; 0x50
 80023f6:	7932      	ldrb	r2, [r6, #4]
 80023f8:	425b      	negs	r3, r3
 80023fa:	0052      	lsls	r2, r2, #1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	1c21      	adds	r1, r4, #0
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	1c28      	adds	r0, r5, #0
 8002404:	f000 fcf6 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002408:	1c28      	adds	r0, r5, #0
 800240a:	1c21      	adds	r1, r4, #0
 800240c:	2201      	movs	r2, #1
 800240e:	f000 fceb 	bl	8002de8 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 8002412:	68b3      	ldr	r3, [r6, #8]
 8002414:	7972      	ldrb	r2, [r6, #5]
 8002416:	1c21      	adds	r1, r4, #0
 8002418:	1c28      	adds	r0, r5, #0
 800241a:	f000 fcf1 	bl	8002e00 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 800241e:	1c28      	adds	r0, r5, #0
 8002420:	1c21      	adds	r1, r4, #0
 8002422:	2200      	movs	r2, #0
 8002424:	f000 fccc 	bl	8002dc0 <u8g_SetChipSelect>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8002428:	1c21      	adds	r1, r4, #0
 800242a:	9a00      	ldr	r2, [sp, #0]
 800242c:	1c28      	adds	r0, r5, #0
 800242e:	f000 fcf1 	bl	8002e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
 8002432:	2350      	movs	r3, #80	; 0x50
 8002434:	7932      	ldrb	r2, [r6, #4]
 8002436:	425b      	negs	r3, r3
 8002438:	0052      	lsls	r2, r2, #1
 800243a:	3201      	adds	r2, #1
 800243c:	431a      	orrs	r2, r3
 800243e:	1c21      	adds	r1, r4, #0
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	1c28      	adds	r0, r5, #0
 8002444:	f000 fcd6 	bl	8002df4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002448:	1c28      	adds	r0, r5, #0
 800244a:	1c21      	adds	r1, r4, #0
 800244c:	2201      	movs	r2, #1
 800244e:	f000 fccb 	bl	8002de8 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 8002452:	7972      	ldrb	r2, [r6, #5]
 8002454:	68b3      	ldr	r3, [r6, #8]
 8002456:	1c21      	adds	r1, r4, #0
 8002458:	189b      	adds	r3, r3, r2
 800245a:	1c28      	adds	r0, r5, #0
 800245c:	f000 fcd0 	bl	8002e00 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8002460:	1c28      	adds	r0, r5, #0
 8002462:	1c21      	adds	r1, r4, #0
 8002464:	2200      	movs	r2, #0
 8002466:	f000 fcab 	bl	8002dc0 <u8g_SetChipSelect>
      }
      break;
 800246a:	e00a      	b.n	8002482 <u8g_dev_sh1106_128x64_2x_fn+0xd6>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 800246e:	1c28      	adds	r0, r5, #0
 8002470:	322e      	adds	r2, #46	; 0x2e
 8002472:	e002      	b.n	800247a <u8g_dev_sh1106_128x64_2x_fn+0xce>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002474:	1c28      	adds	r0, r5, #0
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 8002478:	3237      	adds	r2, #55	; 0x37
 800247a:	f000 fccb 	bl	8002e14 <u8g_WriteEscSeqP>
      return 1;
 800247e:	2001      	movs	r0, #1
 8002480:	e005      	b.n	800248e <u8g_dev_sh1106_128x64_2x_fn+0xe2>
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 8002482:	1c28      	adds	r0, r5, #0
 8002484:	1c21      	adds	r1, r4, #0
 8002486:	1c3a      	adds	r2, r7, #0
 8002488:	9b01      	ldr	r3, [sp, #4]
 800248a:	f000 fb96 	bl	8002bba <u8g_dev_pb16v1_base_fn>
}
 800248e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002490:	08004f1b 	.word	0x08004f1b

08002494 <u8g_init_data>:
static void u8g_init_data(u8g_t *u8g)
{
  u8g->font = NULL;
  u8g->cursor_font = NULL;
  u8g->cursor_bg_color = 0;
  u8g->cursor_fg_color = 1;
 8002494:	2201      	movs	r2, #1
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
 8002496:	b538      	push	{r3, r4, r5, lr}
  u8g->font = NULL;
 8002498:	2300      	movs	r3, #0
  u8g->cursor_font = NULL;
  u8g->cursor_bg_color = 0;
  u8g->cursor_fg_color = 1;
 800249a:	7402      	strb	r2, [r0, #16]
  u8g->cursor_encoding = 34;
 800249c:	2222      	movs	r2, #34	; 0x22
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
  u8g->font = NULL;
 800249e:	6083      	str	r3, [r0, #8]
  u8g->cursor_font = NULL;
 80024a0:	60c3      	str	r3, [r0, #12]
  u8g->cursor_bg_color = 0;
 80024a2:	7443      	strb	r3, [r0, #17]
  u8g->cursor_fg_color = 1;
  u8g->cursor_encoding = 34;
 80024a4:	7482      	strb	r2, [r0, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 80024a6:	6183      	str	r3, [r0, #24]
 80024a8:	1c02      	adds	r2, r0, #0
 80024aa:	1c03      	adds	r3, r0, #0
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
 80024ac:	1c04      	adds	r4, r0, #0

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
 80024ae:	21ff      	movs	r1, #255	; 0xff
 80024b0:	3334      	adds	r3, #52	; 0x34
 80024b2:	3242      	adds	r2, #66	; 0x42
 80024b4:	7019      	strb	r1, [r3, #0]
 80024b6:	3301      	adds	r3, #1
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d1fb      	bne.n	80024b4 <u8g_init_data+0x20>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 80024bc:	1c23      	adds	r3, r4, #0
 80024be:	2501      	movs	r5, #1
 80024c0:	3331      	adds	r3, #49	; 0x31
 80024c2:	701d      	strb	r5, [r3, #0]
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
 80024c4:	1c20      	adds	r0, r4, #0
 80024c6:	f7ff fc9e 	bl	8001e06 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 80024ca:	1c23      	adds	r3, r4, #0
  u8g->font_ref_ascent = 0;
 80024cc:	1c22      	adds	r2, r4, #0
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 80024ce:	3328      	adds	r3, #40	; 0x28
 80024d0:	701d      	strb	r5, [r3, #0]
  u8g->font_ref_ascent = 0;
 80024d2:	2300      	movs	r3, #0
  u8g->font_ref_descent = 0;
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 80024d4:	2140      	movs	r1, #64	; 0x40
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
  u8g->font_ref_ascent = 0;
 80024d6:	3229      	adds	r2, #41	; 0x29
 80024d8:	7013      	strb	r3, [r2, #0]
  u8g->font_ref_descent = 0;
 80024da:	7053      	strb	r3, [r2, #1]
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
  u8g->line_spacing = 0;
 80024dc:	70d3      	strb	r3, [r2, #3]
  
  u8g->state_cb = u8g_state_dummy_cb;
 80024de:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <u8g_init_data+0x54>)
  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
  u8g->font_ref_ascent = 0;
  u8g->font_ref_descent = 0;
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 80024e0:	7091      	strb	r1, [r2, #2]
  u8g->line_spacing = 0;
  
  u8g->state_cb = u8g_state_dummy_cb;
 80024e2:	6463      	str	r3, [r4, #68]	; 0x44

}
 80024e4:	bd38      	pop	{r3, r4, r5, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	08002aa1 	.word	0x08002aa1

080024ec <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80024ec:	b510      	push	{r4, lr}
  return dev->dev_fn(u8g, dev, msg, arg); 
 80024ee:	680c      	ldr	r4, [r1, #0]
 80024f0:	47a0      	blx	r4
}
 80024f2:	bd10      	pop	{r4, pc}

080024f4 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	1c04      	adds	r4, r0, #0
 80024f8:	1c0d      	adds	r5, r1, #0
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80024fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024fc:	2002      	movs	r0, #2
 80024fe:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8002500:	1c29      	adds	r1, r5, #0
 8002502:	220a      	movs	r2, #10
 8002504:	1c20      	adds	r0, r4, #0
 8002506:	2300      	movs	r3, #0
 8002508:	f7ff fff0 	bl	80024ec <u8g_call_dev_fn>
 800250c:	1c05      	adds	r5, r0, #0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 800250e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002510:	2003      	movs	r0, #3
 8002512:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002516:	2000      	movs	r0, #0
 8002518:	4798      	blx	r3
  return r;
}
 800251a:	1c28      	adds	r0, r5, #0
 800251c:	bd38      	pop	{r3, r4, r5, pc}

0800251e <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800251e:	b538      	push	{r3, r4, r5, lr}
 8002520:	1c04      	adds	r4, r0, #0
 8002522:	1c0d      	adds	r5, r1, #0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002526:	2002      	movs	r0, #2
 8002528:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800252a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800252c:	2001      	movs	r0, #1
 800252e:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8002530:	1c29      	adds	r1, r5, #0
 8002532:	1c20      	adds	r0, r4, #0
 8002534:	2214      	movs	r2, #20
 8002536:	2300      	movs	r3, #0
 8002538:	f7ff ffd8 	bl	80024ec <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800253c:	1c23      	adds	r3, r4, #0
 800253e:	1c29      	adds	r1, r5, #0
 8002540:	2217      	movs	r2, #23
 8002542:	3348      	adds	r3, #72	; 0x48
 8002544:	1c20      	adds	r0, r4, #0
 8002546:	f7ff ffd1 	bl	80024ec <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800254a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800254c:	2000      	movs	r0, #0
 800254e:	4798      	blx	r3
}
 8002550:	bd38      	pop	{r3, r4, r5, pc}

08002552 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002552:	b570      	push	{r4, r5, r6, lr}
 8002554:	1c04      	adds	r4, r0, #0
 8002556:	1c0e      	adds	r6, r1, #0
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002558:	2002      	movs	r0, #2
 800255a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800255c:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800255e:	2001      	movs	r0, #1
 8002560:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002562:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8002564:	1c20      	adds	r0, r4, #0
 8002566:	1c31      	adds	r1, r6, #0
 8002568:	2215      	movs	r2, #21
 800256a:	2300      	movs	r3, #0
 800256c:	f7ff ffbe 	bl	80024ec <u8g_call_dev_fn>
 8002570:	1e05      	subs	r5, r0, #0
  if ( r != 0 )
 8002572:	d006      	beq.n	8002582 <u8g_NextPageLL+0x30>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002574:	1c23      	adds	r3, r4, #0
 8002576:	1c20      	adds	r0, r4, #0
 8002578:	1c31      	adds	r1, r6, #0
 800257a:	2217      	movs	r2, #23
 800257c:	3348      	adds	r3, #72	; 0x48
 800257e:	f7ff ffb5 	bl	80024ec <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002582:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002584:	2000      	movs	r0, #0
 8002586:	4798      	blx	r3
  return r;
}
 8002588:	1c28      	adds	r0, r5, #0
 800258a:	bd70      	pop	{r4, r5, r6, pc}

0800258c <u8g_SetContrastLL>:

uint8_t u8g_SetContrastLL(u8g_t *u8g, u8g_dev_t *dev, uint8_t contrast)
{  
 800258c:	b507      	push	{r0, r1, r2, lr}
 800258e:	466b      	mov	r3, sp
 8002590:	3307      	adds	r3, #7
 8002592:	701a      	strb	r2, [r3, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
 8002594:	220f      	movs	r2, #15
 8002596:	f7ff ffa9 	bl	80024ec <u8g_call_dev_fn>
}
 800259a:	bd0e      	pop	{r1, r2, r3, pc}

0800259c <u8g_DrawPixelLL>:

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
 800259c:	b510      	push	{r4, lr}
 800259e:	1c1c      	adds	r4, r3, #0
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80025a0:	1c03      	adds	r3, r0, #0
 80025a2:	332d      	adds	r3, #45	; 0x2d
 80025a4:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 80025a6:	705c      	strb	r4, [r3, #1]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
 80025a8:	2232      	movs	r2, #50	; 0x32
 80025aa:	f7ff ff9f 	bl	80024ec <u8g_call_dev_fn>
}
 80025ae:	bd10      	pop	{r4, pc}

080025b0 <u8g_Draw8PixelLL>:

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	1c1e      	adds	r6, r3, #0
 80025b4:	ab04      	add	r3, sp, #16
 80025b6:	781d      	ldrb	r5, [r3, #0]
 80025b8:	ab05      	add	r3, sp, #20
 80025ba:	781c      	ldrb	r4, [r3, #0]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80025bc:	1c03      	adds	r3, r0, #0
 80025be:	332d      	adds	r3, #45	; 0x2d
 80025c0:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 80025c2:	705e      	strb	r6, [r3, #1]
  arg->dir = dir;
 80025c4:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 80025c6:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 80025c8:	223b      	movs	r2, #59	; 0x3b
 80025ca:	f7ff ff8f 	bl	80024ec <u8g_call_dev_fn>
}
 80025ce:	bd70      	pop	{r4, r5, r6, pc}

080025d0 <u8g_Draw4TPixelLL>:

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	1c1e      	adds	r6, r3, #0
 80025d4:	ab04      	add	r3, sp, #16
 80025d6:	781d      	ldrb	r5, [r3, #0]
 80025d8:	ab05      	add	r3, sp, #20
 80025da:	781c      	ldrb	r4, [r3, #0]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80025dc:	1c03      	adds	r3, r0, #0
 80025de:	332d      	adds	r3, #45	; 0x2d
 80025e0:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 80025e2:	705e      	strb	r6, [r3, #1]
  arg->dir = dir;
 80025e4:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 80025e6:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
 80025e8:	222d      	movs	r2, #45	; 0x2d
 80025ea:	f7ff ff7f 	bl	80024ec <u8g_call_dev_fn>
}
 80025ee:	bd70      	pop	{r4, r5, r6, pc}

080025f0 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80025f0:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 80025f2:	466b      	mov	r3, sp
 80025f4:	1ddc      	adds	r4, r3, #7
 80025f6:	2246      	movs	r2, #70	; 0x46
 80025f8:	1c23      	adds	r3, r4, #0
 80025fa:	f7ff ff77 	bl	80024ec <u8g_call_dev_fn>
  return r;
 80025fe:	7820      	ldrb	r0, [r4, #0]
}
 8002600:	bd16      	pop	{r1, r2, r4, pc}

08002602 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002602:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8002604:	466b      	mov	r3, sp
 8002606:	1ddc      	adds	r4, r3, #7
 8002608:	2247      	movs	r2, #71	; 0x47
 800260a:	1c23      	adds	r3, r4, #0
 800260c:	f7ff ff6e 	bl	80024ec <u8g_call_dev_fn>
  return r;
 8002610:	7820      	ldrb	r0, [r4, #0]
}
 8002612:	bd16      	pop	{r1, r2, r4, pc}

08002614 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002614:	b508      	push	{r3, lr}
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8002616:	2248      	movs	r2, #72	; 0x48
 8002618:	2300      	movs	r3, #0
 800261a:	f7ff ff67 	bl	80024ec <u8g_call_dev_fn>
}
 800261e:	bd08      	pop	{r3, pc}

08002620 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8002620:	b510      	push	{r4, lr}
 8002622:	1c04      	adds	r4, r0, #0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8002624:	6861      	ldr	r1, [r4, #4]
 8002626:	f7ff ffe3 	bl	80025f0 <u8g_GetWidthLL>
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800262a:	6861      	ldr	r1, [r4, #4]

/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 800262c:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800262e:	1c20      	adds	r0, r4, #0
 8002630:	f7ff ffe7 	bl	8002602 <u8g_GetHeightLL>
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002634:	6861      	ldr	r1, [r4, #4]
/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8002636:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002638:	1c20      	adds	r0, r4, #0
 800263a:	f7ff ffeb 	bl	8002614 <u8g_GetModeLL>
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800263e:	1c23      	adds	r3, r4, #0

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002640:	74e0      	strb	r0, [r4, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002642:	6861      	ldr	r1, [r4, #4]
 8002644:	3348      	adds	r3, #72	; 0x48
 8002646:	1c20      	adds	r0, r4, #0
 8002648:	2217      	movs	r2, #23
 800264a:	f7ff ff4f 	bl	80024ec <u8g_call_dev_fn>
}
 800264e:	bd10      	pop	{r4, pc}

08002650 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 8002650:	b510      	push	{r4, lr}
 8002652:	1c04      	adds	r4, r0, #0
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8002654:	6861      	ldr	r1, [r4, #4]
 8002656:	f7ff ff4d 	bl	80024f4 <u8g_InitLL>
 800265a:	2800      	cmp	r0, #0
 800265c:	d003      	beq.n	8002666 <u8g_Begin+0x16>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 800265e:	1c20      	adds	r0, r4, #0
 8002660:	f7ff ffde 	bl	8002620 <u8g_UpdateDimension>
  return 1;
 8002664:	2001      	movs	r0, #1
}
 8002666:	bd10      	pop	{r4, pc}

08002668 <u8g_Init>:

uint8_t u8g_Init(u8g_t *u8g, u8g_dev_t *dev)
{
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	1c0d      	adds	r5, r1, #0
 800266c:	1c04      	adds	r4, r0, #0
  u8g_init_data(u8g);
 800266e:	f7ff ff11 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
 8002672:	6065      	str	r5, [r4, #4]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8002674:	1c20      	adds	r0, r4, #0
 8002676:	f7ff ffeb 	bl	8002650 <u8g_Begin>
}
 800267a:	bd38      	pop	{r3, r4, r5, pc}

0800267c <u8g_InitComFn>:

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	1c04      	adds	r4, r0, #0
 8002680:	1c0d      	adds	r5, r1, #0
 8002682:	1c16      	adds	r6, r2, #0
  u8g_init_data(u8g);
 8002684:	f7ff ff06 	bl	8002494 <u8g_init_data>
 8002688:	1c23      	adds	r3, r4, #0
 800268a:	1c22      	adds	r2, r4, #0
  
#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
 800268c:	21fe      	movs	r1, #254	; 0xfe
 800268e:	3334      	adds	r3, #52	; 0x34
 8002690:	3242      	adds	r2, #66	; 0x42
 8002692:	7019      	strb	r1, [r3, #0]
 8002694:	3301      	adds	r3, #1
  u8g_init_data(u8g);
  
#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
 8002696:	4293      	cmp	r3, r2
 8002698:	d1fb      	bne.n	8002692 <u8g_InitComFn+0x16>
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 800269a:	6065      	str	r5, [r4, #4]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 800269c:	1c20      	adds	r0, r4, #0
#endif
  
  u8g->dev = dev;
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 800269e:	60ae      	str	r6, [r5, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80026a0:	f7ff ffd6 	bl	8002650 <u8g_Begin>
}
 80026a4:	bd70      	pop	{r4, r5, r6, pc}

080026a6 <u8g_InitSPI>:


#if defined(U8G_WITH_PINLIST)  
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
 80026a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a8:	1c04      	adds	r4, r0, #0
 80026aa:	b085      	sub	sp, #20
 80026ac:	1c1d      	adds	r5, r3, #0
 80026ae:	ab0a      	add	r3, sp, #40	; 0x28
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	1c0f      	adds	r7, r1, #0
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	ab0b      	add	r3, sp, #44	; 0x2c
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	1c16      	adds	r6, r2, #0
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	ab0c      	add	r3, sp, #48	; 0x30
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	9303      	str	r3, [sp, #12]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 80026c4:	f7ff fee6 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 80026c8:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 80026ca:	466a      	mov	r2, sp
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 80026cc:	3338      	adds	r3, #56	; 0x38
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 80026ce:	7912      	ldrb	r2, [r2, #4]
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 80026d0:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 80026d2:	3b02      	subs	r3, #2
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 80026d4:	709e      	strb	r6, [r3, #2]
  u8g->pin_list[U8G_PI_MOSI] = mosi;
 80026d6:	70dd      	strb	r5, [r3, #3]
  u8g->pin_list[U8G_PI_CS] = cs;
 80026d8:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 80026da:	466a      	mov	r2, sp
 80026dc:	7a12      	ldrb	r2, [r2, #8]
 80026de:	3b01      	subs	r3, #1
 80026e0:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 80026e2:	466a      	mov	r2, sp
 80026e4:	7b12      	ldrb	r2, [r2, #12]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	701a      	strb	r2, [r3, #0]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80026ea:	1c20      	adds	r0, r4, #0
 80026ec:	f7ff ffb0 	bl	8002650 <u8g_Begin>
}
 80026f0:	b005      	add	sp, #20
 80026f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f4 <u8g_InitHWSPI>:

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
 80026f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026f6:	1c04      	adds	r4, r0, #0
 80026f8:	1c1d      	adds	r5, r3, #0
 80026fa:	ab08      	add	r3, sp, #32
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	1c0f      	adds	r7, r1, #0
 8002700:	1c16      	adds	r6, r2, #0
 8002702:	9301      	str	r3, [sp, #4]
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 8002704:	f7ff fec6 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 8002708:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_RESET] = reset;
 800270a:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 800270c:	3336      	adds	r3, #54	; 0x36

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 800270e:	6067      	str	r7, [r4, #4]
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_RESET] = reset;
 8002710:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 8002712:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 8002714:	3b01      	subs	r3, #1
 8002716:	701d      	strb	r5, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 8002718:	3b01      	subs	r3, #1
 800271a:	701a      	strb	r2, [r3, #0]
  
  return u8g_Begin(u8g);
 800271c:	1c20      	adds	r0, r4, #0
 800271e:	f7ff ff97 	bl	8002650 <u8g_Begin>
}
 8002722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002724 <u8g_InitI2C>:

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	1c04      	adds	r4, r0, #0
 8002728:	1c0e      	adds	r6, r1, #0
 800272a:	1c15      	adds	r5, r2, #0
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 800272c:	f7ff feb2 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
 8002730:	1c23      	adds	r3, r4, #0
 8002732:	333f      	adds	r3, #63	; 0x3f

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002734:	6066      	str	r6, [r4, #4]
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
  
  return u8g_Begin(u8g);
 8002736:	1c20      	adds	r0, r4, #0
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
 8002738:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 800273a:	f7ff ff89 	bl	8002650 <u8g_Begin>
}
 800273e:	bd70      	pop	{r4, r5, r6, pc}

08002740 <u8g_Init8BitFixedPort>:


uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
{
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002742:	1c04      	adds	r4, r0, #0
 8002744:	b085      	sub	sp, #20
 8002746:	1c1d      	adds	r5, r3, #0
 8002748:	ab0a      	add	r3, sp, #40	; 0x28
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	1c0f      	adds	r7, r1, #0
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	ab0b      	add	r3, sp, #44	; 0x2c
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	1c16      	adds	r6, r2, #0
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	ab0c      	add	r3, sp, #48	; 0x30
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	9303      	str	r3, [sp, #12]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 800275e:	f7ff fe99 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 8002762:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
 8002764:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 8002766:	3338      	adds	r3, #56	; 0x38
uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8002768:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
 800276a:	3b02      	subs	r3, #2
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 800276c:	709e      	strb	r6, [r3, #2]
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
 800276e:	7912      	ldrb	r2, [r2, #4]
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
 8002770:	701d      	strb	r5, [r3, #0]
  u8g->pin_list[U8G_PI_DI] = di;
 8002772:	3b01      	subs	r3, #1
 8002774:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RW] = rw;
 8002776:	466a      	mov	r2, sp
 8002778:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_RESET] = reset;

  return u8g_Begin(u8g);
 800277a:	1c20      	adds	r0, r4, #0
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
 800277c:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RESET] = reset;
 800277e:	466a      	mov	r2, sp
 8002780:	7b12      	ldrb	r2, [r2, #12]
 8002782:	3b01      	subs	r3, #1
 8002784:	701a      	strb	r2, [r3, #0]

  return u8g_Begin(u8g);
 8002786:	f7ff ff63 	bl	8002650 <u8g_Begin>
}
 800278a:	b005      	add	sp, #20
 800278c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800278e <u8g_Init8Bit>:

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
 800278e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002790:	b08d      	sub	sp, #52	; 0x34
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	ab12      	add	r3, sp, #72	; 0x48
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	1c16      	adds	r6, r2, #0
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	ab13      	add	r3, sp, #76	; 0x4c
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	aa0c      	add	r2, sp, #48	; 0x30
 80027a2:	9302      	str	r3, [sp, #8]
 80027a4:	ab14      	add	r3, sp, #80	; 0x50
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	1c04      	adds	r4, r0, #0
 80027aa:	9303      	str	r3, [sp, #12]
 80027ac:	ab15      	add	r3, sp, #84	; 0x54
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	1c0f      	adds	r7, r1, #0
 80027b2:	9304      	str	r3, [sp, #16]
 80027b4:	ab16      	add	r3, sp, #88	; 0x58
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	ab17      	add	r3, sp, #92	; 0x5c
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	9306      	str	r3, [sp, #24]
 80027c0:	ab18      	add	r3, sp, #96	; 0x60
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	9307      	str	r3, [sp, #28]
 80027c6:	ab19      	add	r3, sp, #100	; 0x64
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	9308      	str	r3, [sp, #32]
 80027cc:	2319      	movs	r3, #25
 80027ce:	189b      	adds	r3, r3, r2
 80027d0:	7fdb      	ldrb	r3, [r3, #31]
 80027d2:	9309      	str	r3, [sp, #36]	; 0x24
 80027d4:	231d      	movs	r3, #29
 80027d6:	189b      	adds	r3, r3, r2
 80027d8:	7fdb      	ldrb	r3, [r3, #31]
 80027da:	930a      	str	r3, [sp, #40]	; 0x28
 80027dc:	ab1c      	add	r3, sp, #112	; 0x70
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80027e2:	ab1d      	add	r3, sp, #116	; 0x74
 80027e4:	781d      	ldrb	r5, [r3, #0]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 80027e6:	f7ff fe55 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 80027ea:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 80027ec:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_D1] = d1;
 80027ee:	7812      	ldrb	r2, [r2, #0]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 80027f0:	3339      	adds	r3, #57	; 0x39
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 80027f2:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 80027f4:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_D2] = d2;
 80027f6:	466a      	mov	r2, sp
 80027f8:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 80027fa:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
 80027fc:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_D3] = d3;
 80027fe:	466a      	mov	r2, sp
 8002800:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
 8002802:	3b01      	subs	r3, #1
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
 8002804:	711a      	strb	r2, [r3, #4]
  u8g->pin_list[U8G_PI_D4] = d4;
 8002806:	466a      	mov	r2, sp
 8002808:	7b12      	ldrb	r2, [r2, #12]
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
 800280a:	2120      	movs	r1, #32

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
 800280c:	715a      	strb	r2, [r3, #5]
  u8g->pin_list[U8G_PI_D5] = d5;
 800280e:	466a      	mov	r2, sp
 8002810:	7c12      	ldrb	r2, [r2, #16]
  u8g->pin_list[U8G_PI_CS2] = cs2;
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
  u8g->pin_list[U8G_PI_RESET] = reset;
  
  return u8g_Begin(u8g);
 8002812:	1c20      	adds	r0, r4, #0
  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
 8002814:	719a      	strb	r2, [r3, #6]
  u8g->pin_list[U8G_PI_D6] = d6;
 8002816:	466a      	mov	r2, sp
 8002818:	7d12      	ldrb	r2, [r2, #20]
 800281a:	71da      	strb	r2, [r3, #7]
  u8g->pin_list[U8G_PI_D7] = d7;
 800281c:	466a      	mov	r2, sp
 800281e:	7e12      	ldrb	r2, [r2, #24]
 8002820:	721a      	strb	r2, [r3, #8]

  u8g->pin_list[U8G_PI_EN] = en;
 8002822:	466a      	mov	r2, sp
 8002824:	7f12      	ldrb	r2, [r2, #28]
  u8g->pin_list[U8G_PI_CS1] = cs1;
 8002826:	3b02      	subs	r3, #2
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
 8002828:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_CS1] = cs1;
 800282a:	466a      	mov	r2, sp
 800282c:	1852      	adds	r2, r2, r1
 800282e:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_CS2] = cs2;
 8002830:	2124      	movs	r1, #36	; 0x24
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
 8002832:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_CS2] = cs2;
 8002834:	466a      	mov	r2, sp
 8002836:	1852      	adds	r2, r2, r1
 8002838:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_DI] = di;
 800283a:	2128      	movs	r1, #40	; 0x28
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
  u8g->pin_list[U8G_PI_CS2] = cs2;
 800283c:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_DI] = di;
 800283e:	466a      	mov	r2, sp
 8002840:	1852      	adds	r2, r2, r1
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	3b01      	subs	r3, #1
 8002846:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RW] = rw;
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	466a      	mov	r2, sp
 800284c:	1852      	adds	r2, r2, r1
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RESET] = reset;
 8002852:	3b01      	subs	r3, #1
 8002854:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 8002856:	f7ff fefb 	bl	8002650 <u8g_Begin>
}
 800285a:	b00d      	add	sp, #52	; 0x34
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800285e <u8g_InitRW8Bit>:

*/

uint8_t u8g_InitRW8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
{
 800285e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002860:	b08d      	sub	sp, #52	; 0x34
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	ab12      	add	r3, sp, #72	; 0x48
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	1c16      	adds	r6, r2, #0
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	ab13      	add	r3, sp, #76	; 0x4c
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	aa0c      	add	r2, sp, #48	; 0x30
 8002872:	9303      	str	r3, [sp, #12]
 8002874:	ab14      	add	r3, sp, #80	; 0x50
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	1c04      	adds	r4, r0, #0
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	ab15      	add	r3, sp, #84	; 0x54
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	1c0f      	adds	r7, r1, #0
 8002882:	9305      	str	r3, [sp, #20]
 8002884:	ab16      	add	r3, sp, #88	; 0x58
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	9306      	str	r3, [sp, #24]
 800288a:	ab17      	add	r3, sp, #92	; 0x5c
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	9307      	str	r3, [sp, #28]
 8002890:	ab18      	add	r3, sp, #96	; 0x60
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	9308      	str	r3, [sp, #32]
 8002896:	ab19      	add	r3, sp, #100	; 0x64
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	9309      	str	r3, [sp, #36]	; 0x24
 800289c:	2319      	movs	r3, #25
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	7fdb      	ldrb	r3, [r3, #31]
 80028a2:	930a      	str	r3, [sp, #40]	; 0x28
 80028a4:	231d      	movs	r3, #29
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	7fdb      	ldrb	r3, [r3, #31]
 80028aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80028ac:	ab1c      	add	r3, sp, #112	; 0x70
 80028ae:	781d      	ldrb	r5, [r3, #0]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 80028b0:	f7ff fdf0 	bl	8002494 <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 80028b4:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 80028b6:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_D1] = d1;
 80028b8:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 80028ba:	3339      	adds	r3, #57	; 0x39
  uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 80028bc:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 80028be:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_D2] = d2;
 80028c0:	466a      	mov	r2, sp
 80028c2:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 80028c4:	2120      	movs	r1, #32
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
 80028c6:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_D3] = d3;
 80028c8:	466a      	mov	r2, sp
 80028ca:	7b12      	ldrb	r2, [r2, #12]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 80028cc:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
 80028ce:	70da      	strb	r2, [r3, #3]
  u8g->pin_list[U8G_PI_D4] = d4;
 80028d0:	466a      	mov	r2, sp
 80028d2:	7c12      	ldrb	r2, [r2, #16]
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 80028d4:	3b03      	subs	r3, #3

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
 80028d6:	71da      	strb	r2, [r3, #7]
  u8g->pin_list[U8G_PI_D5] = d5;
 80028d8:	466a      	mov	r2, sp
 80028da:	7d12      	ldrb	r2, [r2, #20]
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_WR] = wr;
  u8g->pin_list[U8G_PI_RD] = rd;
  u8g->pin_list[U8G_PI_RESET] = reset;
  
  return u8g_Begin(u8g);
 80028dc:	1c20      	adds	r0, r4, #0
  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
 80028de:	721a      	strb	r2, [r3, #8]
  u8g->pin_list[U8G_PI_D6] = d6;
 80028e0:	466a      	mov	r2, sp
 80028e2:	7e12      	ldrb	r2, [r2, #24]
 80028e4:	725a      	strb	r2, [r3, #9]
  u8g->pin_list[U8G_PI_D7] = d7;
 80028e6:	466a      	mov	r2, sp
 80028e8:	7f12      	ldrb	r2, [r2, #28]
 80028ea:	729a      	strb	r2, [r3, #10]

  u8g->pin_list[U8G_PI_CS] = cs;
 80028ec:	466a      	mov	r2, sp
 80028ee:	1852      	adds	r2, r2, r1
 80028f0:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 80028f2:	2124      	movs	r1, #36	; 0x24
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 80028f4:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 80028f6:	466a      	mov	r2, sp
 80028f8:	1852      	adds	r2, r2, r1
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_WR] = wr;
 8002900:	2128      	movs	r1, #40	; 0x28
 8002902:	466a      	mov	r2, sp
 8002904:	1852      	adds	r2, r2, r1
 8002906:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_RD] = rd;
 8002908:	212c      	movs	r1, #44	; 0x2c
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_WR] = wr;
 800290a:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RD] = rd;
 800290c:	466a      	mov	r2, sp
 800290e:	1852      	adds	r2, r2, r1
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	3303      	adds	r3, #3
 8002914:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 8002916:	3b04      	subs	r3, #4
 8002918:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 800291a:	f7ff fe99 	bl	8002650 <u8g_Begin>
}
 800291e:	b00d      	add	sp, #52	; 0x34
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002922 <u8g_FirstPage>:
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8002922:	b508      	push	{r3, lr}
  u8g_FirstPageLL(u8g, u8g->dev);
 8002924:	6841      	ldr	r1, [r0, #4]
 8002926:	f7ff fdfa 	bl	800251e <u8g_FirstPageLL>
}
 800292a:	bd08      	pop	{r3, pc}

0800292c <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 800292c:	6983      	ldr	r3, [r0, #24]
{
  u8g_FirstPageLL(u8g, u8g->dev);
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
 800292e:	b510      	push	{r4, lr}
 8002930:	1c04      	adds	r4, r0, #0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8002932:	2b00      	cmp	r3, #0
 8002934:	d000      	beq.n	8002938 <u8g_NextPage+0xc>
  {
    u8g->cursor_fn(u8g);
 8002936:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 8002938:	6861      	ldr	r1, [r4, #4]
 800293a:	1c20      	adds	r0, r4, #0
 800293c:	f7ff fe09 	bl	8002552 <u8g_NextPageLL>
}
 8002940:	bd10      	pop	{r4, pc}

08002942 <u8g_SetContrast>:

uint8_t u8g_SetContrast(u8g_t *u8g, uint8_t contrast)
{
 8002942:	b508      	push	{r3, lr}
 8002944:	1c0a      	adds	r2, r1, #0
  return u8g_SetContrastLL(u8g, u8g->dev, contrast);
 8002946:	6841      	ldr	r1, [r0, #4]
 8002948:	f7ff fe20 	bl	800258c <u8g_SetContrastLL>
}
 800294c:	bd08      	pop	{r3, pc}

0800294e <u8g_SleepOn>:

void u8g_SleepOn(u8g_t *u8g)
{
 800294e:	b508      	push	{r3, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_ON, NULL);
 8002950:	6841      	ldr	r1, [r0, #4]
 8002952:	2210      	movs	r2, #16
 8002954:	2300      	movs	r3, #0
 8002956:	f7ff fdc9 	bl	80024ec <u8g_call_dev_fn>
}
 800295a:	bd08      	pop	{r3, pc}

0800295c <u8g_SleepOff>:

void u8g_SleepOff(u8g_t *u8g)
{
 800295c:	b508      	push	{r3, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_OFF, NULL);
 800295e:	6841      	ldr	r1, [r0, #4]
 8002960:	2211      	movs	r2, #17
 8002962:	2300      	movs	r3, #0
 8002964:	f7ff fdc2 	bl	80024ec <u8g_call_dev_fn>
}
 8002968:	bd08      	pop	{r3, pc}

0800296a <u8g_DrawPixel>:


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
 800296a:	b510      	push	{r4, lr}
 800296c:	1c0c      	adds	r4, r1, #0
 800296e:	1c13      	adds	r3, r2, #0
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
 8002970:	6841      	ldr	r1, [r0, #4]
 8002972:	1c22      	adds	r2, r4, #0
 8002974:	f7ff fe12 	bl	800259c <u8g_DrawPixelLL>
}
 8002978:	bd10      	pop	{r4, pc}

0800297a <u8g_Draw8Pixel>:

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800297a:	b570      	push	{r4, r5, r6, lr}
 800297c:	1c1d      	adds	r5, r3, #0
 800297e:	ab04      	add	r3, sp, #16
 8002980:	781c      	ldrb	r4, [r3, #0]
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002982:	1c03      	adds	r3, r0, #0
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002984:	1c0e      	adds	r6, r1, #0
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8002986:	332d      	adds	r3, #45	; 0x2d
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8002988:	6841      	ldr	r1, [r0, #4]
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 800298a:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 800298c:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 800298e:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 8002990:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8002992:	223b      	movs	r2, #59	; 0x3b
 8002994:	f7ff fdaa 	bl	80024ec <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
 8002998:	bd70      	pop	{r4, r5, r6, pc}

0800299a <u8g_Draw4TPixel>:

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800299a:	b570      	push	{r4, r5, r6, lr}
 800299c:	1c1d      	adds	r5, r3, #0
 800299e:	ab04      	add	r3, sp, #16
 80029a0:	781c      	ldrb	r4, [r3, #0]
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80029a2:	1c03      	adds	r3, r0, #0
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80029a4:	1c0e      	adds	r6, r1, #0
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80029a6:	332d      	adds	r3, #45	; 0x2d
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
 80029a8:	6841      	ldr	r1, [r0, #4]
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80029aa:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 80029ac:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 80029ae:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 80029b0:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
 80029b2:	222d      	movs	r2, #45	; 0x2d
 80029b4:	f7ff fd9a 	bl	80024ec <u8g_call_dev_fn>
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
 80029b8:	bd70      	pop	{r4, r5, r6, pc}

080029ba <u8g_SetColorEntry>:
  r: value for red (0..255)
  g: value for green (0..255)
  b: value for blue (0..255)
*/
void u8g_SetColorEntry(u8g_t *u8g, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 80029ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029bc:	ac06      	add	r4, sp, #24
 80029be:	7825      	ldrb	r5, [r4, #0]
  u8g_dev_arg_irgb_t irgb;
  irgb.idx = idx;
 80029c0:	ac01      	add	r4, sp, #4
 80029c2:	7021      	strb	r1, [r4, #0]
  irgb.r = r;
 80029c4:	7062      	strb	r2, [r4, #1]
  irgb.g = g;
 80029c6:	70a3      	strb	r3, [r4, #2]
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
 80029c8:	6841      	ldr	r1, [r0, #4]
 80029ca:	223c      	movs	r2, #60	; 0x3c
 80029cc:	1c23      	adds	r3, r4, #0
{
  u8g_dev_arg_irgb_t irgb;
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
 80029ce:	70e5      	strb	r5, [r4, #3]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
 80029d0:	f7ff fd8c 	bl	80024ec <u8g_call_dev_fn>
}
 80029d4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080029d6 <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 80029d6:	3031      	adds	r0, #49	; 0x31
 80029d8:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 80029da:	4770      	bx	lr

080029dc <u8g_SetHiColor>:

void u8g_SetHiColor(u8g_t *u8g, uint16_t rgb)
{
  u8g->arg_pixel.color = rgb&255;
 80029dc:	1c03      	adds	r3, r0, #0
 80029de:	3331      	adds	r3, #49	; 0x31
 80029e0:	7019      	strb	r1, [r3, #0]
  u8g->arg_pixel.hi_color = rgb>>8;
 80029e2:	3032      	adds	r0, #50	; 0x32
 80029e4:	0a09      	lsrs	r1, r1, #8
 80029e6:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 80029e8:	4770      	bx	lr

080029ea <u8g_SetHiColorByRGB>:

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
  g >>= 2;
 80029ea:	0892      	lsrs	r2, r2, #2
  u8g->arg_pixel.hi_color = rgb>>8;
  /*u8g->color_index = idx; */ /* must be removed */
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
 80029ec:	b510      	push	{r4, lr}
  
  r &= ~7;
  g >>= 2;
  b >>= 3;
 80029ee:	08db      	lsrs	r3, r3, #3
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
 80029f0:	0154      	lsls	r4, r2, #5
 80029f2:	4323      	orrs	r3, r4
 80029f4:	1c04      	adds	r4, r0, #0
 80029f6:	3431      	adds	r4, #49	; 0x31
 80029f8:	7023      	strb	r3, [r4, #0]
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
 80029fa:	2307      	movs	r3, #7
  g >>= 2;
  b >>= 3;
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
  u8g->arg_pixel.hi_color = r;
  u8g->arg_pixel.hi_color |= (g>>3) & 7;
 80029fc:	08d2      	lsrs	r2, r2, #3
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
 80029fe:	4399      	bics	r1, r3
  g >>= 2;
  b >>= 3;
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
  u8g->arg_pixel.hi_color = r;
  u8g->arg_pixel.hi_color |= (g>>3) & 7;
 8002a00:	430a      	orrs	r2, r1
 8002a02:	3032      	adds	r0, #50	; 0x32
 8002a04:	7002      	strb	r2, [r0, #0]
  
  //u8g_SetHiColor(u8g, U8G_GET_HICOLOR_BY_RGB(r,g,b));
}
 8002a06:	bd10      	pop	{r4, pc}

08002a08 <u8g_SetRGB>:

void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
 8002a08:	b510      	push	{r4, lr}
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
 8002a0a:	7cc4      	ldrb	r4, [r0, #19]
 8002a0c:	2c28      	cmp	r4, #40	; 0x28
 8002a0e:	d109      	bne.n	8002a24 <u8g_SetRGB+0x1c>
  {
    r &= 0x0e0;
    g &= 0x0e0;
 8002a10:	241f      	movs	r4, #31
 8002a12:	43a2      	bics	r2, r4

void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
  {
    r &= 0x0e0;
 8002a14:	43a1      	bics	r1, r4
    g &= 0x0e0;
    g >>= 3;
 8002a16:	08d2      	lsrs	r2, r2, #3
    b >>= 6;
    u8g->arg_pixel.color = r | g | b;
 8002a18:	4311      	orrs	r1, r2
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
  {
    r &= 0x0e0;
    g &= 0x0e0;
    g >>= 3;
    b >>= 6;
 8002a1a:	099b      	lsrs	r3, r3, #6
    u8g->arg_pixel.color = r | g | b;
 8002a1c:	4319      	orrs	r1, r3
 8002a1e:	3031      	adds	r0, #49	; 0x31
 8002a20:	7001      	strb	r1, [r0, #0]
 8002a22:	e00c      	b.n	8002a3e <u8g_SetRGB+0x36>
  }
  else if ( u8g->mode == U8G_MODE_HICOLOR )
 8002a24:	2c30      	cmp	r4, #48	; 0x30
 8002a26:	d102      	bne.n	8002a2e <u8g_SetRGB+0x26>
  {
    u8g_SetHiColorByRGB(u8g, r,g,b);
 8002a28:	f7ff ffdf 	bl	80029ea <u8g_SetHiColorByRGB>
 8002a2c:	e007      	b.n	8002a3e <u8g_SetRGB+0x36>
  }
  else
  {
    u8g->arg_pixel.color = r;
 8002a2e:	1c04      	adds	r4, r0, #0
 8002a30:	3431      	adds	r4, #49	; 0x31
 8002a32:	7021      	strb	r1, [r4, #0]
    u8g->arg_pixel.hi_color = g;
 8002a34:	1c01      	adds	r1, r0, #0
    u8g->arg_pixel.blue = b;
 8002a36:	3033      	adds	r0, #51	; 0x33
    u8g_SetHiColorByRGB(u8g, r,g,b);
  }
  else
  {
    u8g->arg_pixel.color = r;
    u8g->arg_pixel.hi_color = g;
 8002a38:	3132      	adds	r1, #50	; 0x32
 8002a3a:	700a      	strb	r2, [r1, #0]
    u8g->arg_pixel.blue = b;
 8002a3c:	7003      	strb	r3, [r0, #0]
  }
}
 8002a3e:	bd10      	pop	{r4, pc}

08002a40 <u8g_GetColorIndex>:


uint8_t u8g_GetColorIndex(u8g_t *u8g)
{
  return u8g->arg_pixel.color;
 8002a40:	3031      	adds	r0, #49	; 0x31
 8002a42:	7800      	ldrb	r0, [r0, #0]
}
 8002a44:	4770      	bx	lr

08002a46 <u8g_GetDefaultForegroundColor>:

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
 8002a46:	7cc3      	ldrb	r3, [r0, #19]
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
 8002a48:	20ff      	movs	r0, #255	; 0xff

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002a4a:	2b28      	cmp	r3, #40	; 0x28
 8002a4c:	d003      	beq.n	8002a56 <u8g_GetDefaultForegroundColor+0x10>
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
 8002a4e:	2003      	movs	r0, #3
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d000      	beq.n	8002a56 <u8g_GetDefaultForegroundColor+0x10>
    return 3;         /* max intensity */
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
 8002a54:	2001      	movs	r0, #1
  return 1;
}
 8002a56:	4770      	bx	lr

08002a58 <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	1c04      	adds	r4, r0, #0
  if ( u8g->mode == U8G_MODE_HICOLOR )
 8002a5c:	7cc3      	ldrb	r3, [r0, #19]
 8002a5e:	3431      	adds	r4, #49	; 0x31
 8002a60:	2b30      	cmp	r3, #48	; 0x30
 8002a62:	d104      	bne.n	8002a6e <u8g_SetDefaultForegroundColor+0x16>
  {
    u8g->arg_pixel.color = 0x0ff;
 8002a64:	23ff      	movs	r3, #255	; 0xff
    u8g->arg_pixel.hi_color = 0x0ff;
 8002a66:	3032      	adds	r0, #50	; 0x32

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
  if ( u8g->mode == U8G_MODE_HICOLOR )
  {
    u8g->arg_pixel.color = 0x0ff;
 8002a68:	7023      	strb	r3, [r4, #0]
    u8g->arg_pixel.hi_color = 0x0ff;
 8002a6a:	7003      	strb	r3, [r0, #0]
 8002a6c:	e002      	b.n	8002a74 <u8g_SetDefaultForegroundColor+0x1c>
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
 8002a6e:	f7ff ffea 	bl	8002a46 <u8g_GetDefaultForegroundColor>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002a72:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
 8002a74:	bd10      	pop	{r4, pc}

08002a76 <u8g_GetDefaultBackgroundColor>:

uint8_t u8g_GetDefaultBackgroundColor(u8g_t *u8g)
{
  return 0;
}
 8002a76:	2000      	movs	r0, #0
 8002a78:	4770      	bx	lr

08002a7a <u8g_SetDefaultBackgroundColor>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	3031      	adds	r0, #49	; 0x31
 8002a7e:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultBackgroundColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultBackgroundColor(u8g));         /* pixel on / black */
}
 8002a80:	4770      	bx	lr

08002a82 <u8g_GetDefaultMidColor>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002a82:	7cc3      	ldrb	r3, [r0, #19]
    return 0x06d;     /* gray: 01101101 */
 8002a84:	206d      	movs	r0, #109	; 0x6d

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002a86:	2b28      	cmp	r3, #40	; 0x28
 8002a88:	d000      	beq.n	8002a8c <u8g_GetDefaultMidColor+0xa>
    return 0x06d;     /* gray: 01101101 */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
 8002a8a:	2001      	movs	r0, #1
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
  return 1;   /* default */
}
 8002a8c:	4770      	bx	lr

08002a8e <u8g_SetDefaultMidColor>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002a8e:	7cc2      	ldrb	r2, [r0, #19]
    return 0x06d;     /* gray: 01101101 */
 8002a90:	236d      	movs	r3, #109	; 0x6d

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8002a92:	2a28      	cmp	r2, #40	; 0x28
 8002a94:	d000      	beq.n	8002a98 <u8g_SetDefaultMidColor+0xa>
    return 0x06d;     /* gray: 01101101 */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
 8002a96:	2301      	movs	r3, #1
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8002a98:	3031      	adds	r0, #49	; 0x31
 8002a9a:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultMidColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultMidColor(u8g));
}
 8002a9c:	4770      	bx	lr
 8002a9e:	46c0      	nop			; (mov r8, r8)

08002aa0 <u8g_state_dummy_cb>:
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
  /* the dummy procedure does nothing */
}
 8002aa0:	4770      	bx	lr

08002aa2 <u8g_SetHardwareBackup>:

void u8g_SetHardwareBackup(u8g_t *u8g, u8g_state_cb backup_cb)
{
 8002aa2:	b508      	push	{r3, lr}
  u8g->state_cb = backup_cb;
 8002aa4:	6441      	str	r1, [r0, #68]	; 0x44
  /* in most cases the init message was already sent, so this will backup the */
  /* current u8g state */
  backup_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	4788      	blx	r1
}
 8002aaa:	bd08      	pop	{r3, pc}

08002aac <u8g_backup_spi>:

#else

void u8g_backup_spi(uint8_t msg)
{
}
 8002aac:	4770      	bx	lr

08002aae <u8g_pb16v1_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
  do
  {
    *ptr++ = 0;
 8002aae:	2100      	movs	r1, #0

void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 8002ab0:	7943      	ldrb	r3, [r0, #5]
void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;


void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8002ab2:	6882      	ldr	r2, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	18d3      	adds	r3, r2, r3
  do
  {
    *ptr++ = 0;
 8002ab8:	7011      	strb	r1, [r2, #0]
 8002aba:	3201      	adds	r2, #1
  } while( ptr != end_ptr );
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1fb      	bne.n	8002ab8 <u8g_pb16v1_Clear+0xa>
}
 8002ac0:	4770      	bx	lr

08002ac2 <u8g_pb16v1_Init>:

/* Obsolete, usually set by the init of the structure */
void u8g_pb16v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
{
 8002ac2:	b508      	push	{r3, lr}
  b->buf = buf;
 8002ac4:	6081      	str	r1, [r0, #8]
  b->width = width;
 8002ac6:	7142      	strb	r2, [r0, #5]
  u8g_pb16v1_Clear(b);
 8002ac8:	f7ff fff1 	bl	8002aae <u8g_pb16v1_Clear>
}
 8002acc:	bd08      	pop	{r3, pc}

08002ace <u8g_pb16v1_set_pixel>:

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8002ace:	b530      	push	{r4, r5, lr}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
 8002ad0:	7885      	ldrb	r5, [r0, #2]
}

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8002ad2:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 8002ad4:	1b52      	subs	r2, r2, r5
 8002ad6:	b2d2      	uxtb	r2, r2
  if ( y >= 8 )
 8002ad8:	2a07      	cmp	r2, #7
 8002ada:	d903      	bls.n	8002ae4 <u8g_pb16v1_set_pixel+0x16>
  {
    ptr += b->width;
 8002adc:	7940      	ldrb	r0, [r0, #5]
 8002ade:	1824      	adds	r4, r4, r0
    y &= 0x07;
 8002ae0:	2007      	movs	r0, #7
 8002ae2:	4002      	ands	r2, r0
  }
  mask = 1;
  mask <<= y;
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	4090      	lsls	r0, r2
  ptr += x;
 8002ae8:	1861      	adds	r1, r4, r1
  {
    ptr += b->width;
    y &= 0x07;
  }
  mask = 1;
  mask <<= y;
 8002aea:	b2c2      	uxtb	r2, r0
 8002aec:	7808      	ldrb	r0, [r1, #0]
  ptr += x;
  if ( color_index )
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <u8g_pb16v1_set_pixel+0x28>
  {
    *ptr |= mask;
 8002af2:	4310      	orrs	r0, r2
 8002af4:	e000      	b.n	8002af8 <u8g_pb16v1_set_pixel+0x2a>
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 8002af6:	4390      	bics	r0, r2
 8002af8:	7008      	strb	r0, [r1, #0]
  }
}
 8002afa:	bd30      	pop	{r4, r5, pc}

08002afc <u8g_pb16v1_SetPixel>:


void u8g_pb16v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8002afc:	b510      	push	{r4, lr}
  if ( arg_pixel->y < b->p.page_y0 )
 8002afe:	7883      	ldrb	r3, [r0, #2]
 8002b00:	784a      	ldrb	r2, [r1, #1]
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d80a      	bhi.n	8002b1c <u8g_pb16v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8002b06:	78c3      	ldrb	r3, [r0, #3]
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d307      	bcc.n	8002b1c <u8g_pb16v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 8002b0c:	780c      	ldrb	r4, [r1, #0]
 8002b0e:	7943      	ldrb	r3, [r0, #5]
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d903      	bls.n	8002b1c <u8g_pb16v1_SetPixel+0x20>
    return;
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002b14:	790b      	ldrb	r3, [r1, #4]
 8002b16:	1c21      	adds	r1, r4, #0
 8002b18:	f7ff ffd9 	bl	8002ace <u8g_pb16v1_set_pixel>
}
 8002b1c:	bd10      	pop	{r4, pc}

08002b1e <u8g_pb16v1_Set8PixelStd>:

void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002b1e:	b570      	push	{r4, r5, r6, lr}
 8002b20:	1c06      	adds	r6, r0, #0
 8002b22:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002b24:	788d      	ldrb	r5, [r1, #2]
  do
  {
    if ( pixel & 128 )
 8002b26:	b26b      	sxtb	r3, r5
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da03      	bge.n	8002b34 <u8g_pb16v1_Set8PixelStd+0x16>
    {
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8002b2c:	1c30      	adds	r0, r6, #0
 8002b2e:	1c21      	adds	r1, r4, #0
 8002b30:	f7ff ffe4 	bl	8002afc <u8g_pb16v1_SetPixel>
    }
    switch( arg_pixel->dir )
 8002b34:	78e0      	ldrb	r0, [r4, #3]
 8002b36:	2803      	cmp	r0, #3
 8002b38:	d810      	bhi.n	8002b5c <u8g_pb16v1_Set8PixelStd+0x3e>
 8002b3a:	f000 fa49 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 8002b3e:	0502      	.short	0x0502
 8002b40:	0c08      	.short	0x0c08
    {
      case 0: arg_pixel->x++; break;
 8002b42:	7823      	ldrb	r3, [r4, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	e004      	b.n	8002b52 <u8g_pb16v1_Set8PixelStd+0x34>
      case 1: arg_pixel->y++; break;
 8002b48:	7863      	ldrb	r3, [r4, #1]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	e005      	b.n	8002b5a <u8g_pb16v1_Set8PixelStd+0x3c>
      case 2: arg_pixel->x--; break;
 8002b4e:	7823      	ldrb	r3, [r4, #0]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	7023      	strb	r3, [r4, #0]
 8002b54:	e002      	b.n	8002b5c <u8g_pb16v1_Set8PixelStd+0x3e>
      case 3: arg_pixel->y--; break;
 8002b56:	7863      	ldrb	r3, [r4, #1]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	7063      	strb	r3, [r4, #1]
    }
    pixel <<= 1;
 8002b5c:	006d      	lsls	r5, r5, #1
 8002b5e:	b2ed      	uxtb	r5, r5
  } while( pixel != 0  );
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d1e0      	bne.n	8002b26 <u8g_pb16v1_Set8PixelStd+0x8>
}
 8002b64:	bd70      	pop	{r4, r5, r6, pc}

08002b66 <u8g_pb16v1_Set8PixelOpt2>:


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b68:	9001      	str	r0, [sp, #4]
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002b6a:	78c8      	ldrb	r0, [r1, #3]
  } while( pixel != 0  );
}


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002b6c:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002b6e:	788d      	ldrb	r5, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002b70:	2803      	cmp	r0, #3
 8002b72:	d80e      	bhi.n	8002b92 <u8g_pb16v1_Set8PixelOpt2+0x2c>
 8002b74:	f000 fa2c 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 8002b78:	0a070502 	.word	0x0a070502

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002b7c:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
 8002b7e:	2701      	movs	r7, #1
 8002b80:	e009      	b.n	8002b96 <u8g_pb16v1_Set8PixelOpt2+0x30>
    case 1: dy++; break;
 8002b82:	2601      	movs	r6, #1
 8002b84:	e003      	b.n	8002b8e <u8g_pb16v1_Set8PixelOpt2+0x28>

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002b86:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
 8002b88:	27ff      	movs	r7, #255	; 0xff
 8002b8a:	e004      	b.n	8002b96 <u8g_pb16v1_Set8PixelOpt2+0x30>
    case 3: dy--; break;
 8002b8c:	26ff      	movs	r6, #255	; 0xff


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002b8e:	2700      	movs	r7, #0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
 8002b90:	e001      	b.n	8002b96 <u8g_pb16v1_Set8PixelOpt2+0x30>

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002b92:	2600      	movs	r6, #0


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002b94:	1c37      	adds	r7, r6, #0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8002b96:	b26b      	sxtb	r3, r5
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	da03      	bge.n	8002ba4 <u8g_pb16v1_Set8PixelOpt2+0x3e>
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8002b9c:	9801      	ldr	r0, [sp, #4]
 8002b9e:	1c21      	adds	r1, r4, #0
 8002ba0:	f7ff ffac 	bl	8002afc <u8g_pb16v1_SetPixel>
    arg_pixel->x += dx;
 8002ba4:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8002ba6:	006d      	lsls	r5, r5, #1
  
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8002bac:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8002bae:	b2ed      	uxtb	r5, r5
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
    arg_pixel->y += dy;
 8002bb0:	18f3      	adds	r3, r6, r3
 8002bb2:	7063      	strb	r3, [r4, #1]
    pixel <<= 1;
  } while( pixel != 0  );
 8002bb4:	2d00      	cmp	r5, #0
 8002bb6:	d1ee      	bne.n	8002b96 <u8g_pb16v1_Set8PixelOpt2+0x30>
  
}
 8002bb8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002bba <u8g_dev_pb16v1_base_fn>:

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002bba:	b570      	push	{r4, r5, r6, lr}
 8002bbc:	1c1e      	adds	r6, r3, #0
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002bbe:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8002bc0:	2a32      	cmp	r2, #50	; 0x32
 8002bc2:	d01f      	beq.n	8002c04 <u8g_dev_pb16v1_base_fn+0x4a>
 8002bc4:	d80c      	bhi.n	8002be0 <u8g_dev_pb16v1_base_fn+0x26>
 8002bc6:	2a15      	cmp	r2, #21
 8002bc8:	d021      	beq.n	8002c0e <u8g_dev_pb16v1_base_fn+0x54>
 8002bca:	2a17      	cmp	r2, #23
 8002bcc:	d028      	beq.n	8002c20 <u8g_dev_pb16v1_base_fn+0x66>
 8002bce:	2a14      	cmp	r2, #20
 8002bd0:	d12f      	bne.n	8002c32 <u8g_dev_pb16v1_base_fn+0x78>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
 8002bd2:	1c28      	adds	r0, r5, #0
 8002bd4:	f7ff ff6b 	bl	8002aae <u8g_pb16v1_Clear>
      u8g_page_First(&(pb->p));
 8002bd8:	1c28      	adds	r0, r5, #0
 8002bda:	f000 f9d1 	bl	8002f80 <u8g_page_First>
 8002bde:	e028      	b.n	8002c32 <u8g_dev_pb16v1_base_fn+0x78>
}

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 8002be0:	2a46      	cmp	r2, #70	; 0x46
 8002be2:	d022      	beq.n	8002c2a <u8g_dev_pb16v1_base_fn+0x70>
 8002be4:	2a47      	cmp	r2, #71	; 0x47
 8002be6:	d022      	beq.n	8002c2e <u8g_dev_pb16v1_base_fn+0x74>
 8002be8:	2a3b      	cmp	r2, #59	; 0x3b
 8002bea:	d122      	bne.n	8002c32 <u8g_dev_pb16v1_base_fn+0x78>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002bec:	1c28      	adds	r0, r5, #0
 8002bee:	1c19      	adds	r1, r3, #0
 8002bf0:	f000 f9a8 	bl	8002f44 <u8g_pb_Is8PixelVisible>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8002bf4:	2401      	movs	r4, #1
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d01c      	beq.n	8002c34 <u8g_dev_pb16v1_base_fn+0x7a>
        u8g_pb16v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8002bfa:	1c28      	adds	r0, r5, #0
 8002bfc:	1c31      	adds	r1, r6, #0
 8002bfe:	f7ff ffb2 	bl	8002b66 <u8g_pb16v1_Set8PixelOpt2>
 8002c02:	e017      	b.n	8002c34 <u8g_dev_pb16v1_base_fn+0x7a>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb16v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8002c04:	1c28      	adds	r0, r5, #0
 8002c06:	1c19      	adds	r1, r3, #0
 8002c08:	f7ff ff78 	bl	8002afc <u8g_pb16v1_SetPixel>
 8002c0c:	e011      	b.n	8002c32 <u8g_dev_pb16v1_base_fn+0x78>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8002c0e:	1c28      	adds	r0, r5, #0
 8002c10:	f000 f9c5 	bl	8002f9e <u8g_page_Next>
 8002c14:	1e04      	subs	r4, r0, #0
 8002c16:	d00d      	beq.n	8002c34 <u8g_dev_pb16v1_base_fn+0x7a>
        return 0;
      u8g_pb16v1_Clear(pb);
 8002c18:	1c28      	adds	r0, r5, #0
 8002c1a:	f7ff ff48 	bl	8002aae <u8g_pb16v1_Clear>
 8002c1e:	e008      	b.n	8002c32 <u8g_dev_pb16v1_base_fn+0x78>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8002c20:	1c28      	adds	r0, r5, #0
 8002c22:	1c19      	adds	r1, r3, #0
 8002c24:	f000 f984 	bl	8002f30 <u8g_pb_GetPageBox>
 8002c28:	e003      	b.n	8002c32 <u8g_dev_pb16v1_base_fn+0x78>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8002c2a:	796b      	ldrb	r3, [r5, #5]
 8002c2c:	e000      	b.n	8002c30 <u8g_dev_pb16v1_base_fn+0x76>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8002c2e:	786b      	ldrb	r3, [r5, #1]
 8002c30:	7033      	strb	r3, [r6, #0]
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8002c32:	2401      	movs	r4, #1
  }
  return 1;
}
 8002c34:	1c20      	adds	r0, r4, #0
 8002c36:	bd70      	pop	{r4, r5, r6, pc}

08002c38 <u8g_pb8v1_Init>:
void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel) U8G_NOINLINE ;
void u8g_pb8v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;

/* Obsolete, usually set by the init of the structure */
void u8g_pb8v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
{
 8002c38:	b508      	push	{r3, lr}
  b->buf = buf;
 8002c3a:	6081      	str	r1, [r0, #8]
  b->width = width;
 8002c3c:	7142      	strb	r2, [r0, #5]
  u8g_pb_Clear(b);
 8002c3e:	f000 f937 	bl	8002eb0 <u8g_pb_Clear>
}
 8002c42:	bd08      	pop	{r3, pc}

08002c44 <u8g_pb8v1_set_pixel>:

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8002c44:	b530      	push	{r4, r5, lr}
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
  mask = 1;
  y &= 0x07;
  mask <<= y;
 8002c46:	2407      	movs	r4, #7
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8002c48:	6885      	ldr	r5, [r0, #8]
  
  y -= b->p.page_y0;
 8002c4a:	7880      	ldrb	r0, [r0, #2]
  mask = 1;
  y &= 0x07;
  mask <<= y;
  ptr += x;
 8002c4c:	1869      	adds	r1, r5, r1
void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
 8002c4e:	1a12      	subs	r2, r2, r0
  mask = 1;
  y &= 0x07;
  mask <<= y;
 8002c50:	4022      	ands	r2, r4
 8002c52:	2401      	movs	r4, #1
 8002c54:	1c20      	adds	r0, r4, #0
 8002c56:	4090      	lsls	r0, r2
 8002c58:	b2c2      	uxtb	r2, r0
 8002c5a:	7808      	ldrb	r0, [r1, #0]
  ptr += x;
  if ( color_index )
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <u8g_pb8v1_set_pixel+0x20>
  {
    *ptr |= mask;
 8002c60:	4310      	orrs	r0, r2
 8002c62:	e000      	b.n	8002c66 <u8g_pb8v1_set_pixel+0x22>
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 8002c64:	4390      	bics	r0, r2
 8002c66:	7008      	strb	r0, [r1, #0]
  }
}
 8002c68:	bd30      	pop	{r4, r5, pc}

08002c6a <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8002c6a:	b510      	push	{r4, lr}
  if ( arg_pixel->y < b->p.page_y0 )
 8002c6c:	7883      	ldrb	r3, [r0, #2]
 8002c6e:	784a      	ldrb	r2, [r1, #1]
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d80a      	bhi.n	8002c8a <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8002c74:	78c3      	ldrb	r3, [r0, #3]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d307      	bcc.n	8002c8a <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 8002c7a:	780c      	ldrb	r4, [r1, #0]
 8002c7c:	7943      	ldrb	r3, [r0, #5]
 8002c7e:	42a3      	cmp	r3, r4
 8002c80:	d903      	bls.n	8002c8a <u8g_pb8v1_SetPixel+0x20>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002c82:	790b      	ldrb	r3, [r1, #4]
 8002c84:	1c21      	adds	r1, r4, #0
 8002c86:	f7ff ffdd 	bl	8002c44 <u8g_pb8v1_set_pixel>
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <u8g_pb8v1_Set8PixelStd>:

void u8g_pb8v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	1c06      	adds	r6, r0, #0
 8002c90:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002c92:	788d      	ldrb	r5, [r1, #2]
  do
  {
    if ( pixel & 128 )
 8002c94:	b26b      	sxtb	r3, r5
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da03      	bge.n	8002ca2 <u8g_pb8v1_Set8PixelStd+0x16>
    {
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8002c9a:	1c30      	adds	r0, r6, #0
 8002c9c:	1c21      	adds	r1, r4, #0
 8002c9e:	f7ff ffe4 	bl	8002c6a <u8g_pb8v1_SetPixel>
    }
    switch( arg_pixel->dir )
 8002ca2:	78e0      	ldrb	r0, [r4, #3]
 8002ca4:	2803      	cmp	r0, #3
 8002ca6:	d810      	bhi.n	8002cca <u8g_pb8v1_Set8PixelStd+0x3e>
 8002ca8:	f000 f992 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 8002cac:	0c080502 	.word	0x0c080502
    {
      case 0: arg_pixel->x++; break;
 8002cb0:	7823      	ldrb	r3, [r4, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	e004      	b.n	8002cc0 <u8g_pb8v1_Set8PixelStd+0x34>
      case 1: arg_pixel->y++; break;
 8002cb6:	7863      	ldrb	r3, [r4, #1]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	e005      	b.n	8002cc8 <u8g_pb8v1_Set8PixelStd+0x3c>
      case 2: arg_pixel->x--; break;
 8002cbc:	7823      	ldrb	r3, [r4, #0]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	7023      	strb	r3, [r4, #0]
 8002cc2:	e002      	b.n	8002cca <u8g_pb8v1_Set8PixelStd+0x3e>
      case 3: arg_pixel->y--; break;
 8002cc4:	7863      	ldrb	r3, [r4, #1]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	7063      	strb	r3, [r4, #1]
    }
    pixel <<= 1;
 8002cca:	006d      	lsls	r5, r5, #1
 8002ccc:	b2ed      	uxtb	r5, r5
  } while( pixel != 0  );
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	d1e0      	bne.n	8002c94 <u8g_pb8v1_Set8PixelStd+0x8>
}
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}

08002cd4 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cd6:	9001      	str	r0, [sp, #4]
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002cd8:	78c8      	ldrb	r0, [r1, #3]
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002cda:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8002cdc:	788d      	ldrb	r5, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002cde:	2803      	cmp	r0, #3
 8002ce0:	d80e      	bhi.n	8002d00 <u8g_pb8v1_Set8PixelOpt2+0x2c>
 8002ce2:	f000 f975 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 8002ce6:	0502      	.short	0x0502
 8002ce8:	0a07      	.short	0x0a07

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002cea:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
 8002cec:	2701      	movs	r7, #1
 8002cee:	e009      	b.n	8002d04 <u8g_pb8v1_Set8PixelOpt2+0x30>
    case 1: dy++; break;
 8002cf0:	2601      	movs	r6, #1
 8002cf2:	e003      	b.n	8002cfc <u8g_pb8v1_Set8PixelOpt2+0x28>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002cf4:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
 8002cf6:	27ff      	movs	r7, #255	; 0xff
 8002cf8:	e004      	b.n	8002d04 <u8g_pb8v1_Set8PixelOpt2+0x30>
    case 3: dy--; break;
 8002cfa:	26ff      	movs	r6, #255	; 0xff


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002cfc:	2700      	movs	r7, #0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
 8002cfe:	e001      	b.n	8002d04 <u8g_pb8v1_Set8PixelOpt2+0x30>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8002d00:	2600      	movs	r6, #0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8002d02:	1c37      	adds	r7, r6, #0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8002d04:	b26b      	sxtb	r3, r5
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da03      	bge.n	8002d12 <u8g_pb8v1_Set8PixelOpt2+0x3e>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8002d0a:	9801      	ldr	r0, [sp, #4]
 8002d0c:	1c21      	adds	r1, r4, #0
 8002d0e:	f7ff ffac 	bl	8002c6a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8002d12:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8002d14:	006d      	lsls	r5, r5, #1
  
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8002d1a:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8002d1c:	b2ed      	uxtb	r5, r5
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
    arg_pixel->y += dy;
 8002d1e:	18f3      	adds	r3, r6, r3
 8002d20:	7063      	strb	r3, [r4, #1]
    pixel <<= 1;
  } while( pixel != 0  );
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d1ee      	bne.n	8002d04 <u8g_pb8v1_Set8PixelOpt2+0x30>
  
}
 8002d26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002d28 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	1c1e      	adds	r6, r3, #0
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002d2c:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8002d2e:	2a32      	cmp	r2, #50	; 0x32
 8002d30:	d01f      	beq.n	8002d72 <u8g_dev_pb8v1_base_fn+0x4a>
 8002d32:	d80c      	bhi.n	8002d4e <u8g_dev_pb8v1_base_fn+0x26>
 8002d34:	2a15      	cmp	r2, #21
 8002d36:	d021      	beq.n	8002d7c <u8g_dev_pb8v1_base_fn+0x54>
 8002d38:	2a17      	cmp	r2, #23
 8002d3a:	d028      	beq.n	8002d8e <u8g_dev_pb8v1_base_fn+0x66>
 8002d3c:	2a14      	cmp	r2, #20
 8002d3e:	d12f      	bne.n	8002da0 <u8g_dev_pb8v1_base_fn+0x78>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8002d40:	1c28      	adds	r0, r5, #0
 8002d42:	f000 f8b5 	bl	8002eb0 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8002d46:	1c28      	adds	r0, r5, #0
 8002d48:	f000 f91a 	bl	8002f80 <u8g_page_First>
 8002d4c:	e028      	b.n	8002da0 <u8g_dev_pb8v1_base_fn+0x78>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 8002d4e:	2a46      	cmp	r2, #70	; 0x46
 8002d50:	d022      	beq.n	8002d98 <u8g_dev_pb8v1_base_fn+0x70>
 8002d52:	2a47      	cmp	r2, #71	; 0x47
 8002d54:	d022      	beq.n	8002d9c <u8g_dev_pb8v1_base_fn+0x74>
 8002d56:	2a3b      	cmp	r2, #59	; 0x3b
 8002d58:	d122      	bne.n	8002da0 <u8g_dev_pb8v1_base_fn+0x78>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002d5a:	1c28      	adds	r0, r5, #0
 8002d5c:	1c19      	adds	r1, r3, #0
 8002d5e:	f000 f8f1 	bl	8002f44 <u8g_pb_Is8PixelVisible>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8002d62:	2401      	movs	r4, #1
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d01c      	beq.n	8002da2 <u8g_dev_pb8v1_base_fn+0x7a>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8002d68:	1c28      	adds	r0, r5, #0
 8002d6a:	1c31      	adds	r1, r6, #0
 8002d6c:	f7ff ffb2 	bl	8002cd4 <u8g_pb8v1_Set8PixelOpt2>
 8002d70:	e017      	b.n	8002da2 <u8g_dev_pb8v1_base_fn+0x7a>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8002d72:	1c28      	adds	r0, r5, #0
 8002d74:	1c19      	adds	r1, r3, #0
 8002d76:	f7ff ff78 	bl	8002c6a <u8g_pb8v1_SetPixel>
 8002d7a:	e011      	b.n	8002da0 <u8g_dev_pb8v1_base_fn+0x78>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8002d7c:	1c28      	adds	r0, r5, #0
 8002d7e:	f000 f90e 	bl	8002f9e <u8g_page_Next>
 8002d82:	1e04      	subs	r4, r0, #0
 8002d84:	d00d      	beq.n	8002da2 <u8g_dev_pb8v1_base_fn+0x7a>
        return 0;
      u8g_pb_Clear(pb);
 8002d86:	1c28      	adds	r0, r5, #0
 8002d88:	f000 f892 	bl	8002eb0 <u8g_pb_Clear>
 8002d8c:	e008      	b.n	8002da0 <u8g_dev_pb8v1_base_fn+0x78>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8002d8e:	1c28      	adds	r0, r5, #0
 8002d90:	1c19      	adds	r1, r3, #0
 8002d92:	f000 f8cd 	bl	8002f30 <u8g_pb_GetPageBox>
 8002d96:	e003      	b.n	8002da0 <u8g_dev_pb8v1_base_fn+0x78>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8002d98:	796b      	ldrb	r3, [r5, #5]
 8002d9a:	e000      	b.n	8002d9e <u8g_dev_pb8v1_base_fn+0x76>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8002d9c:	786b      	ldrb	r3, [r5, #1]
 8002d9e:	7033      	strb	r3, [r6, #0]
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8002da0:	2401      	movs	r4, #1
  }
  return 1;
}
 8002da2:	1c20      	adds	r0, r4, #0
 8002da4:	bd70      	pop	{r4, r5, r6, pc}

08002da6 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8002da6:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8002da8:	2300      	movs	r3, #0
 8002daa:	688c      	ldr	r4, [r1, #8]
 8002dac:	2101      	movs	r1, #1
 8002dae:	47a0      	blx	r4
}
 8002db0:	bd10      	pop	{r4, pc}

08002db2 <u8g_StopCom>:

void u8g_StopCom(u8g_t *u8g, u8g_dev_t *dev)
{
 8002db2:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
 8002db4:	688c      	ldr	r4, [r1, #8]
 8002db6:	2100      	movs	r1, #0
 8002db8:	1c0a      	adds	r2, r1, #0
 8002dba:	1c0b      	adds	r3, r1, #0
 8002dbc:	47a0      	blx	r4
}
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <u8g_SetChipSelect>:

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8002dc0:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	688c      	ldr	r4, [r1, #8]
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	47a0      	blx	r4
}
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002dcc:	2200      	movs	r2, #0
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8002dce:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002dd0:	1c13      	adds	r3, r2, #0
 8002dd2:	688c      	ldr	r4, [r1, #8]
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	47a0      	blx	r4
}
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8002dda:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	688c      	ldr	r4, [r1, #8]
 8002de0:	2300      	movs	r3, #0
 8002de2:	2104      	movs	r1, #4
 8002de4:	47a0      	blx	r4
}
 8002de6:	bd10      	pop	{r4, pc}

08002de8 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8002de8:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8002dea:	2300      	movs	r3, #0
 8002dec:	688c      	ldr	r4, [r1, #8]
 8002dee:	2102      	movs	r1, #2
 8002df0:	47a0      	blx	r4
}
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8002df4:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8002df6:	2300      	movs	r3, #0
 8002df8:	688c      	ldr	r4, [r1, #8]
 8002dfa:	2105      	movs	r1, #5
 8002dfc:	47a0      	blx	r4
}
 8002dfe:	bd10      	pop	{r4, pc}

08002e00 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8002e00:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8002e02:	688c      	ldr	r4, [r1, #8]
 8002e04:	2106      	movs	r1, #6
 8002e06:	47a0      	blx	r4
}
 8002e08:	bd10      	pop	{r4, pc}

08002e0a <u8g_WriteSequenceP>:

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
 8002e0a:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
 8002e0c:	688c      	ldr	r4, [r1, #8]
 8002e0e:	2107      	movs	r1, #7
 8002e10:	47a0      	blx	r4
}
 8002e12:	bd10      	pop	{r4, pc}

08002e14 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	1c05      	adds	r5, r0, #0
 8002e18:	1c0e      	adds	r6, r1, #0
 8002e1a:	1c17      	adds	r7, r2, #0
  uint8_t is_escape = 0;
 8002e1c:	2300      	movs	r3, #0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8002e1e:	783c      	ldrb	r4, [r7, #0]
    if ( is_escape == 0 )
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <u8g_WriteEscSeqP+0x24>
    {
      if ( value != 255 )
 8002e24:	2cff      	cmp	r4, #255	; 0xff
 8002e26:	d03c      	beq.n	8002ea2 <u8g_WriteEscSeqP+0x8e>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8002e28:	1c28      	adds	r0, r5, #0
 8002e2a:	1c31      	adds	r1, r6, #0
 8002e2c:	1c22      	adds	r2, r4, #0
 8002e2e:	f7ff ffe1 	bl	8002df4 <u8g_WriteByte>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d12e      	bne.n	8002e94 <u8g_WriteEscSeqP+0x80>
 8002e36:	e037      	b.n	8002ea8 <u8g_WriteEscSeqP+0x94>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
 8002e38:	2cff      	cmp	r4, #255	; 0xff
 8002e3a:	d0f5      	beq.n	8002e28 <u8g_WriteEscSeqP+0x14>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
 8002e3c:	2cfe      	cmp	r4, #254	; 0xfe
 8002e3e:	d035      	beq.n	8002eac <u8g_WriteEscSeqP+0x98>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8002e40:	2cef      	cmp	r4, #239	; 0xef
 8002e42:	d827      	bhi.n	8002e94 <u8g_WriteEscSeqP+0x80>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8002e44:	2cdf      	cmp	r4, #223	; 0xdf
 8002e46:	d906      	bls.n	8002e56 <u8g_WriteEscSeqP+0x42>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8002e48:	220f      	movs	r2, #15
 8002e4a:	1c28      	adds	r0, r5, #0
 8002e4c:	4022      	ands	r2, r4
 8002e4e:	1c31      	adds	r1, r6, #0
 8002e50:	f7ff ffca 	bl	8002de8 <u8g_SetAddress>
 8002e54:	e01e      	b.n	8002e94 <u8g_WriteEscSeqP+0x80>
      }
      else if ( value >= 0xd0 )
 8002e56:	2ccf      	cmp	r4, #207	; 0xcf
 8002e58:	d906      	bls.n	8002e68 <u8g_WriteEscSeqP+0x54>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	1c28      	adds	r0, r5, #0
 8002e5e:	4022      	ands	r2, r4
 8002e60:	1c31      	adds	r1, r6, #0
 8002e62:	f7ff ffad 	bl	8002dc0 <u8g_SetChipSelect>
 8002e66:	e015      	b.n	8002e94 <u8g_WriteEscSeqP+0x80>
      }
      else if ( value >= 0xc0 )
 8002e68:	2cbf      	cmp	r4, #191	; 0xbf
 8002e6a:	d915      	bls.n	8002e98 <u8g_WriteEscSeqP+0x84>
      {
        u8g_SetResetLow(u8g, dev);
 8002e6c:	1c31      	adds	r1, r6, #0
 8002e6e:	1c28      	adds	r0, r5, #0
 8002e70:	f7ff ffac 	bl	8002dcc <u8g_SetResetLow>
        value &= 0x0f;
 8002e74:	220f      	movs	r2, #15
 8002e76:	4014      	ands	r4, r2
        value <<= 4;
 8002e78:	0124      	lsls	r4, r4, #4
        value+=2;
 8002e7a:	3402      	adds	r4, #2
        u8g_Delay(value);
 8002e7c:	b2e4      	uxtb	r4, r4
 8002e7e:	b2a4      	uxth	r4, r4
 8002e80:	1c20      	adds	r0, r4, #0
 8002e82:	f000 fc2b 	bl	80036dc <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8002e86:	1c28      	adds	r0, r5, #0
 8002e88:	1c31      	adds	r1, r6, #0
 8002e8a:	f7ff ffa6 	bl	8002dda <u8g_SetResetHigh>
        u8g_Delay(value);
 8002e8e:	1c20      	adds	r0, r4, #0
 8002e90:	f000 fc24 	bl	80036dc <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e005      	b.n	8002ea4 <u8g_WriteEscSeqP+0x90>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8002e98:	b263      	sxtb	r3, r4
      {
        u8g_Delay(value);
 8002e9a:	b2a0      	uxth	r0, r4
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	daf7      	bge.n	8002e90 <u8g_WriteEscSeqP+0x7c>
 8002ea0:	e7f8      	b.n	8002e94 <u8g_WriteEscSeqP+0x80>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
 8002ea2:	2301      	movs	r3, #1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
 8002ea4:	3701      	adds	r7, #1
  }
 8002ea6:	e7ba      	b.n	8002e1e <u8g_WriteEscSeqP+0xa>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	e000      	b.n	8002eae <u8g_WriteEscSeqP+0x9a>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
 8002eac:	2001      	movs	r0, #1
}
 8002eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002eb0 <u8g_pb_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
  do
  {
    *ptr++ = 0;
 8002eb0:	2100      	movs	r1, #0

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8002eb2:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
 8002eb4:	7942      	ldrb	r2, [r0, #5]
 8002eb6:	189a      	adds	r2, r3, r2
  do
  {
    *ptr++ = 0;
 8002eb8:	7019      	strb	r1, [r3, #0]
 8002eba:	3301      	adds	r3, #1
  } while( ptr != end_ptr );
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d1fb      	bne.n	8002eb8 <u8g_pb_Clear+0x8>
}
 8002ec0:	4770      	bx	lr

08002ec2 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8002ec2:	b530      	push	{r4, r5, lr}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	1c25      	adds	r5, r4, #0
 8002ec8:	78c3      	ldrb	r3, [r0, #3]
  c2 = v1 >= pb->p.page_y0;
 8002eca:	7880      	ldrb	r0, [r0, #2]
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	4165      	adcs	r5, r4
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
 8002ed0:	428a      	cmp	r2, r1
 8002ed2:	419b      	sbcs	r3, r3
 8002ed4:	4259      	negs	r1, r3
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
 8002ed6:	1c0b      	adds	r3, r1, #0

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
 8002ed8:	4282      	cmp	r2, r0
 8002eda:	4164      	adcs	r4, r4
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8002edc:	b2ed      	uxtb	r5, r5
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
 8002ede:	432b      	orrs	r3, r5
 8002ee0:	401c      	ands	r4, r3
  c1 |= c3;
  return c1 & 1;
 8002ee2:	1c20      	adds	r0, r4, #0
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
 8002ee4:	4029      	ands	r1, r5
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
 8002ee6:	4308      	orrs	r0, r1
}
 8002ee8:	bd30      	pop	{r4, r5, pc}

08002eea <u8g_pb_IsXIntersection>:
  */
  /*
  c0 = v0 < 0;
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
 8002eea:	7943      	ldrb	r3, [r0, #5]
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
  /*if ( c1 && c2 ) return 0;*/
  return 1;
 8002eec:	2001      	movs	r0, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8002eee:	4299      	cmp	r1, r3
 8002ef0:	d903      	bls.n	8002efa <u8g_pb_IsXIntersection+0x10>
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	4140      	adcs	r0, r0
 8002ef8:	b2c0      	uxtb	r0, r0
  /*if ( c1 && c2 ) return 0;*/
  return 1;
}
 8002efa:	4770      	bx	lr

08002efc <u8g_pb_IsIntersection>:

uint8_t u8g_pb_IsIntersection(u8g_pb_t *pb, u8g_dev_arg_bbx_t *bbx)
{
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	1c0d      	adds	r5, r1, #0
  u8g_uint_t tmp;

  tmp = bbx->y;
 8002f00:	7849      	ldrb	r1, [r1, #1]
  tmp += bbx->h;
 8002f02:	78ea      	ldrb	r2, [r5, #3]
  /*if ( c1 && c2 ) return 0;*/
  return 1;
}

uint8_t u8g_pb_IsIntersection(u8g_pb_t *pb, u8g_dev_arg_bbx_t *bbx)
{
 8002f04:	1c04      	adds	r4, r0, #0
  u8g_uint_t tmp;

  tmp = bbx->y;
  tmp += bbx->h;
 8002f06:	188a      	adds	r2, r1, r2
  tmp--;
 8002f08:	3a01      	subs	r2, #1
  
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f7ff ffd9 	bl	8002ec2 <u8g_pb_IsYIntersection>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d00c      	beq.n	8002f2e <u8g_pb_IsIntersection+0x32>
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
 8002f14:	7829      	ldrb	r1, [r5, #0]
  */
  /*
  c0 = v0 < 0;
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
 8002f16:	7962      	ldrb	r2, [r4, #5]
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
  tmp += bbx->w;
 8002f18:	78ab      	ldrb	r3, [r5, #2]
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
  /*if ( c1 && c2 ) return 0;*/
  return 1;
 8002f1a:	2001      	movs	r0, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8002f1c:	4291      	cmp	r1, r2
 8002f1e:	d906      	bls.n	8002f2e <u8g_pb_IsIntersection+0x32>
 8002f20:	2000      	movs	r0, #0
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
  tmp += bbx->w;
 8002f22:	18cb      	adds	r3, r1, r3
  tmp--;
 8002f24:	3b01      	subs	r3, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	4140      	adcs	r0, r0
  tmp = bbx->y;
  tmp += bbx->h;
  tmp--;
  
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
 8002f2c:	b2c0      	uxtb	r0, r0
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}

08002f30 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 8002f34:	7883      	ldrb	r3, [r0, #2]
 8002f36:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
  box->x1--;
 8002f38:	7943      	ldrb	r3, [r0, #5]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 8002f3e:	78c3      	ldrb	r3, [r0, #3]
 8002f40:	70cb      	strb	r3, [r1, #3]
}
 8002f42:	4770      	bx	lr

08002f44 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8002f44:	b508      	push	{r3, lr}
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 8002f46:	78cb      	ldrb	r3, [r1, #3]


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002f48:	784a      	ldrb	r2, [r1, #1]
  v1 = v0;
  switch( arg_pixel->dir )
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d006      	beq.n	8002f5c <u8g_pb_Is8PixelVisible+0x18>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8002f4e:	1c11      	adds	r1, r2, #0
 8002f50:	3908      	subs	r1, #8
 8002f52:	b2c9      	uxtb	r1, r1
uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d005      	beq.n	8002f64 <u8g_pb_Is8PixelVisible+0x20>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002f58:	1c11      	adds	r1, r2, #0
 8002f5a:	e003      	b.n	8002f64 <u8g_pb_Is8PixelVisible+0x20>
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8002f5c:	1c13      	adds	r3, r2, #0
 8002f5e:	3308      	adds	r3, #8


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002f60:	1c11      	adds	r1, r2, #0
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8002f62:	b2da      	uxtb	r2, r3
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8002f64:	f7ff ffad 	bl	8002ec2 <u8g_pb_IsYIntersection>
}
 8002f68:	bd08      	pop	{r3, pc}

08002f6a <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8002f6a:	b508      	push	{r3, lr}
 8002f6c:	1c03      	adds	r3, r0, #0
 8002f6e:	1c08      	adds	r0, r1, #0
 8002f70:	1c11      	adds	r1, r2, #0
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8002f72:	795a      	ldrb	r2, [r3, #5]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f7ff ff43 	bl	8002e00 <u8g_WriteSequence>
}
 8002f7a:	bd08      	pop	{r3, pc}

08002f7c <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	4770      	bx	lr

08002f80 <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 8002f80:	2200      	movs	r2, #0
  p->page_y1 = p->page_height;
  p->page_y1--;
 8002f82:	7803      	ldrb	r3, [r0, #0]
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 8002f84:	7082      	strb	r2, [r0, #2]
  p->page_y1 = p->page_height;
  p->page_y1--;
 8002f86:	3b01      	subs	r3, #1
 8002f88:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 8002f8a:	7102      	strb	r2, [r0, #4]
}
 8002f8c:	4770      	bx	lr

08002f8e <u8g_page_Init>:
/*
  setup page count structure
  conditions: page_height <= total_height
*/
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
 8002f8e:	b508      	push	{r3, lr}
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
 8002f90:	2300      	movs	r3, #0
  setup page count structure
  conditions: page_height <= total_height
*/
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
 8002f92:	7001      	strb	r1, [r0, #0]
  p->total_height = total_height;
 8002f94:	7042      	strb	r2, [r0, #1]
  p->page = 0;
 8002f96:	7103      	strb	r3, [r0, #4]
  u8g_page_First(p);
 8002f98:	f7ff fff2 	bl	8002f80 <u8g_page_First>
}
 8002f9c:	bd08      	pop	{r3, pc}

08002f9e <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8002f9e:	b530      	push	{r4, r5, lr}
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8002fa0:	7884      	ldrb	r4, [r0, #2]
 8002fa2:	7801      	ldrb	r1, [r0, #0]
  if ( p->page_y0 >= p->total_height )
 8002fa4:	7845      	ldrb	r5, [r0, #1]
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8002fa6:	190c      	adds	r4, r1, r4
 8002fa8:	b2e4      	uxtb	r4, r4
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8002faa:	1c03      	adds	r3, r0, #0
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8002fac:	7084      	strb	r4, [r0, #2]
  if ( p->page_y0 >= p->total_height )
    return 0;
 8002fae:	2000      	movs	r0, #0

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
 8002fb0:	42ac      	cmp	r4, r5
 8002fb2:	d20b      	bcs.n	8002fcc <u8g_page_Next+0x2e>
    return 0;
  p->page++;
 8002fb4:	791a      	ldrb	r2, [r3, #4]
 8002fb6:	3201      	adds	r2, #1
 8002fb8:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 8002fba:	78da      	ldrb	r2, [r3, #3]
  y1 += p->page_height;
 8002fbc:	1851      	adds	r1, r2, r1
 8002fbe:	b2ca      	uxtb	r2, r1
  if ( y1 >= p->total_height )
 8002fc0:	42aa      	cmp	r2, r5
 8002fc2:	d301      	bcc.n	8002fc8 <u8g_page_Next+0x2a>
  {
    y1 = p->total_height;
    y1--;
 8002fc4:	1e6a      	subs	r2, r5, #1
 8002fc6:	b2d2      	uxtb	r2, r2
  }
  p->page_y1 = y1;
  
  return 1;
 8002fc8:	2001      	movs	r0, #1
  if ( y1 >= p->total_height )
  {
    y1 = p->total_height;
    y1--;
  }
  p->page_y1 = y1;
 8002fca:	70da      	strb	r2, [r3, #3]
  
  return 1;
}
 8002fcc:	bd30      	pop	{r4, r5, pc}
	...

08002fd0 <__gnu_thumb1_case_uqi>:
 8002fd0:	b402      	push	{r1}
 8002fd2:	4671      	mov	r1, lr
 8002fd4:	0849      	lsrs	r1, r1, #1
 8002fd6:	0049      	lsls	r1, r1, #1
 8002fd8:	5c09      	ldrb	r1, [r1, r0]
 8002fda:	0049      	lsls	r1, r1, #1
 8002fdc:	448e      	add	lr, r1
 8002fde:	bc02      	pop	{r1}
 8002fe0:	4770      	bx	lr
 8002fe2:	46c0      	nop			; (mov r8, r8)

08002fe4 <__aeabi_uidiv>:
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	d034      	beq.n	8003052 <.udivsi3_skip_div0_test+0x6a>

08002fe8 <.udivsi3_skip_div0_test>:
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2200      	movs	r2, #0
 8002fec:	b410      	push	{r4}
 8002fee:	4288      	cmp	r0, r1
 8002ff0:	d32c      	bcc.n	800304c <.udivsi3_skip_div0_test+0x64>
 8002ff2:	2401      	movs	r4, #1
 8002ff4:	0724      	lsls	r4, r4, #28
 8002ff6:	42a1      	cmp	r1, r4
 8002ff8:	d204      	bcs.n	8003004 <.udivsi3_skip_div0_test+0x1c>
 8002ffa:	4281      	cmp	r1, r0
 8002ffc:	d202      	bcs.n	8003004 <.udivsi3_skip_div0_test+0x1c>
 8002ffe:	0109      	lsls	r1, r1, #4
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	e7f8      	b.n	8002ff6 <.udivsi3_skip_div0_test+0xe>
 8003004:	00e4      	lsls	r4, r4, #3
 8003006:	42a1      	cmp	r1, r4
 8003008:	d204      	bcs.n	8003014 <.udivsi3_skip_div0_test+0x2c>
 800300a:	4281      	cmp	r1, r0
 800300c:	d202      	bcs.n	8003014 <.udivsi3_skip_div0_test+0x2c>
 800300e:	0049      	lsls	r1, r1, #1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	e7f8      	b.n	8003006 <.udivsi3_skip_div0_test+0x1e>
 8003014:	4288      	cmp	r0, r1
 8003016:	d301      	bcc.n	800301c <.udivsi3_skip_div0_test+0x34>
 8003018:	1a40      	subs	r0, r0, r1
 800301a:	431a      	orrs	r2, r3
 800301c:	084c      	lsrs	r4, r1, #1
 800301e:	42a0      	cmp	r0, r4
 8003020:	d302      	bcc.n	8003028 <.udivsi3_skip_div0_test+0x40>
 8003022:	1b00      	subs	r0, r0, r4
 8003024:	085c      	lsrs	r4, r3, #1
 8003026:	4322      	orrs	r2, r4
 8003028:	088c      	lsrs	r4, r1, #2
 800302a:	42a0      	cmp	r0, r4
 800302c:	d302      	bcc.n	8003034 <.udivsi3_skip_div0_test+0x4c>
 800302e:	1b00      	subs	r0, r0, r4
 8003030:	089c      	lsrs	r4, r3, #2
 8003032:	4322      	orrs	r2, r4
 8003034:	08cc      	lsrs	r4, r1, #3
 8003036:	42a0      	cmp	r0, r4
 8003038:	d302      	bcc.n	8003040 <.udivsi3_skip_div0_test+0x58>
 800303a:	1b00      	subs	r0, r0, r4
 800303c:	08dc      	lsrs	r4, r3, #3
 800303e:	4322      	orrs	r2, r4
 8003040:	2800      	cmp	r0, #0
 8003042:	d003      	beq.n	800304c <.udivsi3_skip_div0_test+0x64>
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	d001      	beq.n	800304c <.udivsi3_skip_div0_test+0x64>
 8003048:	0909      	lsrs	r1, r1, #4
 800304a:	e7e3      	b.n	8003014 <.udivsi3_skip_div0_test+0x2c>
 800304c:	1c10      	adds	r0, r2, #0
 800304e:	bc10      	pop	{r4}
 8003050:	4770      	bx	lr
 8003052:	2800      	cmp	r0, #0
 8003054:	d001      	beq.n	800305a <.udivsi3_skip_div0_test+0x72>
 8003056:	2000      	movs	r0, #0
 8003058:	43c0      	mvns	r0, r0
 800305a:	b407      	push	{r0, r1, r2}
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <.udivsi3_skip_div0_test+0x80>)
 800305e:	a102      	add	r1, pc, #8	; (adr r1, 8003068 <.udivsi3_skip_div0_test+0x80>)
 8003060:	1840      	adds	r0, r0, r1
 8003062:	9002      	str	r0, [sp, #8]
 8003064:	bd03      	pop	{r0, r1, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	00000019 	.word	0x00000019

0800306c <__aeabi_uidivmod>:
 800306c:	2900      	cmp	r1, #0
 800306e:	d0f0      	beq.n	8003052 <.udivsi3_skip_div0_test+0x6a>
 8003070:	b503      	push	{r0, r1, lr}
 8003072:	f7ff ffb9 	bl	8002fe8 <.udivsi3_skip_div0_test>
 8003076:	bc0e      	pop	{r1, r2, r3}
 8003078:	4342      	muls	r2, r0
 800307a:	1a89      	subs	r1, r1, r2
 800307c:	4718      	bx	r3
 800307e:	46c0      	nop			; (mov r8, r8)

08003080 <__aeabi_idiv0>:
 8003080:	4770      	bx	lr
 8003082:	46c0      	nop			; (mov r8, r8)

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4e0d      	ldr	r6, [pc, #52]	; (80030bc <__libc_init_array+0x38>)
 8003088:	4d0d      	ldr	r5, [pc, #52]	; (80030c0 <__libc_init_array+0x3c>)
 800308a:	2400      	movs	r4, #0
 800308c:	1bad      	subs	r5, r5, r6
 800308e:	10ad      	asrs	r5, r5, #2
 8003090:	d005      	beq.n	800309e <__libc_init_array+0x1a>
 8003092:	00a3      	lsls	r3, r4, #2
 8003094:	58f3      	ldr	r3, [r6, r3]
 8003096:	3401      	adds	r4, #1
 8003098:	4798      	blx	r3
 800309a:	42a5      	cmp	r5, r4
 800309c:	d1f9      	bne.n	8003092 <__libc_init_array+0xe>
 800309e:	f001 ff75 	bl	8004f8c <_init>
 80030a2:	4e08      	ldr	r6, [pc, #32]	; (80030c4 <__libc_init_array+0x40>)
 80030a4:	4d08      	ldr	r5, [pc, #32]	; (80030c8 <__libc_init_array+0x44>)
 80030a6:	2400      	movs	r4, #0
 80030a8:	1bad      	subs	r5, r5, r6
 80030aa:	10ad      	asrs	r5, r5, #2
 80030ac:	d005      	beq.n	80030ba <__libc_init_array+0x36>
 80030ae:	00a3      	lsls	r3, r4, #2
 80030b0:	58f3      	ldr	r3, [r6, r3]
 80030b2:	3401      	adds	r4, #1
 80030b4:	4798      	blx	r3
 80030b6:	42a5      	cmp	r5, r4
 80030b8:	d1f9      	bne.n	80030ae <__libc_init_array+0x2a>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
	...

080030cc <memcpy>:
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	2a0f      	cmp	r2, #15
 80030d0:	d934      	bls.n	800313c <memcpy+0x70>
 80030d2:	1c03      	adds	r3, r0, #0
 80030d4:	430b      	orrs	r3, r1
 80030d6:	079b      	lsls	r3, r3, #30
 80030d8:	d134      	bne.n	8003144 <memcpy+0x78>
 80030da:	1c15      	adds	r5, r2, #0
 80030dc:	1c03      	adds	r3, r0, #0
 80030de:	3d10      	subs	r5, #16
 80030e0:	092d      	lsrs	r5, r5, #4
 80030e2:	3501      	adds	r5, #1
 80030e4:	012d      	lsls	r5, r5, #4
 80030e6:	194c      	adds	r4, r1, r5
 80030e8:	680e      	ldr	r6, [r1, #0]
 80030ea:	601e      	str	r6, [r3, #0]
 80030ec:	684e      	ldr	r6, [r1, #4]
 80030ee:	605e      	str	r6, [r3, #4]
 80030f0:	688e      	ldr	r6, [r1, #8]
 80030f2:	3110      	adds	r1, #16
 80030f4:	609e      	str	r6, [r3, #8]
 80030f6:	1f0e      	subs	r6, r1, #4
 80030f8:	6837      	ldr	r7, [r6, #0]
 80030fa:	3310      	adds	r3, #16
 80030fc:	1f1e      	subs	r6, r3, #4
 80030fe:	6037      	str	r7, [r6, #0]
 8003100:	42a1      	cmp	r1, r4
 8003102:	d1f1      	bne.n	80030e8 <memcpy+0x1c>
 8003104:	230f      	movs	r3, #15
 8003106:	1945      	adds	r5, r0, r5
 8003108:	4013      	ands	r3, r2
 800310a:	2b03      	cmp	r3, #3
 800310c:	d91c      	bls.n	8003148 <memcpy+0x7c>
 800310e:	2100      	movs	r1, #0
 8003110:	3b04      	subs	r3, #4
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3301      	adds	r3, #1
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	5866      	ldr	r6, [r4, r1]
 800311a:	506e      	str	r6, [r5, r1]
 800311c:	3104      	adds	r1, #4
 800311e:	4299      	cmp	r1, r3
 8003120:	d1fa      	bne.n	8003118 <memcpy+0x4c>
 8003122:	2303      	movs	r3, #3
 8003124:	186d      	adds	r5, r5, r1
 8003126:	401a      	ands	r2, r3
 8003128:	1861      	adds	r1, r4, r1
 800312a:	2a00      	cmp	r2, #0
 800312c:	d005      	beq.n	800313a <memcpy+0x6e>
 800312e:	2300      	movs	r3, #0
 8003130:	5ccc      	ldrb	r4, [r1, r3]
 8003132:	54ec      	strb	r4, [r5, r3]
 8003134:	3301      	adds	r3, #1
 8003136:	4293      	cmp	r3, r2
 8003138:	d1fa      	bne.n	8003130 <memcpy+0x64>
 800313a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313c:	1c05      	adds	r5, r0, #0
 800313e:	2a00      	cmp	r2, #0
 8003140:	d1f5      	bne.n	800312e <memcpy+0x62>
 8003142:	e7fa      	b.n	800313a <memcpy+0x6e>
 8003144:	1c05      	adds	r5, r0, #0
 8003146:	e7f2      	b.n	800312e <memcpy+0x62>
 8003148:	1c1a      	adds	r2, r3, #0
 800314a:	e7f8      	b.n	800313e <memcpy+0x72>

0800314c <memset>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	0783      	lsls	r3, r0, #30
 8003150:	d03e      	beq.n	80031d0 <memset+0x84>
 8003152:	1e54      	subs	r4, r2, #1
 8003154:	2a00      	cmp	r2, #0
 8003156:	d03a      	beq.n	80031ce <memset+0x82>
 8003158:	b2ce      	uxtb	r6, r1
 800315a:	1c03      	adds	r3, r0, #0
 800315c:	2503      	movs	r5, #3
 800315e:	e003      	b.n	8003168 <memset+0x1c>
 8003160:	1e62      	subs	r2, r4, #1
 8003162:	2c00      	cmp	r4, #0
 8003164:	d033      	beq.n	80031ce <memset+0x82>
 8003166:	1c14      	adds	r4, r2, #0
 8003168:	3301      	adds	r3, #1
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	7016      	strb	r6, [r2, #0]
 800316e:	422b      	tst	r3, r5
 8003170:	d1f6      	bne.n	8003160 <memset+0x14>
 8003172:	2c03      	cmp	r4, #3
 8003174:	d923      	bls.n	80031be <memset+0x72>
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	400a      	ands	r2, r1
 800317a:	0215      	lsls	r5, r2, #8
 800317c:	432a      	orrs	r2, r5
 800317e:	0415      	lsls	r5, r2, #16
 8003180:	432a      	orrs	r2, r5
 8003182:	2c0f      	cmp	r4, #15
 8003184:	d927      	bls.n	80031d6 <memset+0x8a>
 8003186:	1c25      	adds	r5, r4, #0
 8003188:	3d10      	subs	r5, #16
 800318a:	092d      	lsrs	r5, r5, #4
 800318c:	3501      	adds	r5, #1
 800318e:	012d      	lsls	r5, r5, #4
 8003190:	195d      	adds	r5, r3, r5
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	3310      	adds	r3, #16
 800319a:	1f1e      	subs	r6, r3, #4
 800319c:	6032      	str	r2, [r6, #0]
 800319e:	429d      	cmp	r5, r3
 80031a0:	d1f7      	bne.n	8003192 <memset+0x46>
 80031a2:	260f      	movs	r6, #15
 80031a4:	4034      	ands	r4, r6
 80031a6:	2c03      	cmp	r4, #3
 80031a8:	d909      	bls.n	80031be <memset+0x72>
 80031aa:	1f23      	subs	r3, r4, #4
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3301      	adds	r3, #1
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	18eb      	adds	r3, r5, r3
 80031b4:	c504      	stmia	r5!, {r2}
 80031b6:	42ab      	cmp	r3, r5
 80031b8:	d1fc      	bne.n	80031b4 <memset+0x68>
 80031ba:	2203      	movs	r2, #3
 80031bc:	4014      	ands	r4, r2
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d005      	beq.n	80031ce <memset+0x82>
 80031c2:	b2c9      	uxtb	r1, r1
 80031c4:	191c      	adds	r4, r3, r4
 80031c6:	7019      	strb	r1, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	42a3      	cmp	r3, r4
 80031cc:	d1fb      	bne.n	80031c6 <memset+0x7a>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	1c14      	adds	r4, r2, #0
 80031d2:	1c03      	adds	r3, r0, #0
 80031d4:	e7cd      	b.n	8003172 <memset+0x26>
 80031d6:	1c1d      	adds	r5, r3, #0
 80031d8:	e7e7      	b.n	80031aa <memset+0x5e>
 80031da:	46c0      	nop			; (mov r8, r8)

080031dc <USART1_IRQHandler>:

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 80031dc:	2280      	movs	r2, #128	; 0x80
    static char rx_buffer[256];
    static char at_buf[64];
    static char vec_buf[64];
    static char ip_buf[64];
    if(i==0){ 
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 80031de:	2090      	movs	r0, #144	; 0x90
 80031e0:	2180      	movs	r1, #128	; 0x80
//    }
//}



void USART1_IRQHandler(void){
 80031e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e4:	4b58      	ldr	r3, [pc, #352]	; (8003348 <USART1_IRQHandler+0x16c>)
 80031e6:	0512      	lsls	r2, r2, #20
    static int ip_index = 0;
    static char rx_buffer[256];
    static char at_buf[64];
    static char vec_buf[64];
    static char ip_buf[64];
    if(i==0){ 
 80031e8:	4c58      	ldr	r4, [pc, #352]	; (800334c <USART1_IRQHandler+0x170>)
 80031ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80031ec:	6823      	ldr	r3, [r4, #0]
//    }
//}



void USART1_IRQHandler(void){
 80031ee:	b085      	sub	sp, #20
    static char rx_buffer[256];
    static char at_buf[64];
    static char vec_buf[64];
    static char ip_buf[64];
    if(i==0){ 
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 80031f0:	05c0      	lsls	r0, r0, #23
 80031f2:	00c9      	lsls	r1, r1, #3
    static int ip_index = 0;
    static char rx_buffer[256];
    static char at_buf[64];
    static char vec_buf[64];
    static char ip_buf[64];
    if(i==0){ 
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d103      	bne.n	8003200 <USART1_IRQHandler+0x24>
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 80031f8:	f7fd f84c 	bl	8000294 <GPIO_SetBits>
        i=1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e002      	b.n	8003206 <USART1_IRQHandler+0x2a>
    }else{
        GPIO_ResetBits(GPIOA, GPIO_Pin_10);
 8003200:	f7fd f84a 	bl	8000298 <GPIO_ResetBits>
        i=0;
 8003204:	2300      	movs	r3, #0
    //    if(tx_index>=(sizeof(StringLoop)-1))
    //        tx_index=0;
    //}
   //while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == SET){ 
    //while(USART_GetFlagStatus(USART1, USART_IT_RXNE)==SET)//Receivedcharactersmodifystring
    if(USART_GetITStatus(USART1, USART_IT_RXNE)!=RESET)//Receivedcharactersmodifystring
 8003206:	4852      	ldr	r0, [pc, #328]	; (8003350 <USART1_IRQHandler+0x174>)
 8003208:	4952      	ldr	r1, [pc, #328]	; (8003354 <USART1_IRQHandler+0x178>)
    if(i==0){ 
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
        i=1;
    }else{
        GPIO_ResetBits(GPIOA, GPIO_Pin_10);
        i=0;
 800320a:	6023      	str	r3, [r4, #0]
    //    if(tx_index>=(sizeof(StringLoop)-1))
    //        tx_index=0;
    //}
   //while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == SET){ 
    //while(USART_GetFlagStatus(USART1, USART_IT_RXNE)==SET)//Receivedcharactersmodifystring
    if(USART_GetITStatus(USART1, USART_IT_RXNE)!=RESET)//Receivedcharactersmodifystring
 800320c:	f7fe f80e 	bl	800122c <USART_GetITStatus>
 8003210:	2800      	cmp	r0, #0
 8003212:	d100      	bne.n	8003216 <USART1_IRQHandler+0x3a>
 8003214:	e091      	b.n	800333a <USART1_IRQHandler+0x15e>
    {
        char rx = USART_ReceiveData(USART1); 
 8003216:	484e      	ldr	r0, [pc, #312]	; (8003350 <USART1_IRQHandler+0x174>)
 8003218:	f7fd feec 	bl	8000ff4 <USART_ReceiveData>
 800321c:	b2c0      	uxtb	r0, r0
 800321e:	4c4e      	ldr	r4, [pc, #312]	; (8003358 <USART1_IRQHandler+0x17c>)
        if(rx == '{'){
 8003220:	287b      	cmp	r0, #123	; 0x7b
 8003222:	d103      	bne.n	800322c <USART1_IRQHandler+0x50>
           resp_valid = 1;
 8003224:	2301      	movs	r3, #1
           ip_valid = 1; 
 8003226:	4a4d      	ldr	r2, [pc, #308]	; (800335c <USART1_IRQHandler+0x180>)
    //while(USART_GetFlagStatus(USART1, USART_IT_RXNE)==SET)//Receivedcharactersmodifystring
    if(USART_GetITStatus(USART1, USART_IT_RXNE)!=RESET)//Receivedcharactersmodifystring
    {
        char rx = USART_ReceiveData(USART1); 
        if(rx == '{'){
           resp_valid = 1;
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	e050      	b.n	80032ce <USART1_IRQHandler+0xf2>
           ip_valid = 1; 
        }
        else if(rx == ';'){
 800322c:	283b      	cmp	r0, #59	; 0x3b
 800322e:	d10f      	bne.n	8003250 <USART1_IRQHandler+0x74>
           resp_valid = 1;
           ip_valid = 0; 
 8003230:	2200      	movs	r2, #0
        if(rx == '{'){
           resp_valid = 1;
           ip_valid = 1; 
        }
        else if(rx == ';'){
           resp_valid = 1;
 8003232:	2101      	movs	r1, #1
           ip_valid = 0; 
 8003234:	4b49      	ldr	r3, [pc, #292]	; (800335c <USART1_IRQHandler+0x180>)
        if(rx == '{'){
           resp_valid = 1;
           ip_valid = 1; 
        }
        else if(rx == ';'){
           resp_valid = 1;
 8003236:	6021      	str	r1, [r4, #0]
           ip_valid = 0; 
 8003238:	601a      	str	r2, [r3, #0]
           if(attacker_valid == 1){
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <USART1_IRQHandler+0x184>)
 800323c:	4849      	ldr	r0, [pc, #292]	; (8003364 <USART1_IRQHandler+0x188>)
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	428c      	cmp	r4, r1
 8003242:	d102      	bne.n	800324a <USART1_IRQHandler+0x6e>
                attacker_valid = 0;
 8003244:	601a      	str	r2, [r3, #0]
                vector_valid = 1;
 8003246:	6004      	str	r4, [r0, #0]
 8003248:	e077      	b.n	800333a <USART1_IRQHandler+0x15e>
           }
           else {
               vector_valid = 0;
 800324a:	6002      	str	r2, [r0, #0]
               attacker_valid = 1;
 800324c:	6019      	str	r1, [r3, #0]
 800324e:	e074      	b.n	800333a <USART1_IRQHandler+0x15e>
           }
        } 
        else if(resp_valid && rx == '}'){ //line end
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	4f45      	ldr	r7, [pc, #276]	; (8003368 <USART1_IRQHandler+0x18c>)
 8003254:	2b00      	cmp	r3, #0
 8003256:	d06b      	beq.n	8003330 <USART1_IRQHandler+0x154>
 8003258:	287d      	cmp	r0, #125	; 0x7d
 800325a:	d13a      	bne.n	80032d2 <USART1_IRQHandler+0xf6>
           if(rx_index !=0){
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06b      	beq.n	800333a <USART1_IRQHandler+0x15e>
              //memcpy(rxbuffer, rx_buffer, rx_index);
              memcpy(ip_addr, ip_buf, ip_index);
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <USART1_IRQHandler+0x190>)
 8003264:	4942      	ldr	r1, [pc, #264]	; (8003370 <USART1_IRQHandler+0x194>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4842      	ldr	r0, [pc, #264]	; (8003374 <USART1_IRQHandler+0x198>)
 800326a:	1c1a      	adds	r2, r3, #0
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	f7ff ff2d 	bl	80030cc <memcpy>
              memcpy(attacker, at_buf, attacker_index);
 8003272:	4e41      	ldr	r6, [pc, #260]	; (8003378 <USART1_IRQHandler+0x19c>)
 8003274:	4941      	ldr	r1, [pc, #260]	; (800337c <USART1_IRQHandler+0x1a0>)
 8003276:	6833      	ldr	r3, [r6, #0]
 8003278:	4841      	ldr	r0, [pc, #260]	; (8003380 <USART1_IRQHandler+0x1a4>)
 800327a:	1c1a      	adds	r2, r3, #0
 800327c:	9302      	str	r3, [sp, #8]
 800327e:	f7ff ff25 	bl	80030cc <memcpy>
              memcpy(vector, vec_buf, vector_index);
 8003282:	4d40      	ldr	r5, [pc, #256]	; (8003384 <USART1_IRQHandler+0x1a8>)
 8003284:	4940      	ldr	r1, [pc, #256]	; (8003388 <USART1_IRQHandler+0x1ac>)
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	4840      	ldr	r0, [pc, #256]	; (800338c <USART1_IRQHandler+0x1b0>)
 800328a:	1c1a      	adds	r2, r3, #0
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	f7ff ff1d 	bl	80030cc <memcpy>
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	2100      	movs	r1, #0
 8003296:	0052      	lsls	r2, r2, #1
 8003298:	483d      	ldr	r0, [pc, #244]	; (8003390 <USART1_IRQHandler+0x1b4>)
 800329a:	f7ff ff57 	bl	800314c <memset>
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	4a34      	ldr	r2, [pc, #208]	; (8003374 <USART1_IRQHandler+0x198>)
 80032a2:	9901      	ldr	r1, [sp, #4]
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
              rx_index = 0;
 80032a4:	603b      	str	r3, [r7, #0]
              memcpy(attacker, at_buf, attacker_index);
              memcpy(vector, vec_buf, vector_index);
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
 80032a6:	5453      	strb	r3, [r2, r1]
              attacker[attacker_index] = 0;
 80032a8:	4a35      	ldr	r2, [pc, #212]	; (8003380 <USART1_IRQHandler+0x1a4>)
 80032aa:	9902      	ldr	r1, [sp, #8]
              vector[vector_index] = 0;
              rx_index = 0;
              attacker_index = 0;
 80032ac:	6033      	str	r3, [r6, #0]
              memcpy(vector, vec_buf, vector_index);
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
              attacker[attacker_index] = 0;
 80032ae:	5453      	strb	r3, [r2, r1]
              vector[vector_index] = 0;
 80032b0:	4a36      	ldr	r2, [pc, #216]	; (800338c <USART1_IRQHandler+0x1b0>)
 80032b2:	9903      	ldr	r1, [sp, #12]
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
 80032b4:	602b      	str	r3, [r5, #0]
              memset(rx_buffer, 0x00, sizeof(rx_buffer));
              //rxbuffer[rx_index] = ',';
              //rxbuffer[rx_index] = 0;
              ip_addr[ip_index] = 0;
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
 80032b6:	5453      	strb	r3, [r2, r1]
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
              ip_index = 0;
              line_valid = 1;
 80032b8:	2101      	movs	r1, #1
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
              ip_index = 0;
 80032ba:	4a2c      	ldr	r2, [pc, #176]	; (800336c <USART1_IRQHandler+0x190>)
              line_valid = 1;
              resp_valid = 0;
 80032bc:	6023      	str	r3, [r4, #0]
              attacker[attacker_index] = 0;
              vector[vector_index] = 0;
              rx_index = 0;
              attacker_index = 0;
              vector_index = 0;
              ip_index = 0;
 80032be:	6013      	str	r3, [r2, #0]
              line_valid = 1;
 80032c0:	4a34      	ldr	r2, [pc, #208]	; (8003394 <USART1_IRQHandler+0x1b8>)
 80032c2:	6011      	str	r1, [r2, #0]
              resp_valid = 0;
              ip_valid = 0;
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <USART1_IRQHandler+0x180>)
 80032c6:	6013      	str	r3, [r2, #0]
              attacker_valid = 0;
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <USART1_IRQHandler+0x184>)
 80032ca:	6013      	str	r3, [r2, #0]
              vector_valid = 0;
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <USART1_IRQHandler+0x188>)
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e033      	b.n	800333a <USART1_IRQHandler+0x15e>
           }
        }
        else if(resp_valid && attacker_valid){
 80032d2:	4b23      	ldr	r3, [pc, #140]	; (8003360 <USART1_IRQHandler+0x184>)
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	2900      	cmp	r1, #0
 80032d8:	d00a      	beq.n	80032f0 <USART1_IRQHandler+0x114>
            if(attacker_index == sizeof(at_buf)){
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <USART1_IRQHandler+0x19c>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2a40      	cmp	r2, #64	; 0x40
 80032e0:	d101      	bne.n	80032e6 <USART1_IRQHandler+0x10a>
               attacker_index = 0;
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
            }
            at_buf[attacker_index++] = rx;
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	1c51      	adds	r1, r2, #1
 80032ea:	6019      	str	r1, [r3, #0]
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <USART1_IRQHandler+0x1a0>)
 80032ee:	e00c      	b.n	800330a <USART1_IRQHandler+0x12e>
            rx_index++; 
        }
        else if(resp_valid && vector_valid){
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <USART1_IRQHandler+0x188>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	2a00      	cmp	r2, #0
 80032f6:	d00d      	beq.n	8003314 <USART1_IRQHandler+0x138>
            if(vector_index == sizeof(vec_buf)){
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <USART1_IRQHandler+0x1a8>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2a40      	cmp	r2, #64	; 0x40
 80032fe:	d100      	bne.n	8003302 <USART1_IRQHandler+0x126>
               vector_index = 0;
 8003300:	6019      	str	r1, [r3, #0]
            } 
            vec_buf[vector_index++] = rx;
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	1c51      	adds	r1, r2, #1
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <USART1_IRQHandler+0x1ac>)
 800330a:	5498      	strb	r0, [r3, r2]
            rx_index++; 
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	e012      	b.n	800333a <USART1_IRQHandler+0x15e>
        }
        else if(resp_valid && ip_valid){
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <USART1_IRQHandler+0x180>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <USART1_IRQHandler+0x154>
            if(ip_index == sizeof(ip_buf)){
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <USART1_IRQHandler+0x190>)
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	2940      	cmp	r1, #64	; 0x40
 8003322:	d100      	bne.n	8003326 <USART1_IRQHandler+0x14a>
               ip_index = 0;
 8003324:	601a      	str	r2, [r3, #0]
            } 
            ip_buf[ip_index++] = rx;
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	1c51      	adds	r1, r2, #1
 800332a:	6019      	str	r1, [r3, #0]
 800332c:	4b10      	ldr	r3, [pc, #64]	; (8003370 <USART1_IRQHandler+0x194>)
 800332e:	e7ec      	b.n	800330a <USART1_IRQHandler+0x12e>
            rx_index++; 
        }else { 
            rx_buffer[rx_index++] = rx;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	603a      	str	r2, [r7, #0]
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <USART1_IRQHandler+0x1b4>)
 8003338:	54d0      	strb	r0, [r2, r3]

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <USART1_IRQHandler+0x1bc>)
 800333e:	0512      	lsls	r2, r2, #20
 8003340:	601a      	str	r2, [r3, #0]
        }
    }
    NVIC_EnableIRQ(USART1_IRQn);
}
 8003342:	b005      	add	sp, #20
 8003344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	e000e104 	.word	0xe000e104
 800334c:	20000a08 	.word	0x20000a08
 8003350:	40013800 	.word	0x40013800
 8003354:	00050105 	.word	0x00050105
 8003358:	20000b68 	.word	0x20000b68
 800335c:	20000a58 	.word	0x20000a58
 8003360:	20000bf0 	.word	0x20000bf0
 8003364:	20000b64 	.word	0x20000b64
 8003368:	20000bec 	.word	0x20000bec
 800336c:	20000b5c 	.word	0x20000b5c
 8003370:	20000bac 	.word	0x20000bac
 8003374:	20000c80 	.word	0x20000c80
 8003378:	20000a0c 	.word	0x20000a0c
 800337c:	20000b6c 	.word	0x20000b6c
 8003380:	20000bf4 	.word	0x20000bf4
 8003384:	20000a54 	.word	0x20000a54
 8003388:	20000a10 	.word	0x20000a10
 800338c:	20000cdc 	.word	0x20000cdc
 8003390:	20000a5c 	.word	0x20000a5c
 8003394:	20000a50 	.word	0x20000a50
 8003398:	e000e100 	.word	0xe000e100

0800339c <SysTick_Handler>:
  	//        tick = 0; 
    //        break;
    //    default:
    //       break; 
    //}	
    timercounter++;
 800339c:	4a02      	ldr	r2, [pc, #8]	; (80033a8 <SysTick_Handler+0xc>)
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	4770      	bx	lr
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20000b60 	.word	0x20000b60

080033ac <initUSART1>:

void initUSART1(){
 80033ac:	b510      	push	{r4, lr}
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 80033ae:	2080      	movs	r0, #128	; 0x80
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 80033b0:	2490      	movs	r4, #144	; 0x90
    timercounter++;
}

void initUSART1(){
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 80033b2:	01c0      	lsls	r0, r0, #7
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 80033b4:	05e4      	lsls	r4, r4, #23
    timercounter++;
}

void initUSART1(){
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 80033b6:	2101      	movs	r1, #1
 80033b8:	f7fd fc2a 	bl	8000c10 <RCC_APB2PeriphClockCmd>
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 80033bc:	2201      	movs	r2, #1
 80033be:	1c20      	adds	r0, r4, #0
 80033c0:	2103      	movs	r1, #3
 80033c2:	f7fc ff73 	bl	80002ac <GPIO_PinAFConfig>
   
   GPIO_Init(GPIOA, &USART1_GPIO_InitStruct);
 80033c6:	1c20      	adds	r0, r4, #0
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <initUSART1+0x50>)
   NVIC_Init(&NVIC_InitStructure);
   USART_Init(USART1, &USART1_InitStruct);
 80033ca:	4c0d      	ldr	r4, [pc, #52]	; (8003400 <initUSART1+0x54>)
void initUSART1(){
   //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
   
   GPIO_Init(GPIOA, &USART1_GPIO_InitStruct);
 80033cc:	f7fc fecc 	bl	8000168 <GPIO_Init>
   NVIC_Init(&NVIC_InitStructure);
 80033d0:	480c      	ldr	r0, [pc, #48]	; (8003404 <initUSART1+0x58>)
 80033d2:	f7fd f9c3 	bl	800075c <NVIC_Init>
   USART_Init(USART1, &USART1_InitStruct);
 80033d6:	1c20      	adds	r0, r4, #0
 80033d8:	490b      	ldr	r1, [pc, #44]	; (8003408 <initUSART1+0x5c>)
 80033da:	f7fd fcd5 	bl	8000d88 <USART_Init>
   
//enable the interrupt 
   USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80033de:	1c20      	adds	r0, r4, #0
 80033e0:	490a      	ldr	r1, [pc, #40]	; (800340c <initUSART1+0x60>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	f7fd feec 	bl	80011c0 <USART_ITConfig>
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <initUSART1+0x64>)
 80033ec:	0512      	lsls	r2, r2, #20
 80033ee:	601a      	str	r2, [r3, #0]
   NVIC_EnableIRQ(USART1_IRQn);
   USART_Cmd(USART1, ENABLE);
 80033f0:	1c20      	adds	r0, r4, #0
 80033f2:	2101      	movs	r1, #1
 80033f4:	f7fd fd3a 	bl	8000e6c <USART_Cmd>
   //memset(rxbuffer, 0x00, sizeof(rxbuffer));
}
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	2000014c 	.word	0x2000014c
 8003400:	40013800 	.word	0x40013800
 8003404:	20000148 	.word	0x20000148
 8003408:	2000035c 	.word	0x2000035c
 800340c:	00050105 	.word	0x00050105
 8003410:	e000e100 	.word	0xe000e100

08003414 <draw>:


void draw(uint8_t pos)
{
 8003414:	b537      	push	{r0, r1, r2, r4, r5, lr}
  u8g_SetFont(&u8g, u8g_font_unifont);
 8003416:	4d14      	ldr	r5, [pc, #80]	; (8003468 <draw+0x54>)
   //memset(rxbuffer, 0x00, sizeof(rxbuffer));
}


void draw(uint8_t pos)
{
 8003418:	1c04      	adds	r4, r0, #0
  u8g_SetFont(&u8g, u8g_font_unifont);
 800341a:	4914      	ldr	r1, [pc, #80]	; (800346c <draw+0x58>)
 800341c:	1c28      	adds	r0, r5, #0
 800341e:	f7fe fdd7 	bl	8001fd0 <u8g_SetFont>
  //char tokenstr[256]; 
  //u8g_DrawBox(&u8g, 1,1+pos,100,100);
  u8g_DrawXBM(&u8g, pos,0, threatbutt_width, threatbutt_height, threatbutt_bits);
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	4a12      	ldr	r2, [pc, #72]	; (8003470 <draw+0x5c>)
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	1c28      	adds	r0, r5, #0
 800342c:	1c21      	adds	r1, r4, #0
 800342e:	2200      	movs	r2, #0
 8003430:	f7fd ffac 	bl	800138c <u8g_DrawXBM>
  if(line_valid == 1){
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <draw+0x60>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d113      	bne.n	8003464 <draw+0x50>
      u8g_DrawStr(&u8g, (pos+threatbutt_width), 20, ip_addr);
 800343c:	3440      	adds	r4, #64	; 0x40
 800343e:	b2e4      	uxtb	r4, r4
 8003440:	1c21      	adds	r1, r4, #0
 8003442:	2214      	movs	r2, #20
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <draw+0x64>)
 8003446:	1c28      	adds	r0, r5, #0
 8003448:	f7fe fb69 	bl	8001b1e <u8g_DrawStr>
      u8g_DrawStr(&u8g, (pos+threatbutt_width), 40, attacker);
 800344c:	1c21      	adds	r1, r4, #0
 800344e:	2228      	movs	r2, #40	; 0x28
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <draw+0x68>)
 8003452:	1c28      	adds	r0, r5, #0
 8003454:	f7fe fb63 	bl	8001b1e <u8g_DrawStr>
      //token = strtok(NULL, ';'); 
      u8g_DrawStr(&u8g, (pos+threatbutt_width), 60, vector);
 8003458:	1c28      	adds	r0, r5, #0
 800345a:	1c21      	adds	r1, r4, #0
 800345c:	223c      	movs	r2, #60	; 0x3c
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <draw+0x6c>)
 8003460:	f7fe fb5d 	bl	8001b1e <u8g_DrawStr>
      //while(tokstr != NULL) {
      //  tokstr = strtok(NULL,";");
      //  u8g_DrawStr(&u8g, pos, 40, tokstr);
      //  } 
  }
}
 8003464:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	20000c34 	.word	0x20000c34
 800346c:	0800396c 	.word	0x0800396c
 8003470:	2000015c 	.word	0x2000015c
 8003474:	20000a50 	.word	0x20000a50
 8003478:	20000c80 	.word	0x20000c80
 800347c:	20000bf4 	.word	0x20000bf4
 8003480:	20000cdc 	.word	0x20000cdc

08003484 <main>:

int main(void)
{
 8003484:	b538      	push	{r3, r4, r5, lr}
    //RCC_ClocksTypeDef Clocks;
    uint8_t pos = 0;
     
    SystemInit();
 8003486:	f000 f855 	bl	8003534 <SystemInit>
    SystemCoreClockUpdate(); //update the system clock variable
 800348a:	f000 f8af 	bl	80035ec <SystemCoreClockUpdate>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800348e:	2080      	movs	r0, #128	; 0x80
 8003490:	2101      	movs	r1, #1
 8003492:	0280      	lsls	r0, r0, #10
 8003494:	f7fd fbb0 	bl	8000bf8 <RCC_AHBPeriphClockCmd>
    GPIO_Init(GPIOA, &GPIOA_InitStruct);
 8003498:	2090      	movs	r0, #144	; 0x90
 800349a:	491d      	ldr	r1, [pc, #116]	; (8003510 <main+0x8c>)
 800349c:	05c0      	lsls	r0, r0, #23
 800349e:	f7fc fe63 	bl	8000168 <GPIO_Init>
     
    timercounter = 0;
 80034a2:	2100      	movs	r1, #0
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <main+0x90>)
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <main+0x94>)
 80034a8:	6019      	str	r1, [r3, #0]
    //set systick to 1 every 1uS 
    SysTick_Config(SystemCoreClock/8);
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <main+0x98>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	08db      	lsrs	r3, r3, #3
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d80d      	bhi.n	80034d0 <main+0x4c>
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80034b4:	24c0      	movs	r4, #192	; 0xc0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80034b6:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <main+0x9c>)
 80034b8:	3b01      	subs	r3, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80034ba:	481a      	ldr	r0, [pc, #104]	; (8003524 <main+0xa0>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80034bc:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80034be:	6a03      	ldr	r3, [r0, #32]
 80034c0:	0624      	lsls	r4, r4, #24
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	4323      	orrs	r3, r4
 80034c8:	6203      	str	r3, [r0, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80034cc:	6091      	str	r1, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	6013      	str	r3, [r2, #0]
    initUSART1();
 80034d0:	f7ff ff6c 	bl	80033ac <initUSART1>
    GPIO_SetBits(GPIOA, GPIO_Pin_10);
 80034d4:	2090      	movs	r0, #144	; 0x90
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	05c0      	lsls	r0, r0, #23
 80034da:	00c9      	lsls	r1, r1, #3
 80034dc:	f7fc feda 	bl	8000294 <GPIO_SetBits>
    static BitAction toggle = Bit_SET;
    
    int i =0;
   
    //init the u8g library
    u8g_InitComFn(&u8g,  &u8g_dev_ssd1306_128x64_i2c, u8g_com_hw_i2c_fn);
 80034e0:	4c11      	ldr	r4, [pc, #68]	; (8003528 <main+0xa4>)
 80034e2:	4912      	ldr	r1, [pc, #72]	; (800352c <main+0xa8>)
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <main+0xac>)
 80034e6:	1c20      	adds	r0, r4, #0
 80034e8:	f7ff f8c8 	bl	800267c <u8g_InitComFn>
    u8g_SetDefaultForegroundColor(&u8g);
 80034ec:	1c20      	adds	r0, r4, #0
 80034ee:	f7ff fab3 	bl	8002a58 <u8g_SetDefaultForegroundColor>
}

int main(void)
{
    //RCC_ClocksTypeDef Clocks;
    uint8_t pos = 0;
 80034f2:	2500      	movs	r5, #0
    u8g_InitComFn(&u8g,  &u8g_dev_ssd1306_128x64_i2c, u8g_com_hw_i2c_fn);
    u8g_SetDefaultForegroundColor(&u8g);
    //u8g_SetFont(&u8g, u8g_font_unifont);
           
    while(1){
        u8g_FirstPage(&u8g);
 80034f4:	1c20      	adds	r0, r4, #0
 80034f6:	f7ff fa14 	bl	8002922 <u8g_FirstPage>
        do
        {
          draw(pos);
 80034fa:	1c28      	adds	r0, r5, #0
 80034fc:	f7ff ff8a 	bl	8003414 <draw>
        } while ( u8g_NextPage(&u8g) );
 8003500:	1c20      	adds	r0, r4, #0
 8003502:	f7ff fa13 	bl	800292c <u8g_NextPage>
 8003506:	2800      	cmp	r0, #0
 8003508:	d1f7      	bne.n	80034fa <main+0x76>
         
         /* refresh screen after some delay */
         ///* update position */
         pos--;
 800350a:	3d01      	subs	r5, #1
 800350c:	b2ed      	uxtb	r5, r5
         

 
    }
 800350e:	e7f1      	b.n	80034f4 <main+0x70>
 8003510:	20000154 	.word	0x20000154
 8003514:	20000b60 	.word	0x20000b60
 8003518:	00ffffff 	.word	0x00ffffff
 800351c:	20000384 	.word	0x20000384
 8003520:	e000e010 	.word	0xe000e010
 8003524:	e000ed00 	.word	0xe000ed00
 8003528:	20000c34 	.word	0x20000c34
 800352c:	20000100 	.word	0x20000100
 8003530:	08003701 	.word	0x08003701

08003534 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8003534:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003536:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003538:	240f      	movs	r4, #15
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <SystemInit+0x9c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4302      	orrs	r2, r0
 8003540:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <SystemInit+0xa0>)
 8003546:	400a      	ands	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <SystemInit+0xa4>)
 800354e:	400a      	ands	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	4a21      	ldr	r2, [pc, #132]	; (80035dc <SystemInit+0xa8>)
 8003556:	400a      	ands	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <SystemInit+0xac>)
 800355e:	4011      	ands	r1, r2
 8003560:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003564:	43a1      	bics	r1, r4
 8003566:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8003568:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800356a:	491e      	ldr	r1, [pc, #120]	; (80035e4 <SystemInit+0xb0>)
 800356c:	4021      	ands	r1, r4
 800356e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8003570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003572:	4381      	bics	r1, r0
 8003574:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003576:	2100      	movs	r1, #0
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8003578:	2011      	movs	r0, #17

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800357a:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800357c:	9100      	str	r1, [sp, #0]
 800357e:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8003580:	4919      	ldr	r1, [pc, #100]	; (80035e8 <SystemInit+0xb4>)
 8003582:	6008      	str	r0, [r1, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	6059      	str	r1, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	6059      	str	r1, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	400a      	ands	r2, r1
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8003590:	21a0      	movs	r1, #160	; 0xa0
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003592:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	0389      	lsls	r1, r1, #14
 8003598:	430a      	orrs	r2, r1
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800359a:	2180      	movs	r1, #128	; 0x80
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 800359c:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	0449      	lsls	r1, r1, #17
 80035a2:	430a      	orrs	r2, r1

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80035a4:	2180      	movs	r1, #128	; 0x80
  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80035a6:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80035a8:	0489      	lsls	r1, r1, #18
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <SystemInit+0x9c>)
 80035ae:	4208      	tst	r0, r1
 80035b0:	d0fb      	beq.n	80035aa <SystemInit+0x76>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80035b2:	2003      	movs	r0, #3
 80035b4:	6851      	ldr	r1, [r2, #4]
 80035b6:	4381      	bics	r1, r0
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80035b8:	2002      	movs	r0, #2
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80035ba:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80035bc:	6851      	ldr	r1, [r2, #4]
 80035be:	4301      	orrs	r1, r0
 80035c0:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80035c2:	210c      	movs	r1, #12
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	400a      	ands	r2, r1
 80035c8:	2a08      	cmp	r2, #8
 80035ca:	d1fb      	bne.n	80035c4 <SystemInit+0x90>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 80035cc:	bd13      	pop	{r0, r1, r4, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	40021000 	.word	0x40021000
 80035d4:	f8ffb80c 	.word	0xf8ffb80c
 80035d8:	fef6ffff 	.word	0xfef6ffff
 80035dc:	fffbffff 	.word	0xfffbffff
 80035e0:	ffc0ffff 	.word	0xffc0ffff
 80035e4:	fffffeac 	.word	0xfffffeac
 80035e8:	40022000 	.word	0x40022000

080035ec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80035ec:	230c      	movs	r3, #12
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80035ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80035f0:	4d12      	ldr	r5, [pc, #72]	; (800363c <SystemCoreClockUpdate+0x50>)
 80035f2:	4e13      	ldr	r6, [pc, #76]	; (8003640 <SystemCoreClockUpdate+0x54>)
 80035f4:	686a      	ldr	r2, [r5, #4]
 80035f6:	4013      	ands	r3, r2
  
  switch (tmp)
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d001      	beq.n	8003600 <SystemCoreClockUpdate+0x14>
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d002      	beq.n	8003606 <SystemCoreClockUpdate+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <SystemCoreClockUpdate+0x58>)
 8003602:	6033      	str	r3, [r6, #0]
      break;
 8003604:	e011      	b.n	800362a <SystemCoreClockUpdate+0x3e>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8003606:	686c      	ldr	r4, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003608:	686b      	ldr	r3, [r5, #4]
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800360a:	02a4      	lsls	r4, r4, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 800360c:	0f24      	lsrs	r4, r4, #28
 800360e:	3402      	adds	r4, #2
      
      if (pllsource == 0x00)
 8003610:	03db      	lsls	r3, r3, #15
 8003612:	d401      	bmi.n	8003618 <SystemCoreClockUpdate+0x2c>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <SystemCoreClockUpdate+0x5c>)
 8003616:	e006      	b.n	8003626 <SystemCoreClockUpdate+0x3a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8003618:	230f      	movs	r3, #15
 800361a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800361c:	4809      	ldr	r0, [pc, #36]	; (8003644 <SystemCoreClockUpdate+0x58>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800361e:	4019      	ands	r1, r3
 8003620:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8003622:	f7ff fcdf 	bl	8002fe4 <__aeabi_uidiv>
 8003626:	4344      	muls	r4, r0
 8003628:	6034      	str	r4, [r6, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800362a:	686b      	ldr	r3, [r5, #4]
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <SystemCoreClockUpdate+0x60>)
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	0f1b      	lsrs	r3, r3, #28
 8003632:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8003634:	6832      	ldr	r2, [r6, #0]
 8003636:	40da      	lsrs	r2, r3
 8003638:	6032      	str	r2, [r6, #0]
}
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	20000384 	.word	0x20000384
 8003644:	007a1200 	.word	0x007a1200
 8003648:	003d0900 	.word	0x003d0900
 800364c:	20000374 	.word	0x20000374

08003650 <_delay_system_ticks_sub>:

static void _delay_system_ticks_sub(uint32_t sys_ticks){
    uint32_t start_val, end_val, curr_val;
    uint32_t load;

    start_val = SysTick->VAL;
 8003650:	490f      	ldr	r1, [pc, #60]	; (8003690 <_delay_system_ticks_sub+0x40>)
 8003652:	688a      	ldr	r2, [r1, #8]
    start_val &= 0x0ffffffUL;
 8003654:	0212      	lsls	r2, r2, #8
 8003656:	0a12      	lsrs	r2, r2, #8
 8003658:	1e13      	subs	r3, r2, #0
    end_val = start_val;

    if(end_val < sys_ticks)
 800365a:	4283      	cmp	r3, r0
 800365c:	d203      	bcs.n	8003666 <_delay_system_ticks_sub+0x16>
    {
        load = SysTick->LOAD;
 800365e:	684b      	ldr	r3, [r1, #4]
        load &=0xffffffUL;
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	0a1b      	lsrs	r3, r3, #8
        end_val += load;
 8003664:	189b      	adds	r3, r3, r2
    }
    end_val -= sys_ticks;
 8003666:	1a18      	subs	r0, r3, r0
    
    if(start_val >= end_val){
 8003668:	4282      	cmp	r2, r0
 800366a:	d309      	bcc.n	8003680 <_delay_system_ticks_sub+0x30>
        for(;;){
            curr_val = SysTick->VAL;
 800366c:	688b      	ldr	r3, [r1, #8]
            curr_val &= 0x0ffffffUL;
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	0a1b      	lsrs	r3, r3, #8
            if(curr_val <= end_val)
 8003672:	4283      	cmp	r3, r0
 8003674:	d90a      	bls.n	800368c <_delay_system_ticks_sub+0x3c>
                break;
            if(curr_val > start_val)
 8003676:	4293      	cmp	r3, r2
 8003678:	d9f8      	bls.n	800366c <_delay_system_ticks_sub+0x1c>
 800367a:	e007      	b.n	800368c <_delay_system_ticks_sub+0x3c>
    }
    else{
        for(;;){
            curr_val = SysTick->VAL;
            curr_val &= 0x0ffffffUL;
            if(curr_val <= end_val && curr_val > start_val)
 800367c:	4293      	cmp	r3, r2
 800367e:	d805      	bhi.n	800368c <_delay_system_ticks_sub+0x3c>
                break;
        }
    }
    else{
        for(;;){
            curr_val = SysTick->VAL;
 8003680:	688b      	ldr	r3, [r1, #8]
            curr_val &= 0x0ffffffUL;
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	0a1b      	lsrs	r3, r3, #8
            if(curr_val <= end_val && curr_val > start_val)
 8003686:	4283      	cmp	r3, r0
 8003688:	d8fa      	bhi.n	8003680 <_delay_system_ticks_sub+0x30>
 800368a:	e7f7      	b.n	800367c <_delay_system_ticks_sub+0x2c>
                break;
            }
        }
}
 800368c:	4770      	bx	lr
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	e000e010 	.word	0xe000e010

08003694 <delay_system_ticks>:

void delay_system_ticks(uint32_t sys_ticks){
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	1c05      	adds	r5, r0, #0
    uint32_t load4;
    load4 = SysTick->LOAD;
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <delay_system_ticks+0x24>)
 800369a:	685c      	ldr	r4, [r3, #4]
    load4 &= 0x0ffffffUL;
 800369c:	0224      	lsls	r4, r4, #8
    load4 >>= 2;
 800369e:	0aa4      	lsrs	r4, r4, #10
    while(sys_ticks > load4){
 80036a0:	42a5      	cmp	r5, r4
 80036a2:	d904      	bls.n	80036ae <delay_system_ticks+0x1a>
        sys_ticks -= load4;
        _delay_system_ticks_sub(load4);
 80036a4:	1c20      	adds	r0, r4, #0
    uint32_t load4;
    load4 = SysTick->LOAD;
    load4 &= 0x0ffffffUL;
    load4 >>= 2;
    while(sys_ticks > load4){
        sys_ticks -= load4;
 80036a6:	1b2d      	subs	r5, r5, r4
        _delay_system_ticks_sub(load4);
 80036a8:	f7ff ffd2 	bl	8003650 <_delay_system_ticks_sub>
 80036ac:	e7f8      	b.n	80036a0 <delay_system_ticks+0xc>
    }
    _delay_system_ticks_sub(sys_ticks);
 80036ae:	1c28      	adds	r0, r5, #0
 80036b0:	f7ff ffce 	bl	8003650 <_delay_system_ticks_sub>
}
 80036b4:	bd38      	pop	{r3, r4, r5, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	e000e010 	.word	0xe000e010

080036bc <delay_micro_seconds>:

void delay_micro_seconds(uint32_t us){
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <delay_micro_seconds+0x18>)
        _delay_system_ticks_sub(load4);
    }
    _delay_system_ticks_sub(sys_ticks);
}

void delay_micro_seconds(uint32_t us){
 80036be:	b510      	push	{r4, lr}
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
    sys_ticks /= 1000000;
 80036c0:	4905      	ldr	r1, [pc, #20]	; (80036d8 <delay_micro_seconds+0x1c>)
        _delay_system_ticks_sub(load4);
    }
    _delay_system_ticks_sub(sys_ticks);
}

void delay_micro_seconds(uint32_t us){
 80036c2:	1c04      	adds	r4, r0, #0
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
 80036c4:	6818      	ldr	r0, [r3, #0]
    sys_ticks /= 1000000;
 80036c6:	f7ff fc8d 	bl	8002fe4 <__aeabi_uidiv>
    sys_ticks *= us;
 80036ca:	4360      	muls	r0, r4
    delay_system_ticks(sys_ticks);
 80036cc:	f7ff ffe2 	bl	8003694 <delay_system_ticks>
}
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000384 	.word	0x20000384
 80036d8:	000f4240 	.word	0x000f4240

080036dc <u8g_Delay>:

void u8g_Delay(uint16_t val){
 80036dc:	b508      	push	{r3, lr}
    delay_micro_seconds(1000UL * (uint32_t)val);
 80036de:	23fa      	movs	r3, #250	; 0xfa
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4358      	muls	r0, r3
 80036e4:	f7ff ffea 	bl	80036bc <delay_micro_seconds>
}
 80036e8:	bd08      	pop	{r3, pc}

080036ea <u8g_MicroDelay>:

void u8g_MicroDelay(void)
{
 80036ea:	b508      	push	{r3, lr}
    delay_micro_seconds(1);
 80036ec:	2001      	movs	r0, #1
 80036ee:	f7ff ffe5 	bl	80036bc <delay_micro_seconds>
}
 80036f2:	bd08      	pop	{r3, pc}

080036f4 <u8g_10MicroDelay>:

void u8g_10MicroDelay(void){
 80036f4:	b508      	push	{r3, lr}
    delay_micro_seconds(10);
 80036f6:	200a      	movs	r0, #10
 80036f8:	f7ff ffe0 	bl	80036bc <delay_micro_seconds>
}
 80036fc:	bd08      	pop	{r3, pc}
	...

08003700 <u8g_com_hw_i2c_fn>:
	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); 
}

uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8003700:	b537      	push	{r0, r1, r2, r4, r5, lr}
  register uint8_t *ptr = arg_ptr;
  switch(msg)
 8003702:	1e48      	subs	r0, r1, #1
 8003704:	2806      	cmp	r0, #6
 8003706:	d871      	bhi.n	80037ec <u8g_com_hw_i2c_fn+0xec>
 8003708:	1c1d      	adds	r5, r3, #0
 800370a:	1c14      	adds	r4, r2, #0
 800370c:	f7ff fc60 	bl	8002fd0 <__gnu_thumb1_case_uqi>
 8003710:	6e6e0704 	.word	0x6e6e0704
 8003714:	1711      	.short	0x1711
 8003716:	17          	.byte	0x17
 8003717:	00          	.byte	0x00
  {
    case U8G_COM_MSG_STOP:
        break;
    
    case U8G_COM_MSG_INIT:
        init_i2c(); 
 8003718:	f000 f870 	bl	80037fc <init_i2c>
 800371c:	e064      	b.n	80037e8 <u8g_com_hw_i2c_fn+0xe8>
 800371e:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <u8g_com_hw_i2c_fn+0xf0>)
        //I2C_WrReg(0x80, 0xAF); 
        u8g_MicroDelay();
        break;
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
        if(arg_val == 0){
 8003720:	2a00      	cmp	r2, #0
 8003722:	d101      	bne.n	8003728 <u8g_com_hw_i2c_fn+0x28>
            control = 0;  //Send a Command (D/C# pin is low)
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e001      	b.n	800372c <u8g_com_hw_i2c_fn+0x2c>
        }
        else{
            control = 0x40; //send data 
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]
        }
        u8g_10MicroDelay(); 
 800372c:	f7ff ffe2 	bl	80036f4 <u8g_10MicroDelay>
        break;
 8003730:	e05c      	b.n	80037ec <u8g_com_hw_i2c_fn+0xec>
      
    case U8G_COM_MSG_RESET:
      break;
      
    case U8G_COM_MSG_WRITE_BYTE:
        I2C_WrReg(control, arg_val); 
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <u8g_com_hw_i2c_fn+0xf0>)
 8003734:	1c11      	adds	r1, r2, #0
 8003736:	7818      	ldrb	r0, [r3, #0]
 8003738:	f000 f8a6 	bl	8003888 <I2C_WrReg>
 800373c:	e054      	b.n	80037e8 <u8g_com_hw_i2c_fn+0xe8>
        //u8g_i2c_stop();
        u8g_MicroDelay();
        break;
    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P:
        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET);
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	482c      	ldr	r0, [pc, #176]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 8003742:	0209      	lsls	r1, r1, #8
 8003744:	f7fc ffe6 	bl	8000714 <I2C_GetFlagStatus>
 8003748:	2801      	cmp	r0, #1
 800374a:	d0f8      	beq.n	800373e <u8g_com_hw_i2c_fn+0x3e>
		I2C_TransferHandling(I2C1, 0x78, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	019b      	lsls	r3, r3, #6
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	4827      	ldr	r0, [pc, #156]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 8003756:	2178      	movs	r1, #120	; 0x78
 8003758:	2201      	movs	r2, #1
 800375a:	045b      	lsls	r3, r3, #17
 800375c:	f7fc ff38 	bl	80005d0 <I2C_TransferHandling>
	    //Ensure the transmit interrupted flag is set
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8003760:	4824      	ldr	r0, [pc, #144]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 8003762:	2102      	movs	r1, #2
 8003764:	f7fc ffd6 	bl	8000714 <I2C_GetFlagStatus>
 8003768:	2800      	cmp	r0, #0
 800376a:	d0f9      	beq.n	8003760 <u8g_com_hw_i2c_fn+0x60>
	    //Send the address of the register we wish to write to
	    I2C_SendData(I2C1, control);
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <u8g_com_hw_i2c_fn+0xf0>)
 800376e:	4821      	ldr	r0, [pc, #132]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 8003770:	7819      	ldrb	r1, [r3, #0]
 8003772:	f7fc ffbf 	bl	80006f4 <I2C_SendData>

	    //Ensure that the transfer complete reload flag is Set, essentially a standard
	    //TC flag
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET);
 8003776:	481f      	ldr	r0, [pc, #124]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	f7fc ffcb 	bl	8000714 <I2C_GetFlagStatus>
 800377e:	2800      	cmp	r0, #0
 8003780:	d0f9      	beq.n	8003776 <u8g_com_hw_i2c_fn+0x76>
	    I2C_TransferHandling(I2C1, 0x78, arg_val+1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 8003782:	2300      	movs	r3, #0
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	1c62      	adds	r2, r4, #1
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	4819      	ldr	r0, [pc, #100]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 800378e:	2178      	movs	r1, #120	; 0x78
 8003790:	049b      	lsls	r3, r3, #18
 8003792:	f7fc ff1d 	bl	80005d0 <I2C_TransferHandling>
	    //Again, wait until the transmit interrupted flag is set
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8003796:	4817      	ldr	r0, [pc, #92]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 8003798:	2102      	movs	r1, #2
 800379a:	f7fc ffbb 	bl	8000714 <I2C_GetFlagStatus>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d0f9      	beq.n	8003796 <u8g_com_hw_i2c_fn+0x96>
 80037a2:	192c      	adds	r4, r5, r4
	    //Send the value you wish you write to the register
        while( arg_val > 0 )
 80037a4:	42a5      	cmp	r5, r4
 80037a6:	d00b      	beq.n	80037c0 <u8g_com_hw_i2c_fn+0xc0>
        {
	        I2C_SendData(I2C1, *ptr++);
 80037a8:	7829      	ldrb	r1, [r5, #0]
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 80037ac:	f7fc ffa2 	bl	80006f4 <I2C_SendData>
            arg_val--;
	        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 80037b0:	4810      	ldr	r0, [pc, #64]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 80037b2:	2102      	movs	r1, #2
 80037b4:	f7fc ffae 	bl	8000714 <I2C_GetFlagStatus>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d0f9      	beq.n	80037b0 <u8g_com_hw_i2c_fn+0xb0>
 80037bc:	3501      	adds	r5, #1
 80037be:	e7f1      	b.n	80037a4 <u8g_com_hw_i2c_fn+0xa4>
            //Wait for the stop flag to be set indicating a stop condition has been sent
        }
	    I2C_TransferHandling(I2C1, 0x78, 0, I2C_AutoEnd_Mode, I2C_Generate_Stop);
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	01db      	lsls	r3, r3, #7
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	480a      	ldr	r0, [pc, #40]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 80037ca:	2178      	movs	r1, #120	; 0x78
 80037cc:	2200      	movs	r2, #0
 80037ce:	049b      	lsls	r3, r3, #18
 80037d0:	f7fc fefe 	bl	80005d0 <I2C_TransferHandling>
	    while(I2C_GetFlagStatus(I2C1,I2C_FLAG_STOPF) == RESET);
 80037d4:	4807      	ldr	r0, [pc, #28]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 80037d6:	2120      	movs	r1, #32
 80037d8:	f7fc ff9c 	bl	8000714 <I2C_GetFlagStatus>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d0f9      	beq.n	80037d4 <u8g_com_hw_i2c_fn+0xd4>
	    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); 
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <u8g_com_hw_i2c_fn+0xf4>)
 80037e2:	2120      	movs	r1, #32
 80037e4:	f7fc ff9c 	bl	8000720 <I2C_ClearFlag>
        u8g_MicroDelay();
 80037e8:	f7ff ff7f 	bl	80036ea <u8g_MicroDelay>
        break;
  }
  return 1;
}
 80037ec:	2001      	movs	r0, #1
 80037ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80037f0:	20000d1c 	.word	0x20000d1c
 80037f4:	40005400 	.word	0x40005400

080037f8 <I2C1_IRQHandler>:
#include "i2c_func.h"

void I2C1_IRQHandler(void){

}
 80037f8:	4770      	bx	lr
	...

080037fc <init_i2c>:
//initialize the i2c periperal
void init_i2c(void){
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80037fc:	2080      	movs	r0, #128	; 0x80
void I2C1_IRQHandler(void){

}

//initialize the i2c periperal
void init_i2c(void){
 80037fe:	b530      	push	{r4, r5, lr}
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003800:	02c0      	lsls	r0, r0, #11
void I2C1_IRQHandler(void){

}

//initialize the i2c periperal
void init_i2c(void){
 8003802:	b08b      	sub	sp, #44	; 0x2c
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003804:	2101      	movs	r1, #1
 8003806:	f7fd f9f7 	bl	8000bf8 <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800380a:	2080      	movs	r0, #128	; 0x80
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_1);
 800380c:	4c1a      	ldr	r4, [pc, #104]	; (8003878 <init_i2c+0x7c>)
void init_i2c(void){
    //RCC_APBPeriphClockCmd(RCC_APBPeriph_SYSCFG, ENABLE); //enable for i2c fast mode
    //SYSCFG_I2CFastModePlusConfig(SYSCFG_CFGR1_I2C_FMP_PB6|SYSCFG_CFGR1_I2C_FMP_PB7, ENABLE);
        
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800380e:	2101      	movs	r1, #1
 8003810:	0380      	lsls	r0, r0, #14
 8003812:	f7fd fa09 	bl	8000c28 <RCC_APB1PeriphClockCmd>
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
 8003816:	2010      	movs	r0, #16
 8003818:	f7fd f926 	bl	8000a68 <RCC_I2CCLKConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_1);
 800381c:	1c20      	adds	r0, r4, #0
 800381e:	2106      	movs	r1, #6
 8003820:	2201      	movs	r2, #1
 8003822:	f7fc fd43 	bl	80002ac <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_1);
 8003826:	1c20      	adds	r0, r4, #0
 8003828:	2107      	movs	r1, #7
 800382a:	2201      	movs	r2, #1
 800382c:	f7fc fd3e 	bl	80002ac <GPIO_PinAFConfig>

    GPIO_InitTypeDef GPIOB_InitStruct = {
 8003830:	a901      	add	r1, sp, #4
 8003832:	1c0a      	adds	r2, r1, #0
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <init_i2c+0x80>)
 8003836:	cb21      	ldmia	r3!, {r0, r5}
 8003838:	c221      	stmia	r2!, {r0, r5}
        .GPIO_Speed = GPIO_Speed_50MHz,
        .GPIO_Mode = GPIO_Mode_AF,
        .GPIO_OType = GPIO_OType_OD,
        .GPIO_PuPd = GPIO_PuPd_UP
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
 800383a:	1c20      	adds	r0, r4, #0
 800383c:	f7fc fc94 	bl	8000168 <GPIO_Init>
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
 8003840:	1c20      	adds	r0, r4, #0
 8003842:	2106      	movs	r1, #6
 8003844:	f7fc fd00 	bl	8000248 <GPIO_PinLockConfig>
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
 8003848:	1c20      	adds	r0, r4, #0
 800384a:	2107      	movs	r1, #7
 800384c:	f7fc fcfc 	bl	8000248 <GPIO_PinLockConfig>
    
    I2C_InitTypeDef I2C_InitStructure = {
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <init_i2c+0x84>)
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <init_i2c+0x88>)
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
    
    I2C_InitTypeDef I2C_InitStructure = {
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	2300      	movs	r3, #0
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 8003858:	1c20      	adds	r0, r4, #0
 800385a:	a903      	add	r1, sp, #12
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
    
    I2C_InitTypeDef I2C_InitStructure = {
 800385c:	9304      	str	r3, [sp, #16]
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	9306      	str	r3, [sp, #24]
 8003862:	9307      	str	r3, [sp, #28]
 8003864:	9308      	str	r3, [sp, #32]
 8003866:	9309      	str	r3, [sp, #36]	; 0x24
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 8003868:	f7fc fd4e 	bl	8000308 <I2C_Init>
    I2C_Cmd(I2C1, ENABLE);
 800386c:	1c20      	adds	r0, r4, #0
 800386e:	2101      	movs	r1, #1
 8003870:	f7fc fd88 	bl	8000384 <I2C_Cmd>
}
 8003874:	b00b      	add	sp, #44	; 0x2c
 8003876:	bd30      	pop	{r4, r5, pc}
 8003878:	48000400 	.word	0x48000400
 800387c:	08003964 	.word	0x08003964
 8003880:	0010020a 	.word	0x0010020a
 8003884:	40005400 	.word	0x40005400

08003888 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val){
 8003888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800388a:	1c05      	adds	r5, r0, #0
 800388c:	1c0c      	adds	r4, r1, #0
    //Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET);
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	481e      	ldr	r0, [pc, #120]	; (800390c <I2C_WrReg+0x84>)
 8003892:	0209      	lsls	r1, r1, #8
 8003894:	f7fc ff3e 	bl	8000714 <I2C_GetFlagStatus>
 8003898:	2801      	cmp	r0, #1
 800389a:	d0f8      	beq.n	800388e <I2C_WrReg+0x6>
	//"Handle" a transfer - The STM32F0 series has a shocking I2C interface...
	//...Regardless! Send the address of the HMC sensor down the I2C Bus and generate
	//a start saying we're going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me and a lot of the code is
	//from the Std peripheral library
	I2C_TransferHandling(I2C1, 0x78, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	019b      	lsls	r3, r3, #6
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	4819      	ldr	r0, [pc, #100]	; (800390c <I2C_WrReg+0x84>)
 80038a6:	2178      	movs	r1, #120	; 0x78
 80038a8:	2201      	movs	r2, #1
 80038aa:	045b      	lsls	r3, r3, #17
 80038ac:	f7fc fe90 	bl	80005d0 <I2C_TransferHandling>

	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 80038b0:	4816      	ldr	r0, [pc, #88]	; (800390c <I2C_WrReg+0x84>)
 80038b2:	2102      	movs	r1, #2
 80038b4:	f7fc ff2e 	bl	8000714 <I2C_GetFlagStatus>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d0f9      	beq.n	80038b0 <I2C_WrReg+0x28>

	//Send the address of the register we wish to write to
	I2C_SendData(I2C1, Reg);
 80038bc:	4813      	ldr	r0, [pc, #76]	; (800390c <I2C_WrReg+0x84>)
 80038be:	1c29      	adds	r1, r5, #0
 80038c0:	f7fc ff18 	bl	80006f4 <I2C_SendData>

	//Ensure that the transfer complete reload flag is Set, essentially a standard
	//TC flag
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET);
 80038c4:	4811      	ldr	r0, [pc, #68]	; (800390c <I2C_WrReg+0x84>)
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	f7fc ff24 	bl	8000714 <I2C_GetFlagStatus>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d0f9      	beq.n	80038c4 <I2C_WrReg+0x3c>

	//Now that the HMC5883L knows which register we want to write to, send the address
	//again and ensure the I2C peripheral doesn't add any start or stop conditions
	I2C_TransferHandling(I2C1, 0x78, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 80038d0:	2300      	movs	r3, #0
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	480d      	ldr	r0, [pc, #52]	; (800390c <I2C_WrReg+0x84>)
 80038d8:	2178      	movs	r1, #120	; 0x78
 80038da:	2201      	movs	r2, #1
 80038dc:	049b      	lsls	r3, r3, #18
 80038de:	f7fc fe77 	bl	80005d0 <I2C_TransferHandling>

	//Again, wait until the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 80038e2:	480a      	ldr	r0, [pc, #40]	; (800390c <I2C_WrReg+0x84>)
 80038e4:	2102      	movs	r1, #2
 80038e6:	f7fc ff15 	bl	8000714 <I2C_GetFlagStatus>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d0f9      	beq.n	80038e2 <I2C_WrReg+0x5a>

	//Send the value you wish you write to the register
	I2C_SendData(I2C1, Val);
 80038ee:	4807      	ldr	r0, [pc, #28]	; (800390c <I2C_WrReg+0x84>)
 80038f0:	1c21      	adds	r1, r4, #0
 80038f2:	f7fc feff 	bl	80006f4 <I2C_SendData>

	//Wait for the stop flag to be set indicating a stop condition has been sent
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET);
 80038f6:	4805      	ldr	r0, [pc, #20]	; (800390c <I2C_WrReg+0x84>)
 80038f8:	2120      	movs	r1, #32
 80038fa:	f7fc ff0b 	bl	8000714 <I2C_GetFlagStatus>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0f9      	beq.n	80038f6 <I2C_WrReg+0x6e>

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C1, I2C_FLAG_STOPF);
 8003902:	4802      	ldr	r0, [pc, #8]	; (800390c <I2C_WrReg+0x84>)
 8003904:	2120      	movs	r1, #32
 8003906:	f7fc ff0b 	bl	8000720 <I2C_ClearFlag>
}
 800390a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800390c:	40005400 	.word	0x40005400

08003910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003910:	480d      	ldr	r0, [pc, #52]	; (8003948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003912:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003914:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003916:	e003      	b.n	8003920 <LoopCopyDataInit>

08003918 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800391a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800391c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800391e:	3104      	adds	r1, #4

08003920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003920:	480b      	ldr	r0, [pc, #44]	; (8003950 <LoopForever+0xa>)
  ldr r3, =_edata
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <LoopForever+0xe>)
  adds r2, r0, r1
 8003924:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003926:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003928:	d3f6      	bcc.n	8003918 <CopyDataInit>
  ldr r2, =_sbss
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <LoopForever+0x12>)
  b LoopFillZerobss
 800392c:	e002      	b.n	8003934 <LoopFillZerobss>

0800392e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800392e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003930:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003932:	3204      	adds	r2, #4

08003934 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <LoopForever+0x16>)
  cmp r2, r3
 8003936:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003938:	d3f9      	bcc.n	800392e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800393a:	f7ff fdfb 	bl	8003534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800393e:	f7ff fba1 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003942:	f7ff fd9f 	bl	8003484 <main>

08003946 <LoopForever>:
  
LoopForever:
    b LoopForever
 8003946:	e7fe      	b.n	8003946 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003948:	20001000 	.word	0x20001000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800394c:	08004fa4 	.word	0x08004fa4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003954:	20000388 	.word	0x20000388
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003958:	20000388 	.word	0x20000388
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 800395c:	20000d20 	.word	0x20000d20

08003960 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC1_COMP_IRQHandler>
 8003962:	0000      	movs	r0, r0
 8003964:	000000c0 	.word	0x000000c0
 8003968:	01010302 	.word	0x01010302

0800396c <u8g_font_unifont>:
 800396c:	00101000 a7060afe ff009508 0bfe0efe     ................
 800397c:	201010fe aafe0010 800100aa 80010000     ... ............
 800398c:	ea514a00 c9515a50 8001009e 80010000     .JQ.PZQ.........
 800399c:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 80039ac:	00008001 39008001 3252c293 71528a5f     .......9..R2_.Rq
 80039bc:	00008093 00008001 55008001 20101055     ...........UU.. 
 80039cc:	aafe0010 800100aa 80010000 c1a53b00     .............;..
 80039dc:	89193124 80257124 80010000 80010000     $1..$q%.........
 80039ec:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 80039fc:	7b008001 7924c1a5 7924c119 00008025     ...{..$y..$y%...
 8003a0c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 8003a1c:	800100aa 80010000 c2bf7900 c2497a48     .........y..HzI.
 8003a2c:	80897948 80010000 80010000 10555500     Hy...........UU.
 8003a3c:	00102010 00aaaafe 00008001 7a008001     . .............z
 8003a4c:	7b52c24d 7ad6c253 0000804f 00008001     M.R{S..zO.......
 8003a5c:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 8003a6c:	80010000 caa53100 ca317a28 80a54928     .....1..(z1.(I..
 8003a7c:	80010000 80010000 10555500 00102010     .........UU.. ..
 8003a8c:	00aaaafe 00008001 73008001 7310cad1     ...........s...s
 8003a9c:	7310cad1 000080df 00008001 55008001     ...s...........U
 8003aac:	20101055 aafe0010 800100aa 80010000     U.. ............
 8003abc:	91391e00 91311e40 80711e08 80010000     ..9.@.1...q.....
 8003acc:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 8003adc:	00008001 22008001 3e20a2f9 2220a221     .......".. >!. "
 8003aec:	00008021 00008001 55008001 20101055     !..........UU.. 
 8003afc:	aafe0010 800100aa 80010000 a0f92000     ............. ..
 8003b0c:	a0f92080 80813e80 80010000 80010000     . ...>..........
 8003b1c:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 8003b2c:	22008001 2220a2f9 08209421 00008021     ...".. "!. .!...
 8003b3c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 8003b4c:	800100aa 80010000 a0f93e00 a0f93e80     .........>...>..
 8003b5c:	80812080 80010000 80010000 10555500     . ...........UU.
 8003b6c:	00102010 00aaaafe 00008001 1e008001     . ..............
 8003b7c:	2088a0f1 1e90a0f1 00008089 00008001     ... ............
 8003b8c:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 8003b9c:	80010000 a0711e00 82891c88 80713c88     ......q......<q.
 8003bac:	80010000 80010000 10555500 00102010     .........UU.. ..
 8003bbc:	00aaaafe 00008001 1e008001 1c20a0f9     .............. .
 8003bcc:	3c208221 000080f9 00008001 55008001     !. <...........U
 8003bdc:	20101055 aafe0010 800100aa 80010000     U.. ............
 8003bec:	a51d3900 a51d2510 80dd3910 80010000     .9...%...9......
 8003bfc:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 8003c0c:	00008001 71008001 4a18ca89 7108ca09     .......q...J...q
 8003c1c:	0000809d 00008001 55008001 20101055     ...........UU.. 
 8003c2c:	aafe0010 800100aa 80010000 ca997100     .............q..
 8003c3c:	ca094a04 809d7110 80010000 80010000     .J...q..........
 8003c4c:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 8003c5c:	71008001 4a04ca99 7104ca19 00008099     ...q...J...q....
 8003c6c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 8003c7c:	800100aa 80010000 ca857100 ca154a0c     .........q...J..
 8003c8c:	8085711c 80010000 80010000 10555500     .q...........UU.
 8003c9c:	00102010 00aaaafe 00008001 49008001     . .............I
 8003cac:	6a54ea93 4ad4db59 00008053 00008001     ..TjY..JS.......
 8003cbc:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 8003ccc:	80010000 c2533400 8917319a 80137112     .....4S..1...q..
 8003cdc:	80010000 80010000 10555500 00102010     .........UU.. ..
 8003cec:	00aaaafe 00008001 7b008001 7924c1b9     ...........{..$y
 8003cfc:	7924c139 00008039 00008001 55008001     9.$y9..........U
 8003d0c:	20101055 aafe0010 800100aa 80010000     U.. ............
 8003d1c:	c4253300 c4ad47b4 80a534a4 80010000     .3%..G...4......
 8003d2c:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 8003d3c:	00008001 3e008001 3ed8a089 3e88a0a9     .......>...>...>
 8003d4c:	00008089 00008001 55008001 20101055     ...........UU.. 
 8003d5c:	aafe0010 800100aa 80010000 c25d3a00     .............:].
 8003d6c:	8a5d3252 809d7152 80010000 80010000     R2].Rq..........
 8003d7c:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 8003d8c:	79008001 7910c2cf 7b50c091 0000808f     ...y...y..P{....
 8003d9c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 8003dac:	800100aa 80010000 90711e00 90611e80     ..........q...a.
 8003dbc:	80e11010 80010000 80010000 10555500     .............UU.
 8003dcc:	00102010 00aaaafe 00008001 0e008001     . ..............
 8003ddc:	16809071 0e109261 000080e1 00008001     q...a...........
 8003dec:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 8003dfc:	80010000 92711c00 94611c80 80e11210     ......q...a.....
 8003e0c:	80010000 80010000 10555500 00102010     .........UU.. ..
 8003e1c:	00aaaafe 00008001 12008001 12809271     ............q...
 8003e2c:	0c109261 000080e1 00008001 55008001     a..............U
 8003e3c:	00000055 010e0008 04080a0a 80808000     U...............
 8003e4c:	80808080 05808000 02080404 88888808     ................
 8003e5c:	0a0a0688 24000108 48fc2424 9090fc48     .......$$$.HH...
 8003e6c:	0a0a0790 10000108 7090927c 7c92121c     ........|..p...|
 8003e7c:	0a0a0710 62000108 10689494 52522c10     .......b..h..,RR
 8003e8c:	0a0a078c 38000108 30284444 8c848a52     .......8DD(0R...
 8003e9c:	04040172 80080408 03808080 03080c0c     r...............
 8003eac:	404020ff 80808080 40408080 0c0c0320     . @@......@@ ...
 8003ebc:	80ff0208 20204040 20202020 07804040     ....@@      @@..
 8003ecc:	01080707 54921001 10925438 08070707     .......T8T......
 8003edc:	10100101 1010fe10 04040210 c0fe0308     ................
 8003eec:	04804040 02080101 0202f004 00030802     @@..............
 8003efc:	0a06c0c0 0001080a 10080404 40202010     .............  @
 8003f0c:	0a068080 0001080a 84844830 84848484     ........0H......
 8003f1c:	0a053048 0002080a 20a06020 20202020     H0...... `.     
 8003f2c:	0a06f820 0001080a 04848478 80402018      .......x.... @.
 8003f3c:	0a06fc80 0001080a 04848478 84040438     ........x...8...
 8003f4c:	0a067884 0001080a 48281808 08fc8888     .x........(H....
 8003f5c:	0a060808 0001080a 808080fc 040404f8     ................
 8003f6c:	0a067884 0001080a 80804038 848484f8     .x......8@......
 8003f7c:	0a067884 0001080a 080404fc 10100808     .x..............
 8003f8c:	0a061010 0001080a 84848478 84848478     ........x...x...
 8003f9c:	0a067884 0001080a 84848478 0404047c     .x......x...|...
 8003fac:	07027008 01030807 0000c0c0 02c0c000     .p..............
 8003fbc:	03080909 00c0c0ff 40c00000 09058040     ...........@@...
 8003fcc:	00020809 40201008 10204080 05050608     ...... @.@ .....
 8003fdc:	fc020108 fc000000 08090905 40800001     ...............@
 8003fec:	10081020 06804020 01080a0a 84847800      ... @.......x..
 8003ffc:	10100804 06101000 01080a0a 94443800     .............8D.
 800400c:	a4a4a4ac 063c409c 01080a0a 48483000     .....@<......0HH
 800401c:	84fc8484 06848484 01080a0a 8484f800     ................
 800402c:	8484f884 06f88484 01080a0a 84847800     .............x..
 800403c:	80808080 06788484 01080a0a 8488f000     ......x.........
 800404c:	84848484 06f08884 01080a0a 8080fc00     ................
 800405c:	8080f880 06fc8080 01080a0a 8080fc00     ................
 800406c:	8080f880 06808080 01080a0a 84847800     .............x..
 800407c:	849c8080 06748c84 01080a0a 84848400     ......t.........
 800408c:	8484fc84 05848484 02080a0a 2020f800     ..............  
 800409c:	20202020 07f82020 01080a0a 08083e00           .......>..
 80040ac:	08080808 06708888 01080a0a 90888400     ......p.........
 80040bc:	a0c0c0a0 06848890 01080a0a 80808000     ................
 80040cc:	80808080 06fc8080 01080a0a cc848400     ................
 80040dc:	84b4b4cc 06848484 01080a0a c4c48400     ................
 80040ec:	9494a4a4 06848c8c 01080a0a 84847800     .............x..
 80040fc:	84848484 06788484 01080a0a 8484f800     ......x.........
 800410c:	8080f884 07808080 01080b0b 848478ff     .............x..
 800411c:	84848484 0678ccb4 080a0a06 84f80001     ......x.........
 800412c:	90f88484 84848888 080a0a06 84780001     ..............x.
 800413c:	18608084 78848404 080a0a07 10fe0001     ..`....x........
 800414c:	10101010 10101010 080a0a06 84840001     ................
 800415c:	84848484 78848484 080a0a07 82820001     .......x........
 800416c:	44444482 10102828 080a0a06 84840001     .DDD((..........
 800417c:	b4b48484 8484cccc 080a0a06 84840001     ................
 800418c:	30304848 84844848 080a0a07 82820001     HH00HH..........
 800419c:	10284444 10101010 080a0a06 04fc0001     DD(.............
 80041ac:	20100804 fc808040 080c0c03 80e0ff04     ... @...........
 80041bc:	80808080 80808080 0a06e080 0001080a     ................
 80041cc:	20408080 08101020 0c030404 ff01080c     ..@  ...........
 80041dc:	202020e0 20202020 e0202020 08030306     .          .....
 80041ec:	48300901 01010784 feff0108 08030303     ..0H............
 80041fc:	40800a02 08080620 78000108 847c0484     ...@ ......x..|.
 800420c:	06748c84 01080b0b 80808000 8484c4b8     ..t.............
 800421c:	b8c48484 08080806 84780001 80808080     ..........x.....
 800422c:	0b067884 0001080b 74040404 8484848c     .x.........t....
 800423c:	06748c84 01080808 84847800 848080fc     ..t......x......
 800424c:	0b0b0578 18000108 f8202020 20202020     x.......   .    
 800425c:	0b062020 fe01080b 88887404 78407088       .......t...p@x
 800426c:	06788484 01080b0b 80808000 8484c4b8     ..x.............
 800427c:	84848484 080b0b05 20200002 20206000     ..........  .`  
 800428c:	20202020 0d0d05f8 08fe0108 08180008         ............
 800429c:	08080808 60900808 080b0b06 80800001     .......`........
 80042ac:	a0908880 8890a0c0 0b0b0584 60000208     ...............`
 80042bc:	20202020 20202020 0807f820 00010808              .......
 80042cc:	929292ec 92929292 08080806 c4b80001     ................
 80042dc:	84848484 08068484 00010808 84848478     ............x...
 80042ec:	78848484 080a0a06 c4b8fe01 84848484     ...x............
 80042fc:	8080b8c4 080a0a06 8c74fe01 84848484     ..........t.....
 800430c:	0404748c 08080806 c4b80001 80808084     .t..............
 800431c:	08068080 00010808 60808478 78840418     ........x..`...x
 800432c:	080a0a05 20200001 2020f820 18202020     ......   .     .
 800433c:	08080806 84840001 84848484 0806748c     .............t..
 800434c:	00010808 48848484 30304848 08080807     .......HHH00....
 800435c:	92820001 92929292 08066c92 00010808     .........l......
 800436c:	30488484 84844830 080a0a06 8484fe01     ..H00H..........
 800437c:	4c848484 78040434 08080806 04fc0001     ...L4..x........
 800438c:	40201008 0c03fc80 ff03080c 40808060     .. @........`..@
 800439c:	40808040 60808040 080e0e01 8080fe04     @..@@..`........
 80043ac:	80808080 80808080 80808080 080c0c03     ................
 80043bc:	20c0ff02 20404020 20404020 0307c020     ...  @@  @@  ...
 80043cc:	08010803 108c9262 00102010 00aaaafe     ....b.... ......
 80043dc:	00008001 73008001 4b10cad1 7310cad1     .......s...K...s
 80043ec:	000080df 00008001 55008001 20101055     ...........UU.. 
 80043fc:	aafe0010 800100aa 80010000 ca9d7100     .............q..
 800440c:	c2d37352 805d4252 80010000 80010000     Rs..RB].........
 800441c:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 800442c:	49008001 7a52ca9d 4950ca5d 00008091     ...I..Rz].PI....
 800443c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 800444c:	800100aa 80010000 ca937300 ca9f7352     .........s..Rs..
 800445c:	80137212 80010000 80010000 10555500     .r...........UU.
 800446c:	00102010 00aaaafe 00008001 4b008001     . .............K
 800447c:	5b52ea93 4b52ca9f 00008093 00008001     ..R[..RK........
 800448c:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 800449c:	80010000 a6b97400 a4a525a4 80b974a4     .....t...%...t..
 80044ac:	80010000 80010000 10555500 00102010     .........UU.. ..
 80044bc:	00aaaafe 00008001 4b008001 5b10ead1     ...........K...[
 80044cc:	4b10cad1 000080df 00008001 55008001     ...K...........U
 80044dc:	20101055 aafe0010 800100aa 80010000     U.. ............
 80044ec:	c2cd3900 889f3112 80937352 80010000     .9...1..Rs......
 80044fc:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 800450c:	00008001 79008001 7912c2cd 7b52c09f     .......y...y..R{
 800451c:	00008093 00008001 55008001 20101055     ...........UU.. 
 800452c:	aafe0010 800100aa 80010000 c99d4b00     .............K..
 800453c:	c9197920 80394904 80010000 80010000      y...I9.........
 800454c:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 800455c:	25008001 3c84a4dd 2484a485 00008099     ...%...<...$....
 800456c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 800457c:	800100aa 80010000 c4cd4500 a8894490     .........E...D..
 800458c:	80991084 80010000 80010000 10555500     .............UU.
 800459c:	00102010 00aaaafe 00008001 72008001     . .............r
 80045ac:	7212ca1d 4312c213 000080dd 00008001     ...r...C........
 80045bc:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 80045cc:	80010000 ca137200 c2137212 80cd4312     .....r...r...C..
 80045dc:	80010000 80010000 10555500 00102010     .........UU.. ..
 80045ec:	00aaaafe 00008001 0e008001 0e208921     ............!. .
 80045fc:	09208a21 00008021 00008001 55008001     !. .!..........U
 800460c:	20101055 aafe0010 800100aa 80010000     U.. ............
 800461c:	c2dd3900 888d3102 809f7350 80010000     .9...1..Ps......
 800462c:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 800463c:	00008001 39008001 3102c2dd 7342888d     .......9...1..Bs
 800464c:	0000809d 00008001 55008001 20101055     ...........UU.. 
 800465c:	aafe0010 800100aa 80010000 cacf7100     .............q..
 800466c:	ca0d4a10 80dd7102 80010000 80010000     .J...q..........
 800467c:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 800468c:	72008001 724cca45 4144c245 0000808f     ...rE.LrE.DA....
 800469c:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 80046ac:	800100aa 80010000 ca5d7200 c24d7242     .........r].BrM.
 80046bc:	809f4150 80010000 80010000 10555500     PA...........UU.
 80046cc:	00102010 00aaaafe 00008001 3b008001     . .............;
 80046dc:	3120c19d 71048919 00008039 00008001     .. 1...q9.......
 80046ec:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 80046fc:	80010000 c2d33900 c21f4212 80d33912     .....9...B...9..
 800470c:	80010000 80010000 10555500 00102010     .........UU.. ..
 800471c:	00aaaafe 00008001 22008001 2a88b689     ..........."...*
 800472c:	22d8a2a9 00008089 00008001 55008001     ..."...........U
 800473c:	20101055 aafe0010 800100aa 80010000     U.. ............
 800474c:	c28d3b00 8a9f3352 80137212 80010000     .;..R3...r......
 800475c:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 800476c:	00008001 7b008001 7b52c28d 7a12c29f     .......{..R{...z
 800477c:	00008013 00008001 55008001 20101055     ...........UU.. 
 800478c:	aafe0010 800100aa 80010000 c28f3900     .............9..
 800479c:	8a4d3250 809d7142 80010000 80010000     P2M.Bq..........
 80047ac:	10555500 00102010 00aaaafe 00008001     .UU.. ..........
 80047bc:	33008001 2522c49b 63a294a3 0000809b     ...3.."%...c....
 80047cc:	00008001 55008001 20101055 aafe0010     .......UU.. ....
 80047dc:	800100aa 80010000 c2dd3900 8a093208     .........9...2..
 80047ec:	80dd7108 80010000 80010000 10555500     .q...........UU.
 80047fc:	00102010 00aaaafe 00008001 39008001     . .............9
 800480c:	4108c2dd 3b48c089 0000809d 00008001     ...A..H;........
 800481c:	55008001 20101055 aafe0010 800100aa     ...UU.. ........
 800482c:	80010000 90f90e00 82210c20 80211c20     ........ .!. .!.
 800483c:	80010000 80010000 10555500 00102010     .........UU.. ..
 800484c:	00aaaafe 00008001 31008001 4910cacf     ...........1...I
 800485c:	3350c891 0000808f 00008001 55008001     ..P3...........U
 800486c:	20101055 aafe0010 800100aa 80010000     U.. ............
 800487c:	92891c00 90a91cd8 80891088 80010000     ................
 800488c:	80010000 10555500 00102010 00aaaafe     .....UU.. ......
 800489c:	00008001 33008001 7b50ca8f 4a10ca91     .......3..P{...J
 80048ac:	0000800f 00008001 55008001 00000055     ...........UU...
 80048bc:	010e0008 04080a0a 00808000 80808080     ................
 80048cc:	07808080 01080a0a 7c101000 92909092     ...........|....
 80048dc:	0710107c 01080a0a 20201c00 2020f820     |.........   .  
 80048ec:	06c27c20 01080808 78488401 48784848      |........HxHHxH
 80048fc:	0a0a0784 82000108 fe102844 1010fe10     ........D(......
 800490c:	0a0a0110 80000408 00808080 80808000     ................
 800491c:	0a0a0680 78000108 84788084 84047884     .......x..x..x..
 800492c:	02020478 900c0208 0a0a0890 3c000008     x..............<
 800493c:	a1a59942 4299a5a1 0707053c 70050208     B......B<......p
 800494c:	78887808 0906f800 00010809 48482424     .x.x........$$HH
 800495c:	24484890 04040624 fc000108 10040404     .HH$$...........
 800496c:	00102010 00aaaafe 3a008001 3354c263     . .........:c.T3
 800497c:	72488ac9 00008049 03008001 000080c1     ..HrI...........
 800498c:	55008001 0a0a0855 3c000008 a5a5b942     ...UU......<B...
 800499c:	42a5a9b9 0101063c fc0b0108 08040403     ...B<...........
 80049ac:	a0400a02 090740a0 01010809 fe101010     ..@..@..........
 80049bc:	00101010 070705fe 70050208 80700888     ...........p..p.
 80049cc:	0705f880 05020807 70088870 03708808     ........p..p..p.
 80049dc:	03080303 8040200a 080a0a08 4242fe00     ..... @.......BB
 80049ec:	42424242 80405966 080c0c06 f47cff01     BBBBfY@.......|.
 80049fc:	74f4f4f4 14141414 02021c14 04030802     ...t............
 8004a0c:	0203c0c0 fe020802 0703c020 05020807     ........ .......
 8004a1c:	20a06020 05202020 02080707 88887005      `.    ......p..
 8004a2c:	f8007088 08090906 90900001 48244848     .p..........HH$H
 8004a3c:	06909048 01080a0a 48c44400 2c245050     H........D.HPP$,
 8004a4c:	06849c54 01080a0a 48c44400 34285050     T........D.HPP(4
 8004a5c:	069c8844 01080a0a 4824c400 2c24d030     D.........$H0.$,
 8004a6c:	06849c54 01080a0a 00101000 84601010     T.............`.
 8004a7c:	06788484 01080e0e 00186000 48483000     ..x......`...0HH
 8004a8c:	84fc8484 06848484 01080e0e 00601800     ..............`.
 8004a9c:	48483000 84fc8484 06848484 01080e0e     .0HH............
 8004aac:	00483000 48483000 84fc8484 06848484     .0H..0HH........
 8004abc:	01080e0e 00986400 48483000 84fc8484     .....d...0HH....
 8004acc:	06848484 01080e0e 00484800 48483000     .........HH..0HH
 8004adc:	84fc8484 06848484 01080e0e 30483000     .............0H0
 8004aec:	48483000 84fc8484 07848484 01080a0a     .0HH............
 8004afc:	90503e00 9090fe90 069e9090 01080c0c     .>P.............
 8004b0c:	848478fe 80808080 10788484 0e0e0660     .x........x.`...
 8004b1c:	60000108 fc000018 f8808080 80808080     ...`............
 8004b2c:	0e0e06fc 18000108 fc000060 f8808080     ........`.......
 8004b3c:	80808080 0e0e06fc 30000108 fc000048     ...........0H...
 8004b4c:	f8808080 80808080 0e0e06fc 48000108     ...............H
 8004b5c:	fc000048 f8808080 80808080 0e0e05fc     H...............
 8004b6c:	60000208 f8000018 20202020 20202020     ...`....        
 8004b7c:	0e0e05f8 30000208 f80000c0 20202020     .......0....    
 8004b8c:	20202020 0e0e05f8 60000208 f8000090         .......`....
 8004b9c:	20202020 20202020 0e0e05f8 90000208             ........
 8004bac:	f8000090 20202020 20202020 0a0a07f8     ....        ....
 8004bbc:	78000008 f2424244 44424242 0e0e0678     ...xDBB.BBBDx...
 8004bcc:	64000108 84000098 a4a4c4c4 8c8c9494     ...d............
 8004bdc:	0e0e0684 60000108 78000018 84848484     .......`...x....
 8004bec:	84848484 0e0e0678 18000108 78000060     ....x.......`..x
 8004bfc:	84848484 84848484 0e0e0678 30000108     ........x......0
 8004c0c:	78000048 84848484 84848484 0e0e0678     H..x........x...
 8004c1c:	64000108 78000098 84848484 84848484     ...d...x........
 8004c2c:	0e0e0678 48000108 78000048 84848484     x......HH..x....
 8004c3c:	84848484 05050678 84020108 84483048     ....x.......H0H.
 8004c4c:	080c0c06 7404ff01 94948c88 44c4a4a4     .......t.......D
 8004c5c:	0e0680b8 0001080e 00001860 84848484     ........`.......
 8004c6c:	84848484 0e067884 0001080e 00006018     .....x.......`..
 8004c7c:	84848484 84848484 0e067884 0001080e     .........x......
 8004c8c:	00004830 84848484 84848484 0e067884     0H...........x..
 8004c9c:	0001080e 00004848 84848484 84848484     ....HH..........
 8004cac:	0e077884 0001080e 00006018 44448282     .x.......`....DD
 8004cbc:	10101028 0b061010 0001080b 88f08080     (...............
 8004ccc:	f0888484 06808080 01080a0a 88887000     .............p..
 8004cdc:	8488b090 0698a484 01080c0c 00186000     .............`..
 8004cec:	04847800 8c84847c 0c0c0674 18000108     .x..|...t.......
 8004cfc:	78000060 847c0484 06748c84 01080c0c     `..x..|...t.....
 8004d0c:	00483000 04847800 8c84847c 0c0c0674     .0H..x..|...t...
 8004d1c:	64000108 78000098 847c0484 06748c84     ...d...x..|...t.
 8004d2c:	01080c0c 00484800 04847800 8c84847c     .....HH..x..|...
 8004d3c:	0d0d0674 30000108 00003048 7c048478     t......0H0..x..|
 8004d4c:	748c8484 08080807 927c0001 90907e12     ...t......|..~..
 8004d5c:	0a067c92 fe01080a 80808478 78848080     .|......x......x
 8004d6c:	0c066010 0001080c 00001860 fc848478     .`......`...x...
 8004d7c:	78848080 080c0c06 60180001 84780000     ...x.......`..x.
 8004d8c:	8080fc84 0c067884 0001080c 00004830     .....x......0H..
 8004d9c:	fc848478 78848080 080c0c06 48480001     x......x......HH
 8004dac:	84780000 8080fc84 0c057884 0002080c     ..x......x......
 8004dbc:	000030c0 20202060 f8202020 080c0c05     .0..`      .....
 8004dcc:	c0300002 20600000 20202020 0c05f820     ..0...`      ...
 8004ddc:	0002080c 00009060 20202060 f8202020     ....`...`      .
 8004dec:	080c0c05 90900002 20600000 20202020     ..........`     
 8004dfc:	0c06f820 0001080c 44281864 84847c04      .......d.(D.|..
 8004e0c:	78848484 080c0c06 98640001 c4b80000     ...x......d.....
 8004e1c:	84848484 0c068484 0001080c 00001860     ............`...
 8004e2c:	84848478 78848484 080c0c06 60180001     x......x.......`
 8004e3c:	84780000 84848484 0c067884 0001080c     ..x......x......
 8004e4c:	00004830 84848478 78848484 080c0c06     0H..x......x....
 8004e5c:	98640001 84780000 84848484 0c067884     ..d...x......x..
 8004e6c:	0001080c 00004848 84848478 78848484     ....HH..x......x
 8004e7c:	08070706 00300101 0000fc00 0a0a0630     ......0.....0...
 8004e8c:	04ff0108 94948c78 78c4a4a4 0c0c0680     ....x......x....
 8004e9c:	60000108 84000018 84848484 06748c84     ...`..........t.
 8004eac:	01080c0c 00601800 84848400 8c848484     ......`.........
 8004ebc:	0c0c0674 30000108 84000048 84848484     t......0H.......
 8004ecc:	06748c84 01080c0c 00484800 84848400     ..t......HH.....
 8004edc:	8c848484 0e0e0674 18fe0108 84000060     ....t.......`...
 8004eec:	84848484 0404344c 0c0c0578 80fe0208     ....L4..x.......
 8004efc:	8888f080 c0a09088 06808080 01080e0e     ................
 8004f0c:	004848fe 84848400 344c8484 ff780404              .HH.......L4..x

08004f1b <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
 8004f1b:	e0ffd0ff d1ffc1ff a880d5ae 4000d33f     ............?..@
 8004f2b:	0020148d 12dac8a1 f1d9cf81 a42e40db     .. ..........@..
 8004f3b:	d0ffafa6 e0fffeff                                ......

08004f41 <u8g_dev_ssd1306_128x64_data_start>:
 8004f41:	d1ffe0ff feff0010                       ........

08004f49 <u8g_dev_ssd13xx_sleep_on>:
 8004f49:	d1ffe0ff ffd0ffae ffe0fffe                       .........

08004f52 <u8g_dev_ssd13xx_sleep_off>:
 8004f52:	d1ffe0ff ff32ffaf fffeffd0                       ......2....

08004f5d <u8g_dev_ssd1306_128x64_adafruit3_init_seq>:
 8004f5d:	e0ffd0ff d1ffc1ff a880d5ae 4000d33f     ............?..@
 8004f6d:	0220148d 12dac8a1 f1d9cf81 a42e40db     .. ..........@..
 8004f7d:	d0ffafa6 e0fffeff                                ......

08004f83 <u8g_dev_sh1106_128x64_data_start>:
 8004f83:	d1ffe0ff feff0210 c0b5f800                       .........

08004f8c <_init>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr

08004f98 <_fini>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr
