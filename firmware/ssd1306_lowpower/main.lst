
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000364 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/cc2nbajK.o
f108f85f l       *ABS*	00000000 BootRAM
08003040 l       .text	00000000 LoopCopyDataInit
08003038 l       .text	00000000 CopyDataInit
08003054 l       .text	00000000 LoopFillZerobss
0800304e l       .text	00000000 FillZerobss
08003066 l       .text	00000000 LoopForever
08003080 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_i2c.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 u8g_bitmap.c
00000000 l    df *ABS*	00000000 u8g_clip.c
00000000 l    df *ABS*	00000000 u8g_dev_ssd1306_128x64.c
0800308c l     O .text	00000026 u8g_dev_ssd1306_128x64_adafruit2_init_seq
080030b2 l     O .text	00000008 u8g_dev_ssd1306_128x64_data_start
080030ba l     O .text	00000009 u8g_dev_ssd13xx_sleep_on
080030c3 l     O .text	0000000b u8g_dev_ssd13xx_sleep_off
080030ce l     O .text	00000026 u8g_dev_ssd1306_128x64_adafruit3_init_seq
080030f4 l     O .text	00000008 u8g_dev_sh1106_128x64_data_start
00000000 l    df *ABS*	00000000 u8g_ll_api.c
0800132c l     F .text	00000058 u8g_init_data
00000000 l    df *ABS*	00000000 u8g_state.c
00000000 l    df *ABS*	00000000 u8g_pb16v1.c
00000000 l    df *ABS*	00000000 u8g_pb8v1.c
00000000 l    df *ABS*	00000000 u8g_com_api.c
00000000 l    df *ABS*	00000000 u8g_pb.c
00000000 l    df *ABS*	00000000 u8g_font.c
08001e14 l     F .text	0000000e u8g_font_get_word
08001e58 l     F .text	00000002 u8g_font_GetFormat.isra.0
08001e5a l     F .text	00000016 u8g_font_GetFontGlyphStructureSize.isra.1
0800200a l     F .text	00000084 u8g_font_calc_str_min_box
00000000 l    df *ABS*	00000000 u8g_com_null.c
00000000 l    df *ABS*	00000000 u8g_page.c
00000000 l    df *ABS*	00000000 _thumb1_case_uqi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
08002a18 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 main.c
20000150 l     O .data	00000200 threatbutt_bits
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 u8g_arm.c
08002d74 l     F .text	00000044 _delay_system_ticks_sub
00000000 l    df *ABS*	00000000 i2c_func.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.2/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.2/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000a6c l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000a6c l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
080007e0 g     F .text	00000020 RCC_HSICmd
080027de g     F .text	00000002 u8g_font_box_all_gA
08001dc8 g     F .text	00000014 u8g_pb_GetPageBox
08000874 g     F .text	00000018 RCC_LSEDriveConfig
080008cc g     F .text	00000024 RCC_PLLCmd
08001832 g     F .text	00000020 u8g_Draw4TPixel
08000ba8 g     F .text	00000018 RCC_AHBPeriphResetCmd
20000010 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_i2c
080002ac g     F .text	00000024 GPIO_PinAFConfig
08001c80 g     F .text	0000000c u8g_SetAddress
200005e4 g     O .bss	00000100 u8g_dev_ssd1306_128x64_2x_buf
08002e00 g     F .text	0000000e u8g_Delay
08000ca0 g     F .text	0000000c RCC_ClearITPendingBit
08001926 g     F .text	00000010 u8g_SetDefaultMidColor
08000280 g     F .text	0000000c GPIO_ReadOutputDataBit
0800256e g     F .text	00000038 u8g_DrawStr180P
08001cac g     F .text	0000009c u8g_WriteEscSeqP
20000a68 g     O .bss	00000004 control
08003080  w    F .text	00000002 TIM1_CC_IRQHandler
080006f8 g     F .text	00000006 I2C_ReceiveData
0800269c g     F .text	00000010 u8g_SetFontRefHeightExtendedText
08003080  w    F .text	00000002 HardFault_Handler
080023c4 g     F .text	0000001e u8g_DrawGlyph270
200000f4 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_sw_spi_pb
200000c4 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_i2c_pb
08001434 g     F .text	00000014 u8g_DrawPixelLL
08003080  w    F .text	00000002 ADC1_COMP_IRQHandler
08002b10 g     F .text	00000010 SysTick_Handler
08000928 g     F .text	0000000c RCC_MCOConfig
08000430 g     F .text	00000024 I2C_OwnAddress2Config
08003080  w    F .text	00000002 PVD_IRQHandler
0800208e g     F .text	0000000e u8g_IsGlyph
080027dc g     F .text	00000002 u8g_font_box_left_gA
08001c98 g     F .text	0000000a u8g_WriteSequence
080009b8 g     F .text	00000018 RCC_CECCLKConfig
08003114 g       .text	00000000 _sidata
08003080  w    F .text	00000002 PendSV_Handler
08003080  w    F .text	00000002 NMI_Handler
08003080  w    F .text	00000002 I2C1_IRQHandler
08002e0e g     F .text	0000000a u8g_MicroDelay
08000bf0 g     F .text	00000018 RCC_ITConfig
20000564 g     O .bss	00000080 u8g_dev_sh1106_128x64_sw_spi_buf
080020ae g     F .text	00000096 u8g_draw_glyph
080017ba g     F .text	0000000a u8g_FirstPage
08003114 g       .text	00000000 _etext
20000364 g       .bss	00000000 _sbss
08002790 g     F .text	00000022 u8g_GetStrWidth
08001a52 g     F .text	0000007e u8g_dev_pb16v1_base_fn
08000934 g     F .text	00000014 RCC_SYSCLKConfig
08001448 g     F .text	00000020 u8g_Draw8PixelLL
08000678 g     F .text	0000001c I2C_TimeoutBConfig
200009e8 g     O .bss	0000004c u8g
08000c44 g     F .text	00000034 RCC_WaitForHSEStartUp
0800101c g     F .text	000000a0 u8g_dev_ssd1306_adafruit_128x64_fn
08000474 g     F .text	00000020 I2C_SlaveByteControlCmd
08000d6a g     F .text	00000052 u8g_DrawBitmapP
0800193a g     F .text	0000000a u8g_SetHardwareBackup
08001812 g     F .text	00000020 u8g_Draw8Pixel
08000b3c g     F .text	00000024 RCC_BackupResetCmd
08002db8 g     F .text	00000028 delay_system_ticks
08000d34 g     F .text	00000036 u8g_DrawHBitmapP
080003bc g     F .text	00000012 I2C_ITConfig
08002de0 g     F .text	00000020 delay_micro_seconds
08001500 g     F .text	00000014 u8g_Init
08000904 g     F .text	00000024 RCC_ClockSecuritySystemCmd
0800186e g     F .text	00000006 u8g_SetColorIndex
080026ca g     F .text	0000000a u8g_SetFontPosBaseline
08000c78 g     F .text	00000014 RCC_ClearFlag
08000578 g     F .text	00000020 I2C_10BitAddressHeaderCmd
080024c2 g     F .text	0000003c u8g_DrawStrDir
08001e02 g     F .text	00000012 u8g_pb_WriteBuffer
20000360 g     O .data	00000004 SystemCoreClock
08001946 g     F .text	00000014 u8g_pb16v1_Clear
200008e4 g     O .bss	00000080 u8g_dev_ssd1306_128x64_hw_spi_buf
080007bc g     F .text	00000010 RCC_HSEConfig
080026ac g     F .text	00000010 u8g_SetFontRefHeightAll
08002a14 g     F .text	00000088 .hidden __udivsi3
200000d0 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_hw_spi
080005f0 g     F .text	00000020 I2C_SMBusAlertCmd
08001f12 g     F .text	00000008 u8g_GetFontBBXOffY
08002780 g     F .text	00000010 u8g_GetStrXP
08000b78 g     F .text	00000018 RCC_APB2PeriphClockCmd
08000700 g     F .text	00000012 I2C_DMACmd
080019b6 g     F .text	00000048 u8g_pb16v1_Set8PixelStd
200000e8 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_sw_spi
08000168 g     F .text	000000c6 GPIO_Init
080008ac g     F .text	00000020 RCC_PLLConfig
08000984 g     F .text	00000034 RCC_ADCCLKConfig
08001c3e g     F .text	0000000c u8g_InitCom
080026e0 g     F .text	0000000c u8g_SetFontPosTop
08001e8c g     F .text	00000004 u8g_font_GetFontEndEncoding
08002226 g     F .text	000000c4 u8g_draw_glyph180
20000000 g       .data	00000000 _sdata
08003080  w    F .text	00000002 SPI1_IRQHandler
08001912 g     F .text	00000008 u8g_SetDefaultBackgroundColor
20000124 g     O .data	0000000c u8g_dev_ssd1306_128x64_hw_spi_pb
08001c72 g     F .text	0000000e u8g_SetResetHigh
080002a8 g     F .text	00000004 GPIO_Write
08003080  w    F .text	00000002 TIM6_DAC_IRQHandler
0800195a g     F .text	0000000c u8g_pb16v1_Init
0800028c g     F .text	00000006 GPIO_ReadOutputData
080025a6 g     F .text	00000038 u8g_DrawStr270P
200004e4 g     O .bss	00000080 u8g_dev_sh1106_128x64_hw_spi_buf
08000854 g     F .text	00000020 RCC_LSEConfig
08002a00 g     F .text	00000012 .hidden __gnu_thumb1_case_uqi
08000694 g     F .text	00000020 I2C_CalculatePEC
080017f4 g     F .text	0000000e u8g_SleepOff
08000b18 g     F .text	00000024 RCC_RTCCLKCmd
08001e36 g     F .text	0000001a u8g_font_calc_vref_center
080026f8 g     F .text	0000005a u8g_font_calc_str_pixel_width
080017da g     F .text	0000000c u8g_SetContrast
0800153e g     F .text	0000004e u8g_InitSPI
080010bc g     F .text	000000a0 u8g_dev_sh1106_128x64_fn
08000b90 g     F .text	00000018 RCC_APB1PeriphClockCmd
08000c8c g     F .text	00000014 RCC_GetITStatus
08001e26 g     F .text	00000006 u8g_font_calc_vref_bottom
08001424 g     F .text	00000010 u8g_SetContrastLL
080004a4 g     F .text	00000020 I2C_10BitAddressingModeCmd
20000148 g     O .data	00000008 GPIOA_InitStruct
08002752 g     F .text	0000000e u8g_GetStrPixelWidth
0800190e g     F .text	00000004 u8g_GetDefaultBackgroundColor
20000a34 g     O .bss	00000018 USART2_InitStruct
08002ab4 g     F .text	00000048 __libc_init_array
080023e2 g     F .text	00000038 u8g_DrawStr
08000b60 g     F .text	00000018 RCC_AHBPeriphClockCmd
080006f4 g     F .text	00000004 I2C_SendData
080019fe g     F .text	00000054 u8g_pb16v1_Set8PixelOpt2
08003080  w    F .text	00000002 EXTI2_3_IRQHandler
08001eae g     F .text	00000050 u8g_font_GetSize
08002636 g     F .text	00000056 u8g_UpdateRefHeight
2000004c g     O .data	0000000c u8g_dev_sh1106_128x64_i2c_pb
080017c4 g     F .text	00000016 u8g_NextPage
080013ea g     F .text	0000003a u8g_NextPageLL
20000864 g     O .bss	00000080 u8g_dev_ssd1306_128x64_i2c_buf
0800241a g     F .text	00000038 u8g_DrawStr90
080030fc g     F .text	00000000 _init
08003080  w    F .text	00000002 I2C2_IRQHandler
08001b24 g     F .text	00000048 u8g_pb8v1_Set8PixelStd
08002208 g     F .text	0000001e u8g_DrawGlyph90
08000308 g     F .text	00000064 I2C_Init
08003080  w    F .text	00000002 TIM17_IRQHandler
08000648 g     F .text	00000020 I2C_IdleClockTimeoutCmd
08003080  w    F .text	00000002 RTC_IRQHandler
080024fe g     F .text	00000038 u8g_DrawStrP
080014e8 g     F .text	00000018 u8g_Begin
20000a6c g       .bss	00000000 _ebss
08001514 g     F .text	0000002a u8g_InitComFn
08001966 g     F .text	0000002e u8g_pb16v1_set_pixel
0800115c g     F .text	000000e8 u8g_dev_ssd1306_128x64_2x_fn
08003030  w    F .text	00000038 Reset_Handler
080029be g     F .text	00000010 u8g_page_Init
08000278 g     F .text	00000006 GPIO_ReadInputData
08001938 g     F .text	00000002 u8g_state_dummy_cb
08001bc0 g     F .text	0000007e u8g_dev_pb8v1_base_fn
0800268c g     F .text	00000010 u8g_SetFontRefHeightText
080029ac g     F .text	00000004 u8g_com_null_fn
08000c08 g     F .text	0000003c RCC_GetFlagStatus
20000118 g     O .data	0000000c u8g_dev_ssd1306_128x64_hw_spi
080026ec g     F .text	0000000c u8g_SetFontPosCenter
08000610 g     F .text	00000020 I2C_ClockTimeoutCmd
20000a4c g     O .bss	0000001c I2C1_InitStruct
08001d82 g     F .text	00000012 u8g_pb_IsXIntersection
08000294 g     F .text	00000004 GPIO_SetBits
08002770 g     F .text	00000010 u8g_GetStrX
08000948 g     F .text	00000010 RCC_GetSYSCLKSource
0800029c g     F .text	0000000c GPIO_WriteBit
08000538 g     F .text	00000020 I2C_GenerateSTART
0800036c g     F .text	00000016 I2C_StructInit
08001802 g     F .text	00000010 u8g_DrawPixel
0800158c g     F .text	00000030 u8g_InitHWSPI
200006e4 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_i2c_buf
0800209c g     F .text	00000012 u8g_GetGlyphDeltaX
08000a00 g     F .text	00000108 RCC_GetClocksFreq
08003080  w    F .text	00000002 TIM16_IRQHandler
08003080  w    F .text	00000002 TIM3_IRQHandler
08003080  w    F .text	00000002 EXTI4_15_IRQHandler
08003080  w    F .text	00000002 RCC_IRQHandler
08001e7e g     F .text	0000000a u8g_font_GetEncoding97Pos
08001c64 g     F .text	0000000e u8g_SetResetLow
08001e88 g     F .text	00000004 u8g_font_GetFontStartEncoding
08001c8c g     F .text	0000000c u8g_WriteByte
20000364 g       .bss	00000000 _bss
08003080  w    F .text	00000002 DMA1_Channel1_IRQHandler
08003080 g       .text	00000002 Default_Handler
20000058 g     O .data	0000000c u8g_dev_sh1106_128x64_hw_spi
080005d0 g     F .text	00000020 I2C_TransferHandling
20000088 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_i2c
20000350 g     O .data	00000010 AHBPrescTable
08000630 g     F .text	00000018 I2C_ExtendedClockTimeoutCmd
08000714 g     F .text	0000000c I2C_GetFlagStatus
08001f20 g     F .text	000000ea u8g_GetGlyph
08001882 g     F .text	0000001e u8g_SetHiColorByRGB
08001d94 g     F .text	00000034 u8g_pb_IsIntersection
080026d4 g     F .text	0000000c u8g_SetFontPosBottom
08002452 g     F .text	00000038 u8g_DrawStr180
08001adc g     F .text	00000026 u8g_pb8v1_set_pixel
08000b08 g     F .text	00000010 RCC_RTCCLKConfig
080027b2 g     F .text	00000022 u8g_GetStrWidthP
08001ca2 g     F .text	0000000a u8g_WriteSequenceP
08003080  w    F .text	00000002 CEC_IRQHandler
080028b0 g     F .text	00000096 u8g_draw_aa_glyph
08000814 g     F .text	00000020 RCC_HSI14Cmd
20000028 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_sw_spi
08003080  w    F .text	00000002 TIM14_IRQHandler
200000ac g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_pb
200009e4 g     O .bss	00000004 timercounter
08003080  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
08001e70 g     F .text	00000004 u8g_font_GetCapitalAHeight
080025de g     F .text	0000002c u8g_DrawStrFontBBX
20000764 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_hw_spi_buf
08000dbc g     F .text	000000b4 u8g_DrawXBM
08001c4a g     F .text	0000000e u8g_StopCom
08001e50 g     F .text	00000004 u8g_font_get_char
080002d0 g     F .text	00000038 I2C_DeInit
08001f0a g     F .text	00000008 u8g_GetFontBBXOffX
08000384 g     F .text	00000018 I2C_Cmd
08000298 g     F .text	00000004 GPIO_ResetBits
08000720 g     F .text	00000004 I2C_ClearFlag
080026bc g     F .text	0000000e u8g_SetFontLineSpacingFactor
080016f6 g     F .text	000000c4 u8g_InitRW8Bit
08001994 g     F .text	00000022 u8g_pb16v1_SetPixel
08002894 g     F .text	0000001c u8g_SetFont
080003f0 g     F .text	00000020 I2C_StopModeCmd
08003080  w    F .text	00000002 TIM15_IRQHandler
08003080  w    F .text	00000002 EXTI0_1_IRQHandler
08002fa8 g     F .text	00000088 I2C_WrReg
0800191a g     F .text	0000000c u8g_GetDefaultMidColor
08002ab0  w    F .text	00000002 .hidden __aeabi_ldiv0
08001488 g     F .text	00000012 u8g_GetWidthLL
08000834 g     F .text	00000020 RCC_HSI14ADCRequestCmd
08002536 g     F .text	00000038 u8g_DrawStr90P
08001e54 g     F .text	00000004 u8g_font_get_charP
080004e4 g     F .text	00000020 I2C_ReloadCmd
08001b6c g     F .text	00000054 u8g_pb8v1_Set8PixelOpt2
08000ce2 g     F .text	00000052 u8g_DrawBitmap
08002964 g     F .text	00000048 u8g_DrawAAStr
08003080  w    F .text	00000002 SPI2_IRQHandler
08001ea2 g     F .text	00000006 u8g_font_GetFontXAscent
0800248a g     F .text	00000038 u8g_DrawStr270
08001ad0 g     F .text	0000000c u8g_pb8v1_Init
080007cc g     F .text	00000014 RCC_AdjustHSICalibrationValue
08002b40 g     F .text	00000118 main
08001b02 g     F .text	00000022 u8g_pb8v1_SetPixel
2000007c g     O .data	0000000c u8g_dev_sh1106_128x64_sw_spi_pb
080005c4 g     F .text	0000000a I2C_GetTransferDirection
0800149a g     F .text	00000012 u8g_GetHeightLL
0800260a g     F .text	0000002c u8g_DrawGlyphFontBBX
08001874 g     F .text	0000000e u8g_SetHiColor
08002a14 g     F .text	00000000 .hidden __aeabi_uidiv
08003080  w    F .text	00000002 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
20000464 g     O .bss	00000080 u8g_dev_sh1106_128x64_i2c_buf
20000100 g     O .data	0000000c u8g_dev_ssd1306_128x64_i2c
080015d8 g     F .text	0000004e u8g_Init8BitFixedPort
08001852 g     F .text	0000001c u8g_SetColorEntry
080004c4 g     F .text	00000020 I2C_AutoEndCmd
20000070 g     O .data	0000000c u8g_dev_sh1106_128x64_sw_spi
080015bc g     F .text	0000001c u8g_InitI2C
08002162 g     F .text	000000a6 u8g_draw_glyph90
08000454 g     F .text	00000020 I2C_GeneralCallCmd
20000964 g     O .bss	00000080 u8g_dev_ssd1306_128x64_sw_spi_buf
08001244 g     F .text	000000e8 u8g_dev_sh1106_128x64_2x_fn
0800039c g     F .text	00000020 I2C_SoftwareResetCmd
08002c58 g     F .text	000000b8 SystemInit
08000f24 g     F .text	0000005c u8g_IsBBXIntersection
20000064 g     O .data	0000000c u8g_dev_sh1106_128x64_hw_spi_pb
08000800 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
08001e2c g     F .text	0000000a u8g_font_calc_vref_top
080022ea g     F .text	0000001e u8g_DrawGlyph180
080000c4 g     F .text	000000a4 GPIO_DeInit
08003108 g     F .text	00000000 _fini
08001ea8 g     F .text	00000006 u8g_font_GetFontXDescent
08002308 g     F .text	000000bc u8g_draw_glyph270
080006b4 g     F .text	00000020 I2C_PECRequestCmd
08000518 g     F .text	00000020 I2C_MasterRequestConfig
200007e4 g     O .bss	00000080 u8g_dev_ssd1306_adafruit_128x64_sw_spi_buf
0800075c g     F .text	00000060 RCC_DeInit
08001f1a g     F .text	00000006 u8g_GetFontCapitalAHeight
080027e0 g     F .text	0000004e u8g_GetStrMinBox
0800282e g     F .text	00000066 u8g_GetStrAMinBox
08001e74 g     F .text	0000000a u8g_font_GetEncoding65Pos
08003080  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08001e90 g     F .text	00000006 u8g_font_GetLowerGDescent
2000013c g     O .data	0000000c u8g_dev_ssd1306_128x64_sw_spi_pb
080014b8 g     F .text	00000030 u8g_UpdateDimension
08001c58 g     F .text	0000000c u8g_SetChipSelect
08001ddc g     F .text	00000026 u8g_pb_Is8PixelVisible
08003080  w    F .text	00000002 WWDG_IRQHandler
2000010c g     O .data	0000000c u8g_dev_ssd1306_128x64_i2c_pb
08000bd8 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08001d48 g     F .text	00000012 u8g_pb_Clear
080018f0 g     F .text	0000001e u8g_SetDefaultForegroundColor
080008f0 g     F .text	00000014 RCC_PREDIV1Config
08002e18 g     F .text	0000000a u8g_10MicroDelay
08000724 g     F .text	00000032 I2C_GetITStatus
08003080  w    F .text	00000002 TIM2_IRQHandler
2000001c g     O .data	0000000c u8g_dev_sh1106_128x64_2x_hw_spi
0800138c g     F .text	0000002a u8g_InitLL
08000f80 g     F .text	0000009c u8g_dev_ssd1306_128x64_fn
080018de g     F .text	00000012 u8g_GetDefaultForegroundColor
08001468 g     F .text	00000020 u8g_Draw4TPixelLL
080003d0 g     F .text	00000020 I2C_StretchClockCmd
08001626 g     F .text	000000d0 u8g_Init8Bit
08000230 g     F .text	00000018 GPIO_StructInit
08003080  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
080029b0 g     F .text	0000000e u8g_page_First
08000504 g     F .text	00000014 I2C_NumberOfBytesConfig
20001000 g       *ABS*	00000000 _estack
08002946 g     F .text	0000001e u8g_DrawAAGlyph
080018d8 g     F .text	00000006 u8g_GetColorIndex
08002144 g     F .text	0000001e u8g_DrawGlyph
08002a9c g     F .text	00000012 .hidden __aeabi_uidivmod
08001944 g     F .text	00000002 u8g_backup_spi
080014ac g     F .text	0000000c u8g_GetModeLL
080006dc g     F .text	00000016 I2C_ReadRegister
20000364 g       .data	00000000 _edata
080029ce g     F .text	00000030 u8g_page_Next
200000b8 g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_i2c
08001e96 g     F .text	00000006 u8g_font_GetFontAscent
20000094 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_hw_spi
08002760 g     F .text	00000010 u8g_GetStrPixelWidthP
08000668 g     F .text	00000010 I2C_TimeoutAConfig
08002afc g     F .text	00000014 USART2_IRQHandler
080017e6 g     F .text	0000000e u8g_SleepOn
08000000 g     O .isr_vector	00000000 g_pfnVectors
080006d4 g     F .text	00000006 I2C_GetPEC
08002d10 g     F .text	00000064 SystemCoreClockUpdate
20000034 g     O .data	0000000c u8g_dev_sh1106_128x64_2x_pb
080009e8 g     F .text	00000018 RCC_USARTCLKConfig
08000410 g     F .text	00000020 I2C_DualAddressCmd
08000494 g     F .text	00000010 I2C_SlaveAddressConfig
00000000  w      *UND*	00000000 __init_array_start
08002ab0  w    F .text	00000002 .hidden __aeabi_idiv0
080009d0 g     F .text	00000018 RCC_I2CCLKConfig
08002b20 g     F .text	00000020 draw
0800096c g     F .text	00000018 RCC_PCLKConfig
08001d5a g     F .text	00000028 u8g_pb_IsYIntersection
08003080  w    F .text	00000002 FLASH_IRQHandler
08001f04 g     F .text	00000006 u8g_GetFontBBXHeight
08001e22 g     F .text	00000004 u8g_font_calc_vref_font
08002f1c g     F .text	0000008c init_i2c
08002e24 g     F .text	000000f8 u8g_com_hw_i2c_fn
08000248 g     F .text	00000024 GPIO_PinLockConfig
08003080  w    F .text	00000002 USART1_IRQHandler
0800088c g     F .text	00000020 RCC_LSICmd
08000598 g     F .text	00000020 I2C_AcknowledgeConfig
20000130 g     O .data	0000000c u8g_dev_ssd1306_128x64_sw_spi
08001384 g     F .text	00000008 u8g_call_dev_fn
20000040 g     O .data	0000000c u8g_dev_sh1106_128x64_i2c
08000bc0 g     F .text	00000018 RCC_APB2PeriphResetCmd
08000558 g     F .text	00000020 I2C_GenerateSTOP
08001efe g     F .text	00000006 u8g_GetFontBBXWidth
08003080  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
080027d4 g     F .text	00000008 u8g_font_box_min
200000dc g     O .data	0000000c u8g_dev_ssd1306_adafruit_128x64_hw_spi_pb
20000364 g     O .bss	00000100 u8g_dev_sh1106_128x64_2x_buf
08000758 g     F .text	00000004 I2C_ClearITPendingBit
00000000  w      *UND*	00000000 __preinit_array_start
08000cac g     F .text	00000036 u8g_DrawHBitmap
080018a0 g     F .text	00000038 u8g_SetRGB
08001e9c g     F .text	00000006 u8g_font_GetFontDescent
08000e70 g     F .text	000000b4 u8g_DrawXBMP
0800026c g     F .text	0000000c GPIO_ReadInputDataBit
080005b8 g     F .text	0000000c I2C_GetAddressMatched
08000958 g     F .text	00000014 RCC_HCLKConfig
200000a0 g     O .data	0000000c u8g_dev_ssd1306_128x64_2x_sw_spi
080013b6 g     F .text	00000034 u8g_FirstPageLL



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	2101      	movs	r1, #1
 80000ec:	03c0      	lsls	r0, r0, #15
 80000ee:	f000 fd5b 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	2100      	movs	r1, #0
 80000f6:	03c0      	lsls	r0, r0, #15
 80000f8:	f000 fd56 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	2101      	movs	r1, #1
 8000102:	0280      	lsls	r0, r0, #10
 8000104:	f000 fd50 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	2100      	movs	r1, #0
 800010c:	0280      	lsls	r0, r0, #10
 800010e:	f000 fd4b 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	2101      	movs	r1, #1
 8000118:	02c0      	lsls	r0, r0, #11
 800011a:	f000 fd45 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	2100      	movs	r1, #0
 8000122:	02c0      	lsls	r0, r0, #11
 8000124:	f000 fd40 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	2101      	movs	r1, #1
 800012e:	0300      	lsls	r0, r0, #12
 8000130:	f000 fd3a 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	2100      	movs	r1, #0
 8000138:	0300      	lsls	r0, r0, #12
 800013a:	f000 fd35 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	2101      	movs	r1, #1
 8000144:	0340      	lsls	r0, r0, #13
 8000146:	f000 fd2f 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	2100      	movs	r1, #0
 800014e:	0340      	lsls	r0, r0, #13
 8000150:	f000 fd2a 	bl	8000ba8 <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	4644      	mov	r4, r8
 800016c:	465f      	mov	r7, fp
 800016e:	4656      	mov	r6, sl
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000174:	2403      	movs	r4, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000176:	468c      	mov	ip, r1
 8000178:	b083      	sub	sp, #12
 800017a:	6809      	ldr	r1, [r1, #0]
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	46a0      	mov	r8, r4
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d027      	beq.n	80001de <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c3c      	adds	r4, r7, #0

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000190:	1c0d      	adds	r5, r1, #0

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000192:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	4664      	mov	r4, ip
 800019c:	7924      	ldrb	r4, [r4, #4]
 800019e:	46a3      	mov	fp, r4
 80001a0:	3c01      	subs	r4, #1
 80001a2:	2c01      	cmp	r4, #1
 80001a4:	d922      	bls.n	80001ec <GPIO_Init+0x84>
 80001a6:	4644      	mov	r4, r8
 80001a8:	4094      	lsls	r4, r2
 80001aa:	43e4      	mvns	r4, r4
 80001ac:	9401      	str	r4, [sp, #4]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001ae:	6805      	ldr	r5, [r0, #0]
 80001b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001b2:	3301      	adds	r3, #1
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	402c      	ands	r4, r5
 80001b6:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001b8:	465c      	mov	r4, fp
 80001ba:	4094      	lsls	r4, r2
 80001bc:	6805      	ldr	r5, [r0, #0]
 80001be:	432c      	orrs	r4, r5

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c0:	4645      	mov	r5, r8
 80001c2:	4095      	lsls	r5, r2
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001c4:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c6:	68c4      	ldr	r4, [r0, #12]
 80001c8:	43ac      	bics	r4, r5
 80001ca:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	4664      	mov	r4, ip
 80001ce:	79e4      	ldrb	r4, [r4, #7]
 80001d0:	68c5      	ldr	r5, [r0, #12]
 80001d2:	4094      	lsls	r4, r2
 80001d4:	432c      	orrs	r4, r5
 80001d6:	60c4      	str	r4, [r0, #12]
 80001d8:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d1d7      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001de:	b003      	add	sp, #12
 80001e0:	bc3c      	pop	{r2, r3, r4, r5}
 80001e2:	4690      	mov	r8, r2
 80001e4:	4699      	mov	r9, r3
 80001e6:	46a2      	mov	sl, r4
 80001e8:	46ab      	mov	fp, r5
 80001ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001ec:	6884      	ldr	r4, [r0, #8]
 80001ee:	46a1      	mov	r9, r4
 80001f0:	4644      	mov	r4, r8
 80001f2:	4094      	lsls	r4, r2
 80001f4:	464e      	mov	r6, r9
 80001f6:	43e4      	mvns	r4, r4
 80001f8:	4026      	ands	r6, r4
 80001fa:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	6886      	ldr	r6, [r0, #8]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	9401      	str	r4, [sp, #4]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	46b2      	mov	sl, r6
 8000202:	4666      	mov	r6, ip
 8000204:	7976      	ldrb	r6, [r6, #5]
 8000206:	4096      	lsls	r6, r2
 8000208:	46b1      	mov	r9, r6
 800020a:	4656      	mov	r6, sl
 800020c:	464c      	mov	r4, r9
 800020e:	4326      	orrs	r6, r4
 8000210:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	1c26      	adds	r6, r4, #0
 8000216:	43ae      	bics	r6, r5
 8000218:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800021a:	8884      	ldrh	r4, [r0, #4]
 800021c:	46a1      	mov	r9, r4
 800021e:	4664      	mov	r4, ip
 8000220:	79a5      	ldrb	r5, [r4, #6]
 8000222:	464c      	mov	r4, r9
 8000224:	409d      	lsls	r5, r3
 8000226:	4325      	orrs	r5, r4
 8000228:	b2ad      	uxth	r5, r5
 800022a:	8085      	strh	r5, [r0, #4]
 800022c:	e7bf      	b.n	80001ae <GPIO_Init+0x46>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000232:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000234:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000236:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000238:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800023a:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800023c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800023e:	71c3      	strb	r3, [r0, #7]
}
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	0000ffff 	.word	0x0000ffff

08000248 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000248:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800024a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800024c:	025b      	lsls	r3, r3, #9
 800024e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	430b      	orrs	r3, r1
 8000254:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800025a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000260:	69c3      	ldr	r3, [r0, #28]
 8000262:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000264:	69c3      	ldr	r3, [r0, #28]
 8000266:	9301      	str	r3, [sp, #4]
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a00      	ldrh	r0, [r0, #16]
 800026e:	4008      	ands	r0, r1
 8000270:	1e41      	subs	r1, r0, #1
 8000272:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000274:	b2c0      	uxtb	r0, r0
}
 8000276:	4770      	bx	lr

08000278 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000278:	8a00      	ldrh	r0, [r0, #16]
 800027a:	b280      	uxth	r0, r0
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000280:	8a80      	ldrh	r0, [r0, #20]
 8000282:	4008      	ands	r0, r1
 8000284:	1e41      	subs	r1, r0, #1
 8000286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000288:	b2c0      	uxtb	r0, r0
}
 800028a:	4770      	bx	lr

0800028c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800028c:	8a80      	ldrh	r0, [r0, #20]
 800028e:	b280      	uxth	r0, r0
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000294:	6181      	str	r1, [r0, #24]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000298:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800029a:	4770      	bx	lr

0800029c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800029c:	2a00      	cmp	r2, #0
 800029e:	d101      	bne.n	80002a4 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80002a0:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 80002a2:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	6181      	str	r1, [r0, #24]
 80002a6:	e7fc      	b.n	80002a2 <GPIO_WriteBit+0x6>

080002a8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80002a8:	8281      	strh	r1, [r0, #20]
}
 80002aa:	4770      	bx	lr

080002ac <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ac:	2307      	movs	r3, #7
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002ae:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b0:	240f      	movs	r4, #15
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	400b      	ands	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b8:	409c      	lsls	r4, r3
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ba:	1c13      	adds	r3, r2, #0
 80002bc:	08c9      	lsrs	r1, r1, #3
 80002be:	0089      	lsls	r1, r1, #2
 80002c0:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002c2:	6a01      	ldr	r1, [r0, #32]
 80002c4:	43a1      	bics	r1, r4
 80002c6:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002c8:	6a01      	ldr	r1, [r0, #32]
 80002ca:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002cc:	6203      	str	r3, [r0, #32]
}
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80002d0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <I2C_DeInit+0x34>)
 80002d4:	4298      	cmp	r0, r3
 80002d6:	d00a      	beq.n	80002ee <I2C_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80002d8:	2080      	movs	r0, #128	; 0x80
 80002da:	2101      	movs	r1, #1
 80002dc:	03c0      	lsls	r0, r0, #15
 80002de:	f000 fc7b 	bl	8000bd8 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80002e2:	2080      	movs	r0, #128	; 0x80
 80002e4:	2100      	movs	r1, #0
 80002e6:	03c0      	lsls	r0, r0, #15
 80002e8:	f000 fc76 	bl	8000bd8 <RCC_APB1PeriphResetCmd>
  }
}
 80002ec:	bd08      	pop	{r3, pc}
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	2101      	movs	r1, #1
 80002f2:	0380      	lsls	r0, r0, #14
 80002f4:	f000 fc70 	bl	8000bd8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80002f8:	2080      	movs	r0, #128	; 0x80
 80002fa:	2100      	movs	r1, #0
 80002fc:	0380      	lsls	r0, r0, #14
 80002fe:	f000 fc6b 	bl	8000bd8 <RCC_APB1PeriphResetCmd>
 8000302:	e7f3      	b.n	80002ec <I2C_DeInit+0x1c>
 8000304:	40005400 	.word	0x40005400

08000308 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000308:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800030a:	2401      	movs	r4, #1
 800030c:	6803      	ldr	r3, [r0, #0]
 800030e:	43a3      	bics	r3, r4
 8000310:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000312:	6802      	ldr	r2, [r0, #0]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <I2C_Init+0x58>)
 8000316:	4013      	ands	r3, r2
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8000318:	688a      	ldr	r2, [r1, #8]
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	4313      	orrs	r3, r2
 800031e:	684a      	ldr	r2, [r1, #4]
 8000320:	4313      	orrs	r3, r2

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000322:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8000324:	680a      	ldr	r2, [r1, #0]
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <I2C_Init+0x5c>)
 8000328:	4013      	ands	r3, r2
 800032a:	6103      	str	r3, [r0, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800032c:	6803      	ldr	r3, [r0, #0]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800032e:	698a      	ldr	r2, [r1, #24]
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000330:	431c      	orrs	r4, r3

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8000332:	2300      	movs	r3, #0
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000334:	6004      	str	r4, [r0, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8000336:	6083      	str	r3, [r0, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8000338:	60c3      	str	r3, [r0, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800033a:	690b      	ldr	r3, [r1, #16]
 800033c:	4313      	orrs	r3, r2
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 800033e:	2280      	movs	r2, #128	; 0x80
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8000340:	6083      	str	r3, [r0, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8000342:	6883      	ldr	r3, [r0, #8]
 8000344:	0212      	lsls	r2, r2, #8
 8000346:	4313      	orrs	r3, r2
 8000348:	6083      	str	r3, [r0, #8]
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 800034a:	6803      	ldr	r3, [r0, #0]
 800034c:	68ca      	ldr	r2, [r1, #12]
 800034e:	4313      	orrs	r3, r2
 8000350:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000352:	6842      	ldr	r2, [r0, #4]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <I2C_Init+0x60>)
 8000356:	4013      	ands	r3, r2
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8000358:	694a      	ldr	r2, [r1, #20]
 800035a:	4313      	orrs	r3, r2
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800035c:	6043      	str	r3, [r0, #4]
}
 800035e:	bd10      	pop	{r4, pc}
 8000360:	00cfe0ff 	.word	0x00cfe0ff
 8000364:	f0ffffff 	.word	0xf0ffffff
 8000368:	07ff7fff 	.word	0x07ff7fff

0800036c <I2C_StructInit>:
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800036c:	2280      	movs	r2, #128	; 0x80
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 800036e:	2300      	movs	r3, #0
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8000370:	0212      	lsls	r2, r2, #8
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8000372:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8000374:	6043      	str	r3, [r0, #4]
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 8000376:	6083      	str	r3, [r0, #8]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000378:	60c3      	str	r3, [r0, #12]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800037a:	6103      	str	r3, [r0, #16]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800037c:	6142      	str	r2, [r0, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800037e:	6183      	str	r3, [r0, #24]
}
 8000380:	4770      	bx	lr
 8000382:	46c0      	nop			; (mov r8, r8)

08000384 <I2C_Cmd>:
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000384:	2900      	cmp	r1, #0
 8000386:	d104      	bne.n	8000392 <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8000388:	2201      	movs	r2, #1
 800038a:	6803      	ldr	r3, [r0, #0]
 800038c:	4393      	bics	r3, r2
 800038e:	6003      	str	r3, [r0, #0]
  }
}
 8000390:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000392:	2301      	movs	r3, #1
 8000394:	6802      	ldr	r2, [r0, #0]
 8000396:	4313      	orrs	r3, r2
 8000398:	6003      	str	r3, [r0, #0]
 800039a:	e7f9      	b.n	8000390 <I2C_Cmd+0xc>

0800039c <I2C_SoftwareResetCmd>:
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800039c:	2900      	cmp	r1, #0
 800039e:	d104      	bne.n	80003aa <I2C_SoftwareResetCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SWRST);
 80003a0:	6802      	ldr	r2, [r0, #0]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <I2C_SoftwareResetCmd+0x1c>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	6003      	str	r3, [r0, #0]
  }
}
 80003a8:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	6803      	ldr	r3, [r0, #0]
 80003ae:	0192      	lsls	r2, r2, #6
 80003b0:	4313      	orrs	r3, r2
 80003b2:	6003      	str	r3, [r0, #0]
 80003b4:	e7f8      	b.n	80003a8 <I2C_SoftwareResetCmd+0xc>
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	ffffdfff 	.word	0xffffdfff

080003bc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80003bc:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d102      	bne.n	80003c8 <I2C_ITConfig+0xc>
    I2Cx->CR1 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 80003c2:	438b      	bics	r3, r1
 80003c4:	6003      	str	r3, [r0, #0]
  }
}
 80003c6:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80003c8:	4319      	orrs	r1, r3
 80003ca:	6001      	str	r1, [r0, #0]
 80003cc:	e7fb      	b.n	80003c6 <I2C_ITConfig+0xa>
 80003ce:	46c0      	nop			; (mov r8, r8)

080003d0 <I2C_StretchClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d105      	bne.n	80003e0 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	6803      	ldr	r3, [r0, #0]
 80003d8:	0292      	lsls	r2, r2, #10
 80003da:	4313      	orrs	r3, r2
 80003dc:	6003      	str	r3, [r0, #0]
  }
}
 80003de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 80003e0:	6802      	ldr	r2, [r0, #0]
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <I2C_StretchClockCmd+0x1c>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	6003      	str	r3, [r0, #0]
 80003e8:	e7f9      	b.n	80003de <I2C_StretchClockCmd+0xe>
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	fffdffff 	.word	0xfffdffff

080003f0 <I2C_StopModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d104      	bne.n	80003fe <I2C_StopModeCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 80003f4:	6802      	ldr	r2, [r0, #0]
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <I2C_StopModeCmd+0x1c>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	6003      	str	r3, [r0, #0]
  }
}
 80003fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	6803      	ldr	r3, [r0, #0]
 8000402:	02d2      	lsls	r2, r2, #11
 8000404:	4313      	orrs	r3, r2
 8000406:	6003      	str	r3, [r0, #0]
 8000408:	e7f8      	b.n	80003fc <I2C_StopModeCmd+0xc>
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	fffbffff 	.word	0xfffbffff

08000410 <I2C_DualAddressCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000410:	2900      	cmp	r1, #0
 8000412:	d104      	bne.n	800041e <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 8000414:	68c2      	ldr	r2, [r0, #12]
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <I2C_DualAddressCmd+0x1c>)
 8000418:	4013      	ands	r3, r2
 800041a:	60c3      	str	r3, [r0, #12]
  }
}    
 800041c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	68c3      	ldr	r3, [r0, #12]
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	4313      	orrs	r3, r2
 8000426:	60c3      	str	r3, [r0, #12]
 8000428:	e7f8      	b.n	800041c <I2C_DualAddressCmd+0xc>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffff7fff 	.word	0xffff7fff

08000430 <I2C_OwnAddress2Config>:
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8000430:	b510      	push	{r4, lr}
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <I2C_OwnAddress2Config+0x20>)
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8000434:	1c0c      	adds	r4, r1, #0
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000436:	68c1      	ldr	r1, [r0, #12]
  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 8000438:	0212      	lsls	r2, r2, #8
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 800043a:	400b      	ands	r3, r1

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 800043c:	21fe      	movs	r1, #254	; 0xfe
 800043e:	4021      	ands	r1, r4
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 8000440:	24e0      	movs	r4, #224	; 0xe0
 8000442:	00e4      	lsls	r4, r4, #3
 8000444:	4022      	ands	r2, r4

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 8000446:	4311      	orrs	r1, r2
 8000448:	4319      	orrs	r1, r3
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800044a:	60c1      	str	r1, [r0, #12]
}
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	fffff801 	.word	0xfffff801

08000454 <I2C_GeneralCallCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000454:	2900      	cmp	r1, #0
 8000456:	d104      	bne.n	8000462 <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_GCEN;
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 8000458:	6802      	ldr	r2, [r0, #0]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <I2C_GeneralCallCmd+0x1c>)
 800045c:	4013      	ands	r3, r2
 800045e:	6003      	str	r3, [r0, #0]
  }
} 
 8000460:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	6803      	ldr	r3, [r0, #0]
 8000466:	0312      	lsls	r2, r2, #12
 8000468:	4313      	orrs	r3, r2
 800046a:	6003      	str	r3, [r0, #0]
 800046c:	e7f8      	b.n	8000460 <I2C_GeneralCallCmd+0xc>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	fff7ffff 	.word	0xfff7ffff

08000474 <I2C_SlaveByteControlCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000474:	2900      	cmp	r1, #0
 8000476:	d104      	bne.n	8000482 <I2C_SlaveByteControlCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SBC;
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 8000478:	6802      	ldr	r2, [r0, #0]
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <I2C_SlaveByteControlCmd+0x1c>)
 800047c:	4013      	ands	r3, r2
 800047e:	6003      	str	r3, [r0, #0]
  }
}
 8000480:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	6803      	ldr	r3, [r0, #0]
 8000486:	0252      	lsls	r2, r2, #9
 8000488:	4313      	orrs	r3, r2
 800048a:	6003      	str	r3, [r0, #0]
 800048c:	e7f8      	b.n	8000480 <I2C_SlaveByteControlCmd+0xc>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	fffeffff 	.word	0xfffeffff

08000494 <I2C_SlaveAddressConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8000494:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 8000496:	0589      	lsls	r1, r1, #22
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 8000498:	0a9b      	lsrs	r3, r3, #10
 800049a:	029b      	lsls	r3, r3, #10

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 800049c:	0d89      	lsrs	r1, r1, #22
 800049e:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 80004a0:	6041      	str	r1, [r0, #4]
}
 80004a2:	4770      	bx	lr

080004a4 <I2C_10BitAddressingModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004a4:	2900      	cmp	r1, #0
 80004a6:	d104      	bne.n	80004b2 <I2C_10BitAddressingModeCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_ADD10;
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 80004a8:	6842      	ldr	r2, [r0, #4]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <I2C_10BitAddressingModeCmd+0x1c>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	6043      	str	r3, [r0, #4]
  }
} 
 80004b0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	6843      	ldr	r3, [r0, #4]
 80004b6:	0112      	lsls	r2, r2, #4
 80004b8:	4313      	orrs	r3, r2
 80004ba:	6043      	str	r3, [r0, #4]
 80004bc:	e7f8      	b.n	80004b0 <I2C_10BitAddressingModeCmd+0xc>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	fffff7ff 	.word	0xfffff7ff

080004c4 <I2C_AutoEndCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d104      	bne.n	80004d2 <I2C_AutoEndCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 80004c8:	6842      	ldr	r2, [r0, #4]
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <I2C_AutoEndCmd+0x1c>)
 80004cc:	4013      	ands	r3, r2
 80004ce:	6043      	str	r3, [r0, #4]
  }
} 
 80004d0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	6843      	ldr	r3, [r0, #4]
 80004d6:	0492      	lsls	r2, r2, #18
 80004d8:	4313      	orrs	r3, r2
 80004da:	6043      	str	r3, [r0, #4]
 80004dc:	e7f8      	b.n	80004d0 <I2C_AutoEndCmd+0xc>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	fdffffff 	.word	0xfdffffff

080004e4 <I2C_ReloadCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004e4:	2900      	cmp	r1, #0
 80004e6:	d104      	bne.n	80004f2 <I2C_ReloadCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_RELOAD;
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 80004e8:	6842      	ldr	r2, [r0, #4]
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <I2C_ReloadCmd+0x1c>)
 80004ec:	4013      	ands	r3, r2
 80004ee:	6043      	str	r3, [r0, #4]
  }
}
 80004f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	6843      	ldr	r3, [r0, #4]
 80004f6:	0452      	lsls	r2, r2, #17
 80004f8:	4313      	orrs	r3, r2
 80004fa:	6043      	str	r3, [r0, #4]
 80004fc:	e7f8      	b.n	80004f0 <I2C_ReloadCmd+0xc>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	feffffff 	.word	0xfeffffff

08000504 <I2C_NumberOfBytesConfig>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8000504:	6842      	ldr	r2, [r0, #4]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <I2C_NumberOfBytesConfig+0x10>)

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8000508:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 800050a:	4013      	ands	r3, r2

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 800050c:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 800050e:	6041      	str	r1, [r0, #4]
}  
 8000510:	4770      	bx	lr
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	ff00ffff 	.word	0xff00ffff

08000518 <I2C_MasterRequestConfig>:
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 8000518:	2900      	cmp	r1, #0
 800051a:	d005      	beq.n	8000528 <I2C_MasterRequestConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	6843      	ldr	r3, [r0, #4]
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	4313      	orrs	r3, r2
 8000524:	6043      	str	r3, [r0, #4]
  }
}  
 8000526:	4770      	bx	lr
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 8000528:	6842      	ldr	r2, [r0, #4]
 800052a:	4b02      	ldr	r3, [pc, #8]	; (8000534 <I2C_MasterRequestConfig+0x1c>)
 800052c:	4013      	ands	r3, r2
 800052e:	6043      	str	r3, [r0, #4]
 8000530:	e7f9      	b.n	8000526 <I2C_MasterRequestConfig+0xe>
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	fffffbff 	.word	0xfffffbff

08000538 <I2C_GenerateSTART>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000538:	2900      	cmp	r1, #0
 800053a:	d104      	bne.n	8000546 <I2C_GenerateSTART+0xe>
    I2Cx->CR2 |= I2C_CR2_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 800053c:	6842      	ldr	r2, [r0, #4]
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <I2C_GenerateSTART+0x1c>)
 8000540:	4013      	ands	r3, r2
 8000542:	6043      	str	r3, [r0, #4]
  }
}  
 8000544:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	6843      	ldr	r3, [r0, #4]
 800054a:	0192      	lsls	r2, r2, #6
 800054c:	4313      	orrs	r3, r2
 800054e:	6043      	str	r3, [r0, #4]
 8000550:	e7f8      	b.n	8000544 <I2C_GenerateSTART+0xc>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	ffffdfff 	.word	0xffffdfff

08000558 <I2C_GenerateSTOP>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000558:	2900      	cmp	r1, #0
 800055a:	d104      	bne.n	8000566 <I2C_GenerateSTOP+0xe>
    I2Cx->CR2 |= I2C_CR2_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 800055c:	6842      	ldr	r2, [r0, #4]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <I2C_GenerateSTOP+0x1c>)
 8000560:	4013      	ands	r3, r2
 8000562:	6043      	str	r3, [r0, #4]
  }
}  
 8000564:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	6843      	ldr	r3, [r0, #4]
 800056a:	01d2      	lsls	r2, r2, #7
 800056c:	4313      	orrs	r3, r2
 800056e:	6043      	str	r3, [r0, #4]
 8000570:	e7f8      	b.n	8000564 <I2C_GenerateSTOP+0xc>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	ffffbfff 	.word	0xffffbfff

08000578 <I2C_10BitAddressHeaderCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000578:	2900      	cmp	r1, #0
 800057a:	d104      	bne.n	8000586 <I2C_10BitAddressHeaderCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 800057c:	6842      	ldr	r2, [r0, #4]
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <I2C_10BitAddressHeaderCmd+0x1c>)
 8000580:	4013      	ands	r3, r2
 8000582:	6043      	str	r3, [r0, #4]
  }
}    
 8000584:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	6843      	ldr	r3, [r0, #4]
 800058a:	0152      	lsls	r2, r2, #5
 800058c:	4313      	orrs	r3, r2
 800058e:	6043      	str	r3, [r0, #4]
 8000590:	e7f8      	b.n	8000584 <I2C_10BitAddressHeaderCmd+0xc>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	ffffefff 	.word	0xffffefff

08000598 <I2C_AcknowledgeConfig>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000598:	2900      	cmp	r1, #0
 800059a:	d105      	bne.n	80005a8 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	6843      	ldr	r3, [r0, #4]
 80005a0:	0212      	lsls	r2, r2, #8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	6043      	str	r3, [r0, #4]
  }
}
 80005a6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 80005a8:	6842      	ldr	r2, [r0, #4]
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <I2C_AcknowledgeConfig+0x1c>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	6043      	str	r3, [r0, #4]
 80005b0:	e7f9      	b.n	80005a6 <I2C_AcknowledgeConfig+0xe>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	ffff7fff 	.word	0xffff7fff

080005b8 <I2C_GetAddressMatched>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 80005b8:	23fe      	movs	r3, #254	; 0xfe
 80005ba:	6980      	ldr	r0, [r0, #24]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	4018      	ands	r0, r3
 80005c0:	0c00      	lsrs	r0, r0, #16
}
 80005c2:	4770      	bx	lr

080005c4 <I2C_GetTransferDirection>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 80005c4:	6980      	ldr	r0, [r0, #24]
 80005c6:	03c0      	lsls	r0, r0, #15
    direction = I2C_Direction_Transmitter;
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 80005c8:	0fc0      	lsrs	r0, r0, #31
 80005ca:	0280      	lsls	r0, r0, #10
  }  
  return direction;
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80005d0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80005d2:	6844      	ldr	r4, [r0, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80005d4:	4d05      	ldr	r5, [pc, #20]	; (80005ec <I2C_TransferHandling+0x1c>)
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80005d6:	0589      	lsls	r1, r1, #22
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80005d8:	402c      	ands	r4, r5
 80005da:	9d03      	ldr	r5, [sp, #12]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80005dc:	0d89      	lsrs	r1, r1, #22
 80005de:	432c      	orrs	r4, r5
 80005e0:	4323      	orrs	r3, r4
 80005e2:	430b      	orrs	r3, r1
 80005e4:	0412      	lsls	r2, r2, #16
 80005e6:	4313      	orrs	r3, r2
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80005e8:	6043      	str	r3, [r0, #4]
}
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	fc009800 	.word	0xfc009800

080005f0 <I2C_SMBusAlertCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005f0:	2900      	cmp	r1, #0
 80005f2:	d104      	bne.n	80005fe <I2C_SMBusAlertCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 80005f4:	6802      	ldr	r2, [r0, #0]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <I2C_SMBusAlertCmd+0x1c>)
 80005f8:	4013      	ands	r3, r2
 80005fa:	6003      	str	r3, [r0, #0]
  }
}
 80005fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	4313      	orrs	r3, r2
 8000606:	6003      	str	r3, [r0, #0]
 8000608:	e7f8      	b.n	80005fc <I2C_SMBusAlertCmd+0xc>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	ffbfffff 	.word	0xffbfffff

08000610 <I2C_ClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000610:	2900      	cmp	r1, #0
 8000612:	d104      	bne.n	800061e <I2C_ClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8000614:	6942      	ldr	r2, [r0, #20]
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <I2C_ClockTimeoutCmd+0x1c>)
 8000618:	4013      	ands	r3, r2
 800061a:	6143      	str	r3, [r0, #20]
  }
}
 800061c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	6943      	ldr	r3, [r0, #20]
 8000622:	0212      	lsls	r2, r2, #8
 8000624:	4313      	orrs	r3, r2
 8000626:	6143      	str	r3, [r0, #20]
 8000628:	e7f8      	b.n	800061c <I2C_ClockTimeoutCmd+0xc>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	ffff7fff 	.word	0xffff7fff

08000630 <I2C_ExtendedClockTimeoutCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8000630:	6943      	ldr	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <I2C_ExtendedClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	6143      	str	r3, [r0, #20]
  }
}
 800063c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0612      	lsls	r2, r2, #24
 8000642:	4313      	orrs	r3, r2
 8000644:	6143      	str	r3, [r0, #20]
 8000646:	e7f9      	b.n	800063c <I2C_ExtendedClockTimeoutCmd+0xc>

08000648 <I2C_IdleClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000648:	2900      	cmp	r1, #0
 800064a:	d104      	bne.n	8000656 <I2C_IdleClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 800064c:	6942      	ldr	r2, [r0, #20]
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <I2C_IdleClockTimeoutCmd+0x1c>)
 8000650:	4013      	ands	r3, r2
 8000652:	6143      	str	r3, [r0, #20]
  }
}
 8000654:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	6943      	ldr	r3, [r0, #20]
 800065a:	0152      	lsls	r2, r2, #5
 800065c:	4313      	orrs	r3, r2
 800065e:	6143      	str	r3, [r0, #20]
 8000660:	e7f8      	b.n	8000654 <I2C_IdleClockTimeoutCmd+0xc>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	ffffefff 	.word	0xffffefff

08000668 <I2C_TimeoutAConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8000668:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 800066a:	0509      	lsls	r1, r1, #20
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 800066c:	0b1b      	lsrs	r3, r3, #12
 800066e:	031b      	lsls	r3, r3, #12

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8000670:	0d09      	lsrs	r1, r1, #20
 8000672:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8000674:	6141      	str	r1, [r0, #20]
}
 8000676:	4770      	bx	lr

08000678 <I2C_TimeoutBConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8000678:	6942      	ldr	r2, [r0, #20]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <I2C_TimeoutBConfig+0x14>)

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 800067c:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 800067e:	4013      	ands	r3, r2

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <I2C_TimeoutBConfig+0x18>)
 8000682:	4011      	ands	r1, r2
 8000684:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8000686:	6141      	str	r1, [r0, #20]
}
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	f000ffff 	.word	0xf000ffff
 8000690:	0fff0000 	.word	0x0fff0000

08000694 <I2C_CalculatePEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000694:	2900      	cmp	r1, #0
 8000696:	d104      	bne.n	80006a2 <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= I2C_CR1_PECEN;   
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 8000698:	6802      	ldr	r2, [r0, #0]
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <I2C_CalculatePEC+0x1c>)
 800069c:	4013      	ands	r3, r2
 800069e:	6003      	str	r3, [r0, #0]
  }
}
 80006a0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	6803      	ldr	r3, [r0, #0]
 80006a6:	0412      	lsls	r2, r2, #16
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6003      	str	r3, [r0, #0]
 80006ac:	e7f8      	b.n	80006a0 <I2C_CalculatePEC+0xc>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	ff7fffff 	.word	0xff7fffff

080006b4 <I2C_PECRequestCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d104      	bne.n	80006c2 <I2C_PECRequestCmd+0xe>
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 80006b8:	6802      	ldr	r2, [r0, #0]
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <I2C_PECRequestCmd+0x1c>)
 80006bc:	4013      	ands	r3, r2
 80006be:	6003      	str	r3, [r0, #0]
  }
}
 80006c0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6003      	str	r3, [r0, #0]
 80006cc:	e7f8      	b.n	80006c0 <I2C_PECRequestCmd+0xc>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	fbffffff 	.word	0xfbffffff

080006d4 <I2C_GetPEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 80006d4:	6a00      	ldr	r0, [r0, #32]
 80006d6:	b2c0      	uxtb	r0, r0
}
 80006d8:	4770      	bx	lr
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <I2C_ReadRegister>:
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 80006dc:	2300      	movs	r3, #0
  *            @arg I2C_Register_RXDR: RXDR register.
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80006de:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80006e0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 80006e2:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80006e4:	9b01      	ldr	r3, [sp, #4]
 80006e6:	18c9      	adds	r1, r1, r3
 80006e8:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	6818      	ldr	r0, [r3, #0]
}
 80006ee:	b002      	add	sp, #8
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)

080006f4 <I2C_SendData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 80006f4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006f6:	4770      	bx	lr

080006f8 <I2C_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 80006f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80006fa:	b2c0      	uxtb	r0, r0
}  
 80006fc:	4770      	bx	lr
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <I2C_DMACmd>:
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8000700:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 8000702:	2a00      	cmp	r2, #0
 8000704:	d102      	bne.n	800070c <I2C_DMACmd+0xc>
    I2Cx->CR1 |= I2C_DMAReq;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8000706:	438b      	bics	r3, r1
 8000708:	6003      	str	r3, [r0, #0]
  }
}
 800070a:	4770      	bx	lr
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 800070c:	4319      	orrs	r1, r3
 800070e:	6001      	str	r1, [r0, #0]
 8000710:	e7fb      	b.n	800070a <I2C_DMACmd+0xa>
 8000712:	46c0      	nop			; (mov r8, r8)

08000714 <I2C_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000714:	6980      	ldr	r0, [r0, #24]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8000716:	4008      	ands	r0, r1
  
  if(tmpreg != 0)
 8000718:	1e41      	subs	r1, r0, #1
 800071a:	4188      	sbcs	r0, r1
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  return bitstatus;
 800071c:	b2c0      	uxtb	r0, r0
} 
 800071e:	4770      	bx	lr

08000720 <I2C_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8000720:	61c1      	str	r1, [r0, #28]
  }
 8000722:	4770      	bx	lr

08000724 <I2C_GetITStatus>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if((I2C_IT & ERROR_IT_MASK) != 0)
 8000724:	23fc      	movs	r3, #252	; 0xfc
 8000726:	019b      	lsls	r3, r3, #6
 8000728:	4219      	tst	r1, r3
 800072a:	d00a      	beq.n	8000742 <I2C_GetITStatus+0x1e>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	6803      	ldr	r3, [r0, #0]
 8000730:	4013      	ands	r3, r2
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000732:	6982      	ldr	r2, [r0, #24]
    bitstatus = SET;
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8000734:	2000      	movs	r0, #0

  /* Get flag status */
  tmpreg &= I2C_IT;

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8000736:	420a      	tst	r2, r1
 8000738:	d002      	beq.n	8000740 <I2C_GetITStatus+0x1c>
 800073a:	1e58      	subs	r0, r3, #1
 800073c:	4183      	sbcs	r3, r0
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800073e:	b2d8      	uxtb	r0, r3
    bitstatus = RESET;
  }

  /* Return the I2C_IT status */
  return bitstatus;
}
 8000740:	4770      	bx	lr
  if((I2C_IT & ERROR_IT_MASK) != 0)
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
  }
  /* If TC interrupt */
  else if((I2C_IT & TC_IT_MASK) != 0)
 8000742:	23c0      	movs	r3, #192	; 0xc0
 8000744:	420b      	tst	r3, r1
 8000746:	d003      	beq.n	8000750 <I2C_GetITStatus+0x2c>
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	4013      	ands	r3, r2
 800074e:	e7f0      	b.n	8000732 <I2C_GetITStatus+0xe>
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	400b      	ands	r3, r1
 8000754:	e7ed      	b.n	8000732 <I2C_GetITStatus+0xe>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <I2C_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8000758:	61c1      	str	r1, [r0, #28]
}
 800075a:	4770      	bx	lr

0800075c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800075c:	2101      	movs	r1, #1
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <RCC_DeInit+0x48>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000766:	6858      	ldr	r0, [r3, #4]
 8000768:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <RCC_DeInit+0x4c>)
 800076a:	4002      	ands	r2, r0
 800076c:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <RCC_DeInit+0x50>)
 8000772:	4002      	ands	r2, r0
 8000774:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <RCC_DeInit+0x54>)
 800077a:	4002      	ands	r2, r0
 800077c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <RCC_DeInit+0x58>)
 8000782:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000784:	200f      	movs	r0, #15

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000786:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078a:	4382      	bics	r2, r0
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800078e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000790:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <RCC_DeInit+0x5c>)
 8000792:	4002      	ands	r2, r0
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000798:	438a      	bics	r2, r1
 800079a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	4770      	bx	lr
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000
 80007a8:	f8ffb80c 	.word	0xf8ffb80c
 80007ac:	fef6ffff 	.word	0xfef6ffff
 80007b0:	fffbffff 	.word	0xfffbffff
 80007b4:	ffc0ffff 	.word	0xffc0ffff
 80007b8:	fffffeac 	.word	0xfffffeac

080007bc <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80007bc:	2200      	movs	r2, #0
 80007be:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <RCC_HSEConfig+0xc>)
 80007c0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80007c2:	7018      	strb	r0, [r3, #0]

}
 80007c4:	4770      	bx	lr
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40021002 	.word	0x40021002

080007cc <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80007cc:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80007ce:	4a03      	ldr	r2, [pc, #12]	; (80007dc <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80007d0:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80007d2:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80007d4:	438b      	bics	r3, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80007d6:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 80007d8:	6010      	str	r0, [r2, #0]
}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000

080007e0 <RCC_HSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d104      	bne.n	80007f0 <RCC_HSICmd+0x10>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 80007e6:	2101      	movs	r1, #1
 80007e8:	6813      	ldr	r3, [r2, #0]
 80007ea:	438b      	bics	r3, r1
 80007ec:	6013      	str	r3, [r2, #0]
  }
}
 80007ee:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80007f0:	2301      	movs	r3, #1
 80007f2:	6811      	ldr	r1, [r2, #0]
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e7f9      	b.n	80007ee <RCC_HSICmd+0xe>
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000

08000800 <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000800:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8000802:	4a03      	ldr	r2, [pc, #12]	; (8000810 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8000804:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8000806:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000808:	438b      	bics	r3, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800080a:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 800080c:	6350      	str	r0, [r2, #52]	; 0x34
}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <RCC_HSI14Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000816:	2800      	cmp	r0, #0
 8000818:	d104      	bne.n	8000824 <RCC_HSI14Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800081a:	2101      	movs	r1, #1
 800081c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800081e:	438b      	bics	r3, r1
 8000820:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8000822:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000824:	2301      	movs	r3, #1
 8000826:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000828:	430b      	orrs	r3, r1
 800082a:	6353      	str	r3, [r2, #52]	; 0x34
 800082c:	e7f9      	b.n	8000822 <RCC_HSI14Cmd+0xe>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40021000 	.word	0x40021000

08000834 <RCC_HSI14ADCRequestCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000836:	2800      	cmp	r0, #0
 8000838:	d104      	bne.n	8000844 <RCC_HSI14ADCRequestCmd+0x10>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 800083a:	2304      	movs	r3, #4
 800083c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800083e:	430b      	orrs	r3, r1
 8000840:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8000842:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000844:	2104      	movs	r1, #4
 8000846:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000848:	438b      	bics	r3, r1
 800084a:	6353      	str	r3, [r2, #52]	; 0x34
 800084c:	e7f9      	b.n	8000842 <RCC_HSI14ADCRequestCmd+0xe>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40021000 	.word	0x40021000

08000854 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000854:	2101      	movs	r1, #1
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <RCC_LSEConfig+0x1c>)
 8000858:	6a1a      	ldr	r2, [r3, #32]
 800085a:	438a      	bics	r2, r1

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800085c:	2104      	movs	r1, #4
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 800085e:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8000860:	6a1a      	ldr	r2, [r3, #32]
 8000862:	438a      	bics	r2, r1
 8000864:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8000866:	6a1a      	ldr	r2, [r3, #32]
 8000868:	4310      	orrs	r0, r2
 800086a:	6218      	str	r0, [r3, #32]
}
 800086c:	4770      	bx	lr
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000

08000874 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000874:	2118      	movs	r1, #24
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <RCC_LSEDriveConfig+0x14>)
 8000878:	6a1a      	ldr	r2, [r3, #32]
 800087a:	438a      	bics	r2, r1
 800087c:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800087e:	6a1a      	ldr	r2, [r3, #32]
 8000880:	4310      	orrs	r0, r2
 8000882:	6218      	str	r0, [r3, #32]
}
 8000884:	4770      	bx	lr
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <RCC_LSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800088e:	2800      	cmp	r0, #0
 8000890:	d104      	bne.n	800089c <RCC_LSICmd+0x10>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 8000892:	2101      	movs	r1, #1
 8000894:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000896:	438b      	bics	r3, r1
 8000898:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 800089a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800089c:	2301      	movs	r3, #1
 800089e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6253      	str	r3, [r2, #36]	; 0x24
 80008a4:	e7f9      	b.n	800089a <RCC_LSICmd+0xe>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80008ae:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <RCC_PLLConfig+0x1c>)
 80008b2:	685c      	ldr	r4, [r3, #4]
 80008b4:	4022      	ands	r2, r4
 80008b6:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	4311      	orrs	r1, r2
 80008bc:	4308      	orrs	r0, r1
 80008be:	6058      	str	r0, [r3, #4]
}
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000
 80008c8:	ffc2ffff 	.word	0xffc2ffff

080008cc <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <RCC_PLLCmd+0x1c>)
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d104      	bne.n	80008dc <RCC_PLLCmd+0x10>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80008d2:	6811      	ldr	r1, [r2, #0]
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <RCC_PLLCmd+0x20>)
 80008d6:	400b      	ands	r3, r1
 80008d8:	6013      	str	r3, [r2, #0]
  }
}
 80008da:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	0449      	lsls	r1, r1, #17
 80008e2:	430b      	orrs	r3, r1
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e7f8      	b.n	80008da <RCC_PLLCmd+0xe>
 80008e8:	40021000 	.word	0x40021000
 80008ec:	feffffff 	.word	0xfeffffff

080008f0 <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80008f0:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80008f2:	4a03      	ldr	r2, [pc, #12]	; (8000900 <RCC_PREDIV1Config+0x10>)
 80008f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80008f6:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80008f8:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80008fa:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 80008fc:	4770      	bx	lr
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000

08000904 <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <RCC_ClockSecuritySystemCmd+0x1c>)
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000906:	2800      	cmp	r0, #0
 8000908:	d104      	bne.n	8000914 <RCC_ClockSecuritySystemCmd+0x10>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 800090a:	6811      	ldr	r1, [r2, #0]
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <RCC_ClockSecuritySystemCmd+0x20>)
 800090e:	400b      	ands	r3, r1
 8000910:	6013      	str	r3, [r2, #0]
  }
}
 8000912:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	0309      	lsls	r1, r1, #12
 800091a:	430b      	orrs	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e7f8      	b.n	8000912 <RCC_ClockSecuritySystemCmd+0xe>
 8000920:	40021000 	.word	0x40021000
 8000924:	fff7ffff 	.word	0xfff7ffff

08000928 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <RCC_MCOConfig+0x8>)
 800092a:	7018      	strb	r0, [r3, #0]
}
 800092c:	4770      	bx	lr
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40021007 	.word	0x40021007

08000934 <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000934:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000936:	4a03      	ldr	r2, [pc, #12]	; (8000944 <RCC_SYSCLKConfig+0x10>)
 8000938:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800093a:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800093c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800093e:	6050      	str	r0, [r2, #4]
}
 8000940:	4770      	bx	lr
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40021000 	.word	0x40021000

08000948 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000948:	200c      	movs	r0, #12
 800094a:	4b02      	ldr	r3, [pc, #8]	; (8000954 <RCC_GetSYSCLKSource+0xc>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4018      	ands	r0, r3
}
 8000950:	4770      	bx	lr
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40021000 	.word	0x40021000

08000958 <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000958:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 800095a:	4a03      	ldr	r2, [pc, #12]	; (8000968 <RCC_HCLKConfig+0x10>)
 800095c:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800095e:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000960:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000962:	6050      	str	r0, [r2, #4]
}
 8000964:	4770      	bx	lr
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40021000 	.word	0x40021000

0800096c <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000970:	6851      	ldr	r1, [r2, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000972:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000974:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000976:	6050      	str	r0, [r2, #4]
}
 8000978:	4770      	bx	lr
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40021000 	.word	0x40021000
 8000980:	fffff8ff 	.word	0xfffff8ff

08000984 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <RCC_ADCCLKConfig+0x28>)
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <RCC_ADCCLKConfig+0x2c>)
 8000988:	6859      	ldr	r1, [r3, #4]
 800098a:	400a      	ands	r2, r1
 800098c:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 800098e:	6859      	ldr	r1, [r3, #4]
 8000990:	0402      	lsls	r2, r0, #16
 8000992:	0c12      	lsrs	r2, r2, #16
 8000994:	430a      	orrs	r2, r1
 8000996:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000998:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800099a:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 800099c:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800099e:	400a      	ands	r2, r1
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 80009a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009a4:	4310      	orrs	r0, r2
 80009a6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80009a8:	4770      	bx	lr
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	ffffbfff 	.word	0xffffbfff
 80009b4:	fffffeff 	.word	0xfffffeff

080009b8 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <RCC_CECCLKConfig+0x14>)
 80009bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009be:	438a      	bics	r2, r1
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 80009c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c4:	4310      	orrs	r0, r2
 80009c6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80009c8:	4770      	bx	lr
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80009d0:	2110      	movs	r1, #16
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <RCC_I2CCLKConfig+0x14>)
 80009d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d6:	438a      	bics	r2, r1
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80009da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009dc:	4310      	orrs	r0, r2
 80009de:	6318      	str	r0, [r3, #48]	; 0x30
}
 80009e0:	4770      	bx	lr
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40021000 	.word	0x40021000

080009e8 <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80009e8:	2103      	movs	r1, #3
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <RCC_USARTCLKConfig+0x14>)
 80009ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ee:	438a      	bics	r2, r1
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80009f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f4:	4310      	orrs	r0, r2
 80009f6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a00:	210c      	movs	r1, #12
 8000a02:	4a3b      	ldr	r2, [pc, #236]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a04:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a06:	6853      	ldr	r3, [r2, #4]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a08:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a0a:	400b      	ands	r3, r1
  
  switch (tmp)
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d001      	beq.n	8000a14 <RCC_GetClocksFreq+0x14>
 8000a10:	2b08      	cmp	r3, #8
 8000a12:	d051      	beq.n	8000ab8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a14:	4837      	ldr	r0, [pc, #220]	; (8000af4 <RCC_GetClocksFreq+0xf4>)
 8000a16:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a18:	4935      	ldr	r1, [pc, #212]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8000a1a:	4d37      	ldr	r5, [pc, #220]	; (8000af8 <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a1c:	684b      	ldr	r3, [r1, #4]
 8000a1e:	061b      	lsls	r3, r3, #24
  tmp = tmp >> 4;
 8000a20:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 8000a22:	5cea      	ldrb	r2, [r5, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a24:	1c03      	adds	r3, r0, #0
 8000a26:	40d3      	lsrs	r3, r2
 8000a28:	1c1a      	adds	r2, r3, #0
 8000a2a:	6063      	str	r3, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000a2c:	684b      	ldr	r3, [r1, #4]
 8000a2e:	055b      	lsls	r3, r3, #21
  tmp = tmp >> 8;
 8000a30:	0f5b      	lsrs	r3, r3, #29
  presc = APBAHBPrescTable[tmp];
 8000a32:	5ceb      	ldrb	r3, [r5, r3]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a34:	40da      	lsrs	r2, r3
 8000a36:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8000a38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	d421      	bmi.n	8000a82 <RCC_GetClocksFreq+0x82>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <RCC_GetClocksFreq+0xfc>)
 8000a40:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	065b      	lsls	r3, r3, #25
 8000a48:	d424      	bmi.n	8000a94 <RCC_GetClocksFreq+0x94>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <RCC_GetClocksFreq+0x100>)
 8000a4c:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	06db      	lsls	r3, r3, #27
 8000a54:	d425      	bmi.n	8000aa2 <RCC_GetClocksFreq+0xa2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000a58:	4925      	ldr	r1, [pc, #148]	; (8000af0 <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000a5a:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000a60:	422b      	tst	r3, r5
 8000a62:	d024      	beq.n	8000aae <RCC_GetClocksFreq+0xae>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a64:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000a66:	401a      	ands	r2, r3
 8000a68:	2a01      	cmp	r2, #1
 8000a6a:	d03a      	beq.n	8000ae2 <RCC_GetClocksFreq+0xe2>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a6c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000a6e:	401a      	ands	r2, r3
 8000a70:	2a02      	cmp	r2, #2
 8000a72:	d038      	beq.n	8000ae6 <RCC_GetClocksFreq+0xe6>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a74:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d101      	bne.n	8000a80 <RCC_GetClocksFreq+0x80>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <RCC_GetClocksFreq+0xf4>)
 8000a7e:	61a3      	str	r3, [r4, #24]
  }
}
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8000a82:	684b      	ldr	r3, [r1, #4]
 8000a84:	045b      	lsls	r3, r3, #17
 8000a86:	d414      	bmi.n	8000ab2 <RCC_GetClocksFreq+0xb2>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8000a88:	0853      	lsrs	r3, r2, #1
 8000a8a:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	065b      	lsls	r3, r3, #25
 8000a92:	d5da      	bpl.n	8000a4a <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	06db      	lsls	r3, r3, #27
 8000aa0:	d5d9      	bpl.n	8000a56 <RCC_GetClocksFreq+0x56>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	4912      	ldr	r1, [pc, #72]	; (8000af0 <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aa6:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000aa8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000aaa:	422b      	tst	r3, r5
 8000aac:	d1da      	bne.n	8000a64 <RCC_GetClocksFreq+0x64>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000aae:	61a2      	str	r2, [r4, #24]
 8000ab0:	e7e6      	b.n	8000a80 <RCC_GetClocksFreq+0x80>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000ab2:	0893      	lsrs	r3, r2, #2
 8000ab4:	60e3      	str	r3, [r4, #12]
 8000ab6:	e7c4      	b.n	8000a42 <RCC_GetClocksFreq+0x42>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000ab8:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000aba:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000abc:	0280      	lsls	r0, r0, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000abe:	0f00      	lsrs	r0, r0, #28
 8000ac0:	1c85      	adds	r5, r0, #2
      
      if (pllsource == 0x00)
 8000ac2:	03db      	lsls	r3, r3, #15
 8000ac4:	d403      	bmi.n	8000ace <RCC_GetClocksFreq+0xce>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <RCC_GetClocksFreq+0x104>)
 8000ac8:	4368      	muls	r0, r5
 8000aca:	6020      	str	r0, [r4, #0]
 8000acc:	e7a4      	b.n	8000a18 <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000ace:	210f      	movs	r1, #15
 8000ad0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <RCC_GetClocksFreq+0xf4>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000ad8:	f001 ff9c 	bl	8002a14 <__aeabi_uidiv>
 8000adc:	4368      	muls	r0, r5
 8000ade:	6020      	str	r0, [r4, #0]
 8000ae0:	e79a      	b.n	8000a18 <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ae2:	61a0      	str	r0, [r4, #24]
 8000ae4:	e7cc      	b.n	8000a80 <RCC_GetClocksFreq+0x80>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	61a3      	str	r3, [r4, #24]
 8000aec:	e7c8      	b.n	8000a80 <RCC_GetClocksFreq+0x80>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000
 8000af4:	007a1200 	.word	0x007a1200
 8000af8:	20000000 	.word	0x20000000
 8000afc:	00d59f80 	.word	0x00d59f80
 8000b00:	00008012 	.word	0x00008012
 8000b04:	003d0900 	.word	0x003d0900

08000b08 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000b08:	4a02      	ldr	r2, [pc, #8]	; (8000b14 <RCC_RTCCLKConfig+0xc>)
 8000b0a:	6a13      	ldr	r3, [r2, #32]
 8000b0c:	4318      	orrs	r0, r3
 8000b0e:	6210      	str	r0, [r2, #32]
}
 8000b10:	4770      	bx	lr
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000

08000b18 <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <RCC_RTCCLKCmd+0x1c>)
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d104      	bne.n	8000b28 <RCC_RTCCLKCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000b1e:	6a11      	ldr	r1, [r2, #32]
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <RCC_RTCCLKCmd+0x20>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	6213      	str	r3, [r2, #32]
  }
}
 8000b26:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	6a13      	ldr	r3, [r2, #32]
 8000b2c:	0209      	lsls	r1, r1, #8
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	6213      	str	r3, [r2, #32]
 8000b32:	e7f8      	b.n	8000b26 <RCC_RTCCLKCmd+0xe>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	ffff7fff 	.word	0xffff7fff

08000b3c <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <RCC_BackupResetCmd+0x1c>)
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d104      	bne.n	8000b4c <RCC_BackupResetCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8000b42:	6a11      	ldr	r1, [r2, #32]
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <RCC_BackupResetCmd+0x20>)
 8000b46:	400b      	ands	r3, r1
 8000b48:	6213      	str	r3, [r2, #32]
  }
}
 8000b4a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	6a13      	ldr	r3, [r2, #32]
 8000b50:	0249      	lsls	r1, r1, #9
 8000b52:	430b      	orrs	r3, r1
 8000b54:	6213      	str	r3, [r2, #32]
 8000b56:	e7f8      	b.n	8000b4a <RCC_BackupResetCmd+0xe>
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	fffeffff 	.word	0xfffeffff

08000b60 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <RCC_AHBPeriphClockCmd+0x14>)
 8000b62:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b64:	2900      	cmp	r1, #0
 8000b66:	d102      	bne.n	8000b6e <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000b68:	4383      	bics	r3, r0
 8000b6a:	6153      	str	r3, [r2, #20]
  }
}
 8000b6c:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000b6e:	4318      	orrs	r0, r3
 8000b70:	6150      	str	r0, [r2, #20]
 8000b72:	e7fb      	b.n	8000b6c <RCC_AHBPeriphClockCmd+0xc>
 8000b74:	40021000 	.word	0x40021000

08000b78 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <RCC_APB2PeriphClockCmd+0x14>)
 8000b7a:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d102      	bne.n	8000b86 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b80:	4383      	bics	r3, r0
 8000b82:	6193      	str	r3, [r2, #24]
  }
}
 8000b84:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b86:	4318      	orrs	r0, r3
 8000b88:	6190      	str	r0, [r2, #24]
 8000b8a:	e7fb      	b.n	8000b84 <RCC_APB2PeriphClockCmd+0xc>
 8000b8c:	40021000 	.word	0x40021000

08000b90 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <RCC_APB1PeriphClockCmd+0x14>)
 8000b92:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b94:	2900      	cmp	r1, #0
 8000b96:	d102      	bne.n	8000b9e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b98:	4383      	bics	r3, r0
 8000b9a:	61d3      	str	r3, [r2, #28]
  }
}
 8000b9c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b9e:	4318      	orrs	r0, r3
 8000ba0:	61d0      	str	r0, [r2, #28]
 8000ba2:	e7fb      	b.n	8000b9c <RCC_APB1PeriphClockCmd+0xc>
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <RCC_AHBPeriphResetCmd+0x14>)
 8000baa:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d102      	bne.n	8000bb6 <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000bb0:	4383      	bics	r3, r0
 8000bb2:	6293      	str	r3, [r2, #40]	; 0x28
  }
}
 8000bb4:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000bb6:	4318      	orrs	r0, r3
 8000bb8:	6290      	str	r0, [r2, #40]	; 0x28
 8000bba:	e7fb      	b.n	8000bb4 <RCC_AHBPeriphResetCmd+0xc>
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <RCC_APB2PeriphResetCmd+0x14>)
 8000bc2:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d102      	bne.n	8000bce <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000bc8:	4383      	bics	r3, r0
 8000bca:	60d3      	str	r3, [r2, #12]
  }
}
 8000bcc:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000bce:	4318      	orrs	r0, r3
 8000bd0:	60d0      	str	r0, [r2, #12]
 8000bd2:	e7fb      	b.n	8000bcc <RCC_APB2PeriphResetCmd+0xc>
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <RCC_APB1PeriphResetCmd+0x14>)
 8000bda:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d102      	bne.n	8000be6 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000be0:	4383      	bics	r3, r0
 8000be2:	6113      	str	r3, [r2, #16]
  }
}
 8000be4:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000be6:	4318      	orrs	r0, r3
 8000be8:	6110      	str	r0, [r2, #16]
 8000bea:	e7fb      	b.n	8000be4 <RCC_APB1PeriphResetCmd+0xc>
 8000bec:	40021000 	.word	0x40021000

08000bf0 <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <RCC_ITConfig+0x14>)
 8000bf2:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d102      	bne.n	8000bfe <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8000bf8:	4383      	bics	r3, r0
 8000bfa:	7013      	strb	r3, [r2, #0]
  }
}
 8000bfc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000bfe:	4318      	orrs	r0, r3
 8000c00:	7010      	strb	r0, [r2, #0]
 8000c02:	e7fb      	b.n	8000bfc <RCC_ITConfig+0xc>
 8000c04:	40021009 	.word	0x40021009

08000c08 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000c08:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 8000c0a:	d10b      	bne.n	8000c24 <RCC_GetFlagStatus+0x1c>
  {
    statusreg = RCC->CR;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <RCC_GetFlagStatus+0x38>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c10:	221f      	movs	r2, #31
 8000c12:	4010      	ands	r0, r2
 8000c14:	2201      	movs	r2, #1
 8000c16:	4082      	lsls	r2, r0
 8000c18:	1c10      	adds	r0, r2, #0
 8000c1a:	4018      	ands	r0, r3
 8000c1c:	1e43      	subs	r3, r0, #1
 8000c1e:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000c20:	b2c0      	uxtb	r0, r0
}
 8000c22:	4770      	bx	lr

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d004      	beq.n	8000c32 <RCC_GetFlagStatus+0x2a>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d005      	beq.n	8000c38 <RCC_GetFlagStatus+0x30>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <RCC_GetFlagStatus+0x38>)
 8000c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c30:	e7ee      	b.n	8000c10 <RCC_GetFlagStatus+0x8>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <RCC_GetFlagStatus+0x38>)
 8000c34:	6a1b      	ldr	r3, [r3, #32]
 8000c36:	e7eb      	b.n	8000c10 <RCC_GetFlagStatus+0x8>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000c38:	4b01      	ldr	r3, [pc, #4]	; (8000c40 <RCC_GetFlagStatus+0x38>)
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3c:	e7e8      	b.n	8000c10 <RCC_GetFlagStatus+0x8>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	40021000 	.word	0x40021000

08000c44 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000c44:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 8000c46:	2300      	movs	r3, #0
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000c48:	24a0      	movs	r4, #160	; 0xa0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000c4a:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 8000c4c:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000c4e:	00e4      	lsls	r4, r4, #3
 8000c50:	e001      	b.n	8000c56 <RCC_WaitForHSEStartUp+0x12>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d108      	bne.n	8000c68 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000c56:	2011      	movs	r0, #17
 8000c58:	f7ff ffd6 	bl	8000c08 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000c5c:	9b01      	ldr	r3, [sp, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	42a3      	cmp	r3, r4
 8000c66:	d1f4      	bne.n	8000c52 <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f7ff ffcd 	bl	8000c08 <RCC_GetFlagStatus>
 8000c6e:	1e43      	subs	r3, r0, #1
 8000c70:	4198      	sbcs	r0, r3
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000c72:	b2c0      	uxtb	r0, r0
}
 8000c74:	b002      	add	sp, #8
 8000c76:	bd10      	pop	{r4, pc}

08000c78 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <RCC_ClearFlag+0x10>)
 8000c7c:	0449      	lsls	r1, r1, #17
 8000c7e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000c84:	4770      	bx	lr
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40021000 	.word	0x40021000

08000c8c <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <RCC_GetITStatus+0x10>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	4018      	ands	r0, r3
 8000c92:	1e43      	subs	r3, r0, #1
 8000c94:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000c96:	b2c0      	uxtb	r0, r0
}
 8000c98:	4770      	bx	lr
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8000ca0:	4b01      	ldr	r3, [pc, #4]	; (8000ca8 <RCC_ClearITPendingBit+0x8>)
 8000ca2:	7018      	strb	r0, [r3, #0]
}
 8000ca4:	4770      	bx	lr
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	4002100a 	.word	0x4002100a

08000cac <u8g_DrawHBitmap>:
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	1c17      	adds	r7, r2, #0
 8000cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000cb4:	1c06      	adds	r6, r0, #0
  while( cnt > 0 )
 8000cb6:	1c14      	adds	r4, r2, #0
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 8000cb8:	9103      	str	r1, [sp, #12]
 8000cba:	18d5      	adds	r5, r2, r3
 8000cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000cbe:	1ae1      	subs	r1, r4, r3
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	00c9      	lsls	r1, r1, #3
 8000cc4:	1859      	adds	r1, r3, r1
 8000cc6:	b2c9      	uxtb	r1, r1
  while( cnt > 0 )
 8000cc8:	42ac      	cmp	r4, r5
 8000cca:	d008      	beq.n	8000cde <u8g_DrawHBitmap+0x32>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 8000ccc:	7823      	ldrb	r3, [r4, #0]
 8000cce:	1c30      	adds	r0, r6, #0
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	1c3a      	adds	r2, r7, #0
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f000 fd9c 	bl	8001812 <u8g_Draw8Pixel>
    bitmap++;
 8000cda:	3401      	adds	r4, #1
 8000cdc:	e7ee      	b.n	8000cbc <u8g_DrawHBitmap+0x10>
    cnt--;
    x+=8;
  }
}
 8000cde:	b005      	add	sp, #20
 8000ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce2 <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8000ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce4:	1c1d      	adds	r5, r3, #0
 8000ce6:	1c14      	adds	r4, r2, #0
 8000ce8:	b085      	sub	sp, #20
 8000cea:	ab0a      	add	r3, sp, #40	; 0x28
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	1c06      	adds	r6, r0, #0
 8000cf0:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8000cf2:	9a03      	ldr	r2, [sp, #12]
 8000cf4:	00eb      	lsls	r3, r5, #3
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	1c22      	adds	r2, r4, #0
    x+=8;
  }
}

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8000cfc:	1c0f      	adds	r7, r1, #0
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8000cfe:	f000 f911 	bl	8000f24 <u8g_IsBBXIntersection>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d014      	beq.n	8000d30 <u8g_DrawBitmap+0x4e>
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	18e3      	adds	r3, r4, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	9303      	str	r3, [sp, #12]
    return;
  while( h > 0 )
 8000d0e:	9b03      	ldr	r3, [sp, #12]
 8000d10:	429c      	cmp	r4, r3
 8000d12:	d00d      	beq.n	8000d30 <u8g_DrawBitmap+0x4e>
  {
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 8000d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d16:	1c22      	adds	r2, r4, #0
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	1c30      	adds	r0, r6, #0
 8000d1c:	1c2b      	adds	r3, r5, #0
 8000d1e:	1c39      	adds	r1, r7, #0
 8000d20:	f7ff ffc4 	bl	8000cac <u8g_DrawHBitmap>
 8000d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bitmap += cnt;
    y++;
 8000d26:	3401      	adds	r4, #1
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d2c:	b2e4      	uxtb	r4, r4
 8000d2e:	e7ee      	b.n	8000d0e <u8g_DrawBitmap+0x2c>
    h--;
  }
}
 8000d30:	b005      	add	sp, #20
 8000d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d34 <u8g_DrawHBitmapP>:


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	1c17      	adds	r7, r2, #0
 8000d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d3c:	1c06      	adds	r6, r0, #0
  while( cnt > 0 )
 8000d3e:	1c14      	adds	r4, r2, #0
  }
}


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8000d40:	9103      	str	r1, [sp, #12]
 8000d42:	18d5      	adds	r5, r2, r3
 8000d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d46:	1ae1      	subs	r1, r4, r3
 8000d48:	9b03      	ldr	r3, [sp, #12]
 8000d4a:	00c9      	lsls	r1, r1, #3
 8000d4c:	1859      	adds	r1, r3, r1
 8000d4e:	b2c9      	uxtb	r1, r1
  while( cnt > 0 )
 8000d50:	42ac      	cmp	r4, r5
 8000d52:	d008      	beq.n	8000d66 <u8g_DrawHBitmapP+0x32>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
 8000d54:	7823      	ldrb	r3, [r4, #0]
 8000d56:	1c30      	adds	r0, r6, #0
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	1c3a      	adds	r2, r7, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f000 fd58 	bl	8001812 <u8g_Draw8Pixel>
    bitmap++;
 8000d62:	3401      	adds	r4, #1
 8000d64:	e7ee      	b.n	8000d44 <u8g_DrawHBitmapP+0x10>
    cnt--;
    x+=8;
  }
}
 8000d66:	b005      	add	sp, #20
 8000d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d6a <u8g_DrawBitmapP>:

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8000d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6c:	1c1d      	adds	r5, r3, #0
 8000d6e:	1c14      	adds	r4, r2, #0
 8000d70:	b085      	sub	sp, #20
 8000d72:	ab0a      	add	r3, sp, #40	; 0x28
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	1c06      	adds	r6, r0, #0
 8000d78:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8000d7a:	9a03      	ldr	r2, [sp, #12]
 8000d7c:	00eb      	lsls	r3, r5, #3
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	1c22      	adds	r2, r4, #0
    x+=8;
  }
}

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8000d84:	1c0f      	adds	r7, r1, #0
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8000d86:	f000 f8cd 	bl	8000f24 <u8g_IsBBXIntersection>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d014      	beq.n	8000db8 <u8g_DrawBitmapP+0x4e>
 8000d8e:	9b03      	ldr	r3, [sp, #12]
 8000d90:	18e3      	adds	r3, r4, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	9303      	str	r3, [sp, #12]
    return;
  while( h > 0 )
 8000d96:	9b03      	ldr	r3, [sp, #12]
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d00d      	beq.n	8000db8 <u8g_DrawBitmapP+0x4e>
  {
    u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
 8000d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d9e:	1c22      	adds	r2, r4, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	1c30      	adds	r0, r6, #0
 8000da4:	1c2b      	adds	r3, r5, #0
 8000da6:	1c39      	adds	r1, r7, #0
 8000da8:	f7ff ffc4 	bl	8000d34 <u8g_DrawHBitmapP>
 8000dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bitmap += cnt;
    y++;
 8000dae:	3401      	adds	r4, #1
 8000db0:	195b      	adds	r3, r3, r5
 8000db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8000db4:	b2e4      	uxtb	r4, r4
 8000db6:	e7ee      	b.n	8000d96 <u8g_DrawBitmapP+0x2c>
    h--;
  }
}
 8000db8:	b005      	add	sp, #20
 8000dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dbc <u8g_DrawXBM>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	1c1d      	adds	r5, r3, #0
 8000dc0:	b08b      	sub	sp, #44	; 0x2c
 8000dc2:	ab10      	add	r3, sp, #64	; 0x40
 8000dc4:	781f      	ldrb	r7, [r3, #0]
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8000dc6:	1c2b      	adds	r3, r5, #0
 8000dc8:	9700      	str	r7, [sp, #0]
    } while ( w > 0 );
  }
}

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
 8000dca:	9003      	str	r0, [sp, #12]
 8000dcc:	1c0e      	adds	r6, r1, #0
 8000dce:	1c14      	adds	r4, r2, #0
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8000dd0:	f000 f8a8 	bl	8000f24 <u8g_IsBBXIntersection>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d049      	beq.n	8000e6c <u8g_DrawXBM+0xb0>

void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
 8000dd8:	1deb      	adds	r3, r5, #7
 8000dda:	b2db      	uxtb	r3, r3
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	19e7      	adds	r7, r4, r7
 8000de0:	9307      	str	r3, [sp, #28]
/*=========================================================================*/

static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
 8000de2:	3607      	adds	r6, #7
 8000de4:	b2fb      	uxtb	r3, r7
 8000de6:	9308      	str	r3, [sp, #32]
 8000de8:	b2f3      	uxtb	r3, r6
 8000dea:	9304      	str	r3, [sp, #16]
 8000dec:	9a04      	ldr	r2, [sp, #16]
 8000dee:	08eb      	lsrs	r3, r5, #3
 8000df0:	9305      	str	r3, [sp, #20]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	18d3      	adds	r3, r2, r3
    x+=8;
  }
  if ( w > 0 )
  {
    d = *bitmap;
    x -= 7;
 8000df6:	3b07      	subs	r3, #7
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	9309      	str	r3, [sp, #36]	; 0x24
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  
  while( h > 0 )
 8000dfc:	9b08      	ldr	r3, [sp, #32]
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	d034      	beq.n	8000e6c <u8g_DrawXBM+0xb0>
 8000e02:	1c2e      	adds	r6, r5, #0
 8000e04:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8000e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000e08:	1af9      	subs	r1, r7, r3
 8000e0a:	9b04      	ldr	r3, [sp, #16]
 8000e0c:	00c9      	lsls	r1, r1, #3
 8000e0e:	1859      	adds	r1, r3, r1
 8000e10:	b2c9      	uxtb	r1, r1

static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
 8000e12:	2e07      	cmp	r6, #7
 8000e14:	d90a      	bls.n	8000e2c <u8g_DrawXBM+0x70>
  {
    u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
 8000e16:	783b      	ldrb	r3, [r7, #0]
 8000e18:	9803      	ldr	r0, [sp, #12]
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	1c22      	adds	r2, r4, #0
 8000e1e:	2302      	movs	r3, #2
    bitmap++;
    w-= 8;
 8000e20:	3e08      	subs	r6, #8
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
  {
    u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
 8000e22:	f000 fcf6 	bl	8001812 <u8g_Draw8Pixel>
    bitmap++;
 8000e26:	3701      	adds	r7, #1
    w-= 8;
 8000e28:	b2f6      	uxtb	r6, r6
 8000e2a:	e7ec      	b.n	8000e06 <u8g_DrawXBM+0x4a>
 8000e2c:	9a05      	ldr	r2, [sp, #20]
 8000e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000e30:	189b      	adds	r3, r3, r2
 8000e32:	2207      	movs	r2, #7
 8000e34:	402a      	ands	r2, r5
 8000e36:	9206      	str	r2, [sp, #24]
    x+=8;
  }
  if ( w > 0 )
 8000e38:	d010      	beq.n	8000e5c <u8g_DrawXBM+0xa0>
  {
    d = *bitmap;
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	781f      	ldrb	r7, [r3, #0]
 8000e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e40:	1999      	adds	r1, r3, r6
 8000e42:	b2c9      	uxtb	r1, r1
    x -= 7;
    do
    {
      if ( d & 1 )
 8000e44:	07fb      	lsls	r3, r7, #31
 8000e46:	d503      	bpl.n	8000e50 <u8g_DrawXBM+0x94>
        u8g_DrawPixel(u8g, x, y);
 8000e48:	9803      	ldr	r0, [sp, #12]
 8000e4a:	1c22      	adds	r2, r4, #0
 8000e4c:	f000 fcd9 	bl	8001802 <u8g_DrawPixel>
 8000e50:	3601      	adds	r6, #1
      x++;
      w--;
      d >>= 1;      
    } while ( w > 0 );
 8000e52:	9a06      	ldr	r2, [sp, #24]
 8000e54:	b2f3      	uxtb	r3, r6
    {
      if ( d & 1 )
        u8g_DrawPixel(u8g, x, y);
      x++;
      w--;
      d >>= 1;      
 8000e56:	087f      	lsrs	r7, r7, #1
    } while ( w > 0 );
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d1f0      	bne.n	8000e3e <u8g_DrawXBM+0x82>
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8000e5c:	9a07      	ldr	r2, [sp, #28]
 8000e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000e60:	4694      	mov	ip, r2
    y++;
 8000e62:	3401      	adds	r4, #1
    return;
  
  while( h > 0 )
  {
    u8g_DrawHXBM(u8g, x, y, w, bitmap);
    bitmap += b;
 8000e64:	4463      	add	r3, ip
 8000e66:	9311      	str	r3, [sp, #68]	; 0x44
    y++;
 8000e68:	b2e4      	uxtb	r4, r4
 8000e6a:	e7c7      	b.n	8000dfc <u8g_DrawXBM+0x40>
    h--;
  }
}
 8000e6c:	b00b      	add	sp, #44	; 0x2c
 8000e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e70 <u8g_DrawXBMP>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	1c1d      	adds	r5, r3, #0
 8000e74:	b08b      	sub	sp, #44	; 0x2c
 8000e76:	ab10      	add	r3, sp, #64	; 0x40
 8000e78:	781f      	ldrb	r7, [r3, #0]
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8000e7a:	1c2b      	adds	r3, r5, #0
 8000e7c:	9700      	str	r7, [sp, #0]
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8000e7e:	9003      	str	r0, [sp, #12]
 8000e80:	1c0e      	adds	r6, r1, #0
 8000e82:	1c14      	adds	r4, r2, #0
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8000e84:	f000 f84e 	bl	8000f24 <u8g_IsBBXIntersection>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d049      	beq.n	8000f20 <u8g_DrawXBMP+0xb0>

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
 8000e8c:	1deb      	adds	r3, r5, #7
 8000e8e:	b2db      	uxtb	r3, r3
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	9307      	str	r3, [sp, #28]
}

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
 8000e96:	3607      	adds	r6, #7
 8000e98:	b2fb      	uxtb	r3, r7
 8000e9a:	9308      	str	r3, [sp, #32]
 8000e9c:	b2f3      	uxtb	r3, r6
 8000e9e:	9304      	str	r3, [sp, #16]
 8000ea0:	9a04      	ldr	r2, [sp, #16]
 8000ea2:	08eb      	lsrs	r3, r5, #3
 8000ea4:	9305      	str	r3, [sp, #20]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	18d3      	adds	r3, r2, r3
    x+=8;
  }
  if ( w > 0 )
  {
    d = u8g_pgm_read(bitmap);
    x -= 7;
 8000eaa:	3b07      	subs	r3, #7
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	9309      	str	r3, [sp, #36]	; 0x24
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
 8000eb0:	9b08      	ldr	r3, [sp, #32]
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	d034      	beq.n	8000f20 <u8g_DrawXBMP+0xb0>
 8000eb6:	1c2e      	adds	r6, r5, #0
 8000eb8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8000eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ebc:	1af9      	subs	r1, r7, r3
 8000ebe:	9b04      	ldr	r3, [sp, #16]
 8000ec0:	00c9      	lsls	r1, r1, #3
 8000ec2:	1859      	adds	r1, r3, r1
 8000ec4:	b2c9      	uxtb	r1, r1

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
 8000ec6:	2e07      	cmp	r6, #7
 8000ec8:	d90a      	bls.n	8000ee0 <u8g_DrawXBMP+0x70>
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
 8000eca:	783b      	ldrb	r3, [r7, #0]
 8000ecc:	9803      	ldr	r0, [sp, #12]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	1c22      	adds	r2, r4, #0
 8000ed2:	2302      	movs	r3, #2
    bitmap++;
    w-= 8;
 8000ed4:	3e08      	subs	r6, #8
{
  uint8_t d;
  x+=7;
  while( w >= 8 )
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
 8000ed6:	f000 fc9c 	bl	8001812 <u8g_Draw8Pixel>
    bitmap++;
 8000eda:	3701      	adds	r7, #1
    w-= 8;
 8000edc:	b2f6      	uxtb	r6, r6
 8000ede:	e7ec      	b.n	8000eba <u8g_DrawXBMP+0x4a>
 8000ee0:	9a05      	ldr	r2, [sp, #20]
 8000ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ee4:	189b      	adds	r3, r3, r2
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	402a      	ands	r2, r5
 8000eea:	9206      	str	r2, [sp, #24]
    x+=8;
  }
  if ( w > 0 )
 8000eec:	d010      	beq.n	8000f10 <u8g_DrawXBMP+0xa0>
  {
    d = u8g_pgm_read(bitmap);
 8000eee:	2600      	movs	r6, #0
 8000ef0:	781f      	ldrb	r7, [r3, #0]
 8000ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ef4:	1999      	adds	r1, r3, r6
 8000ef6:	b2c9      	uxtb	r1, r1
    x -= 7;
    do
    {
      if ( d & 1 )
 8000ef8:	07fb      	lsls	r3, r7, #31
 8000efa:	d503      	bpl.n	8000f04 <u8g_DrawXBMP+0x94>
        u8g_DrawPixel(u8g, x, y);
 8000efc:	9803      	ldr	r0, [sp, #12]
 8000efe:	1c22      	adds	r2, r4, #0
 8000f00:	f000 fc7f 	bl	8001802 <u8g_DrawPixel>
 8000f04:	3601      	adds	r6, #1
      x++;
      w--;
      d >>= 1;      
    } while ( w > 0 );
 8000f06:	9a06      	ldr	r2, [sp, #24]
 8000f08:	b2f3      	uxtb	r3, r6
    {
      if ( d & 1 )
        u8g_DrawPixel(u8g, x, y);
      x++;
      w--;
      d >>= 1;      
 8000f0a:	087f      	lsrs	r7, r7, #1
    } while ( w > 0 );
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d1f0      	bne.n	8000ef2 <u8g_DrawXBMP+0x82>
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 8000f10:	9a07      	ldr	r2, [sp, #28]
 8000f12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000f14:	4694      	mov	ip, r2
    y++;
 8000f16:	3401      	adds	r4, #1
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
 8000f18:	4463      	add	r3, ip
 8000f1a:	9311      	str	r3, [sp, #68]	; 0x44
    y++;
 8000f1c:	b2e4      	uxtb	r4, r4
 8000f1e:	e7c7      	b.n	8000eb0 <u8g_DrawXBMP+0x40>
    h--;
  }
}
 8000f20:	b00b      	add	sp, #44	; 0x2c
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f24 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	1c05      	adds	r5, r0, #0
 8000f28:	a804      	add	r0, sp, #16
 8000f2a:	7804      	ldrb	r4, [r0, #0]
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8000f2c:	1c28      	adds	r0, r5, #0
 8000f2e:	3049      	adds	r0, #73	; 0x49
 8000f30:	7806      	ldrb	r6, [r0, #0]
 8000f32:	3002      	adds	r0, #2
 8000f34:	3c01      	subs	r4, #1
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8000f36:	7800      	ldrb	r0, [r0, #0]
uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
 8000f38:	1914      	adds	r4, r2, r4
 8000f3a:	b2e4      	uxtb	r4, r4
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d305      	bcc.n	8000f4c <u8g_IsBBXIntersection+0x28>
  {
    if ( v1 >= a0 )
 8000f40:	42b4      	cmp	r4, r6
 8000f42:	d208      	bcs.n	8000f56 <u8g_IsBBXIntersection+0x32>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8000f44:	2000      	movs	r0, #0
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
 8000f46:	42a2      	cmp	r2, r4
 8000f48:	d919      	bls.n	8000f7e <u8g_IsBBXIntersection+0x5a>
 8000f4a:	e004      	b.n	8000f56 <u8g_IsBBXIntersection+0x32>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8000f4c:	2000      	movs	r0, #0
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
 8000f4e:	42b4      	cmp	r4, r6
 8000f50:	d315      	bcc.n	8000f7e <u8g_IsBBXIntersection+0x5a>
    {
      if ( v0 > v1 )
 8000f52:	42a2      	cmp	r2, r4
 8000f54:	d913      	bls.n	8000f7e <u8g_IsBBXIntersection+0x5a>
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8000f56:	1c2a      	adds	r2, r5, #0
 8000f58:	354a      	adds	r5, #74	; 0x4a
 8000f5a:	3b01      	subs	r3, #1
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8000f5c:	7828      	ldrb	r0, [r5, #0]
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 8000f5e:	18cb      	adds	r3, r1, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8000f60:	3248      	adds	r2, #72	; 0x48
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 8000f62:	b2db      	uxtb	r3, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8000f64:	7812      	ldrb	r2, [r2, #0]
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
 8000f66:	4288      	cmp	r0, r1
 8000f68:	d303      	bcc.n	8000f72 <u8g_IsBBXIntersection+0x4e>
  {
    if ( v1 >= a0 )
    {
      return 1;
 8000f6a:	2001      	movs	r0, #1
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d206      	bcs.n	8000f7e <u8g_IsBBXIntersection+0x5a>
 8000f70:	e002      	b.n	8000f78 <u8g_IsBBXIntersection+0x54>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8000f72:	2000      	movs	r0, #0
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d302      	bcc.n	8000f7e <u8g_IsBBXIntersection+0x5a>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	419b      	sbcs	r3, r3
 8000f7c:	4258      	negs	r0, r3
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}

08000f80 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8000f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f82:	1c05      	adds	r5, r0, #0
  switch(msg)
 8000f84:	1c10      	adds	r0, r2, #0
 8000f86:	380a      	subs	r0, #10
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8000f88:	1c0c      	adds	r4, r1, #0
 8000f8a:	1c16      	adds	r6, r2, #0
 8000f8c:	9301      	str	r3, [sp, #4]
  switch(msg)
 8000f8e:	280b      	cmp	r0, #11
 8000f90:	d83b      	bhi.n	800100a <u8g_dev_ssd1306_128x64_fn+0x8a>
 8000f92:	f001 fd35 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8000f96:	3a06      	.short	0x3a06
 8000f98:	3a3a3a3a 	.word	0x3a3a3a3a
 8000f9c:	3a3a332f 	.word	0x3a3a332f
 8000fa0:	103a      	.short	0x103a
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8000fa2:	1c28      	adds	r0, r5, #0
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f000 fe4a 	bl	8001c3e <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8000faa:	1c28      	adds	r0, r5, #0
 8000fac:	1c21      	adds	r1, r4, #0
 8000fae:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8000fb0:	f000 fe7c 	bl	8001cac <u8g_WriteEscSeqP>
      break;
 8000fb4:	e029      	b.n	800100a <u8g_dev_ssd1306_128x64_fn+0x8a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8000fb8:	1c28      	adds	r0, r5, #0
 8000fba:	3226      	adds	r2, #38	; 0x26
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8000fbc:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8000fbe:	f000 fe75 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8000fc2:	23b0      	movs	r3, #176	; 0xb0
 8000fc4:	793a      	ldrb	r2, [r7, #4]
 8000fc6:	1c21      	adds	r1, r4, #0
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	1c28      	adds	r0, r5, #0
 8000fcc:	f000 fe5e 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8000fd0:	1c28      	adds	r0, r5, #0
 8000fd2:	1c21      	adds	r1, r4, #0
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f000 fe53 	bl	8001c80 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8000fda:	1c38      	adds	r0, r7, #0
 8000fdc:	1c29      	adds	r1, r5, #0
 8000fde:	1c22      	adds	r2, r4, #0
 8000fe0:	f000 ff0f 	bl	8001e02 <u8g_pb_WriteBuffer>
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d016      	beq.n	8001016 <u8g_dev_ssd1306_128x64_fn+0x96>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 8000fe8:	1c28      	adds	r0, r5, #0
 8000fea:	1c21      	adds	r1, r4, #0
 8000fec:	2200      	movs	r2, #0
 8000fee:	f000 fe33 	bl	8001c58 <u8g_SetChipSelect>
      }
      break;
 8000ff2:	e00a      	b.n	800100a <u8g_dev_ssd1306_128x64_fn+0x8a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8000ff6:	1c28      	adds	r0, r5, #0
 8000ff8:	322e      	adds	r2, #46	; 0x2e
 8000ffa:	e002      	b.n	8001002 <u8g_dev_ssd1306_128x64_fn+0x82>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8000ffc:	1c28      	adds	r0, r5, #0
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8001000:	3237      	adds	r2, #55	; 0x37
 8001002:	f000 fe53 	bl	8001cac <u8g_WriteEscSeqP>
      return 1;
 8001006:	2001      	movs	r0, #1
 8001008:	e005      	b.n	8001016 <u8g_dev_ssd1306_128x64_fn+0x96>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 800100a:	1c28      	adds	r0, r5, #0
 800100c:	1c21      	adds	r1, r4, #0
 800100e:	1c32      	adds	r2, r6, #0
 8001010:	9b01      	ldr	r3, [sp, #4]
 8001012:	f000 fdd5 	bl	8001bc0 <u8g_dev_pb8v1_base_fn>
}
 8001016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001018:	0800308c 	.word	0x0800308c

0800101c <u8g_dev_ssd1306_adafruit_128x64_fn>:

uint8_t u8g_dev_ssd1306_adafruit_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800101c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800101e:	1c05      	adds	r5, r0, #0
  switch(msg)
 8001020:	1c10      	adds	r0, r2, #0
 8001022:	380a      	subs	r0, #10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_adafruit_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001024:	1c0c      	adds	r4, r1, #0
 8001026:	1c16      	adds	r6, r2, #0
 8001028:	9301      	str	r3, [sp, #4]
  switch(msg)
 800102a:	280b      	cmp	r0, #11
 800102c:	d83c      	bhi.n	80010a8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
 800102e:	f001 fce7 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8001032:	3b06      	.short	0x3b06
 8001034:	3b3b3b3b 	.word	0x3b3b3b3b
 8001038:	3b3b3430 	.word	0x3b3b3430
 800103c:	113b      	.short	0x113b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800103e:	1c28      	adds	r0, r5, #0
 8001040:	2202      	movs	r2, #2
 8001042:	f000 fdfc 	bl	8001c3e <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8001048:	1c28      	adds	r0, r5, #0
 800104a:	1c21      	adds	r1, r4, #0
 800104c:	3242      	adds	r2, #66	; 0x42
 800104e:	f000 fe2d 	bl	8001cac <u8g_WriteEscSeqP>
      break;
 8001052:	e029      	b.n	80010a8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8001056:	1c28      	adds	r0, r5, #0
 8001058:	3226      	adds	r2, #38	; 0x26
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800105a:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 800105c:	f000 fe26 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8001060:	23b0      	movs	r3, #176	; 0xb0
 8001062:	793a      	ldrb	r2, [r7, #4]
 8001064:	1c21      	adds	r1, r4, #0
 8001066:	431a      	orrs	r2, r3
 8001068:	1c28      	adds	r0, r5, #0
 800106a:	f000 fe0f 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800106e:	1c28      	adds	r0, r5, #0
 8001070:	1c21      	adds	r1, r4, #0
 8001072:	2201      	movs	r2, #1
 8001074:	f000 fe04 	bl	8001c80 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8001078:	1c38      	adds	r0, r7, #0
 800107a:	1c29      	adds	r1, r5, #0
 800107c:	1c22      	adds	r2, r4, #0
 800107e:	f000 fec0 	bl	8001e02 <u8g_pb_WriteBuffer>
 8001082:	2800      	cmp	r0, #0
 8001084:	d016      	beq.n	80010b4 <u8g_dev_ssd1306_adafruit_128x64_fn+0x98>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 8001086:	1c28      	adds	r0, r5, #0
 8001088:	1c21      	adds	r1, r4, #0
 800108a:	2200      	movs	r2, #0
 800108c:	f000 fde4 	bl	8001c58 <u8g_SetChipSelect>
      }
      break;
 8001090:	e00a      	b.n	80010a8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 8001094:	1c28      	adds	r0, r5, #0
 8001096:	322e      	adds	r2, #46	; 0x2e
 8001098:	e002      	b.n	80010a0 <u8g_dev_ssd1306_adafruit_128x64_fn+0x84>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800109a:	1c28      	adds	r0, r5, #0
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <u8g_dev_ssd1306_adafruit_128x64_fn+0x9c>)
 800109e:	3237      	adds	r2, #55	; 0x37
 80010a0:	f000 fe04 	bl	8001cac <u8g_WriteEscSeqP>
      return 1;
 80010a4:	2001      	movs	r0, #1
 80010a6:	e005      	b.n	80010b4 <u8g_dev_ssd1306_adafruit_128x64_fn+0x98>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 80010a8:	1c28      	adds	r0, r5, #0
 80010aa:	1c21      	adds	r1, r4, #0
 80010ac:	1c32      	adds	r2, r6, #0
 80010ae:	9b01      	ldr	r3, [sp, #4]
 80010b0:	f000 fd86 	bl	8001bc0 <u8g_dev_pb8v1_base_fn>
}
 80010b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	0800308c 	.word	0x0800308c

080010bc <u8g_dev_sh1106_128x64_fn>:

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80010bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010be:	1c05      	adds	r5, r0, #0
  switch(msg)
 80010c0:	1c10      	adds	r0, r2, #0
 80010c2:	380a      	subs	r0, #10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80010c4:	1c0c      	adds	r4, r1, #0
 80010c6:	1c16      	adds	r6, r2, #0
 80010c8:	9301      	str	r3, [sp, #4]
  switch(msg)
 80010ca:	280b      	cmp	r0, #11
 80010cc:	d83c      	bhi.n	8001148 <u8g_dev_sh1106_128x64_fn+0x8c>
 80010ce:	f001 fc97 	bl	8002a00 <__gnu_thumb1_case_uqi>
 80010d2:	3b06      	.short	0x3b06
 80010d4:	3b3b3b3b 	.word	0x3b3b3b3b
 80010d8:	3b3b3430 	.word	0x3b3b3430
 80010dc:	113b      	.short	0x113b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80010de:	1c28      	adds	r0, r5, #0
 80010e0:	2202      	movs	r2, #2
 80010e2:	f000 fdac 	bl	8001c3e <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <u8g_dev_sh1106_128x64_fn+0x9c>)
 80010e8:	1c28      	adds	r0, r5, #0
 80010ea:	1c21      	adds	r1, r4, #0
 80010ec:	3242      	adds	r2, #66	; 0x42
 80010ee:	f000 fddd 	bl	8001cac <u8g_WriteEscSeqP>
      break;
 80010f2:	e029      	b.n	8001148 <u8g_dev_sh1106_128x64_fn+0x8c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <u8g_dev_sh1106_128x64_fn+0x9c>)
 80010f6:	1c28      	adds	r0, r5, #0
 80010f8:	3268      	adds	r2, #104	; 0x68
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80010fa:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80010fc:	f000 fdd6 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8001100:	23b0      	movs	r3, #176	; 0xb0
 8001102:	793a      	ldrb	r2, [r7, #4]
 8001104:	1c21      	adds	r1, r4, #0
 8001106:	431a      	orrs	r2, r3
 8001108:	1c28      	adds	r0, r5, #0
 800110a:	f000 fdbf 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800110e:	1c28      	adds	r0, r5, #0
 8001110:	1c21      	adds	r1, r4, #0
 8001112:	2201      	movs	r2, #1
 8001114:	f000 fdb4 	bl	8001c80 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8001118:	1c38      	adds	r0, r7, #0
 800111a:	1c29      	adds	r1, r5, #0
 800111c:	1c22      	adds	r2, r4, #0
 800111e:	f000 fe70 	bl	8001e02 <u8g_pb_WriteBuffer>
 8001122:	2800      	cmp	r0, #0
 8001124:	d016      	beq.n	8001154 <u8g_dev_sh1106_128x64_fn+0x98>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
 8001126:	1c28      	adds	r0, r5, #0
 8001128:	1c21      	adds	r1, r4, #0
 800112a:	2200      	movs	r2, #0
 800112c:	f000 fd94 	bl	8001c58 <u8g_SetChipSelect>
      }
      break;
 8001130:	e00a      	b.n	8001148 <u8g_dev_sh1106_128x64_fn+0x8c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <u8g_dev_sh1106_128x64_fn+0x9c>)
 8001134:	1c28      	adds	r0, r5, #0
 8001136:	322e      	adds	r2, #46	; 0x2e
 8001138:	e002      	b.n	8001140 <u8g_dev_sh1106_128x64_fn+0x84>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800113a:	1c28      	adds	r0, r5, #0
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <u8g_dev_sh1106_128x64_fn+0x9c>)
 800113e:	3237      	adds	r2, #55	; 0x37
 8001140:	f000 fdb4 	bl	8001cac <u8g_WriteEscSeqP>
      return 1;
 8001144:	2001      	movs	r0, #1
 8001146:	e005      	b.n	8001154 <u8g_dev_sh1106_128x64_fn+0x98>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8001148:	1c28      	adds	r0, r5, #0
 800114a:	1c21      	adds	r1, r4, #0
 800114c:	1c32      	adds	r2, r6, #0
 800114e:	9b01      	ldr	r3, [sp, #4]
 8001150:	f000 fd36 	bl	8001bc0 <u8g_dev_pb8v1_base_fn>
}
 8001154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	0800308c 	.word	0x0800308c

0800115c <u8g_dev_ssd1306_128x64_2x_fn>:


uint8_t u8g_dev_ssd1306_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800115c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800115e:	1c05      	adds	r5, r0, #0
  switch(msg)
 8001160:	1c10      	adds	r0, r2, #0
 8001162:	380a      	subs	r0, #10
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}


uint8_t u8g_dev_ssd1306_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001164:	1c0c      	adds	r4, r1, #0
 8001166:	1c17      	adds	r7, r2, #0
 8001168:	9301      	str	r3, [sp, #4]
  switch(msg)
 800116a:	280b      	cmp	r0, #11
 800116c:	d861      	bhi.n	8001232 <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
 800116e:	f001 fc47 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8001172:	6006      	.short	0x6006
 8001174:	60606060 	.word	0x60606060
 8001178:	60605955 	.word	0x60605955
 800117c:	1160      	.short	0x1160
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800117e:	1c28      	adds	r0, r5, #0
 8001180:	2202      	movs	r2, #2
 8001182:	f000 fd5c 	bl	8001c3e <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 8001186:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8001188:	1c28      	adds	r0, r5, #0
 800118a:	1c21      	adds	r1, r4, #0
 800118c:	3242      	adds	r2, #66	; 0x42
 800118e:	f000 fd8d 	bl	8001cac <u8g_WriteEscSeqP>
      break;
 8001192:	e04e      	b.n	8001232 <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8001196:	1c28      	adds	r0, r5, #0
 8001198:	3326      	adds	r3, #38	; 0x26
 800119a:	1c1a      	adds	r2, r3, #0
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800119c:	684e      	ldr	r6, [r1, #4]
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f000 fd84 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
 80011a4:	2350      	movs	r3, #80	; 0x50
 80011a6:	7932      	ldrb	r2, [r6, #4]
 80011a8:	425b      	negs	r3, r3
 80011aa:	0052      	lsls	r2, r2, #1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	1c21      	adds	r1, r4, #0
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	1c28      	adds	r0, r5, #0
 80011b4:	f000 fd6a 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80011b8:	1c28      	adds	r0, r5, #0
 80011ba:	1c21      	adds	r1, r4, #0
 80011bc:	2201      	movs	r2, #1
 80011be:	f000 fd5f 	bl	8001c80 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 80011c2:	68b3      	ldr	r3, [r6, #8]
 80011c4:	7972      	ldrb	r2, [r6, #5]
 80011c6:	1c21      	adds	r1, r4, #0
 80011c8:	1c28      	adds	r0, r5, #0
 80011ca:	f000 fd65 	bl	8001c98 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 80011ce:	1c28      	adds	r0, r5, #0
 80011d0:	1c21      	adds	r1, r4, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	f000 fd40 	bl	8001c58 <u8g_SetChipSelect>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80011d8:	1c21      	adds	r1, r4, #0
 80011da:	9a00      	ldr	r2, [sp, #0]
 80011dc:	1c28      	adds	r0, r5, #0
 80011de:	f000 fd65 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
 80011e2:	2350      	movs	r3, #80	; 0x50
 80011e4:	7932      	ldrb	r2, [r6, #4]
 80011e6:	425b      	negs	r3, r3
 80011e8:	0052      	lsls	r2, r2, #1
 80011ea:	3201      	adds	r2, #1
 80011ec:	431a      	orrs	r2, r3
 80011ee:	1c21      	adds	r1, r4, #0
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	1c28      	adds	r0, r5, #0
 80011f4:	f000 fd4a 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80011f8:	1c28      	adds	r0, r5, #0
 80011fa:	1c21      	adds	r1, r4, #0
 80011fc:	2201      	movs	r2, #1
 80011fe:	f000 fd3f 	bl	8001c80 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 8001202:	7972      	ldrb	r2, [r6, #5]
 8001204:	68b3      	ldr	r3, [r6, #8]
 8001206:	1c21      	adds	r1, r4, #0
 8001208:	189b      	adds	r3, r3, r2
 800120a:	1c28      	adds	r0, r5, #0
 800120c:	f000 fd44 	bl	8001c98 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8001210:	1c28      	adds	r0, r5, #0
 8001212:	1c21      	adds	r1, r4, #0
 8001214:	2200      	movs	r2, #0
 8001216:	f000 fd1f 	bl	8001c58 <u8g_SetChipSelect>
      }
      break;
 800121a:	e00a      	b.n	8001232 <u8g_dev_ssd1306_128x64_2x_fn+0xd6>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 800121e:	1c28      	adds	r0, r5, #0
 8001220:	322e      	adds	r2, #46	; 0x2e
 8001222:	e002      	b.n	800122a <u8g_dev_ssd1306_128x64_2x_fn+0xce>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8001224:	1c28      	adds	r0, r5, #0
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <u8g_dev_ssd1306_128x64_2x_fn+0xe4>)
 8001228:	3237      	adds	r2, #55	; 0x37
 800122a:	f000 fd3f 	bl	8001cac <u8g_WriteEscSeqP>
      return 1;
 800122e:	2001      	movs	r0, #1
 8001230:	e005      	b.n	800123e <u8g_dev_ssd1306_128x64_2x_fn+0xe2>
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 8001232:	1c28      	adds	r0, r5, #0
 8001234:	1c21      	adds	r1, r4, #0
 8001236:	1c3a      	adds	r2, r7, #0
 8001238:	9b01      	ldr	r3, [sp, #4]
 800123a:	f000 fc0a 	bl	8001a52 <u8g_dev_pb16v1_base_fn>
}
 800123e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001240:	0800308c 	.word	0x0800308c

08001244 <u8g_dev_sh1106_128x64_2x_fn>:

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001246:	1c05      	adds	r5, r0, #0
  switch(msg)
 8001248:	1c10      	adds	r0, r2, #0
 800124a:	380a      	subs	r0, #10
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800124c:	1c0c      	adds	r4, r1, #0
 800124e:	1c17      	adds	r7, r2, #0
 8001250:	9301      	str	r3, [sp, #4]
  switch(msg)
 8001252:	280b      	cmp	r0, #11
 8001254:	d861      	bhi.n	800131a <u8g_dev_sh1106_128x64_2x_fn+0xd6>
 8001256:	f001 fbd3 	bl	8002a00 <__gnu_thumb1_case_uqi>
 800125a:	6006      	.short	0x6006
 800125c:	60606060 	.word	0x60606060
 8001260:	60605955 	.word	0x60605955
 8001264:	1160      	.short	0x1160
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8001266:	1c28      	adds	r0, r5, #0
 8001268:	2202      	movs	r2, #2
 800126a:	f000 fce8 	bl	8001c3e <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 8001270:	1c28      	adds	r0, r5, #0
 8001272:	1c21      	adds	r1, r4, #0
 8001274:	3242      	adds	r2, #66	; 0x42
 8001276:	f000 fd19 	bl	8001cac <u8g_WriteEscSeqP>
      break;
 800127a:	e04e      	b.n	800131a <u8g_dev_sh1106_128x64_2x_fn+0xd6>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 800127e:	1c28      	adds	r0, r5, #0
 8001280:	3368      	adds	r3, #104	; 0x68
 8001282:	1c1a      	adds	r2, r3, #0
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8001284:	684e      	ldr	r6, [r1, #4]
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f000 fd10 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
 800128c:	2350      	movs	r3, #80	; 0x50
 800128e:	7932      	ldrb	r2, [r6, #4]
 8001290:	425b      	negs	r3, r3
 8001292:	0052      	lsls	r2, r2, #1
 8001294:	431a      	orrs	r2, r3
 8001296:	1c21      	adds	r1, r4, #0
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	1c28      	adds	r0, r5, #0
 800129c:	f000 fcf6 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80012a0:	1c28      	adds	r0, r5, #0
 80012a2:	1c21      	adds	r1, r4, #0
 80012a4:	2201      	movs	r2, #1
 80012a6:	f000 fceb 	bl	8001c80 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 80012aa:	68b3      	ldr	r3, [r6, #8]
 80012ac:	7972      	ldrb	r2, [r6, #5]
 80012ae:	1c21      	adds	r1, r4, #0
 80012b0:	1c28      	adds	r0, r5, #0
 80012b2:	f000 fcf1 	bl	8001c98 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 80012b6:	1c28      	adds	r0, r5, #0
 80012b8:	1c21      	adds	r1, r4, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	f000 fccc 	bl	8001c58 <u8g_SetChipSelect>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80012c0:	1c21      	adds	r1, r4, #0
 80012c2:	9a00      	ldr	r2, [sp, #0]
 80012c4:	1c28      	adds	r0, r5, #0
 80012c6:	f000 fcf1 	bl	8001cac <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
 80012ca:	2350      	movs	r3, #80	; 0x50
 80012cc:	7932      	ldrb	r2, [r6, #4]
 80012ce:	425b      	negs	r3, r3
 80012d0:	0052      	lsls	r2, r2, #1
 80012d2:	3201      	adds	r2, #1
 80012d4:	431a      	orrs	r2, r3
 80012d6:	1c21      	adds	r1, r4, #0
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	1c28      	adds	r0, r5, #0
 80012dc:	f000 fcd6 	bl	8001c8c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80012e0:	1c28      	adds	r0, r5, #0
 80012e2:	1c21      	adds	r1, r4, #0
 80012e4:	2201      	movs	r2, #1
 80012e6:	f000 fccb 	bl	8001c80 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 80012ea:	7972      	ldrb	r2, [r6, #5]
 80012ec:	68b3      	ldr	r3, [r6, #8]
 80012ee:	1c21      	adds	r1, r4, #0
 80012f0:	189b      	adds	r3, r3, r2
 80012f2:	1c28      	adds	r0, r5, #0
 80012f4:	f000 fcd0 	bl	8001c98 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 80012f8:	1c28      	adds	r0, r5, #0
 80012fa:	1c21      	adds	r1, r4, #0
 80012fc:	2200      	movs	r2, #0
 80012fe:	f000 fcab 	bl	8001c58 <u8g_SetChipSelect>
      }
      break;
 8001302:	e00a      	b.n	800131a <u8g_dev_sh1106_128x64_2x_fn+0xd6>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 8001306:	1c28      	adds	r0, r5, #0
 8001308:	322e      	adds	r2, #46	; 0x2e
 800130a:	e002      	b.n	8001312 <u8g_dev_sh1106_128x64_2x_fn+0xce>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800130c:	1c28      	adds	r0, r5, #0
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <u8g_dev_sh1106_128x64_2x_fn+0xe4>)
 8001310:	3237      	adds	r2, #55	; 0x37
 8001312:	f000 fccb 	bl	8001cac <u8g_WriteEscSeqP>
      return 1;
 8001316:	2001      	movs	r0, #1
 8001318:	e005      	b.n	8001326 <u8g_dev_sh1106_128x64_2x_fn+0xe2>
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 800131a:	1c28      	adds	r0, r5, #0
 800131c:	1c21      	adds	r1, r4, #0
 800131e:	1c3a      	adds	r2, r7, #0
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	f000 fb96 	bl	8001a52 <u8g_dev_pb16v1_base_fn>
}
 8001326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001328:	0800308c 	.word	0x0800308c

0800132c <u8g_init_data>:
static void u8g_init_data(u8g_t *u8g)
{
  u8g->font = NULL;
  u8g->cursor_font = NULL;
  u8g->cursor_bg_color = 0;
  u8g->cursor_fg_color = 1;
 800132c:	2201      	movs	r2, #1
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
 800132e:	b538      	push	{r3, r4, r5, lr}
  u8g->font = NULL;
 8001330:	2300      	movs	r3, #0
  u8g->cursor_font = NULL;
  u8g->cursor_bg_color = 0;
  u8g->cursor_fg_color = 1;
 8001332:	7402      	strb	r2, [r0, #16]
  u8g->cursor_encoding = 34;
 8001334:	2222      	movs	r2, #34	; 0x22
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
  u8g->font = NULL;
 8001336:	6083      	str	r3, [r0, #8]
  u8g->cursor_font = NULL;
 8001338:	60c3      	str	r3, [r0, #12]
  u8g->cursor_bg_color = 0;
 800133a:	7443      	strb	r3, [r0, #17]
  u8g->cursor_fg_color = 1;
  u8g->cursor_encoding = 34;
 800133c:	7482      	strb	r2, [r0, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800133e:	6183      	str	r3, [r0, #24]
 8001340:	1c02      	adds	r2, r0, #0
 8001342:	1c03      	adds	r3, r0, #0
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
 8001344:	1c04      	adds	r4, r0, #0

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
 8001346:	21ff      	movs	r1, #255	; 0xff
 8001348:	3334      	adds	r3, #52	; 0x34
 800134a:	3242      	adds	r2, #66	; 0x42
 800134c:	7019      	strb	r1, [r3, #0]
 800134e:	3301      	adds	r3, #1
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
 8001350:	4293      	cmp	r3, r2
 8001352:	d1fb      	bne.n	800134c <u8g_init_data+0x20>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8001354:	1c23      	adds	r3, r4, #0
 8001356:	2501      	movs	r5, #1
 8001358:	3331      	adds	r3, #49	; 0x31
 800135a:	701d      	strb	r5, [r3, #0]
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
 800135c:	1c20      	adds	r0, r4, #0
 800135e:	f001 f9b4 	bl	80026ca <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8001362:	1c23      	adds	r3, r4, #0
  u8g->font_ref_ascent = 0;
 8001364:	1c22      	adds	r2, r4, #0
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8001366:	3328      	adds	r3, #40	; 0x28
 8001368:	701d      	strb	r5, [r3, #0]
  u8g->font_ref_ascent = 0;
 800136a:	2300      	movs	r3, #0
  u8g->font_ref_descent = 0;
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800136c:	2140      	movs	r1, #64	; 0x40
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
  u8g->font_ref_ascent = 0;
 800136e:	3229      	adds	r2, #41	; 0x29
 8001370:	7013      	strb	r3, [r2, #0]
  u8g->font_ref_descent = 0;
 8001372:	7053      	strb	r3, [r2, #1]
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
  u8g->line_spacing = 0;
 8001374:	70d3      	strb	r3, [r2, #3]
  
  u8g->state_cb = u8g_state_dummy_cb;
 8001376:	4b02      	ldr	r3, [pc, #8]	; (8001380 <u8g_init_data+0x54>)
  u8g_SetFontPosBaseline(u8g);
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
  u8g->font_ref_ascent = 0;
  u8g->font_ref_descent = 0;
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8001378:	7091      	strb	r1, [r2, #2]
  u8g->line_spacing = 0;
  
  u8g->state_cb = u8g_state_dummy_cb;
 800137a:	6463      	str	r3, [r4, #68]	; 0x44

}
 800137c:	bd38      	pop	{r3, r4, r5, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	08001939 	.word	0x08001939

08001384 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001384:	b510      	push	{r4, lr}
  return dev->dev_fn(u8g, dev, msg, arg); 
 8001386:	680c      	ldr	r4, [r1, #0]
 8001388:	47a0      	blx	r4
}
 800138a:	bd10      	pop	{r4, pc}

0800138c <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	1c04      	adds	r4, r0, #0
 8001390:	1c0d      	adds	r5, r1, #0
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8001392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001394:	2002      	movs	r0, #2
 8001396:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8001398:	1c29      	adds	r1, r5, #0
 800139a:	220a      	movs	r2, #10
 800139c:	1c20      	adds	r0, r4, #0
 800139e:	2300      	movs	r3, #0
 80013a0:	f7ff fff0 	bl	8001384 <u8g_call_dev_fn>
 80013a4:	1c05      	adds	r5, r0, #0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 80013a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013a8:	2003      	movs	r0, #3
 80013aa:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80013ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ae:	2000      	movs	r0, #0
 80013b0:	4798      	blx	r3
  return r;
}
 80013b2:	1c28      	adds	r0, r5, #0
 80013b4:	bd38      	pop	{r3, r4, r5, pc}

080013b6 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80013b6:	b538      	push	{r3, r4, r5, lr}
 80013b8:	1c04      	adds	r4, r0, #0
 80013ba:	1c0d      	adds	r5, r1, #0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80013bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013be:	2002      	movs	r0, #2
 80013c0:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80013c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c4:	2001      	movs	r0, #1
 80013c6:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80013c8:	1c29      	adds	r1, r5, #0
 80013ca:	1c20      	adds	r0, r4, #0
 80013cc:	2214      	movs	r2, #20
 80013ce:	2300      	movs	r3, #0
 80013d0:	f7ff ffd8 	bl	8001384 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80013d4:	1c23      	adds	r3, r4, #0
 80013d6:	1c29      	adds	r1, r5, #0
 80013d8:	2217      	movs	r2, #23
 80013da:	3348      	adds	r3, #72	; 0x48
 80013dc:	1c20      	adds	r0, r4, #0
 80013de:	f7ff ffd1 	bl	8001384 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80013e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013e4:	2000      	movs	r0, #0
 80013e6:	4798      	blx	r3
}
 80013e8:	bd38      	pop	{r3, r4, r5, pc}

080013ea <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80013ea:	b570      	push	{r4, r5, r6, lr}
 80013ec:	1c04      	adds	r4, r0, #0
 80013ee:	1c0e      	adds	r6, r1, #0
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80013f0:	2002      	movs	r0, #2
 80013f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013f4:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80013f6:	2001      	movs	r0, #1
 80013f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013fa:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 80013fc:	1c20      	adds	r0, r4, #0
 80013fe:	1c31      	adds	r1, r6, #0
 8001400:	2215      	movs	r2, #21
 8001402:	2300      	movs	r3, #0
 8001404:	f7ff ffbe 	bl	8001384 <u8g_call_dev_fn>
 8001408:	1e05      	subs	r5, r0, #0
  if ( r != 0 )
 800140a:	d006      	beq.n	800141a <u8g_NextPageLL+0x30>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800140c:	1c23      	adds	r3, r4, #0
 800140e:	1c20      	adds	r0, r4, #0
 8001410:	1c31      	adds	r1, r6, #0
 8001412:	2217      	movs	r2, #23
 8001414:	3348      	adds	r3, #72	; 0x48
 8001416:	f7ff ffb5 	bl	8001384 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800141a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141c:	2000      	movs	r0, #0
 800141e:	4798      	blx	r3
  return r;
}
 8001420:	1c28      	adds	r0, r5, #0
 8001422:	bd70      	pop	{r4, r5, r6, pc}

08001424 <u8g_SetContrastLL>:

uint8_t u8g_SetContrastLL(u8g_t *u8g, u8g_dev_t *dev, uint8_t contrast)
{  
 8001424:	b507      	push	{r0, r1, r2, lr}
 8001426:	466b      	mov	r3, sp
 8001428:	3307      	adds	r3, #7
 800142a:	701a      	strb	r2, [r3, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
 800142c:	220f      	movs	r2, #15
 800142e:	f7ff ffa9 	bl	8001384 <u8g_call_dev_fn>
}
 8001432:	bd0e      	pop	{r1, r2, r3, pc}

08001434 <u8g_DrawPixelLL>:

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
 8001434:	b510      	push	{r4, lr}
 8001436:	1c1c      	adds	r4, r3, #0
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8001438:	1c03      	adds	r3, r0, #0
 800143a:	332d      	adds	r3, #45	; 0x2d
 800143c:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 800143e:	705c      	strb	r4, [r3, #1]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
 8001440:	2232      	movs	r2, #50	; 0x32
 8001442:	f7ff ff9f 	bl	8001384 <u8g_call_dev_fn>
}
 8001446:	bd10      	pop	{r4, pc}

08001448 <u8g_Draw8PixelLL>:

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	1c1e      	adds	r6, r3, #0
 800144c:	ab04      	add	r3, sp, #16
 800144e:	781d      	ldrb	r5, [r3, #0]
 8001450:	ab05      	add	r3, sp, #20
 8001452:	781c      	ldrb	r4, [r3, #0]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8001454:	1c03      	adds	r3, r0, #0
 8001456:	332d      	adds	r3, #45	; 0x2d
 8001458:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 800145a:	705e      	strb	r6, [r3, #1]
  arg->dir = dir;
 800145c:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 800145e:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8001460:	223b      	movs	r2, #59	; 0x3b
 8001462:	f7ff ff8f 	bl	8001384 <u8g_call_dev_fn>
}
 8001466:	bd70      	pop	{r4, r5, r6, pc}

08001468 <u8g_Draw4TPixelLL>:

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	1c1e      	adds	r6, r3, #0
 800146c:	ab04      	add	r3, sp, #16
 800146e:	781d      	ldrb	r5, [r3, #0]
 8001470:	ab05      	add	r3, sp, #20
 8001472:	781c      	ldrb	r4, [r3, #0]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8001474:	1c03      	adds	r3, r0, #0
 8001476:	332d      	adds	r3, #45	; 0x2d
 8001478:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 800147a:	705e      	strb	r6, [r3, #1]
  arg->dir = dir;
 800147c:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 800147e:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
 8001480:	222d      	movs	r2, #45	; 0x2d
 8001482:	f7ff ff7f 	bl	8001384 <u8g_call_dev_fn>
}
 8001486:	bd70      	pop	{r4, r5, r6, pc}

08001488 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8001488:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 800148a:	466b      	mov	r3, sp
 800148c:	1ddc      	adds	r4, r3, #7
 800148e:	2246      	movs	r2, #70	; 0x46
 8001490:	1c23      	adds	r3, r4, #0
 8001492:	f7ff ff77 	bl	8001384 <u8g_call_dev_fn>
  return r;
 8001496:	7820      	ldrb	r0, [r4, #0]
}
 8001498:	bd16      	pop	{r1, r2, r4, pc}

0800149a <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800149a:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 800149c:	466b      	mov	r3, sp
 800149e:	1ddc      	adds	r4, r3, #7
 80014a0:	2247      	movs	r2, #71	; 0x47
 80014a2:	1c23      	adds	r3, r4, #0
 80014a4:	f7ff ff6e 	bl	8001384 <u8g_call_dev_fn>
  return r;
 80014a8:	7820      	ldrb	r0, [r4, #0]
}
 80014aa:	bd16      	pop	{r1, r2, r4, pc}

080014ac <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80014ac:	b508      	push	{r3, lr}
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80014ae:	2248      	movs	r2, #72	; 0x48
 80014b0:	2300      	movs	r3, #0
 80014b2:	f7ff ff67 	bl	8001384 <u8g_call_dev_fn>
}
 80014b6:	bd08      	pop	{r3, pc}

080014b8 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80014b8:	b510      	push	{r4, lr}
 80014ba:	1c04      	adds	r4, r0, #0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80014bc:	6861      	ldr	r1, [r4, #4]
 80014be:	f7ff ffe3 	bl	8001488 <u8g_GetWidthLL>
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80014c2:	6861      	ldr	r1, [r4, #4]

/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80014c4:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80014c6:	1c20      	adds	r0, r4, #0
 80014c8:	f7ff ffe7 	bl	800149a <u8g_GetHeightLL>
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80014cc:	6861      	ldr	r1, [r4, #4]
/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80014ce:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80014d0:	1c20      	adds	r0, r4, #0
 80014d2:	f7ff ffeb 	bl	80014ac <u8g_GetModeLL>
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80014d6:	1c23      	adds	r3, r4, #0

void u8g_UpdateDimension(u8g_t *u8g)
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80014d8:	74e0      	strb	r0, [r4, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80014da:	6861      	ldr	r1, [r4, #4]
 80014dc:	3348      	adds	r3, #72	; 0x48
 80014de:	1c20      	adds	r0, r4, #0
 80014e0:	2217      	movs	r2, #23
 80014e2:	f7ff ff4f 	bl	8001384 <u8g_call_dev_fn>
}
 80014e6:	bd10      	pop	{r4, pc}

080014e8 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	1c04      	adds	r4, r0, #0
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80014ec:	6861      	ldr	r1, [r4, #4]
 80014ee:	f7ff ff4d 	bl	800138c <u8g_InitLL>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d003      	beq.n	80014fe <u8g_Begin+0x16>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 80014f6:	1c20      	adds	r0, r4, #0
 80014f8:	f7ff ffde 	bl	80014b8 <u8g_UpdateDimension>
  return 1;
 80014fc:	2001      	movs	r0, #1
}
 80014fe:	bd10      	pop	{r4, pc}

08001500 <u8g_Init>:

uint8_t u8g_Init(u8g_t *u8g, u8g_dev_t *dev)
{
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	1c0d      	adds	r5, r1, #0
 8001504:	1c04      	adds	r4, r0, #0
  u8g_init_data(u8g);
 8001506:	f7ff ff11 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
 800150a:	6065      	str	r5, [r4, #4]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 800150c:	1c20      	adds	r0, r4, #0
 800150e:	f7ff ffeb 	bl	80014e8 <u8g_Begin>
}
 8001512:	bd38      	pop	{r3, r4, r5, pc}

08001514 <u8g_InitComFn>:

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	1c04      	adds	r4, r0, #0
 8001518:	1c0d      	adds	r5, r1, #0
 800151a:	1c16      	adds	r6, r2, #0
  u8g_init_data(u8g);
 800151c:	f7ff ff06 	bl	800132c <u8g_init_data>
 8001520:	1c23      	adds	r3, r4, #0
 8001522:	1c22      	adds	r2, r4, #0
  
#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
 8001524:	21fe      	movs	r1, #254	; 0xfe
 8001526:	3334      	adds	r3, #52	; 0x34
 8001528:	3242      	adds	r2, #66	; 0x42
 800152a:	7019      	strb	r1, [r3, #0]
 800152c:	3301      	adds	r3, #1
  u8g_init_data(u8g);
  
#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
 800152e:	4293      	cmp	r3, r2
 8001530:	d1fb      	bne.n	800152a <u8g_InitComFn+0x16>
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8001532:	6065      	str	r5, [r4, #4]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8001534:	1c20      	adds	r0, r4, #0
#endif
  
  u8g->dev = dev;
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8001536:	60ae      	str	r6, [r5, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8001538:	f7ff ffd6 	bl	80014e8 <u8g_Begin>
}
 800153c:	bd70      	pop	{r4, r5, r6, pc}

0800153e <u8g_InitSPI>:


#if defined(U8G_WITH_PINLIST)  
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
 800153e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001540:	1c04      	adds	r4, r0, #0
 8001542:	b085      	sub	sp, #20
 8001544:	1c1d      	adds	r5, r3, #0
 8001546:	ab0a      	add	r3, sp, #40	; 0x28
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	1c0f      	adds	r7, r1, #0
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	ab0b      	add	r3, sp, #44	; 0x2c
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	1c16      	adds	r6, r2, #0
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	ab0c      	add	r3, sp, #48	; 0x30
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	9303      	str	r3, [sp, #12]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 800155c:	f7ff fee6 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 8001560:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 8001562:	466a      	mov	r2, sp
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 8001564:	3338      	adds	r3, #56	; 0x38
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 8001566:	7912      	ldrb	r2, [r2, #4]
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8001568:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
  u8g->pin_list[U8G_PI_MOSI] = mosi;
  u8g->pin_list[U8G_PI_CS] = cs;
 800156a:	3b02      	subs	r3, #2
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
 800156c:	709e      	strb	r6, [r3, #2]
  u8g->pin_list[U8G_PI_MOSI] = mosi;
 800156e:	70dd      	strb	r5, [r3, #3]
  u8g->pin_list[U8G_PI_CS] = cs;
 8001570:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 8001572:	466a      	mov	r2, sp
 8001574:	7a12      	ldrb	r2, [r2, #8]
 8001576:	3b01      	subs	r3, #1
 8001578:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 800157a:	466a      	mov	r2, sp
 800157c:	7b12      	ldrb	r2, [r2, #12]
 800157e:	3b01      	subs	r3, #1
 8001580:	701a      	strb	r2, [r3, #0]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8001582:	1c20      	adds	r0, r4, #0
 8001584:	f7ff ffb0 	bl	80014e8 <u8g_Begin>
}
 8001588:	b005      	add	sp, #20
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800158c <u8g_InitHWSPI>:

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
 800158c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800158e:	1c04      	adds	r4, r0, #0
 8001590:	1c1d      	adds	r5, r3, #0
 8001592:	ab08      	add	r3, sp, #32
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	1c0f      	adds	r7, r1, #0
 8001598:	1c16      	adds	r6, r2, #0
 800159a:	9301      	str	r3, [sp, #4]
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 800159c:	f7ff fec6 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 80015a0:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_RESET] = reset;
 80015a2:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 80015a4:	3336      	adds	r3, #54	; 0x36

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 80015a6:	6067      	str	r7, [r4, #4]
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_RESET] = reset;
 80015a8:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
 80015aa:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 80015ac:	3b01      	subs	r3, #1
 80015ae:	701d      	strb	r5, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 80015b0:	3b01      	subs	r3, #1
 80015b2:	701a      	strb	r2, [r3, #0]
  
  return u8g_Begin(u8g);
 80015b4:	1c20      	adds	r0, r4, #0
 80015b6:	f7ff ff97 	bl	80014e8 <u8g_Begin>
}
 80015ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080015bc <u8g_InitI2C>:

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	1c04      	adds	r4, r0, #0
 80015c0:	1c0e      	adds	r6, r1, #0
 80015c2:	1c15      	adds	r5, r2, #0
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 80015c4:	f7ff feb2 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
 80015c8:	1c23      	adds	r3, r4, #0
 80015ca:	333f      	adds	r3, #63	; 0x3f

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 80015cc:	6066      	str	r6, [r4, #4]
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
  
  return u8g_Begin(u8g);
 80015ce:	1c20      	adds	r0, r4, #0
{
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
 80015d0:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 80015d2:	f7ff ff89 	bl	80014e8 <u8g_Begin>
}
 80015d6:	bd70      	pop	{r4, r5, r6, pc}

080015d8 <u8g_Init8BitFixedPort>:


uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	1c04      	adds	r4, r0, #0
 80015dc:	b085      	sub	sp, #20
 80015de:	1c1d      	adds	r5, r3, #0
 80015e0:	ab0a      	add	r3, sp, #40	; 0x28
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	1c0f      	adds	r7, r1, #0
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	1c16      	adds	r6, r2, #0
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	ab0c      	add	r3, sp, #48	; 0x30
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	9303      	str	r3, [sp, #12]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 80015f6:	f7ff fe99 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 80015fa:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
 80015fc:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 80015fe:	3338      	adds	r3, #56	; 0x38
uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8001600:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
 8001602:	3b02      	subs	r3, #2
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
 8001604:	709e      	strb	r6, [r3, #2]
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
 8001606:	7912      	ldrb	r2, [r2, #4]
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
 8001608:	701d      	strb	r5, [r3, #0]
  u8g->pin_list[U8G_PI_DI] = di;
 800160a:	3b01      	subs	r3, #1
 800160c:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RW] = rw;
 800160e:	466a      	mov	r2, sp
 8001610:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_RESET] = reset;

  return u8g_Begin(u8g);
 8001612:	1c20      	adds	r0, r4, #0
  /* assign user pins */

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
 8001614:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RESET] = reset;
 8001616:	466a      	mov	r2, sp
 8001618:	7b12      	ldrb	r2, [r2, #12]
 800161a:	3b01      	subs	r3, #1
 800161c:	701a      	strb	r2, [r3, #0]

  return u8g_Begin(u8g);
 800161e:	f7ff ff63 	bl	80014e8 <u8g_Begin>
}
 8001622:	b005      	add	sp, #20
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001626 <u8g_Init8Bit>:

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
 8001626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001628:	b08d      	sub	sp, #52	; 0x34
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	ab12      	add	r3, sp, #72	; 0x48
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	1c16      	adds	r6, r2, #0
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	ab13      	add	r3, sp, #76	; 0x4c
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	aa0c      	add	r2, sp, #48	; 0x30
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	ab14      	add	r3, sp, #80	; 0x50
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c04      	adds	r4, r0, #0
 8001642:	9303      	str	r3, [sp, #12]
 8001644:	ab15      	add	r3, sp, #84	; 0x54
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	1c0f      	adds	r7, r1, #0
 800164a:	9304      	str	r3, [sp, #16]
 800164c:	ab16      	add	r3, sp, #88	; 0x58
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	9305      	str	r3, [sp, #20]
 8001652:	ab17      	add	r3, sp, #92	; 0x5c
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	9306      	str	r3, [sp, #24]
 8001658:	ab18      	add	r3, sp, #96	; 0x60
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	9307      	str	r3, [sp, #28]
 800165e:	ab19      	add	r3, sp, #100	; 0x64
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	9308      	str	r3, [sp, #32]
 8001664:	2319      	movs	r3, #25
 8001666:	189b      	adds	r3, r3, r2
 8001668:	7fdb      	ldrb	r3, [r3, #31]
 800166a:	9309      	str	r3, [sp, #36]	; 0x24
 800166c:	231d      	movs	r3, #29
 800166e:	189b      	adds	r3, r3, r2
 8001670:	7fdb      	ldrb	r3, [r3, #31]
 8001672:	930a      	str	r3, [sp, #40]	; 0x28
 8001674:	ab1c      	add	r3, sp, #112	; 0x70
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	930b      	str	r3, [sp, #44]	; 0x2c
 800167a:	ab1d      	add	r3, sp, #116	; 0x74
 800167c:	781d      	ldrb	r5, [r3, #0]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 800167e:	f7ff fe55 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 8001682:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8001684:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_D1] = d1;
 8001686:	7812      	ldrb	r2, [r2, #0]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8001688:	3339      	adds	r3, #57	; 0x39
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 800168a:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 800168c:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_D2] = d2;
 800168e:	466a      	mov	r2, sp
 8001690:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8001692:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
 8001694:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_D3] = d3;
 8001696:	466a      	mov	r2, sp
 8001698:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
 800169a:	3b01      	subs	r3, #1
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
 800169c:	711a      	strb	r2, [r3, #4]
  u8g->pin_list[U8G_PI_D4] = d4;
 800169e:	466a      	mov	r2, sp
 80016a0:	7b12      	ldrb	r2, [r2, #12]
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
 80016a2:	2120      	movs	r1, #32

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
 80016a4:	715a      	strb	r2, [r3, #5]
  u8g->pin_list[U8G_PI_D5] = d5;
 80016a6:	466a      	mov	r2, sp
 80016a8:	7c12      	ldrb	r2, [r2, #16]
  u8g->pin_list[U8G_PI_CS2] = cs2;
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
  u8g->pin_list[U8G_PI_RESET] = reset;
  
  return u8g_Begin(u8g);
 80016aa:	1c20      	adds	r0, r4, #0
  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
 80016ac:	719a      	strb	r2, [r3, #6]
  u8g->pin_list[U8G_PI_D6] = d6;
 80016ae:	466a      	mov	r2, sp
 80016b0:	7d12      	ldrb	r2, [r2, #20]
 80016b2:	71da      	strb	r2, [r3, #7]
  u8g->pin_list[U8G_PI_D7] = d7;
 80016b4:	466a      	mov	r2, sp
 80016b6:	7e12      	ldrb	r2, [r2, #24]
 80016b8:	721a      	strb	r2, [r3, #8]

  u8g->pin_list[U8G_PI_EN] = en;
 80016ba:	466a      	mov	r2, sp
 80016bc:	7f12      	ldrb	r2, [r2, #28]
  u8g->pin_list[U8G_PI_CS1] = cs1;
 80016be:	3b02      	subs	r3, #2
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
 80016c0:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_CS1] = cs1;
 80016c2:	466a      	mov	r2, sp
 80016c4:	1852      	adds	r2, r2, r1
 80016c6:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_CS2] = cs2;
 80016c8:	2124      	movs	r1, #36	; 0x24
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
 80016ca:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_CS2] = cs2;
 80016cc:	466a      	mov	r2, sp
 80016ce:	1852      	adds	r2, r2, r1
 80016d0:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_DI] = di;
 80016d2:	2128      	movs	r1, #40	; 0x28
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_EN] = en;
  u8g->pin_list[U8G_PI_CS1] = cs1;
  u8g->pin_list[U8G_PI_CS2] = cs2;
 80016d4:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_DI] = di;
 80016d6:	466a      	mov	r2, sp
 80016d8:	1852      	adds	r2, r2, r1
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RW] = rw;
 80016e0:	212c      	movs	r1, #44	; 0x2c
 80016e2:	466a      	mov	r2, sp
 80016e4:	1852      	adds	r2, r2, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RESET] = reset;
 80016ea:	3b01      	subs	r3, #1
 80016ec:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 80016ee:	f7ff fefb 	bl	80014e8 <u8g_Begin>
}
 80016f2:	b00d      	add	sp, #52	; 0x34
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f6 <u8g_InitRW8Bit>:

*/

uint8_t u8g_InitRW8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
{
 80016f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f8:	b08d      	sub	sp, #52	; 0x34
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	ab12      	add	r3, sp, #72	; 0x48
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	1c16      	adds	r6, r2, #0
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	ab13      	add	r3, sp, #76	; 0x4c
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	aa0c      	add	r2, sp, #48	; 0x30
 800170a:	9303      	str	r3, [sp, #12]
 800170c:	ab14      	add	r3, sp, #80	; 0x50
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	1c04      	adds	r4, r0, #0
 8001712:	9304      	str	r3, [sp, #16]
 8001714:	ab15      	add	r3, sp, #84	; 0x54
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	1c0f      	adds	r7, r1, #0
 800171a:	9305      	str	r3, [sp, #20]
 800171c:	ab16      	add	r3, sp, #88	; 0x58
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	9306      	str	r3, [sp, #24]
 8001722:	ab17      	add	r3, sp, #92	; 0x5c
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	9307      	str	r3, [sp, #28]
 8001728:	ab18      	add	r3, sp, #96	; 0x60
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	9308      	str	r3, [sp, #32]
 800172e:	ab19      	add	r3, sp, #100	; 0x64
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	9309      	str	r3, [sp, #36]	; 0x24
 8001734:	2319      	movs	r3, #25
 8001736:	189b      	adds	r3, r3, r2
 8001738:	7fdb      	ldrb	r3, [r3, #31]
 800173a:	930a      	str	r3, [sp, #40]	; 0x28
 800173c:	231d      	movs	r3, #29
 800173e:	189b      	adds	r3, r3, r2
 8001740:	7fdb      	ldrb	r3, [r3, #31]
 8001742:	930b      	str	r3, [sp, #44]	; 0x2c
 8001744:	ab1c      	add	r3, sp, #112	; 0x70
 8001746:	781d      	ldrb	r5, [r3, #0]
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
 8001748:	f7ff fdf0 	bl	800132c <u8g_init_data>
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 800174c:	466a      	mov	r2, sp
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 800174e:	1c23      	adds	r3, r4, #0
  u8g->pin_list[U8G_PI_D1] = d1;
 8001750:	7912      	ldrb	r2, [r2, #4]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8001752:	3339      	adds	r3, #57	; 0x39
  uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
{
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
  u8g->dev = dev;
 8001754:	6067      	str	r7, [r4, #4]
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
 8001756:	705a      	strb	r2, [r3, #1]
  u8g->pin_list[U8G_PI_D2] = d2;
 8001758:	466a      	mov	r2, sp
 800175a:	7a12      	ldrb	r2, [r2, #8]
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 800175c:	2120      	movs	r1, #32
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
 800175e:	709a      	strb	r2, [r3, #2]
  u8g->pin_list[U8G_PI_D3] = d3;
 8001760:	466a      	mov	r2, sp
 8001762:	7b12      	ldrb	r2, [r2, #12]
  u8g_init_data(u8g);
  u8g->dev = dev;
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
 8001764:	701e      	strb	r6, [r3, #0]
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
 8001766:	70da      	strb	r2, [r3, #3]
  u8g->pin_list[U8G_PI_D4] = d4;
 8001768:	466a      	mov	r2, sp
 800176a:	7c12      	ldrb	r2, [r2, #16]
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 800176c:	3b03      	subs	r3, #3

  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
 800176e:	71da      	strb	r2, [r3, #7]
  u8g->pin_list[U8G_PI_D5] = d5;
 8001770:	466a      	mov	r2, sp
 8001772:	7d12      	ldrb	r2, [r2, #20]
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_WR] = wr;
  u8g->pin_list[U8G_PI_RD] = rd;
  u8g->pin_list[U8G_PI_RESET] = reset;
  
  return u8g_Begin(u8g);
 8001774:	1c20      	adds	r0, r4, #0
  u8g->pin_list[U8G_PI_D0] = d0;
  u8g->pin_list[U8G_PI_D1] = d1;
  u8g->pin_list[U8G_PI_D2] = d2;
  u8g->pin_list[U8G_PI_D3] = d3;
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
 8001776:	721a      	strb	r2, [r3, #8]
  u8g->pin_list[U8G_PI_D6] = d6;
 8001778:	466a      	mov	r2, sp
 800177a:	7e12      	ldrb	r2, [r2, #24]
 800177c:	725a      	strb	r2, [r3, #9]
  u8g->pin_list[U8G_PI_D7] = d7;
 800177e:	466a      	mov	r2, sp
 8001780:	7f12      	ldrb	r2, [r2, #28]
 8001782:	729a      	strb	r2, [r3, #10]

  u8g->pin_list[U8G_PI_CS] = cs;
 8001784:	466a      	mov	r2, sp
 8001786:	1852      	adds	r2, r2, r1
 8001788:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 800178a:	2124      	movs	r1, #36	; 0x24
  u8g->pin_list[U8G_PI_D4] = d4;
  u8g->pin_list[U8G_PI_D5] = d5;
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
 800178c:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_A0] = a0;
 800178e:	466a      	mov	r2, sp
 8001790:	1852      	adds	r2, r2, r1
 8001792:	7812      	ldrb	r2, [r2, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_WR] = wr;
 8001798:	2128      	movs	r1, #40	; 0x28
 800179a:	466a      	mov	r2, sp
 800179c:	1852      	adds	r2, r2, r1
 800179e:	7812      	ldrb	r2, [r2, #0]
  u8g->pin_list[U8G_PI_RD] = rd;
 80017a0:	212c      	movs	r1, #44	; 0x2c
  u8g->pin_list[U8G_PI_D6] = d6;
  u8g->pin_list[U8G_PI_D7] = d7;

  u8g->pin_list[U8G_PI_CS] = cs;
  u8g->pin_list[U8G_PI_A0] = a0;
  u8g->pin_list[U8G_PI_WR] = wr;
 80017a2:	731a      	strb	r2, [r3, #12]
  u8g->pin_list[U8G_PI_RD] = rd;
 80017a4:	466a      	mov	r2, sp
 80017a6:	1852      	adds	r2, r2, r1
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	3303      	adds	r3, #3
 80017ac:	701a      	strb	r2, [r3, #0]
  u8g->pin_list[U8G_PI_RESET] = reset;
 80017ae:	3b04      	subs	r3, #4
 80017b0:	701d      	strb	r5, [r3, #0]
  
  return u8g_Begin(u8g);
 80017b2:	f7ff fe99 	bl	80014e8 <u8g_Begin>
}
 80017b6:	b00d      	add	sp, #52	; 0x34
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ba <u8g_FirstPage>:
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 80017ba:	b508      	push	{r3, lr}
  u8g_FirstPageLL(u8g, u8g->dev);
 80017bc:	6841      	ldr	r1, [r0, #4]
 80017be:	f7ff fdfa 	bl	80013b6 <u8g_FirstPageLL>
}
 80017c2:	bd08      	pop	{r3, pc}

080017c4 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 80017c4:	6983      	ldr	r3, [r0, #24]
{
  u8g_FirstPageLL(u8g, u8g->dev);
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
 80017c6:	b510      	push	{r4, lr}
 80017c8:	1c04      	adds	r4, r0, #0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d000      	beq.n	80017d0 <u8g_NextPage+0xc>
  {
    u8g->cursor_fn(u8g);
 80017ce:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 80017d0:	6861      	ldr	r1, [r4, #4]
 80017d2:	1c20      	adds	r0, r4, #0
 80017d4:	f7ff fe09 	bl	80013ea <u8g_NextPageLL>
}
 80017d8:	bd10      	pop	{r4, pc}

080017da <u8g_SetContrast>:

uint8_t u8g_SetContrast(u8g_t *u8g, uint8_t contrast)
{
 80017da:	b508      	push	{r3, lr}
 80017dc:	1c0a      	adds	r2, r1, #0
  return u8g_SetContrastLL(u8g, u8g->dev, contrast);
 80017de:	6841      	ldr	r1, [r0, #4]
 80017e0:	f7ff fe20 	bl	8001424 <u8g_SetContrastLL>
}
 80017e4:	bd08      	pop	{r3, pc}

080017e6 <u8g_SleepOn>:

void u8g_SleepOn(u8g_t *u8g)
{
 80017e6:	b508      	push	{r3, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_ON, NULL);
 80017e8:	6841      	ldr	r1, [r0, #4]
 80017ea:	2210      	movs	r2, #16
 80017ec:	2300      	movs	r3, #0
 80017ee:	f7ff fdc9 	bl	8001384 <u8g_call_dev_fn>
}
 80017f2:	bd08      	pop	{r3, pc}

080017f4 <u8g_SleepOff>:

void u8g_SleepOff(u8g_t *u8g)
{
 80017f4:	b508      	push	{r3, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_OFF, NULL);
 80017f6:	6841      	ldr	r1, [r0, #4]
 80017f8:	2211      	movs	r2, #17
 80017fa:	2300      	movs	r3, #0
 80017fc:	f7ff fdc2 	bl	8001384 <u8g_call_dev_fn>
}
 8001800:	bd08      	pop	{r3, pc}

08001802 <u8g_DrawPixel>:


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
 8001802:	b510      	push	{r4, lr}
 8001804:	1c0c      	adds	r4, r1, #0
 8001806:	1c13      	adds	r3, r2, #0
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
 8001808:	6841      	ldr	r1, [r0, #4]
 800180a:	1c22      	adds	r2, r4, #0
 800180c:	f7ff fe12 	bl	8001434 <u8g_DrawPixelLL>
}
 8001810:	bd10      	pop	{r4, pc}

08001812 <u8g_Draw8Pixel>:

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8001812:	b570      	push	{r4, r5, r6, lr}
 8001814:	1c1d      	adds	r5, r3, #0
 8001816:	ab04      	add	r3, sp, #16
 8001818:	781c      	ldrb	r4, [r3, #0]
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 800181a:	1c03      	adds	r3, r0, #0
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800181c:	1c0e      	adds	r6, r1, #0
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 800181e:	332d      	adds	r3, #45	; 0x2d
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8001820:	6841      	ldr	r1, [r0, #4]
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8001822:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 8001824:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8001826:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 8001828:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 800182a:	223b      	movs	r2, #59	; 0x3b
 800182c:	f7ff fdaa 	bl	8001384 <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
 8001830:	bd70      	pop	{r4, r5, r6, pc}

08001832 <u8g_Draw4TPixel>:

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8001832:	b570      	push	{r4, r5, r6, lr}
 8001834:	1c1d      	adds	r5, r3, #0
 8001836:	ab04      	add	r3, sp, #16
 8001838:	781c      	ldrb	r4, [r3, #0]
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 800183a:	1c03      	adds	r3, r0, #0
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800183c:	1c0e      	adds	r6, r1, #0
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 800183e:	332d      	adds	r3, #45	; 0x2d
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8001840:	6841      	ldr	r1, [r0, #4]
}

void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 8001842:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 8001844:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8001846:	70dd      	strb	r5, [r3, #3]
  arg->pixel = pixel;
 8001848:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
 800184a:	222d      	movs	r2, #45	; 0x2d
 800184c:	f7ff fd9a 	bl	8001384 <u8g_call_dev_fn>
}

void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
 8001850:	bd70      	pop	{r4, r5, r6, pc}

08001852 <u8g_SetColorEntry>:
  r: value for red (0..255)
  g: value for green (0..255)
  b: value for blue (0..255)
*/
void u8g_SetColorEntry(u8g_t *u8g, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8001852:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001854:	ac06      	add	r4, sp, #24
 8001856:	7825      	ldrb	r5, [r4, #0]
  u8g_dev_arg_irgb_t irgb;
  irgb.idx = idx;
 8001858:	ac01      	add	r4, sp, #4
 800185a:	7021      	strb	r1, [r4, #0]
  irgb.r = r;
 800185c:	7062      	strb	r2, [r4, #1]
  irgb.g = g;
 800185e:	70a3      	strb	r3, [r4, #2]
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
 8001860:	6841      	ldr	r1, [r0, #4]
 8001862:	223c      	movs	r2, #60	; 0x3c
 8001864:	1c23      	adds	r3, r4, #0
{
  u8g_dev_arg_irgb_t irgb;
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
 8001866:	70e5      	strb	r5, [r4, #3]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
 8001868:	f7ff fd8c 	bl	8001384 <u8g_call_dev_fn>
}
 800186c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800186e <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 800186e:	3031      	adds	r0, #49	; 0x31
 8001870:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 8001872:	4770      	bx	lr

08001874 <u8g_SetHiColor>:

void u8g_SetHiColor(u8g_t *u8g, uint16_t rgb)
{
  u8g->arg_pixel.color = rgb&255;
 8001874:	1c03      	adds	r3, r0, #0
 8001876:	3331      	adds	r3, #49	; 0x31
 8001878:	7019      	strb	r1, [r3, #0]
  u8g->arg_pixel.hi_color = rgb>>8;
 800187a:	3032      	adds	r0, #50	; 0x32
 800187c:	0a09      	lsrs	r1, r1, #8
 800187e:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 8001880:	4770      	bx	lr

08001882 <u8g_SetHiColorByRGB>:

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
  g >>= 2;
 8001882:	0892      	lsrs	r2, r2, #2
  u8g->arg_pixel.hi_color = rgb>>8;
  /*u8g->color_index = idx; */ /* must be removed */
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
 8001884:	b510      	push	{r4, lr}
  
  r &= ~7;
  g >>= 2;
  b >>= 3;
 8001886:	08db      	lsrs	r3, r3, #3
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
 8001888:	0154      	lsls	r4, r2, #5
 800188a:	4323      	orrs	r3, r4
 800188c:	1c04      	adds	r4, r0, #0
 800188e:	3431      	adds	r4, #49	; 0x31
 8001890:	7023      	strb	r3, [r4, #0]
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
 8001892:	2307      	movs	r3, #7
  g >>= 2;
  b >>= 3;
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
  u8g->arg_pixel.hi_color = r;
  u8g->arg_pixel.hi_color |= (g>>3) & 7;
 8001894:	08d2      	lsrs	r2, r2, #3
}

void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  
  r &= ~7;
 8001896:	4399      	bics	r1, r3
  g >>= 2;
  b >>= 3;
  u8g->arg_pixel.color = b;
  u8g->arg_pixel.color |= (g & 7) << 5;
  u8g->arg_pixel.hi_color = r;
  u8g->arg_pixel.hi_color |= (g>>3) & 7;
 8001898:	430a      	orrs	r2, r1
 800189a:	3032      	adds	r0, #50	; 0x32
 800189c:	7002      	strb	r2, [r0, #0]
  
  //u8g_SetHiColor(u8g, U8G_GET_HICOLOR_BY_RGB(r,g,b));
}
 800189e:	bd10      	pop	{r4, pc}

080018a0 <u8g_SetRGB>:

void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
 80018a0:	b510      	push	{r4, lr}
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
 80018a2:	7cc4      	ldrb	r4, [r0, #19]
 80018a4:	2c28      	cmp	r4, #40	; 0x28
 80018a6:	d109      	bne.n	80018bc <u8g_SetRGB+0x1c>
  {
    r &= 0x0e0;
    g &= 0x0e0;
 80018a8:	241f      	movs	r4, #31
 80018aa:	43a2      	bics	r2, r4

void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
{
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
  {
    r &= 0x0e0;
 80018ac:	43a1      	bics	r1, r4
    g &= 0x0e0;
    g >>= 3;
 80018ae:	08d2      	lsrs	r2, r2, #3
    b >>= 6;
    u8g->arg_pixel.color = r | g | b;
 80018b0:	4311      	orrs	r1, r2
  if ( u8g->mode == U8G_MODE_R3G3B2 ) 
  {
    r &= 0x0e0;
    g &= 0x0e0;
    g >>= 3;
    b >>= 6;
 80018b2:	099b      	lsrs	r3, r3, #6
    u8g->arg_pixel.color = r | g | b;
 80018b4:	4319      	orrs	r1, r3
 80018b6:	3031      	adds	r0, #49	; 0x31
 80018b8:	7001      	strb	r1, [r0, #0]
 80018ba:	e00c      	b.n	80018d6 <u8g_SetRGB+0x36>
  }
  else if ( u8g->mode == U8G_MODE_HICOLOR )
 80018bc:	2c30      	cmp	r4, #48	; 0x30
 80018be:	d102      	bne.n	80018c6 <u8g_SetRGB+0x26>
  {
    u8g_SetHiColorByRGB(u8g, r,g,b);
 80018c0:	f7ff ffdf 	bl	8001882 <u8g_SetHiColorByRGB>
 80018c4:	e007      	b.n	80018d6 <u8g_SetRGB+0x36>
  }
  else
  {
    u8g->arg_pixel.color = r;
 80018c6:	1c04      	adds	r4, r0, #0
 80018c8:	3431      	adds	r4, #49	; 0x31
 80018ca:	7021      	strb	r1, [r4, #0]
    u8g->arg_pixel.hi_color = g;
 80018cc:	1c01      	adds	r1, r0, #0
    u8g->arg_pixel.blue = b;
 80018ce:	3033      	adds	r0, #51	; 0x33
    u8g_SetHiColorByRGB(u8g, r,g,b);
  }
  else
  {
    u8g->arg_pixel.color = r;
    u8g->arg_pixel.hi_color = g;
 80018d0:	3132      	adds	r1, #50	; 0x32
 80018d2:	700a      	strb	r2, [r1, #0]
    u8g->arg_pixel.blue = b;
 80018d4:	7003      	strb	r3, [r0, #0]
  }
}
 80018d6:	bd10      	pop	{r4, pc}

080018d8 <u8g_GetColorIndex>:


uint8_t u8g_GetColorIndex(u8g_t *u8g)
{
  return u8g->arg_pixel.color;
 80018d8:	3031      	adds	r0, #49	; 0x31
 80018da:	7800      	ldrb	r0, [r0, #0]
}
 80018dc:	4770      	bx	lr

080018de <u8g_GetDefaultForegroundColor>:

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
 80018de:	7cc3      	ldrb	r3, [r0, #19]
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
 80018e0:	20ff      	movs	r0, #255	; 0xff

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 80018e2:	2b28      	cmp	r3, #40	; 0x28
 80018e4:	d003      	beq.n	80018ee <u8g_GetDefaultForegroundColor+0x10>
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
 80018e6:	2003      	movs	r0, #3
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d000      	beq.n	80018ee <u8g_GetDefaultForegroundColor+0x10>
    return 3;         /* max intensity */
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
 80018ec:	2001      	movs	r0, #1
  return 1;
}
 80018ee:	4770      	bx	lr

080018f0 <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
 80018f0:	b510      	push	{r4, lr}
 80018f2:	1c04      	adds	r4, r0, #0
  if ( u8g->mode == U8G_MODE_HICOLOR )
 80018f4:	7cc3      	ldrb	r3, [r0, #19]
 80018f6:	3431      	adds	r4, #49	; 0x31
 80018f8:	2b30      	cmp	r3, #48	; 0x30
 80018fa:	d104      	bne.n	8001906 <u8g_SetDefaultForegroundColor+0x16>
  {
    u8g->arg_pixel.color = 0x0ff;
 80018fc:	23ff      	movs	r3, #255	; 0xff
    u8g->arg_pixel.hi_color = 0x0ff;
 80018fe:	3032      	adds	r0, #50	; 0x32

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
  if ( u8g->mode == U8G_MODE_HICOLOR )
  {
    u8g->arg_pixel.color = 0x0ff;
 8001900:	7023      	strb	r3, [r4, #0]
    u8g->arg_pixel.hi_color = 0x0ff;
 8001902:	7003      	strb	r3, [r0, #0]
 8001904:	e002      	b.n	800190c <u8g_SetDefaultForegroundColor+0x1c>
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
 8001906:	f7ff ffea 	bl	80018de <u8g_GetDefaultForegroundColor>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 800190a:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
 800190c:	bd10      	pop	{r4, pc}

0800190e <u8g_GetDefaultBackgroundColor>:

uint8_t u8g_GetDefaultBackgroundColor(u8g_t *u8g)
{
  return 0;
}
 800190e:	2000      	movs	r0, #0
 8001910:	4770      	bx	lr

08001912 <u8g_SetDefaultBackgroundColor>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8001912:	2300      	movs	r3, #0
 8001914:	3031      	adds	r0, #49	; 0x31
 8001916:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultBackgroundColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultBackgroundColor(u8g));         /* pixel on / black */
}
 8001918:	4770      	bx	lr

0800191a <u8g_GetDefaultMidColor>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 800191a:	7cc3      	ldrb	r3, [r0, #19]
    return 0x06d;     /* gray: 01101101 */
 800191c:	206d      	movs	r0, #109	; 0x6d

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 800191e:	2b28      	cmp	r3, #40	; 0x28
 8001920:	d000      	beq.n	8001924 <u8g_GetDefaultMidColor+0xa>
    return 0x06d;     /* gray: 01101101 */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
 8001922:	2001      	movs	r0, #1
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
  return 1;   /* default */
}
 8001924:	4770      	bx	lr

08001926 <u8g_SetDefaultMidColor>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 8001926:	7cc2      	ldrb	r2, [r0, #19]
    return 0x06d;     /* gray: 01101101 */
 8001928:	236d      	movs	r3, #109	; 0x6d

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
 800192a:	2a28      	cmp	r2, #40	; 0x28
 800192c:	d000      	beq.n	8001930 <u8g_SetDefaultMidColor+0xa>
    return 0x06d;     /* gray: 01101101 */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
 800192e:	2301      	movs	r3, #1
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8001930:	3031      	adds	r0, #49	; 0x31
 8001932:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultMidColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultMidColor(u8g));
}
 8001934:	4770      	bx	lr
 8001936:	46c0      	nop			; (mov r8, r8)

08001938 <u8g_state_dummy_cb>:
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
  /* the dummy procedure does nothing */
}
 8001938:	4770      	bx	lr

0800193a <u8g_SetHardwareBackup>:

void u8g_SetHardwareBackup(u8g_t *u8g, u8g_state_cb backup_cb)
{
 800193a:	b508      	push	{r3, lr}
  u8g->state_cb = backup_cb;
 800193c:	6441      	str	r1, [r0, #68]	; 0x44
  /* in most cases the init message was already sent, so this will backup the */
  /* current u8g state */
  backup_cb(U8G_STATE_MSG_BACKUP_U8G);
 800193e:	2003      	movs	r0, #3
 8001940:	4788      	blx	r1
}
 8001942:	bd08      	pop	{r3, pc}

08001944 <u8g_backup_spi>:

#else

void u8g_backup_spi(uint8_t msg)
{
}
 8001944:	4770      	bx	lr

08001946 <u8g_pb16v1_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
  do
  {
    *ptr++ = 0;
 8001946:	2100      	movs	r1, #0

void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 8001948:	7943      	ldrb	r3, [r0, #5]
void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;


void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 800194a:	6882      	ldr	r2, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	18d3      	adds	r3, r2, r3
  do
  {
    *ptr++ = 0;
 8001950:	7011      	strb	r1, [r2, #0]
 8001952:	3201      	adds	r2, #1
  } while( ptr != end_ptr );
 8001954:	429a      	cmp	r2, r3
 8001956:	d1fb      	bne.n	8001950 <u8g_pb16v1_Clear+0xa>
}
 8001958:	4770      	bx	lr

0800195a <u8g_pb16v1_Init>:

/* Obsolete, usually set by the init of the structure */
void u8g_pb16v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
{
 800195a:	b508      	push	{r3, lr}
  b->buf = buf;
 800195c:	6081      	str	r1, [r0, #8]
  b->width = width;
 800195e:	7142      	strb	r2, [r0, #5]
  u8g_pb16v1_Clear(b);
 8001960:	f7ff fff1 	bl	8001946 <u8g_pb16v1_Clear>
}
 8001964:	bd08      	pop	{r3, pc}

08001966 <u8g_pb16v1_set_pixel>:

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8001966:	b530      	push	{r4, r5, lr}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
 8001968:	7885      	ldrb	r5, [r0, #2]
}

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 800196a:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 800196c:	1b52      	subs	r2, r2, r5
 800196e:	b2d2      	uxtb	r2, r2
  if ( y >= 8 )
 8001970:	2a07      	cmp	r2, #7
 8001972:	d903      	bls.n	800197c <u8g_pb16v1_set_pixel+0x16>
  {
    ptr += b->width;
 8001974:	7940      	ldrb	r0, [r0, #5]
 8001976:	1824      	adds	r4, r4, r0
    y &= 0x07;
 8001978:	2007      	movs	r0, #7
 800197a:	4002      	ands	r2, r0
  }
  mask = 1;
  mask <<= y;
 800197c:	2001      	movs	r0, #1
 800197e:	4090      	lsls	r0, r2
  ptr += x;
 8001980:	1861      	adds	r1, r4, r1
  {
    ptr += b->width;
    y &= 0x07;
  }
  mask = 1;
  mask <<= y;
 8001982:	b2c2      	uxtb	r2, r0
 8001984:	7808      	ldrb	r0, [r1, #0]
  ptr += x;
  if ( color_index )
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <u8g_pb16v1_set_pixel+0x28>
  {
    *ptr |= mask;
 800198a:	4310      	orrs	r0, r2
 800198c:	e000      	b.n	8001990 <u8g_pb16v1_set_pixel+0x2a>
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 800198e:	4390      	bics	r0, r2
 8001990:	7008      	strb	r0, [r1, #0]
  }
}
 8001992:	bd30      	pop	{r4, r5, pc}

08001994 <u8g_pb16v1_SetPixel>:


void u8g_pb16v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8001994:	b510      	push	{r4, lr}
  if ( arg_pixel->y < b->p.page_y0 )
 8001996:	7883      	ldrb	r3, [r0, #2]
 8001998:	784a      	ldrb	r2, [r1, #1]
 800199a:	4293      	cmp	r3, r2
 800199c:	d80a      	bhi.n	80019b4 <u8g_pb16v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 800199e:	78c3      	ldrb	r3, [r0, #3]
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d307      	bcc.n	80019b4 <u8g_pb16v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 80019a4:	780c      	ldrb	r4, [r1, #0]
 80019a6:	7943      	ldrb	r3, [r0, #5]
 80019a8:	42a3      	cmp	r3, r4
 80019aa:	d903      	bls.n	80019b4 <u8g_pb16v1_SetPixel+0x20>
    return;
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 80019ac:	790b      	ldrb	r3, [r1, #4]
 80019ae:	1c21      	adds	r1, r4, #0
 80019b0:	f7ff ffd9 	bl	8001966 <u8g_pb16v1_set_pixel>
}
 80019b4:	bd10      	pop	{r4, pc}

080019b6 <u8g_pb16v1_Set8PixelStd>:

void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80019b6:	b570      	push	{r4, r5, r6, lr}
 80019b8:	1c06      	adds	r6, r0, #0
 80019ba:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 80019bc:	788d      	ldrb	r5, [r1, #2]
  do
  {
    if ( pixel & 128 )
 80019be:	b26b      	sxtb	r3, r5
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da03      	bge.n	80019cc <u8g_pb16v1_Set8PixelStd+0x16>
    {
      u8g_pb16v1_SetPixel(b, arg_pixel);
 80019c4:	1c30      	adds	r0, r6, #0
 80019c6:	1c21      	adds	r1, r4, #0
 80019c8:	f7ff ffe4 	bl	8001994 <u8g_pb16v1_SetPixel>
    }
    switch( arg_pixel->dir )
 80019cc:	78e0      	ldrb	r0, [r4, #3]
 80019ce:	2803      	cmp	r0, #3
 80019d0:	d810      	bhi.n	80019f4 <u8g_pb16v1_Set8PixelStd+0x3e>
 80019d2:	f001 f815 	bl	8002a00 <__gnu_thumb1_case_uqi>
 80019d6:	0502      	.short	0x0502
 80019d8:	0c08      	.short	0x0c08
    {
      case 0: arg_pixel->x++; break;
 80019da:	7823      	ldrb	r3, [r4, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	e004      	b.n	80019ea <u8g_pb16v1_Set8PixelStd+0x34>
      case 1: arg_pixel->y++; break;
 80019e0:	7863      	ldrb	r3, [r4, #1]
 80019e2:	3301      	adds	r3, #1
 80019e4:	e005      	b.n	80019f2 <u8g_pb16v1_Set8PixelStd+0x3c>
      case 2: arg_pixel->x--; break;
 80019e6:	7823      	ldrb	r3, [r4, #0]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	7023      	strb	r3, [r4, #0]
 80019ec:	e002      	b.n	80019f4 <u8g_pb16v1_Set8PixelStd+0x3e>
      case 3: arg_pixel->y--; break;
 80019ee:	7863      	ldrb	r3, [r4, #1]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	7063      	strb	r3, [r4, #1]
    }
    pixel <<= 1;
 80019f4:	006d      	lsls	r5, r5, #1
 80019f6:	b2ed      	uxtb	r5, r5
  } while( pixel != 0  );
 80019f8:	2d00      	cmp	r5, #0
 80019fa:	d1e0      	bne.n	80019be <u8g_pb16v1_Set8PixelStd+0x8>
}
 80019fc:	bd70      	pop	{r4, r5, r6, pc}

080019fe <u8g_pb16v1_Set8PixelOpt2>:


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80019fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a00:	9001      	str	r0, [sp, #4]
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8001a02:	78c8      	ldrb	r0, [r1, #3]
  } while( pixel != 0  );
}


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8001a04:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8001a06:	788d      	ldrb	r5, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8001a08:	2803      	cmp	r0, #3
 8001a0a:	d80e      	bhi.n	8001a2a <u8g_pb16v1_Set8PixelOpt2+0x2c>
 8001a0c:	f000 fff8 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8001a10:	0a070502 	.word	0x0a070502

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8001a14:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
 8001a16:	2701      	movs	r7, #1
 8001a18:	e009      	b.n	8001a2e <u8g_pb16v1_Set8PixelOpt2+0x30>
    case 1: dy++; break;
 8001a1a:	2601      	movs	r6, #1
 8001a1c:	e003      	b.n	8001a26 <u8g_pb16v1_Set8PixelOpt2+0x28>

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8001a1e:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
 8001a20:	27ff      	movs	r7, #255	; 0xff
 8001a22:	e004      	b.n	8001a2e <u8g_pb16v1_Set8PixelOpt2+0x30>
    case 3: dy--; break;
 8001a24:	26ff      	movs	r6, #255	; 0xff


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8001a26:	2700      	movs	r7, #0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
 8001a28:	e001      	b.n	8001a2e <u8g_pb16v1_Set8PixelOpt2+0x30>

void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8001a2a:	2600      	movs	r6, #0


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8001a2c:	1c37      	adds	r7, r6, #0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8001a2e:	b26b      	sxtb	r3, r5
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da03      	bge.n	8001a3c <u8g_pb16v1_Set8PixelOpt2+0x3e>
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8001a34:	9801      	ldr	r0, [sp, #4]
 8001a36:	1c21      	adds	r1, r4, #0
 8001a38:	f7ff ffac 	bl	8001994 <u8g_pb16v1_SetPixel>
    arg_pixel->x += dx;
 8001a3c:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8001a3e:	006d      	lsls	r5, r5, #1
  
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8001a44:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8001a46:	b2ed      	uxtb	r5, r5
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
    arg_pixel->y += dy;
 8001a48:	18f3      	adds	r3, r6, r3
 8001a4a:	7063      	strb	r3, [r4, #1]
    pixel <<= 1;
  } while( pixel != 0  );
 8001a4c:	2d00      	cmp	r5, #0
 8001a4e:	d1ee      	bne.n	8001a2e <u8g_pb16v1_Set8PixelOpt2+0x30>
  
}
 8001a50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001a52 <u8g_dev_pb16v1_base_fn>:

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001a52:	b570      	push	{r4, r5, r6, lr}
 8001a54:	1c1e      	adds	r6, r3, #0
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8001a56:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8001a58:	2a32      	cmp	r2, #50	; 0x32
 8001a5a:	d01f      	beq.n	8001a9c <u8g_dev_pb16v1_base_fn+0x4a>
 8001a5c:	d80c      	bhi.n	8001a78 <u8g_dev_pb16v1_base_fn+0x26>
 8001a5e:	2a15      	cmp	r2, #21
 8001a60:	d021      	beq.n	8001aa6 <u8g_dev_pb16v1_base_fn+0x54>
 8001a62:	2a17      	cmp	r2, #23
 8001a64:	d028      	beq.n	8001ab8 <u8g_dev_pb16v1_base_fn+0x66>
 8001a66:	2a14      	cmp	r2, #20
 8001a68:	d12f      	bne.n	8001aca <u8g_dev_pb16v1_base_fn+0x78>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
 8001a6a:	1c28      	adds	r0, r5, #0
 8001a6c:	f7ff ff6b 	bl	8001946 <u8g_pb16v1_Clear>
      u8g_page_First(&(pb->p));
 8001a70:	1c28      	adds	r0, r5, #0
 8001a72:	f000 ff9d 	bl	80029b0 <u8g_page_First>
 8001a76:	e028      	b.n	8001aca <u8g_dev_pb16v1_base_fn+0x78>
}

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 8001a78:	2a46      	cmp	r2, #70	; 0x46
 8001a7a:	d022      	beq.n	8001ac2 <u8g_dev_pb16v1_base_fn+0x70>
 8001a7c:	2a47      	cmp	r2, #71	; 0x47
 8001a7e:	d022      	beq.n	8001ac6 <u8g_dev_pb16v1_base_fn+0x74>
 8001a80:	2a3b      	cmp	r2, #59	; 0x3b
 8001a82:	d122      	bne.n	8001aca <u8g_dev_pb16v1_base_fn+0x78>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8001a84:	1c28      	adds	r0, r5, #0
 8001a86:	1c19      	adds	r1, r3, #0
 8001a88:	f000 f9a8 	bl	8001ddc <u8g_pb_Is8PixelVisible>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8001a8c:	2401      	movs	r4, #1
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d01c      	beq.n	8001acc <u8g_dev_pb16v1_base_fn+0x7a>
        u8g_pb16v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8001a92:	1c28      	adds	r0, r5, #0
 8001a94:	1c31      	adds	r1, r6, #0
 8001a96:	f7ff ffb2 	bl	80019fe <u8g_pb16v1_Set8PixelOpt2>
 8001a9a:	e017      	b.n	8001acc <u8g_dev_pb16v1_base_fn+0x7a>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb16v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8001a9c:	1c28      	adds	r0, r5, #0
 8001a9e:	1c19      	adds	r1, r3, #0
 8001aa0:	f7ff ff78 	bl	8001994 <u8g_pb16v1_SetPixel>
 8001aa4:	e011      	b.n	8001aca <u8g_dev_pb16v1_base_fn+0x78>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8001aa6:	1c28      	adds	r0, r5, #0
 8001aa8:	f000 ff91 	bl	80029ce <u8g_page_Next>
 8001aac:	1e04      	subs	r4, r0, #0
 8001aae:	d00d      	beq.n	8001acc <u8g_dev_pb16v1_base_fn+0x7a>
        return 0;
      u8g_pb16v1_Clear(pb);
 8001ab0:	1c28      	adds	r0, r5, #0
 8001ab2:	f7ff ff48 	bl	8001946 <u8g_pb16v1_Clear>
 8001ab6:	e008      	b.n	8001aca <u8g_dev_pb16v1_base_fn+0x78>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8001ab8:	1c28      	adds	r0, r5, #0
 8001aba:	1c19      	adds	r1, r3, #0
 8001abc:	f000 f984 	bl	8001dc8 <u8g_pb_GetPageBox>
 8001ac0:	e003      	b.n	8001aca <u8g_dev_pb16v1_base_fn+0x78>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8001ac2:	796b      	ldrb	r3, [r5, #5]
 8001ac4:	e000      	b.n	8001ac8 <u8g_dev_pb16v1_base_fn+0x76>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8001ac6:	786b      	ldrb	r3, [r5, #1]
 8001ac8:	7033      	strb	r3, [r6, #0]
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8001aca:	2401      	movs	r4, #1
  }
  return 1;
}
 8001acc:	1c20      	adds	r0, r4, #0
 8001ace:	bd70      	pop	{r4, r5, r6, pc}

08001ad0 <u8g_pb8v1_Init>:
void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel) U8G_NOINLINE ;
void u8g_pb8v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;

/* Obsolete, usually set by the init of the structure */
void u8g_pb8v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
{
 8001ad0:	b508      	push	{r3, lr}
  b->buf = buf;
 8001ad2:	6081      	str	r1, [r0, #8]
  b->width = width;
 8001ad4:	7142      	strb	r2, [r0, #5]
  u8g_pb_Clear(b);
 8001ad6:	f000 f937 	bl	8001d48 <u8g_pb_Clear>
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <u8g_pb8v1_set_pixel>:

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8001adc:	b530      	push	{r4, r5, lr}
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
  mask = 1;
  y &= 0x07;
  mask <<= y;
 8001ade:	2407      	movs	r4, #7
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8001ae0:	6885      	ldr	r5, [r0, #8]
  
  y -= b->p.page_y0;
 8001ae2:	7880      	ldrb	r0, [r0, #2]
  mask = 1;
  y &= 0x07;
  mask <<= y;
  ptr += x;
 8001ae4:	1869      	adds	r1, r5, r1
void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
 8001ae6:	1a12      	subs	r2, r2, r0
  mask = 1;
  y &= 0x07;
  mask <<= y;
 8001ae8:	4022      	ands	r2, r4
 8001aea:	2401      	movs	r4, #1
 8001aec:	1c20      	adds	r0, r4, #0
 8001aee:	4090      	lsls	r0, r2
 8001af0:	b2c2      	uxtb	r2, r0
 8001af2:	7808      	ldrb	r0, [r1, #0]
  ptr += x;
  if ( color_index )
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <u8g_pb8v1_set_pixel+0x20>
  {
    *ptr |= mask;
 8001af8:	4310      	orrs	r0, r2
 8001afa:	e000      	b.n	8001afe <u8g_pb8v1_set_pixel+0x22>
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 8001afc:	4390      	bics	r0, r2
 8001afe:	7008      	strb	r0, [r1, #0]
  }
}
 8001b00:	bd30      	pop	{r4, r5, pc}

08001b02 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8001b02:	b510      	push	{r4, lr}
  if ( arg_pixel->y < b->p.page_y0 )
 8001b04:	7883      	ldrb	r3, [r0, #2]
 8001b06:	784a      	ldrb	r2, [r1, #1]
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d80a      	bhi.n	8001b22 <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8001b0c:	78c3      	ldrb	r3, [r0, #3]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d307      	bcc.n	8001b22 <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 8001b12:	780c      	ldrb	r4, [r1, #0]
 8001b14:	7943      	ldrb	r3, [r0, #5]
 8001b16:	42a3      	cmp	r3, r4
 8001b18:	d903      	bls.n	8001b22 <u8g_pb8v1_SetPixel+0x20>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8001b1a:	790b      	ldrb	r3, [r1, #4]
 8001b1c:	1c21      	adds	r1, r4, #0
 8001b1e:	f7ff ffdd 	bl	8001adc <u8g_pb8v1_set_pixel>
}
 8001b22:	bd10      	pop	{r4, pc}

08001b24 <u8g_pb8v1_Set8PixelStd>:

void u8g_pb8v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	1c06      	adds	r6, r0, #0
 8001b28:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8001b2a:	788d      	ldrb	r5, [r1, #2]
  do
  {
    if ( pixel & 128 )
 8001b2c:	b26b      	sxtb	r3, r5
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da03      	bge.n	8001b3a <u8g_pb8v1_Set8PixelStd+0x16>
    {
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8001b32:	1c30      	adds	r0, r6, #0
 8001b34:	1c21      	adds	r1, r4, #0
 8001b36:	f7ff ffe4 	bl	8001b02 <u8g_pb8v1_SetPixel>
    }
    switch( arg_pixel->dir )
 8001b3a:	78e0      	ldrb	r0, [r4, #3]
 8001b3c:	2803      	cmp	r0, #3
 8001b3e:	d810      	bhi.n	8001b62 <u8g_pb8v1_Set8PixelStd+0x3e>
 8001b40:	f000 ff5e 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8001b44:	0c080502 	.word	0x0c080502
    {
      case 0: arg_pixel->x++; break;
 8001b48:	7823      	ldrb	r3, [r4, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	e004      	b.n	8001b58 <u8g_pb8v1_Set8PixelStd+0x34>
      case 1: arg_pixel->y++; break;
 8001b4e:	7863      	ldrb	r3, [r4, #1]
 8001b50:	3301      	adds	r3, #1
 8001b52:	e005      	b.n	8001b60 <u8g_pb8v1_Set8PixelStd+0x3c>
      case 2: arg_pixel->x--; break;
 8001b54:	7823      	ldrb	r3, [r4, #0]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	7023      	strb	r3, [r4, #0]
 8001b5a:	e002      	b.n	8001b62 <u8g_pb8v1_Set8PixelStd+0x3e>
      case 3: arg_pixel->y--; break;
 8001b5c:	7863      	ldrb	r3, [r4, #1]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	7063      	strb	r3, [r4, #1]
    }
    pixel <<= 1;
 8001b62:	006d      	lsls	r5, r5, #1
 8001b64:	b2ed      	uxtb	r5, r5
  } while( pixel != 0  );
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	d1e0      	bne.n	8001b2c <u8g_pb8v1_Set8PixelStd+0x8>
}
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}

08001b6c <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8001b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b6e:	9001      	str	r0, [sp, #4]
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8001b70:	78c8      	ldrb	r0, [r1, #3]
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8001b72:	1c0c      	adds	r4, r1, #0
  register uint8_t pixel = arg_pixel->pixel;
 8001b74:	788d      	ldrb	r5, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8001b76:	2803      	cmp	r0, #3
 8001b78:	d80e      	bhi.n	8001b98 <u8g_pb8v1_Set8PixelOpt2+0x2c>
 8001b7a:	f000 ff41 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8001b7e:	0502      	.short	0x0502
 8001b80:	0a07      	.short	0x0a07

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8001b82:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
 8001b84:	2701      	movs	r7, #1
 8001b86:	e009      	b.n	8001b9c <u8g_pb8v1_Set8PixelOpt2+0x30>
    case 1: dy++; break;
 8001b88:	2601      	movs	r6, #1
 8001b8a:	e003      	b.n	8001b94 <u8g_pb8v1_Set8PixelOpt2+0x28>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8001b8c:	2600      	movs	r6, #0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
 8001b8e:	27ff      	movs	r7, #255	; 0xff
 8001b90:	e004      	b.n	8001b9c <u8g_pb8v1_Set8PixelOpt2+0x30>
    case 3: dy--; break;
 8001b92:	26ff      	movs	r6, #255	; 0xff


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8001b94:	2700      	movs	r7, #0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
 8001b96:	e001      	b.n	8001b9c <u8g_pb8v1_Set8PixelOpt2+0x30>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
 8001b98:	2600      	movs	r6, #0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
 8001b9a:	1c37      	adds	r7, r6, #0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8001b9c:	b26b      	sxtb	r3, r5
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da03      	bge.n	8001baa <u8g_pb8v1_Set8PixelOpt2+0x3e>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8001ba2:	9801      	ldr	r0, [sp, #4]
 8001ba4:	1c21      	adds	r1, r4, #0
 8001ba6:	f7ff ffac 	bl	8001b02 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8001baa:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8001bac:	006d      	lsls	r5, r5, #1
  
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8001bb2:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8001bb4:	b2ed      	uxtb	r5, r5
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
    arg_pixel->y += dy;
 8001bb6:	18f3      	adds	r3, r6, r3
 8001bb8:	7063      	strb	r3, [r4, #1]
    pixel <<= 1;
  } while( pixel != 0  );
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	d1ee      	bne.n	8001b9c <u8g_pb8v1_Set8PixelOpt2+0x30>
  
}
 8001bbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001bc0 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	1c1e      	adds	r6, r3, #0
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8001bc4:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8001bc6:	2a32      	cmp	r2, #50	; 0x32
 8001bc8:	d01f      	beq.n	8001c0a <u8g_dev_pb8v1_base_fn+0x4a>
 8001bca:	d80c      	bhi.n	8001be6 <u8g_dev_pb8v1_base_fn+0x26>
 8001bcc:	2a15      	cmp	r2, #21
 8001bce:	d021      	beq.n	8001c14 <u8g_dev_pb8v1_base_fn+0x54>
 8001bd0:	2a17      	cmp	r2, #23
 8001bd2:	d028      	beq.n	8001c26 <u8g_dev_pb8v1_base_fn+0x66>
 8001bd4:	2a14      	cmp	r2, #20
 8001bd6:	d12f      	bne.n	8001c38 <u8g_dev_pb8v1_base_fn+0x78>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8001bd8:	1c28      	adds	r0, r5, #0
 8001bda:	f000 f8b5 	bl	8001d48 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8001bde:	1c28      	adds	r0, r5, #0
 8001be0:	f000 fee6 	bl	80029b0 <u8g_page_First>
 8001be4:	e028      	b.n	8001c38 <u8g_dev_pb8v1_base_fn+0x78>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 8001be6:	2a46      	cmp	r2, #70	; 0x46
 8001be8:	d022      	beq.n	8001c30 <u8g_dev_pb8v1_base_fn+0x70>
 8001bea:	2a47      	cmp	r2, #71	; 0x47
 8001bec:	d022      	beq.n	8001c34 <u8g_dev_pb8v1_base_fn+0x74>
 8001bee:	2a3b      	cmp	r2, #59	; 0x3b
 8001bf0:	d122      	bne.n	8001c38 <u8g_dev_pb8v1_base_fn+0x78>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8001bf2:	1c28      	adds	r0, r5, #0
 8001bf4:	1c19      	adds	r1, r3, #0
 8001bf6:	f000 f8f1 	bl	8001ddc <u8g_pb_Is8PixelVisible>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8001bfa:	2401      	movs	r4, #1
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d01c      	beq.n	8001c3a <u8g_dev_pb8v1_base_fn+0x7a>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8001c00:	1c28      	adds	r0, r5, #0
 8001c02:	1c31      	adds	r1, r6, #0
 8001c04:	f7ff ffb2 	bl	8001b6c <u8g_pb8v1_Set8PixelOpt2>
 8001c08:	e017      	b.n	8001c3a <u8g_dev_pb8v1_base_fn+0x7a>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8001c0a:	1c28      	adds	r0, r5, #0
 8001c0c:	1c19      	adds	r1, r3, #0
 8001c0e:	f7ff ff78 	bl	8001b02 <u8g_pb8v1_SetPixel>
 8001c12:	e011      	b.n	8001c38 <u8g_dev_pb8v1_base_fn+0x78>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8001c14:	1c28      	adds	r0, r5, #0
 8001c16:	f000 feda 	bl	80029ce <u8g_page_Next>
 8001c1a:	1e04      	subs	r4, r0, #0
 8001c1c:	d00d      	beq.n	8001c3a <u8g_dev_pb8v1_base_fn+0x7a>
        return 0;
      u8g_pb_Clear(pb);
 8001c1e:	1c28      	adds	r0, r5, #0
 8001c20:	f000 f892 	bl	8001d48 <u8g_pb_Clear>
 8001c24:	e008      	b.n	8001c38 <u8g_dev_pb8v1_base_fn+0x78>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8001c26:	1c28      	adds	r0, r5, #0
 8001c28:	1c19      	adds	r1, r3, #0
 8001c2a:	f000 f8cd 	bl	8001dc8 <u8g_pb_GetPageBox>
 8001c2e:	e003      	b.n	8001c38 <u8g_dev_pb8v1_base_fn+0x78>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8001c30:	796b      	ldrb	r3, [r5, #5]
 8001c32:	e000      	b.n	8001c36 <u8g_dev_pb8v1_base_fn+0x76>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8001c34:	786b      	ldrb	r3, [r5, #1]
 8001c36:	7033      	strb	r3, [r6, #0]
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8001c38:	2401      	movs	r4, #1
  }
  return 1;
}
 8001c3a:	1c20      	adds	r0, r4, #0
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}

08001c3e <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8001c3e:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8001c40:	2300      	movs	r3, #0
 8001c42:	688c      	ldr	r4, [r1, #8]
 8001c44:	2101      	movs	r1, #1
 8001c46:	47a0      	blx	r4
}
 8001c48:	bd10      	pop	{r4, pc}

08001c4a <u8g_StopCom>:

void u8g_StopCom(u8g_t *u8g, u8g_dev_t *dev)
{
 8001c4a:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
 8001c4c:	688c      	ldr	r4, [r1, #8]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	1c0a      	adds	r2, r1, #0
 8001c52:	1c0b      	adds	r3, r1, #0
 8001c54:	47a0      	blx	r4
}
 8001c56:	bd10      	pop	{r4, pc}

08001c58 <u8g_SetChipSelect>:

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8001c58:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	688c      	ldr	r4, [r1, #8]
 8001c5e:	2103      	movs	r1, #3
 8001c60:	47a0      	blx	r4
}
 8001c62:	bd10      	pop	{r4, pc}

08001c64 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8001c64:	2200      	movs	r2, #0
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8001c66:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8001c68:	1c13      	adds	r3, r2, #0
 8001c6a:	688c      	ldr	r4, [r1, #8]
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	47a0      	blx	r4
}
 8001c70:	bd10      	pop	{r4, pc}

08001c72 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8001c72:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8001c74:	2201      	movs	r2, #1
 8001c76:	688c      	ldr	r4, [r1, #8]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	47a0      	blx	r4
}
 8001c7e:	bd10      	pop	{r4, pc}

08001c80 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8001c80:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8001c82:	2300      	movs	r3, #0
 8001c84:	688c      	ldr	r4, [r1, #8]
 8001c86:	2102      	movs	r1, #2
 8001c88:	47a0      	blx	r4
}
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8001c8c:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	688c      	ldr	r4, [r1, #8]
 8001c92:	2105      	movs	r1, #5
 8001c94:	47a0      	blx	r4
}
 8001c96:	bd10      	pop	{r4, pc}

08001c98 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8001c98:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8001c9a:	688c      	ldr	r4, [r1, #8]
 8001c9c:	2106      	movs	r1, #6
 8001c9e:	47a0      	blx	r4
}
 8001ca0:	bd10      	pop	{r4, pc}

08001ca2 <u8g_WriteSequenceP>:

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
 8001ca2:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
 8001ca4:	688c      	ldr	r4, [r1, #8]
 8001ca6:	2107      	movs	r1, #7
 8001ca8:	47a0      	blx	r4
}
 8001caa:	bd10      	pop	{r4, pc}

08001cac <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	1c05      	adds	r5, r0, #0
 8001cb0:	1c0e      	adds	r6, r1, #0
 8001cb2:	1c17      	adds	r7, r2, #0
  uint8_t is_escape = 0;
 8001cb4:	2300      	movs	r3, #0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8001cb6:	783c      	ldrb	r4, [r7, #0]
    if ( is_escape == 0 )
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <u8g_WriteEscSeqP+0x24>
    {
      if ( value != 255 )
 8001cbc:	2cff      	cmp	r4, #255	; 0xff
 8001cbe:	d03c      	beq.n	8001d3a <u8g_WriteEscSeqP+0x8e>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8001cc0:	1c28      	adds	r0, r5, #0
 8001cc2:	1c31      	adds	r1, r6, #0
 8001cc4:	1c22      	adds	r2, r4, #0
 8001cc6:	f7ff ffe1 	bl	8001c8c <u8g_WriteByte>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d12e      	bne.n	8001d2c <u8g_WriteEscSeqP+0x80>
 8001cce:	e037      	b.n	8001d40 <u8g_WriteEscSeqP+0x94>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
 8001cd0:	2cff      	cmp	r4, #255	; 0xff
 8001cd2:	d0f5      	beq.n	8001cc0 <u8g_WriteEscSeqP+0x14>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
 8001cd4:	2cfe      	cmp	r4, #254	; 0xfe
 8001cd6:	d035      	beq.n	8001d44 <u8g_WriteEscSeqP+0x98>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8001cd8:	2cef      	cmp	r4, #239	; 0xef
 8001cda:	d827      	bhi.n	8001d2c <u8g_WriteEscSeqP+0x80>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8001cdc:	2cdf      	cmp	r4, #223	; 0xdf
 8001cde:	d906      	bls.n	8001cee <u8g_WriteEscSeqP+0x42>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	1c28      	adds	r0, r5, #0
 8001ce4:	4022      	ands	r2, r4
 8001ce6:	1c31      	adds	r1, r6, #0
 8001ce8:	f7ff ffca 	bl	8001c80 <u8g_SetAddress>
 8001cec:	e01e      	b.n	8001d2c <u8g_WriteEscSeqP+0x80>
      }
      else if ( value >= 0xd0 )
 8001cee:	2ccf      	cmp	r4, #207	; 0xcf
 8001cf0:	d906      	bls.n	8001d00 <u8g_WriteEscSeqP+0x54>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	1c28      	adds	r0, r5, #0
 8001cf6:	4022      	ands	r2, r4
 8001cf8:	1c31      	adds	r1, r6, #0
 8001cfa:	f7ff ffad 	bl	8001c58 <u8g_SetChipSelect>
 8001cfe:	e015      	b.n	8001d2c <u8g_WriteEscSeqP+0x80>
      }
      else if ( value >= 0xc0 )
 8001d00:	2cbf      	cmp	r4, #191	; 0xbf
 8001d02:	d915      	bls.n	8001d30 <u8g_WriteEscSeqP+0x84>
      {
        u8g_SetResetLow(u8g, dev);
 8001d04:	1c31      	adds	r1, r6, #0
 8001d06:	1c28      	adds	r0, r5, #0
 8001d08:	f7ff ffac 	bl	8001c64 <u8g_SetResetLow>
        value &= 0x0f;
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	4014      	ands	r4, r2
        value <<= 4;
 8001d10:	0124      	lsls	r4, r4, #4
        value+=2;
 8001d12:	3402      	adds	r4, #2
        u8g_Delay(value);
 8001d14:	b2e4      	uxtb	r4, r4
 8001d16:	b2a4      	uxth	r4, r4
 8001d18:	1c20      	adds	r0, r4, #0
 8001d1a:	f001 f871 	bl	8002e00 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8001d1e:	1c28      	adds	r0, r5, #0
 8001d20:	1c31      	adds	r1, r6, #0
 8001d22:	f7ff ffa6 	bl	8001c72 <u8g_SetResetHigh>
        u8g_Delay(value);
 8001d26:	1c20      	adds	r0, r4, #0
 8001d28:	f001 f86a 	bl	8002e00 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e005      	b.n	8001d3c <u8g_WriteEscSeqP+0x90>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8001d30:	b263      	sxtb	r3, r4
      {
        u8g_Delay(value);
 8001d32:	b2a0      	uxth	r0, r4
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	daf7      	bge.n	8001d28 <u8g_WriteEscSeqP+0x7c>
 8001d38:	e7f8      	b.n	8001d2c <u8g_WriteEscSeqP+0x80>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
 8001d3a:	2301      	movs	r3, #1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
 8001d3c:	3701      	adds	r7, #1
  }
 8001d3e:	e7ba      	b.n	8001cb6 <u8g_WriteEscSeqP+0xa>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e000      	b.n	8001d46 <u8g_WriteEscSeqP+0x9a>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
 8001d44:	2001      	movs	r0, #1
}
 8001d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d48 <u8g_pb_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
  do
  {
    *ptr++ = 0;
 8001d48:	2100      	movs	r1, #0

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8001d4a:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
 8001d4c:	7942      	ldrb	r2, [r0, #5]
 8001d4e:	189a      	adds	r2, r3, r2
  do
  {
    *ptr++ = 0;
 8001d50:	7019      	strb	r1, [r3, #0]
 8001d52:	3301      	adds	r3, #1
  } while( ptr != end_ptr );
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d1fb      	bne.n	8001d50 <u8g_pb_Clear+0x8>
}
 8001d58:	4770      	bx	lr

08001d5a <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8001d5a:	b530      	push	{r4, r5, lr}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	1c25      	adds	r5, r4, #0
 8001d60:	78c3      	ldrb	r3, [r0, #3]
  c2 = v1 >= pb->p.page_y0;
 8001d62:	7880      	ldrb	r0, [r0, #2]
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8001d64:	428b      	cmp	r3, r1
 8001d66:	4165      	adcs	r5, r4
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
 8001d68:	428a      	cmp	r2, r1
 8001d6a:	419b      	sbcs	r3, r3
 8001d6c:	4259      	negs	r1, r3
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
 8001d6e:	1c0b      	adds	r3, r1, #0

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
 8001d70:	4282      	cmp	r2, r0
 8001d72:	4164      	adcs	r4, r4
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8001d74:	b2ed      	uxtb	r5, r5
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
 8001d76:	432b      	orrs	r3, r5
 8001d78:	401c      	ands	r4, r3
  c1 |= c3;
  return c1 & 1;
 8001d7a:	1c20      	adds	r0, r4, #0
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
 8001d7c:	4029      	ands	r1, r5
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
 8001d7e:	4308      	orrs	r0, r1
}
 8001d80:	bd30      	pop	{r4, r5, pc}

08001d82 <u8g_pb_IsXIntersection>:
  */
  /*
  c0 = v0 < 0;
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
 8001d82:	7943      	ldrb	r3, [r0, #5]
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
  /*if ( c1 && c2 ) return 0;*/
  return 1;
 8001d84:	2001      	movs	r0, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8001d86:	4299      	cmp	r1, r3
 8001d88:	d903      	bls.n	8001d92 <u8g_pb_IsXIntersection+0x10>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	4140      	adcs	r0, r0
 8001d90:	b2c0      	uxtb	r0, r0
  /*if ( c1 && c2 ) return 0;*/
  return 1;
}
 8001d92:	4770      	bx	lr

08001d94 <u8g_pb_IsIntersection>:

uint8_t u8g_pb_IsIntersection(u8g_pb_t *pb, u8g_dev_arg_bbx_t *bbx)
{
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	1c0d      	adds	r5, r1, #0
  u8g_uint_t tmp;

  tmp = bbx->y;
 8001d98:	7849      	ldrb	r1, [r1, #1]
  tmp += bbx->h;
 8001d9a:	78ea      	ldrb	r2, [r5, #3]
  /*if ( c1 && c2 ) return 0;*/
  return 1;
}

uint8_t u8g_pb_IsIntersection(u8g_pb_t *pb, u8g_dev_arg_bbx_t *bbx)
{
 8001d9c:	1c04      	adds	r4, r0, #0
  u8g_uint_t tmp;

  tmp = bbx->y;
  tmp += bbx->h;
 8001d9e:	188a      	adds	r2, r1, r2
  tmp--;
 8001da0:	3a01      	subs	r2, #1
  
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f7ff ffd9 	bl	8001d5a <u8g_pb_IsYIntersection>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d00c      	beq.n	8001dc6 <u8g_pb_IsIntersection+0x32>
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
 8001dac:	7829      	ldrb	r1, [r5, #0]
  */
  /*
  c0 = v0 < 0;
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
 8001dae:	7962      	ldrb	r2, [r4, #5]
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
  tmp += bbx->w;
 8001db0:	78ab      	ldrb	r3, [r5, #2]
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
  /*if ( c1 && c2 ) return 0;*/
  return 1;
 8001db2:	2001      	movs	r0, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8001db4:	4291      	cmp	r1, r2
 8001db6:	d906      	bls.n	8001dc6 <u8g_pb_IsIntersection+0x32>
 8001db8:	2000      	movs	r0, #0
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
  
  /* maybe this one can be skiped... probability is very high to have an intersection, so it would be ok to always return 1 */
  tmp = bbx->x;
  tmp += bbx->w;
 8001dba:	18cb      	adds	r3, r1, r3
  tmp--;
 8001dbc:	3b01      	subs	r3, #1
  c1 = v1 < 0;
  */
  c2 = v0 > b->width;
  c3 = v1 > b->width;
  /*if ( c0 && c1 ) return 0;*/
  if ( c2 && c3 ) return 0;
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	4140      	adcs	r0, r0
  tmp = bbx->y;
  tmp += bbx->h;
  tmp--;
  
  if ( u8g_pb_IsYIntersection(pb, bbx->y, tmp) == 0 )
    return 0;
 8001dc4:	b2c0      	uxtb	r0, r0
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
 8001dc6:	bd38      	pop	{r3, r4, r5, pc}

08001dc8 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 8001dcc:	7883      	ldrb	r3, [r0, #2]
 8001dce:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
  box->x1--;
 8001dd0:	7943      	ldrb	r3, [r0, #5]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 8001dd6:	78c3      	ldrb	r3, [r0, #3]
 8001dd8:	70cb      	strb	r3, [r1, #3]
}
 8001dda:	4770      	bx	lr

08001ddc <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8001ddc:	b508      	push	{r3, lr}
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 8001dde:	78cb      	ldrb	r3, [r1, #3]


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8001de0:	784a      	ldrb	r2, [r1, #1]
  v1 = v0;
  switch( arg_pixel->dir )
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d006      	beq.n	8001df4 <u8g_pb_Is8PixelVisible+0x18>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8001de6:	1c11      	adds	r1, r2, #0
 8001de8:	3908      	subs	r1, #8
 8001dea:	b2c9      	uxtb	r1, r1
uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d005      	beq.n	8001dfc <u8g_pb_Is8PixelVisible+0x20>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8001df0:	1c11      	adds	r1, r2, #0
 8001df2:	e003      	b.n	8001dfc <u8g_pb_Is8PixelVisible+0x20>
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8001df4:	1c13      	adds	r3, r2, #0
 8001df6:	3308      	adds	r3, #8


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8001df8:	1c11      	adds	r1, r2, #0
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8001dfa:	b2da      	uxtb	r2, r3
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8001dfc:	f7ff ffad 	bl	8001d5a <u8g_pb_IsYIntersection>
}
 8001e00:	bd08      	pop	{r3, pc}

08001e02 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8001e02:	b508      	push	{r3, lr}
 8001e04:	1c03      	adds	r3, r0, #0
 8001e06:	1c08      	adds	r0, r1, #0
 8001e08:	1c11      	adds	r1, r2, #0
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8001e0a:	795a      	ldrb	r2, [r3, #5]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f7ff ff43 	bl	8001c98 <u8g_WriteSequence>
}
 8001e12:	bd08      	pop	{r3, pc}

08001e14 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8001e14:	1841      	adds	r1, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8001e16:	7808      	ldrb	r0, [r1, #0]
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8001e18:	784b      	ldrb	r3, [r1, #1]
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    pos <<= 8;
 8001e1a:	0200      	lsls	r0, r0, #8
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8001e1c:	18c0      	adds	r0, r0, r3
    return pos;
 8001e1e:	b280      	uxth	r0, r0
}
 8001e20:	4770      	bx	lr

08001e22 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 8001e22:	2000      	movs	r0, #0
 8001e24:	4770      	bx	lr

08001e26 <u8g_font_calc_vref_bottom>:


u8g_uint_t u8g_font_calc_vref_bottom(u8g_t *u8g)
{
  /* y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent); */
  return (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent);
 8001e26:	302a      	adds	r0, #42	; 0x2a
 8001e28:	7800      	ldrb	r0, [r0, #0]
}
 8001e2a:	4770      	bx	lr

08001e2c <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
 8001e2c:	3029      	adds	r0, #41	; 0x29
 8001e2e:	7800      	ldrb	r0, [r0, #0]
  tmp++;
 8001e30:	3001      	adds	r0, #1
  return tmp;
 8001e32:	b2c0      	uxtb	r0, r0
}
 8001e34:	4770      	bx	lr

08001e36 <u8g_font_calc_vref_center>:

u8g_uint_t u8g_font_calc_vref_center(u8g_t *u8g)
{
  int8_t tmp;
  tmp = u8g->font_ref_ascent;
  tmp -= u8g->font_ref_descent;
 8001e36:	1c03      	adds	r3, r0, #0
}

u8g_uint_t u8g_font_calc_vref_center(u8g_t *u8g)
{
  int8_t tmp;
  tmp = u8g->font_ref_ascent;
 8001e38:	3029      	adds	r0, #41	; 0x29
  tmp -= u8g->font_ref_descent;
 8001e3a:	332a      	adds	r3, #42	; 0x2a
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	7803      	ldrb	r3, [r0, #0]
 8001e40:	1a9b      	subs	r3, r3, r2
  tmp /= 2;
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	0fd8      	lsrs	r0, r3, #31
 8001e46:	18c0      	adds	r0, r0, r3
 8001e48:	1043      	asrs	r3, r0, #1
  tmp += u8g->font_ref_descent;  
 8001e4a:	18d0      	adds	r0, r2, r3
  /* y += (u8g_uint_t)(u8g_int_t)(tmp); */
  return tmp;
 8001e4c:	b2c0      	uxtb	r0, r0
}
 8001e4e:	4770      	bx	lr

08001e50 <u8g_font_get_char>:
/*========================================================================*/
/* string pixel width calculation */

char u8g_font_get_char(const void *s)
{
  return *(const char *)(s);
 8001e50:	7800      	ldrb	r0, [r0, #0]
}
 8001e52:	4770      	bx	lr

08001e54 <u8g_font_get_charP>:

char u8g_font_get_charP(const void *s)
{
  return u8g_pgm_read(s);
 8001e54:	7800      	ldrb	r0, [r0, #0]
}
 8001e56:	4770      	bx	lr

08001e58 <u8g_font_GetFormat.isra.0>:

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
 8001e58:	4770      	bx	lr

08001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
 8001e5a:	b508      	push	{r3, lr}
{
  switch(u8g_font_GetFormat(font))
 8001e5c:	f7ff fffc 	bl	8001e58 <u8g_font_GetFormat.isra.0>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d003      	beq.n	8001e6c <u8g_font_GetFontGlyphStructureSize.isra.1+0x12>
 8001e64:	2802      	cmp	r0, #2
 8001e66:	d001      	beq.n	8001e6c <u8g_font_GetFontGlyphStructureSize.isra.1+0x12>
  {
    case 0: return 6;
    case 1: return 3;
 8001e68:	2003      	movs	r0, #3
 8001e6a:	e000      	b.n	8001e6e <u8g_font_GetFontGlyphStructureSize.isra.1+0x14>
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
  {
    case 0: return 6;
 8001e6c:	2006      	movs	r0, #6
    case 1: return 3;
    case 2: return 6;
  }
  return 3;
}
 8001e6e:	bd08      	pop	{r3, pc}

08001e70 <u8g_font_GetCapitalAHeight>:
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
  return u8g_font_get_byte(font, 5);
 8001e70:	7940      	ldrb	r0, [r0, #5]
}
 8001e72:	4770      	bx	lr

08001e74 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8001e74:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 6);
 8001e76:	2106      	movs	r1, #6
 8001e78:	f7ff ffcc 	bl	8001e14 <u8g_font_get_word>
}
 8001e7c:	bd08      	pop	{r3, pc}

08001e7e <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 8001e7e:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 8);
 8001e80:	2108      	movs	r1, #8
 8001e82:	f7ff ffc7 	bl	8001e14 <u8g_font_get_word>
}
 8001e86:	bd08      	pop	{r3, pc}

08001e88 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
 8001e88:	7a80      	ldrb	r0, [r0, #10]
}
 8001e8a:	4770      	bx	lr

08001e8c <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
 8001e8c:	7ac0      	ldrb	r0, [r0, #11]
}
 8001e8e:	4770      	bx	lr

08001e90 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
  return u8g_font_get_byte(font, 12);
 8001e90:	7b00      	ldrb	r0, [r0, #12]
 8001e92:	b240      	sxtb	r0, r0
}
 8001e94:	4770      	bx	lr

08001e96 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
  return u8g_font_get_byte(font, 13);
 8001e96:	7b40      	ldrb	r0, [r0, #13]
 8001e98:	b240      	sxtb	r0, r0
}
 8001e9a:	4770      	bx	lr

08001e9c <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
  return u8g_font_get_byte(font, 14);
 8001e9c:	7b80      	ldrb	r0, [r0, #14]
 8001e9e:	b240      	sxtb	r0, r0
}
 8001ea0:	4770      	bx	lr

08001ea2 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
  return u8g_font_get_byte(font, 15);
 8001ea2:	7bc0      	ldrb	r0, [r0, #15]
 8001ea4:	b240      	sxtb	r0, r0
}
 8001ea6:	4770      	bx	lr

08001ea8 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
  return u8g_font_get_byte(font, 16);
 8001ea8:	7c00      	ldrb	r0, [r0, #16]
 8001eaa:	b240      	sxtb	r0, r0
}
 8001eac:	4770      	bx	lr

08001eae <u8g_font_GetSize>:
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
}

/* calculate the overall length of the font, only used to create the picture for the google wiki */
size_t u8g_font_GetSize(const void *font)
{
 8001eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb0:	7805      	ldrb	r5, [r0, #0]
 8001eb2:	1c04      	adds	r4, r0, #0
  uint8_t *p = (uint8_t *)(font);
  uint8_t font_format = u8g_font_GetFormat(font);
 8001eb4:	1c28      	adds	r0, r5, #0
 8001eb6:	f7ff ffcf 	bl	8001e58 <u8g_font_GetFormat.isra.0>
 8001eba:	1c07      	adds	r7, r0, #0
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(font);
 8001ebc:	1c28      	adds	r0, r5, #0
 8001ebe:	f7ff ffcc 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
 8001ec2:	1c06      	adds	r6, r0, #0
  uint8_t start, end;
  uint8_t i;
  uint8_t mask = 255;
  
  start = u8g_font_GetFontStartEncoding(font);
 8001ec4:	1c20      	adds	r0, r4, #0
 8001ec6:	f7ff ffdf 	bl	8001e88 <u8g_font_GetFontStartEncoding>
 8001eca:	1c05      	adds	r5, r0, #0
  end = u8g_font_GetFontEndEncoding(font);
 8001ecc:	1c20      	adds	r0, r4, #0
 8001ece:	f7ff ffdd 	bl	8001e8c <u8g_font_GetFontEndEncoding>
  uint8_t *p = (uint8_t *)(font);
  uint8_t font_format = u8g_font_GetFormat(font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(font);
  uint8_t start, end;
  uint8_t i;
  uint8_t mask = 255;
 8001ed2:	21ff      	movs	r1, #255	; 0xff
  
  start = u8g_font_GetFontStartEncoding(font);
  end = u8g_font_GetFontEndEncoding(font);

  if ( font_format == 1 )
 8001ed4:	2f01      	cmp	r7, #1
 8001ed6:	d100      	bne.n	8001eda <u8g_font_GetSize+0x2c>
    mask = 15;
 8001ed8:	210f      	movs	r1, #15

  p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8001eda:	1c23      	adds	r3, r4, #0
 8001edc:	3311      	adds	r3, #17

  i = start;  
  for(;;)
  {
    if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	2aff      	cmp	r2, #255	; 0xff
 8001ee2:	d101      	bne.n	8001ee8 <u8g_font_GetSize+0x3a>
    {
      p += 1;
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	e003      	b.n	8001ef0 <u8g_font_GetSize+0x42>
    }
    else
    {
      p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8001ee8:	789a      	ldrb	r2, [r3, #2]
 8001eea:	400a      	ands	r2, r1
 8001eec:	1992      	adds	r2, r2, r6
      p += data_structure_size;
 8001eee:	189b      	adds	r3, r3, r2
    }
    if ( i == end )
 8001ef0:	4285      	cmp	r5, r0
 8001ef2:	d002      	beq.n	8001efa <u8g_font_GetSize+0x4c>
      break;
    i++;
 8001ef4:	3501      	adds	r5, #1
 8001ef6:	b2ed      	uxtb	r5, r5
  }
 8001ef8:	e7f1      	b.n	8001ede <u8g_font_GetSize+0x30>
    
  return p - (uint8_t *)font;
 8001efa:	1b18      	subs	r0, r3, r4
}
 8001efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001efe <u8g_GetFontBBXWidth>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001efe:	6883      	ldr	r3, [r0, #8]
/*========================================================================*/
/* u8g interface, font access */

uint8_t u8g_GetFontBBXWidth(u8g_t *u8g)
{
  return u8g_font_GetBBXWidth(u8g->font);
 8001f00:	7858      	ldrb	r0, [r3, #1]
}
 8001f02:	4770      	bx	lr

08001f04 <u8g_GetFontBBXHeight>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001f04:	6883      	ldr	r3, [r0, #8]
  return u8g_font_GetBBXWidth(u8g->font);
}

uint8_t u8g_GetFontBBXHeight(u8g_t *u8g)
{
  return u8g_font_GetBBXHeight(u8g->font);
 8001f06:	7898      	ldrb	r0, [r3, #2]
}
 8001f08:	4770      	bx	lr

08001f0a <u8g_GetFontBBXOffX>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001f0a:	6883      	ldr	r3, [r0, #8]
}

int8_t u8g_GetFontBBXOffX(u8g_t *u8g) U8G_NOINLINE;
int8_t u8g_GetFontBBXOffX(u8g_t *u8g)
{
  return u8g_font_GetBBXOffX(u8g->font);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	5618      	ldrsb	r0, [r3, r0]
}
 8001f10:	4770      	bx	lr

08001f12 <u8g_GetFontBBXOffY>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001f12:	6883      	ldr	r3, [r0, #8]
}

int8_t u8g_GetFontBBXOffY(u8g_t *u8g) U8G_NOINLINE;
int8_t u8g_GetFontBBXOffY(u8g_t *u8g)
{
  return u8g_font_GetBBXOffY(u8g->font);
 8001f14:	2004      	movs	r0, #4
 8001f16:	5618      	ldrsb	r0, [r3, r0]
}
 8001f18:	4770      	bx	lr

08001f1a <u8g_GetFontCapitalAHeight>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001f1a:	6883      	ldr	r3, [r0, #8]
}

uint8_t u8g_GetFontCapitalAHeight(u8g_t *u8g) U8G_NOINLINE; 
uint8_t u8g_GetFontCapitalAHeight(u8g_t *u8g)
{
  return u8g_font_GetCapitalAHeight(u8g->font);
 8001f1c:	7958      	ldrb	r0, [r3, #5]
}
 8001f1e:	4770      	bx	lr

08001f20 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *p = (uint8_t *)(u8g->font);
 8001f22:	6886      	ldr	r6, [r0, #8]
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8001f24:	b085      	sub	sp, #20
 8001f26:	7835      	ldrb	r5, [r6, #0]
 8001f28:	1c04      	adds	r4, r0, #0
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8001f2a:	1c28      	adds	r0, r5, #0
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8001f2c:	1c0f      	adds	r7, r1, #0
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8001f2e:	f7ff ff93 	bl	8001e58 <u8g_font_GetFormat.isra.0>
 8001f32:	9000      	str	r0, [sp, #0]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8001f34:	1c28      	adds	r0, r5, #0
 8001f36:	f7ff ff90 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8001f3a:	23ff      	movs	r3, #255	; 0xff
 8001f3c:	9302      	str	r3, [sp, #8]

  if ( font_format == 1 )
 8001f3e:	9b00      	ldr	r3, [sp, #0]
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
  uint8_t *p = (uint8_t *)(u8g->font);
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8001f40:	9003      	str	r0, [sp, #12]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <u8g_GetGlyph+0x2a>
    mask = 15;
 8001f46:	230f      	movs	r3, #15
 8001f48:	9302      	str	r3, [sp, #8]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8001f4a:	1c30      	adds	r0, r6, #0
 8001f4c:	f7ff ff9c 	bl	8001e88 <u8g_font_GetFontStartEncoding>
 8001f50:	1c05      	adds	r5, r0, #0
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8001f52:	1c30      	adds	r0, r6, #0
 8001f54:	f7ff ff9a 	bl	8001e8c <u8g_font_GetFontEndEncoding>
 8001f58:	9001      	str	r0, [sp, #4]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8001f5a:	1c30      	adds	r0, r6, #0
 8001f5c:	f7ff ff8f 	bl	8001e7e <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
 8001f60:	2f60      	cmp	r7, #96	; 0x60
 8001f62:	d904      	bls.n	8001f6e <u8g_GetGlyph+0x4e>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d002      	beq.n	8001f6e <u8g_GetGlyph+0x4e>
  {
    p+= pos;
 8001f68:	1836      	adds	r6, r6, r0
    start = 97;
 8001f6a:	2561      	movs	r5, #97	; 0x61
 8001f6c:	e00a      	b.n	8001f84 <u8g_GetGlyph+0x64>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8001f6e:	1c30      	adds	r0, r6, #0
 8001f70:	f7ff ff80 	bl	8001e74 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
 8001f74:	2f40      	cmp	r7, #64	; 0x40
 8001f76:	d904      	bls.n	8001f82 <u8g_GetGlyph+0x62>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d002      	beq.n	8001f82 <u8g_GetGlyph+0x62>
    {
      p+= pos;
 8001f7c:	1836      	adds	r6, r6, r0
      start = 65;
 8001f7e:	2541      	movs	r5, #65	; 0x41
 8001f80:	e000      	b.n	8001f84 <u8g_GetGlyph+0x64>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8001f82:	3611      	adds	r6, #17
  }
  
  if ( requested_encoding > end )
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	429f      	cmp	r7, r3
 8001f88:	d907      	bls.n	8001f9a <u8g_GetGlyph+0x7a>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 8001f8a:	2600      	movs	r6, #0
  u8g->glyph_width = 0;
  u8g->glyph_height = 0;
 8001f8c:	1c63      	adds	r3, r4, #1
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 8001f8e:	7726      	strb	r6, [r4, #28]
  u8g->glyph_width = 0;
 8001f90:	77e6      	strb	r6, [r4, #31]
  u8g->glyph_height = 0;
 8001f92:	77de      	strb	r6, [r3, #31]
  u8g->glyph_x = 0;
 8001f94:	7766      	strb	r6, [r4, #29]
  u8g->glyph_y = 0;
 8001f96:	77a6      	strb	r6, [r4, #30]
 8001f98:	e028      	b.n	8001fec <u8g_GetGlyph+0xcc>
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
  }
  
  i = start;
  if ( i <= end )
 8001f9a:	9b01      	ldr	r3, [sp, #4]
 8001f9c:	429d      	cmp	r5, r3
 8001f9e:	d8f4      	bhi.n	8001f8a <u8g_GetGlyph+0x6a>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8001fa0:	7833      	ldrb	r3, [r6, #0]
 8001fa2:	2bff      	cmp	r3, #255	; 0xff
 8001fa4:	d101      	bne.n	8001faa <u8g_GetGlyph+0x8a>
      {
        p += 1;
 8001fa6:	3601      	adds	r6, #1
 8001fa8:	e029      	b.n	8001ffe <u8g_GetGlyph+0xde>
      }
      else
      {
        if ( i == requested_encoding )
 8001faa:	42bd      	cmp	r5, r7
 8001fac:	d121      	bne.n	8001ff2 <u8g_GetGlyph+0xd2>
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8001fae:	9a00      	ldr	r2, [sp, #0]
 8001fb0:	1c61      	adds	r1, r4, #1
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d001      	beq.n	8001fba <u8g_GetGlyph+0x9a>
 8001fb6:	2a02      	cmp	r2, #2
 8001fb8:	d109      	bne.n	8001fce <u8g_GetGlyph+0xae>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8001fba:	77e3      	strb	r3, [r4, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8001fbc:	7873      	ldrb	r3, [r6, #1]
 8001fbe:	77cb      	strb	r3, [r1, #31]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8001fc0:	78f3      	ldrb	r3, [r6, #3]
 8001fc2:	7723      	strb	r3, [r4, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8001fc4:	7933      	ldrb	r3, [r6, #4]
 8001fc6:	7763      	strb	r3, [r4, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8001fc8:	7973      	ldrb	r3, [r6, #5]
 8001fca:	77a3      	strb	r3, [r4, #30]
 8001fcc:	e00e      	b.n	8001fec <u8g_GetGlyph+0xcc>
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
      u8g->glyph_y =  tmp & 15;
 8001fce:	220f      	movs	r2, #15
 8001fd0:	1c18      	adds	r0, r3, #0
 8001fd2:	4010      	ands	r0, r2
      u8g->glyph_y-=2;
      tmp >>= 4;
 8001fd4:	091b      	lsrs	r3, r3, #4
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
      u8g->glyph_y =  tmp & 15;
      u8g->glyph_y-=2;
 8001fd6:	3802      	subs	r0, #2
 8001fd8:	77a0      	strb	r0, [r4, #30]
      tmp >>= 4;
      u8g->glyph_x =  tmp;
 8001fda:	7763      	strb	r3, [r4, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8001fdc:	7873      	ldrb	r3, [r6, #1]
      u8g->glyph_height =  tmp & 15;
 8001fde:	401a      	ands	r2, r3
      tmp >>= 4;
 8001fe0:	091b      	lsrs	r3, r3, #4
      u8g->glyph_y-=2;
      tmp >>= 4;
      u8g->glyph_x =  tmp;
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
      u8g->glyph_height =  tmp & 15;
 8001fe2:	77ca      	strb	r2, [r1, #31]
      tmp >>= 4;
      u8g->glyph_width =  tmp;
 8001fe4:	77e3      	strb	r3, [r4, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8001fe6:	78b3      	ldrb	r3, [r6, #2]
      tmp >>= 4;
 8001fe8:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 8001fea:	7723      	strb	r3, [r4, #28]
      else
      {
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
 8001fec:	1c30      	adds	r0, r6, #0
  }
  
  u8g_FillEmptyGlyphCache(u8g);
    
  return NULL;
}
 8001fee:	b005      	add	sp, #20
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8001ff2:	78b3      	ldrb	r3, [r6, #2]
 8001ff4:	9a02      	ldr	r2, [sp, #8]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	9a03      	ldr	r2, [sp, #12]
 8001ffa:	189b      	adds	r3, r3, r2
        p += data_structure_size;
 8001ffc:	18f6      	adds	r6, r6, r3
      }
      if ( i == end )
 8001ffe:	9b01      	ldr	r3, [sp, #4]
 8002000:	429d      	cmp	r5, r3
 8002002:	d0c2      	beq.n	8001f8a <u8g_GetGlyph+0x6a>
        break;
      i++;
 8002004:	3501      	adds	r5, #1
 8002006:	b2ed      	uxtb	r5, r5
    }
 8002008:	e7ca      	b.n	8001fa0 <u8g_GetGlyph+0x80>

0800200a <u8g_font_calc_str_min_box>:
{
  /* u8g_glyph_t g; */
  int8_t tmp;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
 800200a:	2300      	movs	r3, #0
  u8g_uint_t w;         /* width of the overall string */
};
typedef struct u8g_str_size_struct u8g_str_size_t;

static void u8g_font_calc_str_min_box(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 800200c:	b570      	push	{r4, r5, r6, lr}
  /* u8g_glyph_t g; */
  int8_t tmp;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
 800200e:	7113      	strb	r3, [r2, #4]
    
  /* check for empty string, width is already 0, but also reset y_min and y_max to 0 */
  if ( *s == '\0' )
 8002010:	780b      	ldrb	r3, [r1, #0]
  u8g_uint_t w;         /* width of the overall string */
};
typedef struct u8g_str_size_struct u8g_str_size_t;

static void u8g_font_calc_str_min_box(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 8002012:	1c05      	adds	r5, r0, #0
 8002014:	1c0e      	adds	r6, r1, #0
 8002016:	1c14      	adds	r4, r2, #0
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  buf->w = 0;
    
  /* check for empty string, width is already 0, but also reset y_min and y_max to 0 */
  if ( *s == '\0' )
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <u8g_font_calc_str_min_box+0x1c>
  {
    buf->y_min = 0;
 800201c:	7013      	strb	r3, [r2, #0]
    buf->y_max = 0;
 800201e:	7053      	strb	r3, [r2, #1]
    buf->x = 0;
 8002020:	7093      	strb	r3, [r2, #2]
    buf->y = 0;
 8002022:	70d3      	strb	r3, [r2, #3]
    return;
 8002024:	e032      	b.n	800208c <u8g_font_calc_str_min_box+0x82>
  }
  
  /* reset y_min to the largest possible value. Later we search for the smallest value */
  /* y_min contains the position [pixel] of the lower left edge of the glyph above (y_min>0) or below (y_min<0) baseline  */
  buf->y_min = 127;
 8002026:	237f      	movs	r3, #127	; 0x7f
 8002028:	7013      	strb	r3, [r2, #0]
  /* reset y_max to the smallest possible value. Later we search for the highest value */
  /* y_max contains the position [pixel] of the upper left edge of the glyph above (y_max>0) or below (y_max<0) baseline  */
  buf->y_max = -128;
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	7053      	strb	r3, [r2, #1]

  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  u8g_GetGlyph(u8g, *s);
 800202e:	7809      	ldrb	r1, [r1, #0]
 8002030:	f7ff ff76 	bl	8001f20 <u8g_GetGlyph>
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  // buf->w = - u8g_font_GetGlyphBBXOffX(u8g->font, g);
  buf->w = - u8g->glyph_x;
 8002034:	7f6b      	ldrb	r3, [r5, #29]
 8002036:	425b      	negs	r3, r3
 8002038:	7123      	strb	r3, [r4, #4]
  
  /* Also copy the position of the first glyph. This is the reference point of the string (negated) */
  buf->x = u8g->glyph_x;
 800203a:	7f6b      	ldrb	r3, [r5, #29]
 800203c:	70a3      	strb	r3, [r4, #2]
  buf->y = u8g->glyph_y;
 800203e:	7fab      	ldrb	r3, [r5, #30]
 8002040:	70e3      	strb	r3, [r4, #3]
    
    /* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */
    /* relative to the base line */
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
 8002042:	2100      	movs	r1, #0
  {
    
    /* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */
    /* relative to the base line */
    
    tmp = u8g->glyph_y;
 8002044:	7faa      	ldrb	r2, [r5, #30]
    if ( buf->y_min > tmp )
 8002046:	5661      	ldrsb	r1, [r4, r1]
 8002048:	b253      	sxtb	r3, r2
 800204a:	4299      	cmp	r1, r3
 800204c:	dd00      	ble.n	8002050 <u8g_font_calc_str_min_box+0x46>
      buf->y_min = tmp;
 800204e:	7022      	strb	r2, [r4, #0]
    
    tmp +=u8g->glyph_height;
    if ( buf->y_max < tmp )
 8002050:	2101      	movs	r1, #1
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
      buf->y_min = tmp;
    
    tmp +=u8g->glyph_height;
 8002052:	1c6b      	adds	r3, r5, #1
 8002054:	7fdb      	ldrb	r3, [r3, #31]
    if ( buf->y_max < tmp )
 8002056:	5661      	ldrsb	r1, [r4, r1]
    
    tmp = u8g->glyph_y;
    if ( buf->y_min > tmp )
      buf->y_min = tmp;
    
    tmp +=u8g->glyph_height;
 8002058:	18d3      	adds	r3, r2, r3
 800205a:	b2db      	uxtb	r3, r3
    if ( buf->y_max < tmp )
 800205c:	b25a      	sxtb	r2, r3
 800205e:	4291      	cmp	r1, r2
 8002060:	da00      	bge.n	8002064 <u8g_font_calc_str_min_box+0x5a>
      buf->y_max = tmp;
 8002062:	7063      	strb	r3, [r4, #1]
    
    /* check and stop if the end of the string is reached */
    s++;
 8002064:	3601      	adds	r6, #1
    if ( *s == '\0' )
 8002066:	7833      	ldrb	r3, [r6, #0]
 8002068:	7922      	ldrb	r2, [r4, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <u8g_font_calc_str_min_box+0x74>
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    buf->w += u8g->glyph_dx;
 800206e:	7f2b      	ldrb	r3, [r5, #28]
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, *s);
 8002070:	1c28      	adds	r0, r5, #0
    s++;
    if ( *s == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    buf->w += u8g->glyph_dx;
 8002072:	189a      	adds	r2, r3, r2
 8002074:	7122      	strb	r2, [r4, #4]
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, *s);
 8002076:	7831      	ldrb	r1, [r6, #0]
 8002078:	f7ff ff52 	bl	8001f20 <u8g_GetGlyph>
 800207c:	e7e1      	b.n	8002042 <u8g_font_calc_str_min_box+0x38>
  }
  
  /* finally calculate the width of the last char */
  /* if g was not updated in the for loop (strlen() == 1), then the initial offset x gets removed */
  buf->w += u8g->glyph_width;
 800207e:	7feb      	ldrb	r3, [r5, #31]
 8002080:	189b      	adds	r3, r3, r2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	7123      	strb	r3, [r4, #4]
  // buf->w += u8g_font_GetGlyphBBXOffX(u8g->font, g);
  
  buf->w += u8g->glyph_x;
 8002086:	7f6a      	ldrb	r2, [r5, #29]
 8002088:	189b      	adds	r3, r3, r2
 800208a:	7123      	strb	r3, [r4, #4]
}
 800208c:	bd70      	pop	{r4, r5, r6, pc}

0800208e <u8g_IsGlyph>:
    
  return NULL;
}

uint8_t u8g_IsGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 800208e:	b508      	push	{r3, lr}
  if ( u8g_GetGlyph(u8g, requested_encoding) != NULL )
 8002090:	f7ff ff46 	bl	8001f20 <u8g_GetGlyph>
 8002094:	1e43      	subs	r3, r0, #1
 8002096:	4198      	sbcs	r0, r3
    return 1;
  return 0;
}
 8002098:	b2c0      	uxtb	r0, r0
 800209a:	bd08      	pop	{r3, pc}

0800209c <u8g_GetGlyphDeltaX>:

int8_t u8g_GetGlyphDeltaX(u8g_t *u8g, uint8_t requested_encoding)
{
 800209c:	b510      	push	{r4, lr}
 800209e:	1c04      	adds	r4, r0, #0
  if ( u8g_GetGlyph(u8g, requested_encoding) == NULL )
 80020a0:	f7ff ff3e 	bl	8001f20 <u8g_GetGlyph>
    return 0;  /* should never happen, so return something */
 80020a4:	1e03      	subs	r3, r0, #0
  return 0;
}

int8_t u8g_GetGlyphDeltaX(u8g_t *u8g, uint8_t requested_encoding)
{
  if ( u8g_GetGlyph(u8g, requested_encoding) == NULL )
 80020a6:	d000      	beq.n	80020aa <u8g_GetGlyphDeltaX+0xe>
    return 0;  /* should never happen, so return something */
  return u8g->glyph_dx;
 80020a8:	7f23      	ldrb	r3, [r4, #28]
 80020aa:	b258      	sxtb	r0, r3
}
 80020ac:	bd10      	pop	{r4, pc}

080020ae <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80020ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b0:	1c0f      	adds	r7, r1, #0
 80020b2:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80020b4:	1c19      	adds	r1, r3, #0
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80020b6:	1c04      	adds	r4, r0, #0
 80020b8:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80020ba:	f7ff ff31 	bl	8001f20 <u8g_GetGlyph>
 80020be:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 80020c0:	d03d      	beq.n	800213e <u8g_draw_glyph+0x90>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	7818      	ldrb	r0, [r3, #0]
 80020c6:	f7ff fec8 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80020ca:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80020cc:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80020ce:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 80020d0:	1c63      	adds	r3, r4, #1
 80020d2:	7fda      	ldrb	r2, [r3, #31]
  
  x += u8g->glyph_x;
 80020d4:	7f63      	ldrb	r3, [r4, #29]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80020d6:	9200      	str	r2, [sp, #0]
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_x;
 80020d8:	18ff      	adds	r7, r7, r3
 80020da:	b2fb      	uxtb	r3, r7
 80020dc:	9304      	str	r3, [sp, #16]
 80020de:	7fa3      	ldrb	r3, [r4, #30]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80020e0:	1c20      	adds	r0, r4, #0
 80020e2:	1af6      	subs	r6, r6, r3
 80020e4:	b2f3      	uxtb	r3, r6
 80020e6:	1a9e      	subs	r6, r3, r2
 80020e8:	b2f6      	uxtb	r6, r6
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	9904      	ldr	r1, [sp, #16]
 80020ee:	1c32      	adds	r2, r6, #0
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	f7fe ff17 	bl	8000f24 <u8g_IsBBXIntersection>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d020      	beq.n	800213c <u8g_draw_glyph+0x8e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80020fa:	9b05      	ldr	r3, [sp, #20]
 80020fc:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 80020fe:	9b03      	ldr	r3, [sp, #12]
 8002100:	3307      	adds	r3, #7
 8002102:	b2db      	uxtb	r3, r3
  w /= 8;
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	9303      	str	r3, [sp, #12]
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	429e      	cmp	r6, r3
 800210c:	d016      	beq.n	800213c <u8g_draw_glyph+0x8e>
 800210e:	1c2f      	adds	r7, r5, #0
 8002110:	1b7b      	subs	r3, r7, r5
 8002112:	9a04      	ldr	r2, [sp, #16]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	00d9      	lsls	r1, r3, #3
 8002118:	1851      	adds	r1, r2, r1
  {
    ix = x;
    for( i = 0; i < w; i++ )
 800211a:	9a03      	ldr	r2, [sp, #12]
 800211c:	b2c9      	uxtb	r1, r1
 800211e:	4293      	cmp	r3, r2
 8002120:	d208      	bcs.n	8002134 <u8g_draw_glyph+0x86>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002122:	783b      	ldrb	r3, [r7, #0]
 8002124:	1c20      	adds	r0, r4, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	1c32      	adds	r2, r6, #0
 800212a:	2300      	movs	r3, #0
 800212c:	f7ff fb71 	bl	8001812 <u8g_Draw8Pixel>
      data++;
 8002130:	3701      	adds	r7, #1
 8002132:	e7ed      	b.n	8002110 <u8g_draw_glyph+0x62>
      ix+=8;
    }
    iy++;
 8002134:	3601      	adds	r6, #1
 8002136:	18ad      	adds	r5, r5, r2
 8002138:	b2f6      	uxtb	r6, r6
 800213a:	e7e5      	b.n	8002108 <u8g_draw_glyph+0x5a>
  }
  return u8g->glyph_dx;
 800213c:	7f20      	ldrb	r0, [r4, #28]
 800213e:	b240      	sxtb	r0, r0
}
 8002140:	b007      	add	sp, #28
 8002142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002144 <u8g_DrawGlyph>:

int8_t u8g_DrawGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	1c05      	adds	r5, r0, #0
 8002148:	1c1e      	adds	r6, r3, #0
  y += u8g->font_calc_vref(u8g);
 800214a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800214c:	1c0f      	adds	r7, r1, #0
 800214e:	1c14      	adds	r4, r2, #0
  y += u8g->font_calc_vref(u8g);
 8002150:	4798      	blx	r3
 8002152:	1902      	adds	r2, r0, r4
  return u8g_draw_glyph(u8g, x, y, encoding);
 8002154:	1c39      	adds	r1, r7, #0
 8002156:	1c28      	adds	r0, r5, #0
 8002158:	1c33      	adds	r3, r6, #0
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f7ff ffa7 	bl	80020ae <u8g_draw_glyph>
}
 8002160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002162 <u8g_draw_glyph90>:

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002164:	1c0f      	adds	r7, r1, #0
 8002166:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002168:	1c19      	adds	r1, r3, #0
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_glyph(u8g, x, y, encoding);
}

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800216a:	1c04      	adds	r4, r0, #0
 800216c:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800216e:	f7ff fed7 	bl	8001f20 <u8g_GetGlyph>
 8002172:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 8002174:	d045      	beq.n	8002202 <u8g_draw_glyph90+0xa0>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002176:	68a3      	ldr	r3, [r4, #8]
 8002178:	7818      	ldrb	r0, [r3, #0]
 800217a:	f7ff fe6e 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800217e:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002180:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 8002182:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 8002184:	1c63      	adds	r3, r4, #1
 8002186:	7fdb      	ldrb	r3, [r3, #31]
  
  x += u8g->glyph_y;
  x++;
  y += u8g->glyph_x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
 8002188:	1c20      	adds	r0, r4, #0
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	7fa3      	ldrb	r3, [r4, #30]
 800218e:	3301      	adds	r3, #1
  
  x += u8g->glyph_y;
  x++;
 8002190:	18ff      	adds	r7, r7, r3
  y += u8g->glyph_x;
 8002192:	7f63      	ldrb	r3, [r4, #29]
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_y;
  x++;
 8002194:	b2ff      	uxtb	r7, r7
  y += u8g->glyph_x;
 8002196:	18f6      	adds	r6, r6, r3
 8002198:	b2f3      	uxtb	r3, r6
 800219a:	9304      	str	r3, [sp, #16]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	1c39      	adds	r1, r7, #0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	9a04      	ldr	r2, [sp, #16]
 80021a4:	9b02      	ldr	r3, [sp, #8]
 80021a6:	f7fe febd 	bl	8000f24 <u8g_IsBBXIntersection>
 80021aa:	2800      	cmp	r0, #0
 80021ac:	d028      	beq.n	8002200 <u8g_draw_glyph90+0x9e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80021ae:	9b05      	ldr	r3, [sp, #20]
 80021b0:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 80021b2:	9b03      	ldr	r3, [sp, #12]
 80021b4:	3307      	adds	r3, #7
 80021b6:	b2db      	uxtb	r3, r3
  w /= 8;
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	9303      	str	r3, [sp, #12]
 80021bc:	9b02      	ldr	r3, [sp, #8]
 80021be:	3b01      	subs	r3, #1
  
  ix = x;
  ix += h;
  ix--;
 80021c0:	18ff      	adds	r7, r7, r3
 80021c2:	9b02      	ldr	r3, [sp, #8]
 80021c4:	b2ff      	uxtb	r7, r7
 80021c6:	1afb      	subs	r3, r7, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	9302      	str	r3, [sp, #8]
  for( j = 0; j < h; j++ )
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	429f      	cmp	r7, r3
 80021d0:	d016      	beq.n	8002200 <u8g_draw_glyph90+0x9e>
 80021d2:	1c2e      	adds	r6, r5, #0
 80021d4:	1b73      	subs	r3, r6, r5
 80021d6:	9904      	ldr	r1, [sp, #16]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	00da      	lsls	r2, r3, #3
 80021dc:	188a      	adds	r2, r1, r2
  {
    iy = y;
    for( i = 0; i < w; i++ )
 80021de:	9903      	ldr	r1, [sp, #12]
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	428b      	cmp	r3, r1
 80021e4:	d208      	bcs.n	80021f8 <u8g_draw_glyph90+0x96>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 1, u8g_pgm_read(data));
 80021e6:	7833      	ldrb	r3, [r6, #0]
 80021e8:	1c20      	adds	r0, r4, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	1c39      	adds	r1, r7, #0
 80021ee:	2301      	movs	r3, #1
 80021f0:	f7ff fb0f 	bl	8001812 <u8g_Draw8Pixel>
      data++;
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7ed      	b.n	80021d4 <u8g_draw_glyph90+0x72>
      iy+=8;
    }
    ix--;
 80021f8:	3f01      	subs	r7, #1
 80021fa:	186d      	adds	r5, r5, r1
 80021fc:	b2ff      	uxtb	r7, r7
 80021fe:	e7e5      	b.n	80021cc <u8g_draw_glyph90+0x6a>
  }
  return u8g->glyph_dx;
 8002200:	7f20      	ldrb	r0, [r4, #28]
 8002202:	b240      	sxtb	r0, r0
}
 8002204:	b007      	add	sp, #28
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002208 <u8g_DrawGlyph90>:

int8_t u8g_DrawGlyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	1c05      	adds	r5, r0, #0
 800220c:	1c1e      	adds	r6, r3, #0
  x -= u8g->font_calc_vref(u8g);
 800220e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002210:	1c17      	adds	r7, r2, #0
 8002212:	1c0c      	adds	r4, r1, #0
  x -= u8g->font_calc_vref(u8g);
 8002214:	4798      	blx	r3
 8002216:	1a21      	subs	r1, r4, r0
  return u8g_draw_glyph90(u8g, x, y, encoding);
 8002218:	1c3a      	adds	r2, r7, #0
 800221a:	1c28      	adds	r0, r5, #0
 800221c:	1c33      	adds	r3, r6, #0
 800221e:	b2c9      	uxtb	r1, r1
 8002220:	f7ff ff9f 	bl	8002162 <u8g_draw_glyph90>
}
 8002224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002226 <u8g_draw_glyph180>:


int8_t u8g_draw_glyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002228:	1c0e      	adds	r6, r1, #0
 800222a:	b089      	sub	sp, #36	; 0x24
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800222c:	1c19      	adds	r1, r3, #0
  return u8g_draw_glyph90(u8g, x, y, encoding);
}


int8_t u8g_draw_glyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800222e:	1c05      	adds	r5, r0, #0
 8002230:	1c17      	adds	r7, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002232:	f7ff fe75 	bl	8001f20 <u8g_GetGlyph>
 8002236:	9003      	str	r0, [sp, #12]
    if ( g == NULL  )
 8002238:	2800      	cmp	r0, #0
 800223a:	d053      	beq.n	80022e4 <u8g_draw_glyph180+0xbe>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800223c:	68ab      	ldr	r3, [r5, #8]
 800223e:	7818      	ldrb	r0, [r3, #0]
 8002240:	f7ff fe0b 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8002244:	1c6b      	adds	r3, r5, #1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002246:	9006      	str	r0, [sp, #24]
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8002248:	7fdb      	ldrb	r3, [r3, #31]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800224a:	7fec      	ldrb	r4, [r5, #31]
  h = u8g->glyph_height;
 800224c:	9304      	str	r3, [sp, #16]
  
  x -= u8g->glyph_x;
 800224e:	7f6b      	ldrb	r3, [r5, #29]
  y += u8g->glyph_y;
  y++;
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
 8002250:	1c28      	adds	r0, r5, #0
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x -= u8g->glyph_x;
 8002252:	1af6      	subs	r6, r6, r3
 8002254:	b2f3      	uxtb	r3, r6
 8002256:	9305      	str	r3, [sp, #20]
 8002258:	7fab      	ldrb	r3, [r5, #30]
 800225a:	3301      	adds	r3, #1
  y += u8g->glyph_y;
  y++;
 800225c:	18ff      	adds	r7, r7, r3
 800225e:	9b05      	ldr	r3, [sp, #20]
 8002260:	b2ff      	uxtb	r7, r7
 8002262:	1b19      	subs	r1, r3, r4
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
 8002264:	9b04      	ldr	r3, [sp, #16]
 8002266:	3101      	adds	r1, #1
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	b2c9      	uxtb	r1, r1
 800226c:	1c3a      	adds	r2, r7, #0
 800226e:	1c23      	adds	r3, r4, #0
 8002270:	f7fe fe58 	bl	8000f24 <u8g_IsBBXIntersection>
 8002274:	2800      	cmp	r0, #0
 8002276:	d034      	beq.n	80022e2 <u8g_draw_glyph180+0xbc>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002278:	9a06      	ldr	r2, [sp, #24]
 800227a:	9b03      	ldr	r3, [sp, #12]
 800227c:	4694      	mov	ip, r2
 800227e:	4463      	add	r3, ip
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	9b04      	ldr	r3, [sp, #16]
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 8002284:	3407      	adds	r4, #7
 8002286:	3b01      	subs	r3, #1
  w /= 8;
  
  iy = y;
  iy += h;
  iy--;
 8002288:	18ff      	adds	r7, r7, r3
 800228a:	9b04      	ldr	r3, [sp, #16]
 800228c:	b2ff      	uxtb	r7, r7
 800228e:	1afb      	subs	r3, r7, r3
  
  if ( u8g_IsBBXIntersection(u8g, x-(w-1), y, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
 8002290:	b2e6      	uxtb	r6, r4
 8002292:	b2db      	uxtb	r3, r3
  w /= 8;
 8002294:	08f6      	lsrs	r6, r6, #3
 8002296:	9306      	str	r3, [sp, #24]
  
  iy = y;
  iy += h;
  iy--;
  for( j = 0; j < h; j++ )
 8002298:	9b06      	ldr	r3, [sp, #24]
 800229a:	429f      	cmp	r7, r3
 800229c:	d021      	beq.n	80022e2 <u8g_draw_glyph180+0xbc>
 800229e:	466b      	mov	r3, sp
 80022a0:	7b1b      	ldrb	r3, [r3, #12]
 80022a2:	9a05      	ldr	r2, [sp, #20]
 80022a4:	9304      	str	r3, [sp, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	18d3      	adds	r3, r2, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	9c03      	ldr	r4, [sp, #12]
 80022ae:	9307      	str	r3, [sp, #28]
 80022b0:	b2e3      	uxtb	r3, r4
 80022b2:	9a07      	ldr	r2, [sp, #28]
 80022b4:	00d9      	lsls	r1, r3, #3
 80022b6:	1a51      	subs	r1, r2, r1
 80022b8:	9a04      	ldr	r2, [sp, #16]
 80022ba:	b2c9      	uxtb	r1, r1
 80022bc:	1a9b      	subs	r3, r3, r2
  {
    ix = x;
    for( i = 0; i < w; i++ )
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	42b3      	cmp	r3, r6
 80022c2:	d208      	bcs.n	80022d6 <u8g_draw_glyph180+0xb0>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 2, u8g_pgm_read(data));
 80022c4:	7823      	ldrb	r3, [r4, #0]
 80022c6:	1c28      	adds	r0, r5, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	1c3a      	adds	r2, r7, #0
 80022cc:	2302      	movs	r3, #2
 80022ce:	f7ff faa0 	bl	8001812 <u8g_Draw8Pixel>
      data++;
 80022d2:	3401      	adds	r4, #1
 80022d4:	e7ec      	b.n	80022b0 <u8g_draw_glyph180+0x8a>
 80022d6:	9b03      	ldr	r3, [sp, #12]
      ix-=8;
    }
    iy--;
 80022d8:	3f01      	subs	r7, #1
 80022da:	199b      	adds	r3, r3, r6
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	b2ff      	uxtb	r7, r7
 80022e0:	e7da      	b.n	8002298 <u8g_draw_glyph180+0x72>
  }
  return u8g->glyph_dx;
 80022e2:	7f28      	ldrb	r0, [r5, #28]
 80022e4:	b240      	sxtb	r0, r0
}
 80022e6:	b009      	add	sp, #36	; 0x24
 80022e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ea <u8g_DrawGlyph180>:

int8_t u8g_DrawGlyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80022ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ec:	1c05      	adds	r5, r0, #0
 80022ee:	1c1e      	adds	r6, r3, #0
  y -= u8g->font_calc_vref(u8g);
 80022f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80022f2:	1c0f      	adds	r7, r1, #0
 80022f4:	1c14      	adds	r4, r2, #0
  y -= u8g->font_calc_vref(u8g);
 80022f6:	4798      	blx	r3
 80022f8:	1a22      	subs	r2, r4, r0
  return u8g_draw_glyph180(u8g, x, y, encoding);
 80022fa:	1c39      	adds	r1, r7, #0
 80022fc:	1c28      	adds	r0, r5, #0
 80022fe:	1c33      	adds	r3, r6, #0
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f7ff ff90 	bl	8002226 <u8g_draw_glyph180>
}
 8002306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002308 <u8g_draw_glyph270>:


int8_t u8g_draw_glyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	1c0e      	adds	r6, r1, #0
 800230c:	b089      	sub	sp, #36	; 0x24
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800230e:	1c19      	adds	r1, r3, #0
  return u8g_draw_glyph180(u8g, x, y, encoding);
}


int8_t u8g_draw_glyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002310:	1c05      	adds	r5, r0, #0
 8002312:	1c17      	adds	r7, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002314:	f7ff fe04 	bl	8001f20 <u8g_GetGlyph>
 8002318:	9003      	str	r0, [sp, #12]
    if ( g == NULL  )
 800231a:	2800      	cmp	r0, #0
 800231c:	d04f      	beq.n	80023be <u8g_draw_glyph270+0xb6>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800231e:	68ab      	ldr	r3, [r5, #8]
 8002320:	7818      	ldrb	r0, [r3, #0]
 8002322:	f7ff fd9a 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 8002326:	1c6b      	adds	r3, r5, #1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002328:	9006      	str	r0, [sp, #24]
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
 800232a:	7fdb      	ldrb	r3, [r3, #31]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 800232c:	7fec      	ldrb	r4, [r5, #31]
  h = u8g->glyph_height;
 800232e:	9304      	str	r3, [sp, #16]
  
  x -= u8g->glyph_y;
  x--;
  y -= u8g->glyph_x;
 8002330:	7f6b      	ldrb	r3, [r5, #29]
 8002332:	9a04      	ldr	r2, [sp, #16]
 8002334:	1aff      	subs	r7, r7, r3
 8002336:	b2fb      	uxtb	r3, r7
 8002338:	9305      	str	r3, [sp, #20]
 800233a:	7fab      	ldrb	r3, [r5, #30]
  
  if ( u8g_IsBBXIntersection(u8g, x-(h-1), y-(w-1), h, w) == 0 )
 800233c:	9400      	str	r4, [sp, #0]
 800233e:	18d3      	adds	r3, r2, r3
 8002340:	1af6      	subs	r6, r6, r3
 8002342:	9b05      	ldr	r3, [sp, #20]
 8002344:	b2f6      	uxtb	r6, r6
 8002346:	1b1a      	subs	r2, r3, r4
 8002348:	3201      	adds	r2, #1
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	1c28      	adds	r0, r5, #0
 800234e:	1c31      	adds	r1, r6, #0
 8002350:	9b04      	ldr	r3, [sp, #16]
 8002352:	f7fe fde7 	bl	8000f24 <u8g_IsBBXIntersection>
 8002356:	2800      	cmp	r0, #0
 8002358:	d030      	beq.n	80023bc <u8g_draw_glyph270+0xb4>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800235a:	9a06      	ldr	r2, [sp, #24]
 800235c:	9b03      	ldr	r3, [sp, #12]
 800235e:	4694      	mov	ip, r2
 8002360:	4463      	add	r3, ip
 8002362:	9303      	str	r3, [sp, #12]
 8002364:	9b04      	ldr	r3, [sp, #16]
  if ( u8g_IsBBXIntersection(u8g, x-(h-1), y-(w-1), h, w) == 0 )
    return u8g->glyph_dx;
  

  /* now, w is reused as bytes per line */
  w += 7;
 8002366:	3407      	adds	r4, #7
 8002368:	18f3      	adds	r3, r6, r3
 800236a:	b2e7      	uxtb	r7, r4
 800236c:	b2db      	uxtb	r3, r3
  w /= 8;  
 800236e:	08ff      	lsrs	r7, r7, #3
 8002370:	9306      	str	r3, [sp, #24]
      
  ix = x;
  ix -= h;
  ix++;
  
  for( j = 0; j < h; j++ )
 8002372:	9b06      	ldr	r3, [sp, #24]
 8002374:	429e      	cmp	r6, r3
 8002376:	d021      	beq.n	80023bc <u8g_draw_glyph270+0xb4>
 8002378:	466b      	mov	r3, sp
 800237a:	7b1b      	ldrb	r3, [r3, #12]
 800237c:	9a05      	ldr	r2, [sp, #20]
 800237e:	9304      	str	r3, [sp, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	18d3      	adds	r3, r2, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	9c03      	ldr	r4, [sp, #12]
 8002388:	9307      	str	r3, [sp, #28]
 800238a:	b2e3      	uxtb	r3, r4
 800238c:	9907      	ldr	r1, [sp, #28]
 800238e:	00da      	lsls	r2, r3, #3
 8002390:	1a8a      	subs	r2, r1, r2
 8002392:	9904      	ldr	r1, [sp, #16]
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	1a5b      	subs	r3, r3, r1
  {
    iy = y;
    for( i = 0; i < w; i++ )
 8002398:	b2db      	uxtb	r3, r3
 800239a:	42bb      	cmp	r3, r7
 800239c:	d208      	bcs.n	80023b0 <u8g_draw_glyph270+0xa8>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 3, u8g_pgm_read(data));
 800239e:	7823      	ldrb	r3, [r4, #0]
 80023a0:	1c28      	adds	r0, r5, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	1c31      	adds	r1, r6, #0
 80023a6:	2303      	movs	r3, #3
 80023a8:	f7ff fa33 	bl	8001812 <u8g_Draw8Pixel>
      data++;
 80023ac:	3401      	adds	r4, #1
 80023ae:	e7ec      	b.n	800238a <u8g_draw_glyph270+0x82>
 80023b0:	9b03      	ldr	r3, [sp, #12]
      iy-=8;
    }
    ix++;
 80023b2:	3601      	adds	r6, #1
 80023b4:	19db      	adds	r3, r3, r7
 80023b6:	9303      	str	r3, [sp, #12]
 80023b8:	b2f6      	uxtb	r6, r6
 80023ba:	e7da      	b.n	8002372 <u8g_draw_glyph270+0x6a>
  }
  return u8g->glyph_dx;
 80023bc:	7f28      	ldrb	r0, [r5, #28]
 80023be:	b240      	sxtb	r0, r0
}
 80023c0:	b009      	add	sp, #36	; 0x24
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023c4 <u8g_DrawGlyph270>:

int8_t u8g_DrawGlyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	1c05      	adds	r5, r0, #0
 80023c8:	1c1e      	adds	r6, r3, #0
  x += u8g->font_calc_vref(u8g);
 80023ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawGlyph270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80023cc:	1c17      	adds	r7, r2, #0
 80023ce:	1c0c      	adds	r4, r1, #0
  x += u8g->font_calc_vref(u8g);
 80023d0:	4798      	blx	r3
 80023d2:	1901      	adds	r1, r0, r4
  return u8g_draw_glyph270(u8g, x, y, encoding);
 80023d4:	1c3a      	adds	r2, r7, #0
 80023d6:	1c28      	adds	r0, r5, #0
 80023d8:	1c33      	adds	r3, r6, #0
 80023da:	b2c9      	uxtb	r1, r1
 80023dc:	f7ff ff94 	bl	8002308 <u8g_draw_glyph270>
}
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023e2 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 80023e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023e4:	1c07      	adds	r7, r0, #0
 80023e6:	1c1e      	adds	r6, r3, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 80023ea:	1c15      	adds	r5, r2, #0
 80023ec:	1c0c      	adds	r4, r1, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 80023ee:	4798      	blx	r3
 80023f0:	1945      	adds	r5, r0, r5
 80023f2:	b2eb      	uxtb	r3, r5
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 80023f4:	2500      	movs	r5, #0
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 80023f6:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 80023f8:	7833      	ldrb	r3, [r6, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <u8g_DrawStr+0x34>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 80023fe:	1c21      	adds	r1, r4, #0
 8002400:	1c38      	adds	r0, r7, #0
 8002402:	9a01      	ldr	r2, [sp, #4]
 8002404:	f7ff fe53 	bl	80020ae <u8g_draw_glyph>
    x += d;
 8002408:	b2c0      	uxtb	r0, r0
 800240a:	1904      	adds	r4, r0, r4
    t += d;
 800240c:	1945      	adds	r5, r0, r5
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    x += d;
 800240e:	b2e4      	uxtb	r4, r4
    t += d;
 8002410:	b2ed      	uxtb	r5, r5
    s++;
 8002412:	3601      	adds	r6, #1
 8002414:	e7f0      	b.n	80023f8 <u8g_DrawStr+0x16>
  }
  return t;
}
 8002416:	1c28      	adds	r0, r5, #0
 8002418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800241a <u8g_DrawStr90>:

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800241a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800241c:	1c07      	adds	r7, r0, #0
 800241e:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002422:	1c0d      	adds	r5, r1, #0
 8002424:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 8002426:	4798      	blx	r3
 8002428:	1a2d      	subs	r5, r5, r0
 800242a:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 800242c:	2500      	movs	r5, #0
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
 800242e:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 8002430:	7833      	ldrb	r3, [r6, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <u8g_DrawStr90+0x34>
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
 8002436:	1c22      	adds	r2, r4, #0
 8002438:	1c38      	adds	r0, r7, #0
 800243a:	9901      	ldr	r1, [sp, #4]
 800243c:	f7ff fe91 	bl	8002162 <u8g_draw_glyph90>
    y += d;
 8002440:	b2c0      	uxtb	r0, r0
 8002442:	1904      	adds	r4, r0, r4
    t += d;
 8002444:	1945      	adds	r5, r0, r5
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
    y += d;
 8002446:	b2e4      	uxtb	r4, r4
    t += d;
 8002448:	b2ed      	uxtb	r5, r5
    s++;
 800244a:	3601      	adds	r6, #1
 800244c:	e7f0      	b.n	8002430 <u8g_DrawStr90+0x16>
  }
  return t;
}
 800244e:	1c28      	adds	r0, r5, #0
 8002450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002452 <u8g_DrawStr180>:

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002454:	1c07      	adds	r7, r0, #0
 8002456:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800245a:	1c15      	adds	r5, r2, #0
 800245c:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 800245e:	4798      	blx	r3
 8002460:	1a2d      	subs	r5, r5, r0
 8002462:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr180(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 8002464:	2500      	movs	r5, #0
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8002466:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8002468:	7833      	ldrb	r3, [r6, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <u8g_DrawStr180+0x34>
  {
    d = u8g_draw_glyph180(u8g, x, y, *s);
 800246e:	1c21      	adds	r1, r4, #0
 8002470:	1c38      	adds	r0, r7, #0
 8002472:	9a01      	ldr	r2, [sp, #4]
 8002474:	f7ff fed7 	bl	8002226 <u8g_draw_glyph180>
    x -= d;
 8002478:	b2c0      	uxtb	r0, r0
 800247a:	1a24      	subs	r4, r4, r0
    t += d;
 800247c:	1945      	adds	r5, r0, r5
  y -= u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph180(u8g, x, y, *s);
    x -= d;
 800247e:	b2e4      	uxtb	r4, r4
    t += d;
 8002480:	b2ed      	uxtb	r5, r5
    s++;
 8002482:	3601      	adds	r6, #1
 8002484:	e7f0      	b.n	8002468 <u8g_DrawStr180+0x16>
  }
  return t;
}
 8002486:	1c28      	adds	r0, r5, #0
 8002488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800248a <u8g_DrawStr270>:

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800248a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800248c:	1c07      	adds	r7, r0, #0
 800248e:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002492:	1c0d      	adds	r5, r1, #0
 8002494:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 8002496:	4798      	blx	r3
 8002498:	1945      	adds	r5, r0, r5
 800249a:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr270(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
 800249c:	2500      	movs	r5, #0
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 800249e:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 80024a0:	7833      	ldrb	r3, [r6, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <u8g_DrawStr270+0x34>
  {
    d = u8g_draw_glyph270(u8g, x, y, *s);
 80024a6:	1c22      	adds	r2, r4, #0
 80024a8:	1c38      	adds	r0, r7, #0
 80024aa:	9901      	ldr	r1, [sp, #4]
 80024ac:	f7ff ff2c 	bl	8002308 <u8g_draw_glyph270>
    y -= d;
 80024b0:	b2c0      	uxtb	r0, r0
 80024b2:	1a24      	subs	r4, r4, r0
    t += d;
 80024b4:	1945      	adds	r5, r0, r5
  x += u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_draw_glyph270(u8g, x, y, *s);
    y -= d;
 80024b6:	b2e4      	uxtb	r4, r4
    t += d;
 80024b8:	b2ed      	uxtb	r5, r5
    s++;
 80024ba:	3601      	adds	r6, #1
 80024bc:	e7f0      	b.n	80024a0 <u8g_DrawStr270+0x16>
  }
  return t;
}
 80024be:	1c28      	adds	r0, r5, #0
 80024c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080024c2 <u8g_DrawStrDir>:

u8g_uint_t u8g_DrawStrDir(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
 80024c2:	b510      	push	{r4, lr}
 80024c4:	1c04      	adds	r4, r0, #0
    case 2:
      return u8g_DrawStr180(u8g, x, y, s);
    case 3:
      return u8g_DrawStr270(u8g, x, y, s);
  }
  return 0;
 80024c6:	2000      	movs	r0, #0
  return t;
}

u8g_uint_t u8g_DrawStrDir(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  switch(dir)
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d817      	bhi.n	80024fc <u8g_DrawStrDir+0x3a>
 80024cc:	1c18      	adds	r0, r3, #0
 80024ce:	f000 fa97 	bl	8002a00 <__gnu_thumb1_case_uqi>
 80024d2:	0702      	.short	0x0702
 80024d4:	110c      	.short	0x110c
  {
    case 0:
      return u8g_DrawStr(u8g, x, y, s);
 80024d6:	1c20      	adds	r0, r4, #0
 80024d8:	9b02      	ldr	r3, [sp, #8]
 80024da:	f7ff ff82 	bl	80023e2 <u8g_DrawStr>
 80024de:	e00d      	b.n	80024fc <u8g_DrawStrDir+0x3a>
    case 1:
      return u8g_DrawStr90(u8g, x, y, s);
 80024e0:	1c20      	adds	r0, r4, #0
 80024e2:	9b02      	ldr	r3, [sp, #8]
 80024e4:	f7ff ff99 	bl	800241a <u8g_DrawStr90>
 80024e8:	e008      	b.n	80024fc <u8g_DrawStrDir+0x3a>
    case 2:
      return u8g_DrawStr180(u8g, x, y, s);
 80024ea:	1c20      	adds	r0, r4, #0
 80024ec:	9b02      	ldr	r3, [sp, #8]
 80024ee:	f7ff ffb0 	bl	8002452 <u8g_DrawStr180>
 80024f2:	e003      	b.n	80024fc <u8g_DrawStrDir+0x3a>
    case 3:
      return u8g_DrawStr270(u8g, x, y, s);
 80024f4:	1c20      	adds	r0, r4, #0
 80024f6:	9b02      	ldr	r3, [sp, #8]
 80024f8:	f7ff ffc7 	bl	800248a <u8g_DrawStr270>
  }
  return 0;
}
 80024fc:	bd10      	pop	{r4, pc}

080024fe <u8g_DrawStrP>:

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 80024fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002500:	1c07      	adds	r7, r0, #0
 8002502:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return 0;
}

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8002506:	1c15      	adds	r5, r2, #0
 8002508:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 800250a:	4798      	blx	r3
 800250c:	1945      	adds	r5, r0, r5
 800250e:	b2eb      	uxtb	r3, r5
  return 0;
}

u8g_uint_t u8g_DrawStrP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8002510:	2500      	movs	r5, #0
  int8_t d;
  uint8_t c;
  
  y += u8g->font_calc_vref(u8g);
 8002512:	9301      	str	r3, [sp, #4]
  
  for(;;)
  {
    c = u8g_pgm_read(s);
 8002514:	7833      	ldrb	r3, [r6, #0]
    if ( c == '\0' )
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <u8g_DrawStrP+0x34>
      break;
    d = u8g_draw_glyph(u8g, x, y, c);
 800251a:	1c21      	adds	r1, r4, #0
 800251c:	1c38      	adds	r0, r7, #0
 800251e:	9a01      	ldr	r2, [sp, #4]
 8002520:	f7ff fdc5 	bl	80020ae <u8g_draw_glyph>
    x += d;
 8002524:	b2c0      	uxtb	r0, r0
 8002526:	1904      	adds	r4, r0, r4
    t += d;
 8002528:	1945      	adds	r5, r0, r5
  {
    c = u8g_pgm_read(s);
    if ( c == '\0' )
      break;
    d = u8g_draw_glyph(u8g, x, y, c);
    x += d;
 800252a:	b2e4      	uxtb	r4, r4
    t += d;
 800252c:	b2ed      	uxtb	r5, r5
    s++;
 800252e:	3601      	adds	r6, #1
  }
 8002530:	e7f0      	b.n	8002514 <u8g_DrawStrP+0x16>
  return t;
}
 8002532:	1c28      	adds	r0, r5, #0
 8002534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002536 <u8g_DrawStr90P>:

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8002536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002538:	1c07      	adds	r7, r0, #0
 800253a:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 800253e:	1c0d      	adds	r5, r1, #0
 8002540:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 8002542:	4798      	blx	r3
 8002544:	1a2d      	subs	r5, r5, r0
 8002546:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr90P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8002548:	2500      	movs	r5, #0
  int8_t d;
  
  x -= u8g->font_calc_vref(u8g);
 800254a:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 800254c:	7833      	ldrb	r3, [r6, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <u8g_DrawStr90P+0x34>
  {
    d = u8g_DrawGlyph90(u8g, x, y, u8g_pgm_read(s));
 8002552:	1c22      	adds	r2, r4, #0
 8002554:	1c38      	adds	r0, r7, #0
 8002556:	9901      	ldr	r1, [sp, #4]
 8002558:	f7ff fe56 	bl	8002208 <u8g_DrawGlyph90>
    y += d;
 800255c:	b2c0      	uxtb	r0, r0
 800255e:	1904      	adds	r4, r0, r4
    t += d;
 8002560:	1945      	adds	r5, r0, r5
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_DrawGlyph90(u8g, x, y, u8g_pgm_read(s));
    y += d;
 8002562:	b2e4      	uxtb	r4, r4
    t += d;
 8002564:	b2ed      	uxtb	r5, r5
    s++;
 8002566:	3601      	adds	r6, #1
 8002568:	e7f0      	b.n	800254c <u8g_DrawStr90P+0x16>
  }
  return t;
}
 800256a:	1c28      	adds	r0, r5, #0
 800256c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800256e <u8g_DrawStr180P>:

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 800256e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002570:	1c07      	adds	r7, r0, #0
 8002572:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 8002576:	1c15      	adds	r5, r2, #0
 8002578:	1c0c      	adds	r4, r1, #0
  u8g_uint_t t = 0;
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 800257a:	4798      	blx	r3
 800257c:	1a2d      	subs	r5, r5, r0
 800257e:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr180P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 8002580:	2500      	movs	r5, #0
  int8_t d;

  y -= u8g->font_calc_vref(u8g);
 8002582:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 8002584:	7833      	ldrb	r3, [r6, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <u8g_DrawStr180P+0x34>
  {
    d = u8g_DrawGlyph180(u8g, x, y, u8g_pgm_read(s));
 800258a:	1c21      	adds	r1, r4, #0
 800258c:	1c38      	adds	r0, r7, #0
 800258e:	9a01      	ldr	r2, [sp, #4]
 8002590:	f7ff feab 	bl	80022ea <u8g_DrawGlyph180>
    x -= d;
 8002594:	b2c0      	uxtb	r0, r0
 8002596:	1a24      	subs	r4, r4, r0
    t += d;
 8002598:	1945      	adds	r5, r0, r5
  y -= u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_DrawGlyph180(u8g, x, y, u8g_pgm_read(s));
    x -= d;
 800259a:	b2e4      	uxtb	r4, r4
    t += d;
 800259c:	b2ed      	uxtb	r5, r5
    s++;
 800259e:	3601      	adds	r6, #1
 80025a0:	e7f0      	b.n	8002584 <u8g_DrawStr180P+0x16>
  }
  return t;
}
 80025a2:	1c28      	adds	r0, r5, #0
 80025a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080025a6 <u8g_DrawStr270P>:

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 80025a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025a8:	1c07      	adds	r7, r0, #0
 80025aa:	1c1e      	adds	r6, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
  return t;
}

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
 80025ae:	1c0d      	adds	r5, r1, #0
 80025b0:	1c14      	adds	r4, r2, #0
  u8g_uint_t t = 0;
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 80025b2:	4798      	blx	r3
 80025b4:	1945      	adds	r5, r0, r5
 80025b6:	b2eb      	uxtb	r3, r5
  return t;
}

u8g_uint_t u8g_DrawStr270P(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const u8g_pgm_uint8_t *s)
{
  u8g_uint_t t = 0;
 80025b8:	2500      	movs	r5, #0
  int8_t d;

  x += u8g->font_calc_vref(u8g);
 80025ba:	9301      	str	r3, [sp, #4]

  while( *s != '\0' )
 80025bc:	7833      	ldrb	r3, [r6, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <u8g_DrawStr270P+0x34>
  {
    d = u8g_DrawGlyph270(u8g, x, y, u8g_pgm_read(s));
 80025c2:	1c22      	adds	r2, r4, #0
 80025c4:	1c38      	adds	r0, r7, #0
 80025c6:	9901      	ldr	r1, [sp, #4]
 80025c8:	f7ff fefc 	bl	80023c4 <u8g_DrawGlyph270>
    y -= d;
 80025cc:	b2c0      	uxtb	r0, r0
 80025ce:	1a24      	subs	r4, r4, r0
    t += d;
 80025d0:	1945      	adds	r5, r0, r5
  x += u8g->font_calc_vref(u8g);

  while( *s != '\0' )
  {
    d = u8g_DrawGlyph270(u8g, x, y, u8g_pgm_read(s));
    y -= d;
 80025d2:	b2e4      	uxtb	r4, r4
    t += d;
 80025d4:	b2ed      	uxtb	r5, r5
    s++;
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7f0      	b.n	80025bc <u8g_DrawStr270P+0x16>
  }
  return t;
}
 80025da:	1c28      	adds	r0, r5, #0
 80025dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080025de <u8g_DrawStrFontBBX>:

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
 80025de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025e0:	1c1e      	adds	r6, r3, #0
 80025e2:	1c05      	adds	r5, r0, #0
 80025e4:	1c17      	adds	r7, r2, #0
 80025e6:	1c0c      	adds	r4, r1, #0
  x -= u8g_GetFontBBXOffX(u8g);
 80025e8:	f7ff fc8f 	bl	8001f0a <u8g_GetFontBBXOffX>
 80025ec:	1a24      	subs	r4, r4, r0
  y += u8g_GetFontBBXOffY(u8g);
 80025ee:	1c28      	adds	r0, r5, #0
 80025f0:	f7ff fc8f 	bl	8001f12 <u8g_GetFontBBXOffY>
  return u8g_DrawStrDir(u8g, x, y, dir, s);
 80025f4:	9b08      	ldr	r3, [sp, #32]
}

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  x -= u8g_GetFontBBXOffX(u8g);
  y += u8g_GetFontBBXOffY(u8g);
 80025f6:	183a      	adds	r2, r7, r0
  return t;
}

u8g_uint_t u8g_DrawStrFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, const char *s)
{
  x -= u8g_GetFontBBXOffX(u8g);
 80025f8:	b2e4      	uxtb	r4, r4
  y += u8g_GetFontBBXOffY(u8g);
  return u8g_DrawStrDir(u8g, x, y, dir, s);
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	1c28      	adds	r0, r5, #0
 80025fe:	1c33      	adds	r3, r6, #0
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	1c21      	adds	r1, r4, #0
 8002604:	f7ff ff5d 	bl	80024c2 <u8g_DrawStrDir>
}
 8002608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800260a <u8g_DrawGlyphFontBBX>:

/* still used by picgen.c, dir argument is ignored */
int8_t u8g_DrawGlyphFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t encoding)
{
 800260a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260c:	ab06      	add	r3, sp, #24
 800260e:	781e      	ldrb	r6, [r3, #0]
 8002610:	1c05      	adds	r5, r0, #0
 8002612:	1c17      	adds	r7, r2, #0
 8002614:	1c0c      	adds	r4, r1, #0
  x -= u8g_GetFontBBXOffX(u8g);
 8002616:	f7ff fc78 	bl	8001f0a <u8g_GetFontBBXOffX>
 800261a:	1a24      	subs	r4, r4, r0
  y += u8g_GetFontBBXOffY(u8g);
 800261c:	1c28      	adds	r0, r5, #0
 800261e:	f7ff fc78 	bl	8001f12 <u8g_GetFontBBXOffY>
}

/* still used by picgen.c, dir argument is ignored */
int8_t u8g_DrawGlyphFontBBX(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t encoding)
{
  x -= u8g_GetFontBBXOffX(u8g);
 8002622:	b2e4      	uxtb	r4, r4
  y += u8g_GetFontBBXOffY(u8g);
 8002624:	183a      	adds	r2, r7, r0
  u8g_draw_glyph(u8g, x, y, encoding);
 8002626:	1c33      	adds	r3, r6, #0
 8002628:	1c28      	adds	r0, r5, #0
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	1c21      	adds	r1, r4, #0
 800262e:	f7ff fd3e 	bl	80020ae <u8g_draw_glyph>
  return 0;
}
 8002632:	2000      	movs	r0, #0
 8002634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002636 <u8g_UpdateRefHeight>:
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
  uint16_t ls;
  if ( u8g->font == NULL )
 8002636:	6883      	ldr	r3, [r0, #8]

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8002638:	b510      	push	{r4, lr}
  uint16_t ls;
  if ( u8g->font == NULL )
 800263a:	2b00      	cmp	r3, #0
 800263c:	d025      	beq.n	800268a <u8g_UpdateRefHeight+0x54>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 800263e:	1c02      	adds	r2, r0, #0
 8002640:	1c01      	adds	r1, r0, #0
 8002642:	3228      	adds	r2, #40	; 0x28
 8002644:	7814      	ldrb	r4, [r2, #0]
 8002646:	3129      	adds	r1, #41	; 0x29
 8002648:	3202      	adds	r2, #2
 800264a:	2c00      	cmp	r4, #0
 800264c:	d103      	bne.n	8002656 <u8g_UpdateRefHeight+0x20>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 800264e:	795c      	ldrb	r4, [r3, #5]
 8002650:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8002652:	7b1b      	ldrb	r3, [r3, #12]
 8002654:	e008      	b.n	8002668 <u8g_UpdateRefHeight+0x32>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8002656:	2c01      	cmp	r4, #1
 8002658:	d103      	bne.n	8002662 <u8g_UpdateRefHeight+0x2c>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 800265a:	7bdc      	ldrb	r4, [r3, #15]
 800265c:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 800265e:	7c1b      	ldrb	r3, [r3, #16]
 8002660:	e002      	b.n	8002668 <u8g_UpdateRefHeight+0x32>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8002662:	7b5c      	ldrb	r4, [r3, #13]
 8002664:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8002666:	7b9b      	ldrb	r3, [r3, #14]
 8002668:	7013      	strb	r3, [r2, #0]
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 800266a:	2300      	movs	r3, #0
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	56cb      	ldrsb	r3, [r1, r3]
 8002670:	b252      	sxtb	r2, r2
 8002672:	1a9b      	subs	r3, r3, r2
  if ( u8g->font_line_spacing_factor != 64 )
 8002674:	1c02      	adds	r2, r0, #0
 8002676:	322b      	adds	r2, #43	; 0x2b
 8002678:	7812      	ldrb	r2, [r2, #0]
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 800267a:	b29b      	uxth	r3, r3
  if ( u8g->font_line_spacing_factor != 64 )
 800267c:	2a40      	cmp	r2, #64	; 0x40
 800267e:	d002      	beq.n	8002686 <u8g_UpdateRefHeight+0x50>
  {
    ls &= 255;
 8002680:	b2db      	uxtb	r3, r3
    ls *= u8g->font_line_spacing_factor;
    ls >>= 6;
 8002682:	4353      	muls	r3, r2
 8002684:	099b      	lsrs	r3, r3, #6
  }
  u8g->line_spacing = ls;
 8002686:	302c      	adds	r0, #44	; 0x2c
 8002688:	7003      	strb	r3, [r0, #0]
}
 800268a:	bd10      	pop	{r4, pc}

0800268c <u8g_SetFontRefHeightText>:

void u8g_SetFontRefHeightText(u8g_t *u8g)
{
 800268c:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
 800268e:	1c03      	adds	r3, r0, #0
 8002690:	2200      	movs	r2, #0
 8002692:	3328      	adds	r3, #40	; 0x28
 8002694:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 8002696:	f7ff ffce 	bl	8002636 <u8g_UpdateRefHeight>
}
 800269a:	bd08      	pop	{r3, pc}

0800269c <u8g_SetFontRefHeightExtendedText>:

void u8g_SetFontRefHeightExtendedText(u8g_t *u8g)
{
 800269c:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 800269e:	1c03      	adds	r3, r0, #0
 80026a0:	2201      	movs	r2, #1
 80026a2:	3328      	adds	r3, #40	; 0x28
 80026a4:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 80026a6:	f7ff ffc6 	bl	8002636 <u8g_UpdateRefHeight>
}
 80026aa:	bd08      	pop	{r3, pc}

080026ac <u8g_SetFontRefHeightAll>:


void u8g_SetFontRefHeightAll(u8g_t *u8g)
{
 80026ac:	b508      	push	{r3, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_ALL;
 80026ae:	1c03      	adds	r3, r0, #0
 80026b0:	2202      	movs	r2, #2
 80026b2:	3328      	adds	r3, #40	; 0x28
 80026b4:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 80026b6:	f7ff ffbe 	bl	8002636 <u8g_UpdateRefHeight>
}
 80026ba:	bd08      	pop	{r3, pc}

080026bc <u8g_SetFontLineSpacingFactor>:

/* factor = 64: linespaceing == ascent and descent */
void u8g_SetFontLineSpacingFactor(u8g_t *u8g, uint8_t  factor)
{
 80026bc:	b508      	push	{r3, lr}
  u8g->font_line_spacing_factor = factor;
 80026be:	1c03      	adds	r3, r0, #0
 80026c0:	332b      	adds	r3, #43	; 0x2b
 80026c2:	7019      	strb	r1, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 80026c4:	f7ff ffb7 	bl	8002636 <u8g_UpdateRefHeight>
}
 80026c8:	bd08      	pop	{r3, pc}

080026ca <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 80026ca:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <u8g_SetFontPosBaseline+0x6>)
 80026cc:	6243      	str	r3, [r0, #36]	; 0x24
}
 80026ce:	4770      	bx	lr
 80026d0:	08001e23 	.word	0x08001e23

080026d4 <u8g_SetFontPosBottom>:
  return (u8g_uint_t)(u8g_int_t)(u8g->font_ref_descent);
}

void u8g_SetFontPosBottom(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_bottom;
 80026d4:	4b01      	ldr	r3, [pc, #4]	; (80026dc <u8g_SetFontPosBottom+0x8>)
 80026d6:	6243      	str	r3, [r0, #36]	; 0x24
}
 80026d8:	4770      	bx	lr
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	08001e27 	.word	0x08001e27

080026e0 <u8g_SetFontPosTop>:
  return tmp;
}

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
 80026e0:	4b01      	ldr	r3, [pc, #4]	; (80026e8 <u8g_SetFontPosTop+0x8>)
 80026e2:	6243      	str	r3, [r0, #36]	; 0x24
}
 80026e4:	4770      	bx	lr
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	08001e2d 	.word	0x08001e2d

080026ec <u8g_SetFontPosCenter>:
  return tmp;
}

void u8g_SetFontPosCenter(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_center;
 80026ec:	4b01      	ldr	r3, [pc, #4]	; (80026f4 <u8g_SetFontPosCenter+0x8>)
 80026ee:	6243      	str	r3, [r0, #36]	; 0x24
}
 80026f0:	4770      	bx	lr
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	08001e37 	.word	0x08001e37

080026f8 <u8g_font_calc_str_pixel_width>:

typedef char (*u8g_font_get_char_fn)(const void *s);


u8g_uint_t u8g_font_calc_str_pixel_width(u8g_t *u8g, const char *s, u8g_font_get_char_fn get_char )
{
 80026f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026fa:	1c05      	adds	r5, r0, #0
  uint8_t enc;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  w = 0;
    
  enc = get_char(s);
 80026fc:	1c08      	adds	r0, r1, #0

typedef char (*u8g_font_get_char_fn)(const void *s);


u8g_uint_t u8g_font_calc_str_pixel_width(u8g_t *u8g, const char *s, u8g_font_get_char_fn get_char )
{
 80026fe:	1c0f      	adds	r7, r1, #0
 8002700:	9201      	str	r2, [sp, #4]
  uint8_t enc;
  
  /* reset the total minimal width to zero, this will be expanded during calculation */
  w = 0;
    
  enc = get_char(s);
 8002702:	4790      	blx	r2
 8002704:	1c06      	adds	r6, r0, #0
  
  /* check for empty string, width is already 0 */
  if ( enc == '\0' )
  {
    return w;
 8002706:	2000      	movs	r0, #0
  w = 0;
    
  enc = get_char(s);
  
  /* check for empty string, width is already 0 */
  if ( enc == '\0' )
 8002708:	4286      	cmp	r6, r0
 800270a:	d021      	beq.n	8002750 <u8g_font_calc_str_pixel_width+0x58>
    return w;
  }
  
  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  /* if *s is not inside the font, then the cached parameters of the glyph are all zero */
  u8g_GetGlyph(u8g, enc);
 800270c:	1c28      	adds	r0, r5, #0
 800270e:	1c31      	adds	r1, r6, #0
 8002710:	f7ff fc06 	bl	8001f20 <u8g_GetGlyph>
  /* strlen(s) == 2:       width = - offx(s[0]) + deltax(s[0]) + offx(s[1]) + width(s[1]) */
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  w = -u8g->glyph_x;  
 8002714:	7f6c      	ldrb	r4, [r5, #29]
 8002716:	4264      	negs	r4, r4
 8002718:	b2e4      	uxtb	r4, r4
  for(;;)
  {
    
    /* check and stop if the end of the string is reached */
    s++;
 800271a:	3701      	adds	r7, #1
    if ( get_char(s) == '\0' )
 800271c:	1c38      	adds	r0, r7, #0
 800271e:	9b01      	ldr	r3, [sp, #4]
 8002720:	4798      	blx	r3
 8002722:	2800      	cmp	r0, #0
 8002724:	d00b      	beq.n	800273e <u8g_font_calc_str_pixel_width+0x46>
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8002726:	7f28      	ldrb	r0, [r5, #28]
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
 8002728:	9b01      	ldr	r3, [sp, #4]
    s++;
    if ( get_char(s) == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 800272a:	1824      	adds	r4, r4, r0
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
 800272c:	1c38      	adds	r0, r7, #0
 800272e:	4798      	blx	r3
 8002730:	1c06      	adds	r6, r0, #0
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, enc);
 8002732:	1c28      	adds	r0, r5, #0
 8002734:	1c31      	adds	r1, r6, #0
    s++;
    if ( get_char(s) == '\0' )
      break;
    
    /* if there are still more characters, add the delta to the next glyph */
    w += u8g->glyph_dx;
 8002736:	b2e4      	uxtb	r4, r4
    
    /* store the encoding in a local variable, used also after the for(;;) loop */
    enc = get_char(s);
    
    /* load the next glyph information */
    u8g_GetGlyph(u8g, enc);
 8002738:	f7ff fbf2 	bl	8001f20 <u8g_GetGlyph>
  }
 800273c:	e7ed      	b.n	800271a <u8g_font_calc_str_pixel_width+0x22>
  
  /* finally calculate the width of the last char */
  /* here is another exception, if the last char is a black, use the dx value instead */
  if ( enc != ' ' )
 800273e:	2e20      	cmp	r6, #32
 8002740:	d003      	beq.n	800274a <u8g_font_calc_str_pixel_width+0x52>
 8002742:	7f68      	ldrb	r0, [r5, #29]
 8002744:	7feb      	ldrb	r3, [r5, #31]
 8002746:	18c0      	adds	r0, r0, r3
 8002748:	e000      	b.n	800274c <u8g_font_calc_str_pixel_width+0x54>
    w += u8g->glyph_width;
    w += u8g->glyph_x;
  }
  else
  {
    w += u8g->glyph_dx;
 800274a:	7f28      	ldrb	r0, [r5, #28]
 800274c:	1824      	adds	r4, r4, r0
 800274e:	b2e0      	uxtb	r0, r4
  }
  
  
  return w;
}
 8002750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002752 <u8g_GetStrPixelWidth>:

u8g_uint_t u8g_GetStrPixelWidth(u8g_t *u8g, const char *s)
{
 8002752:	b508      	push	{r3, lr}
  return u8g_font_calc_str_pixel_width(u8g, s, u8g_font_get_char);
 8002754:	4a01      	ldr	r2, [pc, #4]	; (800275c <u8g_GetStrPixelWidth+0xa>)
 8002756:	f7ff ffcf 	bl	80026f8 <u8g_font_calc_str_pixel_width>
}
 800275a:	bd08      	pop	{r3, pc}
 800275c:	08001e51 	.word	0x08001e51

08002760 <u8g_GetStrPixelWidthP>:

u8g_uint_t u8g_GetStrPixelWidthP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8002760:	b508      	push	{r3, lr}
  return u8g_font_calc_str_pixel_width(u8g, (const char *)s, u8g_font_get_charP);
 8002762:	4a02      	ldr	r2, [pc, #8]	; (800276c <u8g_GetStrPixelWidthP+0xc>)
 8002764:	f7ff ffc8 	bl	80026f8 <u8g_font_calc_str_pixel_width>
}
 8002768:	bd08      	pop	{r3, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	08001e55 	.word	0x08001e55

08002770 <u8g_GetStrX>:

int8_t u8g_GetStrX(u8g_t *u8g, const char *s)
{
 8002770:	b510      	push	{r4, lr}
  u8g_GetGlyph(u8g, *s);
 8002772:	7809      	ldrb	r1, [r1, #0]
{
  return u8g_font_calc_str_pixel_width(u8g, (const char *)s, u8g_font_get_charP);
}

int8_t u8g_GetStrX(u8g_t *u8g, const char *s)
{
 8002774:	1c04      	adds	r4, r0, #0
  u8g_GetGlyph(u8g, *s);
 8002776:	f7ff fbd3 	bl	8001f20 <u8g_GetGlyph>
  return u8g->glyph_x;  
 800277a:	201d      	movs	r0, #29
 800277c:	5620      	ldrsb	r0, [r4, r0]
}
 800277e:	bd10      	pop	{r4, pc}

08002780 <u8g_GetStrXP>:

int8_t u8g_GetStrXP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8002780:	b510      	push	{r4, lr}
  u8g_GetGlyph(u8g, u8g_pgm_read(s));
 8002782:	7809      	ldrb	r1, [r1, #0]
  u8g_GetGlyph(u8g, *s);
  return u8g->glyph_x;  
}

int8_t u8g_GetStrXP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 8002784:	1c04      	adds	r4, r0, #0
  u8g_GetGlyph(u8g, u8g_pgm_read(s));
 8002786:	f7ff fbcb 	bl	8001f20 <u8g_GetGlyph>
  return u8g->glyph_x;  
 800278a:	201d      	movs	r0, #29
 800278c:	5620      	ldrsb	r0, [r4, r0]
}
 800278e:	bd10      	pop	{r4, pc}

08002790 <u8g_GetStrWidth>:

/*========================================================================*/
/* string width calculation */

u8g_uint_t u8g_GetStrWidth(u8g_t *u8g, const char *s)
{
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	1c06      	adds	r6, r0, #0
 8002794:	1c0d      	adds	r5, r1, #0
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002796:	2400      	movs	r4, #0
  
  for(;;)
  {
    encoding = *s;
 8002798:	7829      	ldrb	r1, [r5, #0]
    if ( encoding == 0 )
 800279a:	2900      	cmp	r1, #0
 800279c:	d007      	beq.n	80027ae <u8g_GetStrWidth+0x1e>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
 800279e:	1c30      	adds	r0, r6, #0
 80027a0:	f7ff fbbe 	bl	8001f20 <u8g_GetGlyph>
    w += u8g->glyph_dx;    
 80027a4:	7f33      	ldrb	r3, [r6, #28]
    
    /* goto next char */
    s++;
 80027a6:	3501      	adds	r5, #1
    if ( encoding == 0 )
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
    w += u8g->glyph_dx;    
 80027a8:	18e4      	adds	r4, r4, r3
 80027aa:	b2e4      	uxtb	r4, r4
    
    /* goto next char */
    s++;
  }
 80027ac:	e7f4      	b.n	8002798 <u8g_GetStrWidth+0x8>
  
  return w;  
}
 80027ae:	1c20      	adds	r0, r4, #0
 80027b0:	bd70      	pop	{r4, r5, r6, pc}

080027b2 <u8g_GetStrWidthP>:


u8g_uint_t u8g_GetStrWidthP(u8g_t *u8g, const u8g_pgm_uint8_t *s)
{
 80027b2:	b570      	push	{r4, r5, r6, lr}
 80027b4:	1c06      	adds	r6, r0, #0
 80027b6:	1c0d      	adds	r5, r1, #0
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80027b8:	2400      	movs	r4, #0
  
  for(;;)
  {
    encoding = u8g_pgm_read(s);
 80027ba:	7829      	ldrb	r1, [r5, #0]
    if ( encoding == 0 )
 80027bc:	2900      	cmp	r1, #0
 80027be:	d007      	beq.n	80027d0 <u8g_GetStrWidthP+0x1e>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
 80027c0:	1c30      	adds	r0, r6, #0
 80027c2:	f7ff fbad 	bl	8001f20 <u8g_GetGlyph>
    w += u8g->glyph_dx;    
 80027c6:	7f33      	ldrb	r3, [r6, #28]
    
    /* goto next char */
    s++;
 80027c8:	3501      	adds	r5, #1
    if ( encoding == 0 )
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
    w += u8g->glyph_dx;    
 80027ca:	18e4      	adds	r4, r4, r3
 80027cc:	b2e4      	uxtb	r4, r4
    
    /* goto next char */
    s++;
  }
 80027ce:	e7f4      	b.n	80027ba <u8g_GetStrWidthP+0x8>
  
  return w;  
}
 80027d0:	1c20      	adds	r0, r4, #0
 80027d2:	bd70      	pop	{r4, r5, r6, pc}

080027d4 <u8g_font_box_min>:
  buf->w += u8g->glyph_x;
}

/* calculate minimal box */
void u8g_font_box_min(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
 80027d4:	b508      	push	{r3, lr}
  u8g_font_calc_str_min_box(u8g, s, buf);
 80027d6:	f7ff fc18 	bl	800200a <u8g_font_calc_str_min_box>
}
 80027da:	bd08      	pop	{r3, pc}

080027dc <u8g_font_box_left_gA>:

/* calculate gA box, but do not calculate the overall width */
void u8g_font_box_left_gA(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
  
}
 80027dc:	4770      	bx	lr

080027de <u8g_font_box_all_gA>:

/* calculate gA box, including overall width */
void u8g_font_box_all_gA(u8g_t *u8g, const char *s, u8g_str_size_t *buf)
{
  
}
 80027de:	4770      	bx	lr

080027e0 <u8g_GetStrMinBox>:
  *height -= buf->y_min;
}


void u8g_GetStrMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 80027e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  u8g_str_size_t buf;
  
  if ( *s == '\0' )
 80027e2:	780c      	ldrb	r4, [r1, #0]
 80027e4:	2c00      	cmp	r4, #0
 80027e6:	d104      	bne.n	80027f2 <u8g_GetStrMinBox+0x12>
  {
    *width= 0;
 80027e8:	9b08      	ldr	r3, [sp, #32]
 80027ea:	701c      	strb	r4, [r3, #0]
    *height = 0;
 80027ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ee:	701c      	strb	r4, [r3, #0]
 80027f0:	e01c      	b.n	800282c <u8g_GetStrMinBox+0x4c>
 80027f2:	1c04      	adds	r4, r0, #0
 80027f4:	1c0d      	adds	r5, r1, #0
 80027f6:	1c17      	adds	r7, r2, #0
    return;
  }
  
  u8g_font_calc_str_min_box(u8g, s, &buf);
 80027f8:	466a      	mov	r2, sp
 80027fa:	1c1e      	adds	r6, r3, #0
 80027fc:	f7ff fc05 	bl	800200a <u8g_font_calc_str_min_box>
{
  /*
  u8g_glyph_t g;
  g =
  */  
  u8g_GetGlyph(u8g, *s);
 8002800:	7829      	ldrb	r1, [r5, #0]
 8002802:	1c20      	adds	r0, r4, #0
 8002804:	f7ff fb8c 	bl	8001f20 <u8g_GetGlyph>
  *x += u8g->glyph_x;
 8002808:	783a      	ldrb	r2, [r7, #0]
 800280a:	7f63      	ldrb	r3, [r4, #29]
 800280c:	18d3      	adds	r3, r2, r3
 800280e:	703b      	strb	r3, [r7, #0]
  *width = buf->w;
 8002810:	466b      	mov	r3, sp
 8002812:	9a08      	ldr	r2, [sp, #32]
 8002814:	791b      	ldrb	r3, [r3, #4]
 8002816:	7013      	strb	r3, [r2, #0]
  *y -= buf->y_max;
 8002818:	466b      	mov	r3, sp
 800281a:	7832      	ldrb	r2, [r6, #0]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	7032      	strb	r2, [r6, #0]
  /* +1 because y_max is a height, this compensates the next step */
  //*y += 1;                      
  /* because the reference point is one below the string, this compensates the previous step */
  //*y -= 1;
  *height = buf->y_max;
  *height -= buf->y_min;
 8002822:	466a      	mov	r2, sp
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800282a:	7013      	strb	r3, [r2, #0]
    return;
  }
  
  u8g_font_calc_str_min_box(u8g, s, &buf);
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
 800282c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800282e <u8g_GetStrAMinBox>:


void u8g_GetStrAMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 800282e:	b5f0      	push	{r4, r5, r6, r7, lr}
  u8g_str_size_t buf;
  uint8_t cap_a;
  
  if ( *s == '\0' )
 8002830:	780f      	ldrb	r7, [r1, #0]
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}


void u8g_GetStrAMinBox(u8g_t *u8g, const char *s, u8g_uint_t *x, u8g_uint_t *y, u8g_uint_t *width, u8g_uint_t *height)
{
 8002832:	b085      	sub	sp, #20
  u8g_str_size_t buf;
  uint8_t cap_a;
  
  if ( *s == '\0' )
 8002834:	2f00      	cmp	r7, #0
 8002836:	d104      	bne.n	8002842 <u8g_GetStrAMinBox+0x14>
  {
    *width= 0;
 8002838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800283a:	701f      	strb	r7, [r3, #0]
    *height = 0;
 800283c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800283e:	701f      	strb	r7, [r3, #0]
 8002840:	e026      	b.n	8002890 <u8g_GetStrAMinBox+0x62>
 8002842:	1c1d      	adds	r5, r3, #0
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8002844:	6883      	ldr	r3, [r0, #8]
 8002846:	1c16      	adds	r6, r2, #0
    *height = 0;
    return;
  }
  
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8002848:	aa02      	add	r2, sp, #8
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 800284a:	795f      	ldrb	r7, [r3, #5]
 800284c:	9101      	str	r1, [sp, #4]
 800284e:	1c04      	adds	r4, r0, #0
    *height = 0;
    return;
  }
  
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
 8002850:	f7ff fbdb 	bl	800200a <u8g_font_calc_str_min_box>
  if ( buf.y_max < cap_a )
 8002854:	ab02      	add	r3, sp, #8
 8002856:	785b      	ldrb	r3, [r3, #1]
 8002858:	b25b      	sxtb	r3, r3
 800285a:	42bb      	cmp	r3, r7
 800285c:	da01      	bge.n	8002862 <u8g_GetStrAMinBox+0x34>
    buf.y_max = cap_a;
 800285e:	ab02      	add	r3, sp, #8
 8002860:	705f      	strb	r7, [r3, #1]
{
  /*
  u8g_glyph_t g;
  g =
  */  
  u8g_GetGlyph(u8g, *s);
 8002862:	9b01      	ldr	r3, [sp, #4]
 8002864:	1c20      	adds	r0, r4, #0
 8002866:	7819      	ldrb	r1, [r3, #0]
 8002868:	f7ff fb5a 	bl	8001f20 <u8g_GetGlyph>
  *x += u8g->glyph_x;
 800286c:	7832      	ldrb	r2, [r6, #0]
 800286e:	7f63      	ldrb	r3, [r4, #29]
 8002870:	18d3      	adds	r3, r2, r3
 8002872:	7033      	strb	r3, [r6, #0]
  *width = buf->w;
 8002874:	ab02      	add	r3, sp, #8
 8002876:	791b      	ldrb	r3, [r3, #4]
 8002878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800287a:	7013      	strb	r3, [r2, #0]
  *y -= buf->y_max;
 800287c:	ab02      	add	r3, sp, #8
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	782a      	ldrb	r2, [r5, #0]
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	702a      	strb	r2, [r5, #0]
  /* +1 because y_max is a height, this compensates the next step */
  //*y += 1;                      
  /* because the reference point is one below the string, this compensates the previous step */
  //*y -= 1;
  *height = buf->y_max;
  *height -= buf->y_min;
 8002886:	aa02      	add	r2, sp, #8
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800288e:	7013      	strb	r3, [r2, #0]
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
 8002890:	b005      	add	sp, #20
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002894 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
  if ( u8g->font != font )
 8002894:	6883      	ldr	r3, [r0, #8]
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8002896:	b510      	push	{r4, lr}
  if ( u8g->font != font )
 8002898:	428b      	cmp	r3, r1
 800289a:	d005      	beq.n	80028a8 <u8g_SetFont+0x14>
 800289c:	1c04      	adds	r4, r0, #0
  {
    u8g->font = font;
 800289e:	6081      	str	r1, [r0, #8]
    u8g_UpdateRefHeight(u8g);
 80028a0:	f7ff fec9 	bl	8002636 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 80028a4:	4b01      	ldr	r3, [pc, #4]	; (80028ac <u8g_SetFont+0x18>)
 80028a6:	6263      	str	r3, [r4, #36]	; 0x24
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	08001e23 	.word	0x08001e23

080028b0 <u8g_draw_aa_glyph>:

/*========================================================================*/
/* anti aliasing fonts */

int8_t u8g_draw_aa_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	1c0f      	adds	r7, r1, #0
 80028b4:	b087      	sub	sp, #28
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80028b6:	1c19      	adds	r1, r3, #0

/*========================================================================*/
/* anti aliasing fonts */

int8_t u8g_draw_aa_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80028b8:	1c04      	adds	r4, r0, #0
 80028ba:	1c16      	adds	r6, r2, #0
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80028bc:	f7ff fb30 	bl	8001f20 <u8g_GetGlyph>
 80028c0:	1e05      	subs	r5, r0, #0
    if ( g == NULL  )
 80028c2:	d03d      	beq.n	8002940 <u8g_draw_aa_glyph+0x90>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80028c4:	68a3      	ldr	r3, [r4, #8]
 80028c6:	7818      	ldrb	r0, [r3, #0]
 80028c8:	f7ff fac7 	bl	8001e5a <u8g_font_GetFontGlyphStructureSize.isra.1>
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80028cc:	7fe3      	ldrb	r3, [r4, #31]


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80028ce:	9005      	str	r0, [sp, #20]
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
 80028d0:	9303      	str	r3, [sp, #12]
  h = u8g->glyph_height;
 80028d2:	1c63      	adds	r3, r4, #1
 80028d4:	7fda      	ldrb	r2, [r3, #31]
  
  x += u8g->glyph_x;
 80028d6:	7f63      	ldrb	r3, [r4, #29]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80028d8:	9200      	str	r2, [sp, #0]
  }
  
  w = u8g->glyph_width;
  h = u8g->glyph_height;
  
  x += u8g->glyph_x;
 80028da:	18ff      	adds	r7, r7, r3
 80028dc:	b2fb      	uxtb	r3, r7
 80028de:	9304      	str	r3, [sp, #16]
 80028e0:	7fa3      	ldrb	r3, [r4, #30]
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80028e2:	1c20      	adds	r0, r4, #0
 80028e4:	1af6      	subs	r6, r6, r3
 80028e6:	b2f3      	uxtb	r3, r6
 80028e8:	1a9e      	subs	r6, r3, r2
 80028ea:	b2f6      	uxtb	r6, r6
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	9904      	ldr	r1, [sp, #16]
 80028f0:	1c32      	adds	r2, r6, #0
 80028f2:	9b03      	ldr	r3, [sp, #12]
 80028f4:	f7fe fb16 	bl	8000f24 <u8g_IsBBXIntersection>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d020      	beq.n	800293e <u8g_draw_aa_glyph+0x8e>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80028fc:	9b05      	ldr	r3, [sp, #20]
 80028fe:	18ed      	adds	r5, r5, r3
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 3;
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	3303      	adds	r3, #3
 8002904:	b2db      	uxtb	r3, r3
  w /= 4;
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	9303      	str	r3, [sp, #12]
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
 800290a:	9b02      	ldr	r3, [sp, #8]
 800290c:	429e      	cmp	r6, r3
 800290e:	d016      	beq.n	800293e <u8g_draw_aa_glyph+0x8e>
 8002910:	1c2f      	adds	r7, r5, #0
 8002912:	1b7b      	subs	r3, r7, r5
 8002914:	9a04      	ldr	r2, [sp, #16]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	0099      	lsls	r1, r3, #2
 800291a:	1851      	adds	r1, r2, r1
  {
    ix = x;
    for( i = 0; i < w; i++ )
 800291c:	9a03      	ldr	r2, [sp, #12]
 800291e:	b2c9      	uxtb	r1, r1
 8002920:	4293      	cmp	r3, r2
 8002922:	d208      	bcs.n	8002936 <u8g_draw_aa_glyph+0x86>
    {
      u8g_Draw4TPixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002924:	783b      	ldrb	r3, [r7, #0]
 8002926:	1c20      	adds	r0, r4, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	1c32      	adds	r2, r6, #0
 800292c:	2300      	movs	r3, #0
 800292e:	f7fe ff80 	bl	8001832 <u8g_Draw4TPixel>
      data++;
 8002932:	3701      	adds	r7, #1
 8002934:	e7ed      	b.n	8002912 <u8g_draw_aa_glyph+0x62>
      ix+=4;
    }
    iy++;
 8002936:	3601      	adds	r6, #1
 8002938:	18ad      	adds	r5, r5, r2
 800293a:	b2f6      	uxtb	r6, r6
 800293c:	e7e5      	b.n	800290a <u8g_draw_aa_glyph+0x5a>
  }
  return u8g->glyph_dx;
 800293e:	7f20      	ldrb	r0, [r4, #28]
 8002940:	b240      	sxtb	r0, r0
}
 8002942:	b007      	add	sp, #28
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002946 <u8g_DrawAAGlyph>:

int8_t u8g_DrawAAGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002948:	1c05      	adds	r5, r0, #0
 800294a:	1c1e      	adds	r6, r3, #0
  y += u8g->font_calc_vref(u8g);
 800294c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  }
  return u8g->glyph_dx;
}

int8_t u8g_DrawAAGlyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800294e:	1c0f      	adds	r7, r1, #0
 8002950:	1c14      	adds	r4, r2, #0
  y += u8g->font_calc_vref(u8g);
 8002952:	4798      	blx	r3
 8002954:	1902      	adds	r2, r0, r4
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
 8002956:	1c39      	adds	r1, r7, #0
 8002958:	1c28      	adds	r0, r5, #0
 800295a:	1c33      	adds	r3, r6, #0
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f7ff ffa7 	bl	80028b0 <u8g_draw_aa_glyph>
}
 8002962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002964 <u8g_DrawAAStr>:

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002966:	1c1f      	adds	r7, r3, #0
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 8002968:	6883      	ldr	r3, [r0, #8]
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800296a:	1c06      	adds	r6, r0, #0
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 800296c:	7818      	ldrb	r0, [r3, #0]
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800296e:	1c0d      	adds	r5, r1, #0
 8002970:	9201      	str	r2, [sp, #4]
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 8002972:	f7ff fa71 	bl	8001e58 <u8g_font_GetFormat.isra.0>
    return 0;
 8002976:	2400      	movs	r4, #0
u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
 8002978:	2802      	cmp	r0, #2
 800297a:	d115      	bne.n	80029a8 <u8g_DrawAAStr+0x44>
    return 0;
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 800297c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800297e:	1c30      	adds	r0, r6, #0
 8002980:	4798      	blx	r3
 8002982:	9b01      	ldr	r3, [sp, #4]
 8002984:	18c0      	adds	r0, r0, r3
 8002986:	b2c3      	uxtb	r3, r0
 8002988:	9301      	str	r3, [sp, #4]
  
  while( *s != '\0' )
 800298a:	783b      	ldrb	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <u8g_DrawAAStr+0x44>
  {
    d = u8g_draw_aa_glyph(u8g, x, y, *s);
 8002990:	1c29      	adds	r1, r5, #0
 8002992:	1c30      	adds	r0, r6, #0
 8002994:	9a01      	ldr	r2, [sp, #4]
 8002996:	f7ff ff8b 	bl	80028b0 <u8g_draw_aa_glyph>
    x += d;
 800299a:	b2c0      	uxtb	r0, r0
 800299c:	1945      	adds	r5, r0, r5
    t += d;
 800299e:	1904      	adds	r4, r0, r4
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_aa_glyph(u8g, x, y, *s);
    x += d;
 80029a0:	b2ed      	uxtb	r5, r5
    t += d;
 80029a2:	b2e4      	uxtb	r4, r4
    s++;
 80029a4:	3701      	adds	r7, #1
 80029a6:	e7f0      	b.n	800298a <u8g_DrawAAStr+0x26>
  }
  return t;
}
 80029a8:	1c20      	adds	r0, r4, #0
 80029aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080029ac <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 80029ac:	2001      	movs	r0, #1
 80029ae:	4770      	bx	lr

080029b0 <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 80029b0:	2200      	movs	r2, #0
  p->page_y1 = p->page_height;
  p->page_y1--;
 80029b2:	7803      	ldrb	r3, [r0, #0]
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 80029b4:	7082      	strb	r2, [r0, #2]
  p->page_y1 = p->page_height;
  p->page_y1--;
 80029b6:	3b01      	subs	r3, #1
 80029b8:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 80029ba:	7102      	strb	r2, [r0, #4]
}
 80029bc:	4770      	bx	lr

080029be <u8g_page_Init>:
/*
  setup page count structure
  conditions: page_height <= total_height
*/
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
 80029be:	b508      	push	{r3, lr}
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
 80029c0:	2300      	movs	r3, #0
  setup page count structure
  conditions: page_height <= total_height
*/
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
 80029c2:	7001      	strb	r1, [r0, #0]
  p->total_height = total_height;
 80029c4:	7042      	strb	r2, [r0, #1]
  p->page = 0;
 80029c6:	7103      	strb	r3, [r0, #4]
  u8g_page_First(p);
 80029c8:	f7ff fff2 	bl	80029b0 <u8g_page_First>
}
 80029cc:	bd08      	pop	{r3, pc}

080029ce <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 80029ce:	b530      	push	{r4, r5, lr}
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80029d0:	7884      	ldrb	r4, [r0, #2]
 80029d2:	7801      	ldrb	r1, [r0, #0]
  if ( p->page_y0 >= p->total_height )
 80029d4:	7845      	ldrb	r5, [r0, #1]
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80029d6:	190c      	adds	r4, r1, r4
 80029d8:	b2e4      	uxtb	r4, r4
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 80029da:	1c03      	adds	r3, r0, #0
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80029dc:	7084      	strb	r4, [r0, #2]
  if ( p->page_y0 >= p->total_height )
    return 0;
 80029de:	2000      	movs	r0, #0

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
 80029e0:	42ac      	cmp	r4, r5
 80029e2:	d20b      	bcs.n	80029fc <u8g_page_Next+0x2e>
    return 0;
  p->page++;
 80029e4:	791a      	ldrb	r2, [r3, #4]
 80029e6:	3201      	adds	r2, #1
 80029e8:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 80029ea:	78da      	ldrb	r2, [r3, #3]
  y1 += p->page_height;
 80029ec:	1851      	adds	r1, r2, r1
 80029ee:	b2ca      	uxtb	r2, r1
  if ( y1 >= p->total_height )
 80029f0:	42aa      	cmp	r2, r5
 80029f2:	d301      	bcc.n	80029f8 <u8g_page_Next+0x2a>
  {
    y1 = p->total_height;
    y1--;
 80029f4:	1e6a      	subs	r2, r5, #1
 80029f6:	b2d2      	uxtb	r2, r2
  }
  p->page_y1 = y1;
  
  return 1;
 80029f8:	2001      	movs	r0, #1
  if ( y1 >= p->total_height )
  {
    y1 = p->total_height;
    y1--;
  }
  p->page_y1 = y1;
 80029fa:	70da      	strb	r2, [r3, #3]
  
  return 1;
}
 80029fc:	bd30      	pop	{r4, r5, pc}
	...

08002a00 <__gnu_thumb1_case_uqi>:
 8002a00:	b402      	push	{r1}
 8002a02:	4671      	mov	r1, lr
 8002a04:	0849      	lsrs	r1, r1, #1
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	5c09      	ldrb	r1, [r1, r0]
 8002a0a:	0049      	lsls	r1, r1, #1
 8002a0c:	448e      	add	lr, r1
 8002a0e:	bc02      	pop	{r1}
 8002a10:	4770      	bx	lr
 8002a12:	46c0      	nop			; (mov r8, r8)

08002a14 <__aeabi_uidiv>:
 8002a14:	2900      	cmp	r1, #0
 8002a16:	d034      	beq.n	8002a82 <.udivsi3_skip_div0_test+0x6a>

08002a18 <.udivsi3_skip_div0_test>:
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	b410      	push	{r4}
 8002a1e:	4288      	cmp	r0, r1
 8002a20:	d32c      	bcc.n	8002a7c <.udivsi3_skip_div0_test+0x64>
 8002a22:	2401      	movs	r4, #1
 8002a24:	0724      	lsls	r4, r4, #28
 8002a26:	42a1      	cmp	r1, r4
 8002a28:	d204      	bcs.n	8002a34 <.udivsi3_skip_div0_test+0x1c>
 8002a2a:	4281      	cmp	r1, r0
 8002a2c:	d202      	bcs.n	8002a34 <.udivsi3_skip_div0_test+0x1c>
 8002a2e:	0109      	lsls	r1, r1, #4
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	e7f8      	b.n	8002a26 <.udivsi3_skip_div0_test+0xe>
 8002a34:	00e4      	lsls	r4, r4, #3
 8002a36:	42a1      	cmp	r1, r4
 8002a38:	d204      	bcs.n	8002a44 <.udivsi3_skip_div0_test+0x2c>
 8002a3a:	4281      	cmp	r1, r0
 8002a3c:	d202      	bcs.n	8002a44 <.udivsi3_skip_div0_test+0x2c>
 8002a3e:	0049      	lsls	r1, r1, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	e7f8      	b.n	8002a36 <.udivsi3_skip_div0_test+0x1e>
 8002a44:	4288      	cmp	r0, r1
 8002a46:	d301      	bcc.n	8002a4c <.udivsi3_skip_div0_test+0x34>
 8002a48:	1a40      	subs	r0, r0, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	084c      	lsrs	r4, r1, #1
 8002a4e:	42a0      	cmp	r0, r4
 8002a50:	d302      	bcc.n	8002a58 <.udivsi3_skip_div0_test+0x40>
 8002a52:	1b00      	subs	r0, r0, r4
 8002a54:	085c      	lsrs	r4, r3, #1
 8002a56:	4322      	orrs	r2, r4
 8002a58:	088c      	lsrs	r4, r1, #2
 8002a5a:	42a0      	cmp	r0, r4
 8002a5c:	d302      	bcc.n	8002a64 <.udivsi3_skip_div0_test+0x4c>
 8002a5e:	1b00      	subs	r0, r0, r4
 8002a60:	089c      	lsrs	r4, r3, #2
 8002a62:	4322      	orrs	r2, r4
 8002a64:	08cc      	lsrs	r4, r1, #3
 8002a66:	42a0      	cmp	r0, r4
 8002a68:	d302      	bcc.n	8002a70 <.udivsi3_skip_div0_test+0x58>
 8002a6a:	1b00      	subs	r0, r0, r4
 8002a6c:	08dc      	lsrs	r4, r3, #3
 8002a6e:	4322      	orrs	r2, r4
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d003      	beq.n	8002a7c <.udivsi3_skip_div0_test+0x64>
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	d001      	beq.n	8002a7c <.udivsi3_skip_div0_test+0x64>
 8002a78:	0909      	lsrs	r1, r1, #4
 8002a7a:	e7e3      	b.n	8002a44 <.udivsi3_skip_div0_test+0x2c>
 8002a7c:	1c10      	adds	r0, r2, #0
 8002a7e:	bc10      	pop	{r4}
 8002a80:	4770      	bx	lr
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d001      	beq.n	8002a8a <.udivsi3_skip_div0_test+0x72>
 8002a86:	2000      	movs	r0, #0
 8002a88:	43c0      	mvns	r0, r0
 8002a8a:	b407      	push	{r0, r1, r2}
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <.udivsi3_skip_div0_test+0x80>)
 8002a8e:	a102      	add	r1, pc, #8	; (adr r1, 8002a98 <.udivsi3_skip_div0_test+0x80>)
 8002a90:	1840      	adds	r0, r0, r1
 8002a92:	9002      	str	r0, [sp, #8]
 8002a94:	bd03      	pop	{r0, r1, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	00000019 	.word	0x00000019

08002a9c <__aeabi_uidivmod>:
 8002a9c:	2900      	cmp	r1, #0
 8002a9e:	d0f0      	beq.n	8002a82 <.udivsi3_skip_div0_test+0x6a>
 8002aa0:	b503      	push	{r0, r1, lr}
 8002aa2:	f7ff ffb9 	bl	8002a18 <.udivsi3_skip_div0_test>
 8002aa6:	bc0e      	pop	{r1, r2, r3}
 8002aa8:	4342      	muls	r2, r0
 8002aaa:	1a89      	subs	r1, r1, r2
 8002aac:	4718      	bx	r3
 8002aae:	46c0      	nop			; (mov r8, r8)

08002ab0 <__aeabi_idiv0>:
 8002ab0:	4770      	bx	lr
 8002ab2:	46c0      	nop			; (mov r8, r8)

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	4e0d      	ldr	r6, [pc, #52]	; (8002aec <__libc_init_array+0x38>)
 8002ab8:	4d0d      	ldr	r5, [pc, #52]	; (8002af0 <__libc_init_array+0x3c>)
 8002aba:	2400      	movs	r4, #0
 8002abc:	1bad      	subs	r5, r5, r6
 8002abe:	10ad      	asrs	r5, r5, #2
 8002ac0:	d005      	beq.n	8002ace <__libc_init_array+0x1a>
 8002ac2:	00a3      	lsls	r3, r4, #2
 8002ac4:	58f3      	ldr	r3, [r6, r3]
 8002ac6:	3401      	adds	r4, #1
 8002ac8:	4798      	blx	r3
 8002aca:	42a5      	cmp	r5, r4
 8002acc:	d1f9      	bne.n	8002ac2 <__libc_init_array+0xe>
 8002ace:	f000 fb15 	bl	80030fc <_init>
 8002ad2:	4e08      	ldr	r6, [pc, #32]	; (8002af4 <__libc_init_array+0x40>)
 8002ad4:	4d08      	ldr	r5, [pc, #32]	; (8002af8 <__libc_init_array+0x44>)
 8002ad6:	2400      	movs	r4, #0
 8002ad8:	1bad      	subs	r5, r5, r6
 8002ada:	10ad      	asrs	r5, r5, #2
 8002adc:	d005      	beq.n	8002aea <__libc_init_array+0x36>
 8002ade:	00a3      	lsls	r3, r4, #2
 8002ae0:	58f3      	ldr	r3, [r6, r3]
 8002ae2:	3401      	adds	r4, #1
 8002ae4:	4798      	blx	r3
 8002ae6:	42a5      	cmp	r5, r4
 8002ae8:	d1f9      	bne.n	8002ade <__libc_init_array+0x2a>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
	...

08002afc <USART2_IRQHandler>:


USART_InitTypeDef USART2_InitStruct;

void USART2_IRQHandler(void){
    GPIO_WriteBit(GPIOC, GPIO_Pin_9, Bit_SET);
 8002afc:	2180      	movs	r1, #128	; 0x80



USART_InitTypeDef USART2_InitStruct;

void USART2_IRQHandler(void){
 8002afe:	b508      	push	{r3, lr}
    GPIO_WriteBit(GPIOC, GPIO_Pin_9, Bit_SET);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <USART2_IRQHandler+0x10>)
 8002b02:	0089      	lsls	r1, r1, #2
 8002b04:	2201      	movs	r2, #1
 8002b06:	f7fd fbc9 	bl	800029c <GPIO_WriteBit>
};
 8002b0a:	bd08      	pop	{r3, pc}
 8002b0c:	48000800 	.word	0x48000800

08002b10 <SysTick_Handler>:

void SysTick_Handler(void) {
    timercounter++;
 8002b10:	4a02      	ldr	r2, [pc, #8]	; (8002b1c <SysTick_Handler+0xc>)
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	4770      	bx	lr
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	200009e4 	.word	0x200009e4

08002b20 <draw>:
void draw(uint8_t pos)
{
  //u8g_SetFont(&u8g, u8g_font_unifont);
  //u8g_DrawStr(&u8g,  5, 12+pos, "Fuck You");
  //u8g_DrawBox(&u8g, 1,1+pos,100,100);
  u8g_DrawXBM(&u8g, pos,0, threatbutt_width, threatbutt_height, threatbutt_bits);
 8002b20:	2340      	movs	r3, #64	; 0x40
void SysTick_Handler(void) {
    timercounter++;
}

void draw(uint8_t pos)
{
 8002b22:	b507      	push	{r0, r1, r2, lr}
  //u8g_SetFont(&u8g, u8g_font_unifont);
  //u8g_DrawStr(&u8g,  5, 12+pos, "Fuck You");
  //u8g_DrawBox(&u8g, 1,1+pos,100,100);
  u8g_DrawXBM(&u8g, pos,0, threatbutt_width, threatbutt_height, threatbutt_bits);
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <draw+0x18>)
void SysTick_Handler(void) {
    timercounter++;
}

void draw(uint8_t pos)
{
 8002b26:	1c01      	adds	r1, r0, #0
  //u8g_SetFont(&u8g, u8g_font_unifont);
  //u8g_DrawStr(&u8g,  5, 12+pos, "Fuck You");
  //u8g_DrawBox(&u8g, 1,1+pos,100,100);
  u8g_DrawXBM(&u8g, pos,0, threatbutt_width, threatbutt_height, threatbutt_bits);
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4803      	ldr	r0, [pc, #12]	; (8002b3c <draw+0x1c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f7fe f944 	bl	8000dbc <u8g_DrawXBM>
}
 8002b34:	bd07      	pop	{r0, r1, r2, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000150 	.word	0x20000150
 8002b3c:	200009e8 	.word	0x200009e8

08002b40 <main>:

int main(void)
{
 8002b40:	b538      	push	{r3, r4, r5, lr}
    //RCC_ClocksTypeDef Clocks;
    uint8_t pos = 0;
     
    SystemInit();
 8002b42:	f000 f889 	bl	8002c58 <SystemInit>
    SystemCoreClockUpdate(); //update the system clock variable
 8002b46:	f000 f8e3 	bl	8002d10 <SystemCoreClockUpdate>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002b4a:	2080      	movs	r0, #128	; 0x80
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	0280      	lsls	r0, r0, #10
 8002b50:	f7fe f806 	bl	8000b60 <RCC_AHBPeriphClockCmd>
    GPIO_Init(GPIOA, &GPIOA_InitStruct);
 8002b54:	2090      	movs	r0, #144	; 0x90
 8002b56:	4937      	ldr	r1, [pc, #220]	; (8002c34 <main+0xf4>)
 8002b58:	05c0      	lsls	r0, r0, #23
 8002b5a:	f7fd fb05 	bl	8000168 <GPIO_Init>
     
    timercounter = 0;
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <main+0xf8>)
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002b62:	4a36      	ldr	r2, [pc, #216]	; (8002c3c <main+0xfc>)
 8002b64:	6019      	str	r1, [r3, #0]
    //set systick to 1 every 1uS 
    SysTick_Config(SystemCoreClock/8);
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <main+0x100>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	08db      	lsrs	r3, r3, #3
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d80d      	bhi.n	8002b8c <main+0x4c>
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8002b70:	24c0      	movs	r4, #192	; 0xc0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <main+0x104>)
 8002b74:	3b01      	subs	r3, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8002b76:	4834      	ldr	r0, [pc, #208]	; (8002c48 <main+0x108>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002b78:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8002b7a:	6a03      	ldr	r3, [r0, #32]
 8002b7c:	0624      	lsls	r4, r4, #24
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	4323      	orrs	r3, r4
 8002b84:	6203      	str	r3, [r0, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b86:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002b88:	6091      	str	r1, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	6013      	str	r3, [r2, #0]
    
    GPIO_SetBits(GPIOA, GPIO_Pin_10);
 8002b8c:	2090      	movs	r0, #144	; 0x90
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	05c0      	lsls	r0, r0, #23
 8002b92:	00c9      	lsls	r1, r1, #3
 8002b94:	f7fd fb7e 	bl	8000294 <GPIO_SetBits>
    //I2C_WrReg(0x80, 0x8D);
    //I2C_WrReg(0x80, 0x14);
    //I2C_WrReg(0x80, 0xAF); 
    
    //init the u8g library
    u8g_InitComFn(&u8g,  &u8g_dev_ssd1306_128x64_i2c, u8g_com_hw_i2c_fn);
 8002b98:	4c2c      	ldr	r4, [pc, #176]	; (8002c4c <main+0x10c>)
 8002b9a:	492d      	ldr	r1, [pc, #180]	; (8002c50 <main+0x110>)
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <main+0x114>)
 8002b9e:	1c20      	adds	r0, r4, #0
 8002ba0:	f7fe fcb8 	bl	8001514 <u8g_InitComFn>
    //u8g_Begin(&u8g); 
    u8g_SetDefaultForegroundColor(&u8g);
 8002ba4:	1c20      	adds	r0, r4, #0
 8002ba6:	f7fe fea3 	bl	80018f0 <u8g_SetDefaultForegroundColor>
}

int main(void)
{
    //RCC_ClocksTypeDef Clocks;
    uint8_t pos = 0;
 8002baa:	2500      	movs	r5, #0
           
    //while(1){
    while(1){
        //asm("wfi");  
        
        u8g_FirstPage(&u8g);
 8002bac:	1c20      	adds	r0, r4, #0
 8002bae:	f7fe fe04 	bl	80017ba <u8g_FirstPage>
        do
        {
          draw(pos);
 8002bb2:	1c28      	adds	r0, r5, #0
 8002bb4:	f7ff ffb4 	bl	8002b20 <draw>
        } while ( u8g_NextPage(&u8g) );
 8002bb8:	1c20      	adds	r0, r4, #0
 8002bba:	f7fe fe03 	bl	80017c4 <u8g_NextPage>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d1f7      	bne.n	8002bb2 <main+0x72>
        GPIO_SetBits(GPIOA, GPIO_Pin_10);
 8002bc2:	2090      	movs	r0, #144	; 0x90
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	05c0      	lsls	r0, r0, #23
 8002bc8:	00c9      	lsls	r1, r1, #3
 8002bca:	f7fd fb63 	bl	8000294 <GPIO_SetBits>
        u8g_Delay(40);
 8002bce:	2028      	movs	r0, #40	; 0x28
 8002bd0:	f000 f916 	bl	8002e00 <u8g_Delay>
        GPIO_ResetBits(GPIOA, GPIO_Pin_10);
 8002bd4:	2090      	movs	r0, #144	; 0x90
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	05c0      	lsls	r0, r0, #23
 8002bda:	00c9      	lsls	r1, r1, #3
 8002bdc:	f7fd fb5c 	bl	8000298 <GPIO_ResetBits>
        u8g_Delay(40);
 8002be0:	2028      	movs	r0, #40	; 0x28
 8002be2:	f000 f90d 	bl	8002e00 <u8g_Delay>
        GPIO_SetBits(GPIOA, GPIO_Pin_9);
 8002be6:	2090      	movs	r0, #144	; 0x90
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	05c0      	lsls	r0, r0, #23
 8002bec:	0089      	lsls	r1, r1, #2
 8002bee:	f7fd fb51 	bl	8000294 <GPIO_SetBits>
        u8g_Delay(40);
 8002bf2:	2028      	movs	r0, #40	; 0x28
 8002bf4:	f000 f904 	bl	8002e00 <u8g_Delay>
        GPIO_ResetBits(GPIOA, GPIO_Pin_9);
 8002bf8:	2090      	movs	r0, #144	; 0x90
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	05c0      	lsls	r0, r0, #23
 8002bfe:	0089      	lsls	r1, r1, #2
 8002c00:	f7fd fb4a 	bl	8000298 <GPIO_ResetBits>
        u8g_Delay(40);
 8002c04:	2028      	movs	r0, #40	; 0x28
 8002c06:	f000 f8fb 	bl	8002e00 <u8g_Delay>
        GPIO_SetBits(GPIOA, GPIO_Pin_8);
 8002c0a:	2090      	movs	r0, #144	; 0x90
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	05c0      	lsls	r0, r0, #23
 8002c10:	0049      	lsls	r1, r1, #1
 8002c12:	f7fd fb3f 	bl	8000294 <GPIO_SetBits>
        u8g_Delay(40);
 8002c16:	2028      	movs	r0, #40	; 0x28
 8002c18:	f000 f8f2 	bl	8002e00 <u8g_Delay>
        GPIO_ResetBits(GPIOA, GPIO_Pin_8);
 8002c1c:	2090      	movs	r0, #144	; 0x90
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	05c0      	lsls	r0, r0, #23
 8002c22:	0049      	lsls	r1, r1, #1
 8002c24:	f7fd fb38 	bl	8000298 <GPIO_ResetBits>
        
 
 
         /* refresh screen after some delay */
         ///* update position */
         pos -=10;
 8002c28:	3d0a      	subs	r5, #10
        GPIO_ResetBits(GPIOA, GPIO_Pin_9);
        u8g_Delay(40);
        GPIO_SetBits(GPIOA, GPIO_Pin_8);
        u8g_Delay(40);
        GPIO_ResetBits(GPIOA, GPIO_Pin_8);
        u8g_Delay(40);
 8002c2a:	2028      	movs	r0, #40	; 0x28
 8002c2c:	f000 f8e8 	bl	8002e00 <u8g_Delay>
        
 
 
         /* refresh screen after some delay */
         ///* update position */
         pos -=10;
 8002c30:	b2ed      	uxtb	r5, r5
      //  }
      //    else {
      //      toggle = Bit_SET;
      //    }
        //USART_ClearFlag(USART1, USART_FLAG_RXNE);
    }
 8002c32:	e7bb      	b.n	8002bac <main+0x6c>
 8002c34:	20000148 	.word	0x20000148
 8002c38:	200009e4 	.word	0x200009e4
 8002c3c:	00ffffff 	.word	0x00ffffff
 8002c40:	20000360 	.word	0x20000360
 8002c44:	e000e010 	.word	0xe000e010
 8002c48:	e000ed00 	.word	0xe000ed00
 8002c4c:	200009e8 	.word	0x200009e8
 8002c50:	20000100 	.word	0x20000100
 8002c54:	08002e25 	.word	0x08002e25

08002c58 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002c58:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c5a:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002c5c:	240f      	movs	r4, #15
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <SystemInit+0x9c>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4302      	orrs	r2, r0
 8002c64:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <SystemInit+0xa0>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <SystemInit+0xa4>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <SystemInit+0xa8>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <SystemInit+0xac>)
 8002c82:	4011      	ands	r1, r2
 8002c84:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002c86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c88:	43a1      	bics	r1, r4
 8002c8a:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8002c8c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002c8e:	491e      	ldr	r1, [pc, #120]	; (8002d08 <SystemInit+0xb0>)
 8002c90:	4021      	ands	r1, r4
 8002c92:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c96:	4381      	bics	r1, r0
 8002c98:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c9a:	2100      	movs	r1, #0
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002c9c:	2011      	movs	r0, #17

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c9e:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ca0:	9100      	str	r1, [sp, #0]
 8002ca2:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002ca4:	4919      	ldr	r1, [pc, #100]	; (8002d0c <SystemInit+0xb4>)
 8002ca6:	6008      	str	r0, [r1, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	6059      	str	r1, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	6059      	str	r1, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	400a      	ands	r2, r1
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8002cb4:	21a0      	movs	r1, #160	; 0xa0
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002cb6:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	0389      	lsls	r1, r1, #14
 8002cbc:	430a      	orrs	r2, r1
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002cbe:	2180      	movs	r1, #128	; 0x80
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8002cc0:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	0449      	lsls	r1, r1, #17
 8002cc6:	430a      	orrs	r2, r1

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002cc8:	2180      	movs	r1, #128	; 0x80
  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002cca:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002ccc:	0489      	lsls	r1, r1, #18
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <SystemInit+0x9c>)
 8002cd2:	4208      	tst	r0, r1
 8002cd4:	d0fb      	beq.n	8002cce <SystemInit+0x76>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	6851      	ldr	r1, [r2, #4]
 8002cda:	4381      	bics	r1, r0
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002cdc:	2002      	movs	r0, #2
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002cde:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002ce0:	6851      	ldr	r1, [r2, #4]
 8002ce2:	4301      	orrs	r1, r0
 8002ce4:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002ce6:	210c      	movs	r1, #12
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	400a      	ands	r2, r1
 8002cec:	2a08      	cmp	r2, #8
 8002cee:	d1fb      	bne.n	8002ce8 <SystemInit+0x90>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8002cf0:	bd13      	pop	{r0, r1, r4, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	f8ffb80c 	.word	0xf8ffb80c
 8002cfc:	fef6ffff 	.word	0xfef6ffff
 8002d00:	fffbffff 	.word	0xfffbffff
 8002d04:	ffc0ffff 	.word	0xffc0ffff
 8002d08:	fffffeac 	.word	0xfffffeac
 8002d0c:	40022000 	.word	0x40022000

08002d10 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d10:	230c      	movs	r3, #12
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002d12:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d14:	4d12      	ldr	r5, [pc, #72]	; (8002d60 <SystemCoreClockUpdate+0x50>)
 8002d16:	4e13      	ldr	r6, [pc, #76]	; (8002d64 <SystemCoreClockUpdate+0x54>)
 8002d18:	686a      	ldr	r2, [r5, #4]
 8002d1a:	4013      	ands	r3, r2
  
  switch (tmp)
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d001      	beq.n	8002d24 <SystemCoreClockUpdate+0x14>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d002      	beq.n	8002d2a <SystemCoreClockUpdate+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <SystemCoreClockUpdate+0x58>)
 8002d26:	6033      	str	r3, [r6, #0]
      break;
 8002d28:	e011      	b.n	8002d4e <SystemCoreClockUpdate+0x3e>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002d2a:	686c      	ldr	r4, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002d2c:	686b      	ldr	r3, [r5, #4]
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002d2e:	02a4      	lsls	r4, r4, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8002d30:	0f24      	lsrs	r4, r4, #28
 8002d32:	3402      	adds	r4, #2
      
      if (pllsource == 0x00)
 8002d34:	03db      	lsls	r3, r3, #15
 8002d36:	d401      	bmi.n	8002d3c <SystemCoreClockUpdate+0x2c>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <SystemCoreClockUpdate+0x5c>)
 8002d3a:	e006      	b.n	8002d4a <SystemCoreClockUpdate+0x3a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8002d40:	4809      	ldr	r0, [pc, #36]	; (8002d68 <SystemCoreClockUpdate+0x58>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002d42:	4019      	ands	r1, r3
 8002d44:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8002d46:	f7ff fe65 	bl	8002a14 <__aeabi_uidiv>
 8002d4a:	4344      	muls	r4, r0
 8002d4c:	6034      	str	r4, [r6, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002d4e:	686b      	ldr	r3, [r5, #4]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <SystemCoreClockUpdate+0x60>)
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	0f1b      	lsrs	r3, r3, #28
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002d58:	6832      	ldr	r2, [r6, #0]
 8002d5a:	40da      	lsrs	r2, r3
 8002d5c:	6032      	str	r2, [r6, #0]
}
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	20000360 	.word	0x20000360
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	003d0900 	.word	0x003d0900
 8002d70:	20000350 	.word	0x20000350

08002d74 <_delay_system_ticks_sub>:

static void _delay_system_ticks_sub(uint32_t sys_ticks){
    uint32_t start_val, end_val, curr_val;
    uint32_t load;

    start_val = SysTick->VAL;
 8002d74:	490f      	ldr	r1, [pc, #60]	; (8002db4 <_delay_system_ticks_sub+0x40>)
 8002d76:	688a      	ldr	r2, [r1, #8]
    start_val &= 0x0ffffffUL;
 8002d78:	0212      	lsls	r2, r2, #8
 8002d7a:	0a12      	lsrs	r2, r2, #8
 8002d7c:	1e13      	subs	r3, r2, #0
    end_val = start_val;

    if(end_val < sys_ticks)
 8002d7e:	4283      	cmp	r3, r0
 8002d80:	d203      	bcs.n	8002d8a <_delay_system_ticks_sub+0x16>
    {
        load = SysTick->LOAD;
 8002d82:	684b      	ldr	r3, [r1, #4]
        load &=0xffffffUL;
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	0a1b      	lsrs	r3, r3, #8
        end_val += load;
 8002d88:	189b      	adds	r3, r3, r2
    }
    end_val -= sys_ticks;
 8002d8a:	1a18      	subs	r0, r3, r0
    
    if(start_val >= end_val){
 8002d8c:	4282      	cmp	r2, r0
 8002d8e:	d309      	bcc.n	8002da4 <_delay_system_ticks_sub+0x30>
        for(;;){
            curr_val = SysTick->VAL;
 8002d90:	688b      	ldr	r3, [r1, #8]
            curr_val &= 0x0ffffffUL;
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	0a1b      	lsrs	r3, r3, #8
            if(curr_val <= end_val)
 8002d96:	4283      	cmp	r3, r0
 8002d98:	d90a      	bls.n	8002db0 <_delay_system_ticks_sub+0x3c>
                break;
            if(curr_val > start_val)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d9f8      	bls.n	8002d90 <_delay_system_ticks_sub+0x1c>
 8002d9e:	e007      	b.n	8002db0 <_delay_system_ticks_sub+0x3c>
    }
    else{
        for(;;){
            curr_val = SysTick->VAL;
            curr_val &= 0x0ffffffUL;
            if(curr_val <= end_val && curr_val > start_val)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d805      	bhi.n	8002db0 <_delay_system_ticks_sub+0x3c>
                break;
        }
    }
    else{
        for(;;){
            curr_val = SysTick->VAL;
 8002da4:	688b      	ldr	r3, [r1, #8]
            curr_val &= 0x0ffffffUL;
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	0a1b      	lsrs	r3, r3, #8
            if(curr_val <= end_val && curr_val > start_val)
 8002daa:	4283      	cmp	r3, r0
 8002dac:	d8fa      	bhi.n	8002da4 <_delay_system_ticks_sub+0x30>
 8002dae:	e7f7      	b.n	8002da0 <_delay_system_ticks_sub+0x2c>
                break;
            }
        }
}
 8002db0:	4770      	bx	lr
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <delay_system_ticks>:

void delay_system_ticks(uint32_t sys_ticks){
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	1c05      	adds	r5, r0, #0
    uint32_t load4;
    load4 = SysTick->LOAD;
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <delay_system_ticks+0x24>)
 8002dbe:	685c      	ldr	r4, [r3, #4]
    load4 &= 0x0ffffffUL;
 8002dc0:	0224      	lsls	r4, r4, #8
    load4 >>= 2;
 8002dc2:	0aa4      	lsrs	r4, r4, #10
    while(sys_ticks > load4){
 8002dc4:	42a5      	cmp	r5, r4
 8002dc6:	d904      	bls.n	8002dd2 <delay_system_ticks+0x1a>
        sys_ticks -= load4;
        _delay_system_ticks_sub(load4);
 8002dc8:	1c20      	adds	r0, r4, #0
    uint32_t load4;
    load4 = SysTick->LOAD;
    load4 &= 0x0ffffffUL;
    load4 >>= 2;
    while(sys_ticks > load4){
        sys_ticks -= load4;
 8002dca:	1b2d      	subs	r5, r5, r4
        _delay_system_ticks_sub(load4);
 8002dcc:	f7ff ffd2 	bl	8002d74 <_delay_system_ticks_sub>
 8002dd0:	e7f8      	b.n	8002dc4 <delay_system_ticks+0xc>
    }
    _delay_system_ticks_sub(sys_ticks);
 8002dd2:	1c28      	adds	r0, r5, #0
 8002dd4:	f7ff ffce 	bl	8002d74 <_delay_system_ticks_sub>
}
 8002dd8:	bd38      	pop	{r3, r4, r5, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <delay_micro_seconds>:

void delay_micro_seconds(uint32_t us){
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <delay_micro_seconds+0x18>)
        _delay_system_ticks_sub(load4);
    }
    _delay_system_ticks_sub(sys_ticks);
}

void delay_micro_seconds(uint32_t us){
 8002de2:	b510      	push	{r4, lr}
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
    sys_ticks /= 1000000;
 8002de4:	4905      	ldr	r1, [pc, #20]	; (8002dfc <delay_micro_seconds+0x1c>)
        _delay_system_ticks_sub(load4);
    }
    _delay_system_ticks_sub(sys_ticks);
}

void delay_micro_seconds(uint32_t us){
 8002de6:	1c04      	adds	r4, r0, #0
    uint32_t sys_ticks;
    sys_ticks = SystemCoreClock;
 8002de8:	6818      	ldr	r0, [r3, #0]
    sys_ticks /= 1000000;
 8002dea:	f7ff fe13 	bl	8002a14 <__aeabi_uidiv>
    sys_ticks *= us;
 8002dee:	4360      	muls	r0, r4
    delay_system_ticks(sys_ticks);
 8002df0:	f7ff ffe2 	bl	8002db8 <delay_system_ticks>
}
 8002df4:	bd10      	pop	{r4, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000360 	.word	0x20000360
 8002dfc:	000f4240 	.word	0x000f4240

08002e00 <u8g_Delay>:

void u8g_Delay(uint16_t val){
 8002e00:	b508      	push	{r3, lr}
    delay_micro_seconds(1000UL * (uint32_t)val);
 8002e02:	23fa      	movs	r3, #250	; 0xfa
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4358      	muls	r0, r3
 8002e08:	f7ff ffea 	bl	8002de0 <delay_micro_seconds>
}
 8002e0c:	bd08      	pop	{r3, pc}

08002e0e <u8g_MicroDelay>:

void u8g_MicroDelay(void)
{
 8002e0e:	b508      	push	{r3, lr}
    delay_micro_seconds(1);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f7ff ffe5 	bl	8002de0 <delay_micro_seconds>
}
 8002e16:	bd08      	pop	{r3, pc}

08002e18 <u8g_10MicroDelay>:

void u8g_10MicroDelay(void){
 8002e18:	b508      	push	{r3, lr}
    delay_micro_seconds(10);
 8002e1a:	200a      	movs	r0, #10
 8002e1c:	f7ff ffe0 	bl	8002de0 <delay_micro_seconds>
}
 8002e20:	bd08      	pop	{r3, pc}
	...

08002e24 <u8g_com_hw_i2c_fn>:
	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); 
}

uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8002e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  register uint8_t *ptr = arg_ptr;
  switch(msg)
 8002e26:	1e48      	subs	r0, r1, #1
 8002e28:	2806      	cmp	r0, #6
 8002e2a:	d871      	bhi.n	8002f10 <u8g_com_hw_i2c_fn+0xec>
 8002e2c:	1c1d      	adds	r5, r3, #0
 8002e2e:	1c14      	adds	r4, r2, #0
 8002e30:	f7ff fde6 	bl	8002a00 <__gnu_thumb1_case_uqi>
 8002e34:	6e6e0704 	.word	0x6e6e0704
 8002e38:	1711      	.short	0x1711
 8002e3a:	17          	.byte	0x17
 8002e3b:	00          	.byte	0x00
  {
    case U8G_COM_MSG_STOP:
        break;
    
    case U8G_COM_MSG_INIT:
        init_i2c(); 
 8002e3c:	f000 f86e 	bl	8002f1c <init_i2c>
 8002e40:	e064      	b.n	8002f0c <u8g_com_hw_i2c_fn+0xe8>
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <u8g_com_hw_i2c_fn+0xf0>)
        //I2C_WrReg(0x80, 0xAF); 
        u8g_MicroDelay();
        break;
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
        if(arg_val == 0){
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d101      	bne.n	8002e4c <u8g_com_hw_i2c_fn+0x28>
            control = 0;  //Send a Command (D/C# pin is low)
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e001      	b.n	8002e50 <u8g_com_hw_i2c_fn+0x2c>
        }
        else{
            control = 0x40; //send data 
 8002e4c:	2240      	movs	r2, #64	; 0x40
 8002e4e:	601a      	str	r2, [r3, #0]
        }
        u8g_10MicroDelay(); 
 8002e50:	f7ff ffe2 	bl	8002e18 <u8g_10MicroDelay>
        break;
 8002e54:	e05c      	b.n	8002f10 <u8g_com_hw_i2c_fn+0xec>
      
    case U8G_COM_MSG_RESET:
      break;
      
    case U8G_COM_MSG_WRITE_BYTE:
        I2C_WrReg(control, arg_val); 
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <u8g_com_hw_i2c_fn+0xf0>)
 8002e58:	1c11      	adds	r1, r2, #0
 8002e5a:	7818      	ldrb	r0, [r3, #0]
 8002e5c:	f000 f8a4 	bl	8002fa8 <I2C_WrReg>
 8002e60:	e054      	b.n	8002f0c <u8g_com_hw_i2c_fn+0xe8>
        //u8g_i2c_stop();
        u8g_MicroDelay();
        break;
    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P:
        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET);
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	482c      	ldr	r0, [pc, #176]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002e66:	0209      	lsls	r1, r1, #8
 8002e68:	f7fd fc54 	bl	8000714 <I2C_GetFlagStatus>
 8002e6c:	2801      	cmp	r0, #1
 8002e6e:	d0f8      	beq.n	8002e62 <u8g_com_hw_i2c_fn+0x3e>
		I2C_TransferHandling(I2C1, 0x78, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	019b      	lsls	r3, r3, #6
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	4827      	ldr	r0, [pc, #156]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002e7a:	2178      	movs	r1, #120	; 0x78
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	045b      	lsls	r3, r3, #17
 8002e80:	f7fd fba6 	bl	80005d0 <I2C_TransferHandling>
	    //Ensure the transmit interrupted flag is set
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8002e84:	4824      	ldr	r0, [pc, #144]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002e86:	2102      	movs	r1, #2
 8002e88:	f7fd fc44 	bl	8000714 <I2C_GetFlagStatus>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d0f9      	beq.n	8002e84 <u8g_com_hw_i2c_fn+0x60>
	    //Send the address of the register we wish to write to
	    I2C_SendData(I2C1, control);
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <u8g_com_hw_i2c_fn+0xf0>)
 8002e92:	4821      	ldr	r0, [pc, #132]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002e94:	7819      	ldrb	r1, [r3, #0]
 8002e96:	f7fd fc2d 	bl	80006f4 <I2C_SendData>

	    //Ensure that the transfer complete reload flag is Set, essentially a standard
	    //TC flag
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET);
 8002e9a:	481f      	ldr	r0, [pc, #124]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	f7fd fc39 	bl	8000714 <I2C_GetFlagStatus>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d0f9      	beq.n	8002e9a <u8g_com_hw_i2c_fn+0x76>
	    I2C_TransferHandling(I2C1, 0x78, arg_val+1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	1c62      	adds	r2, r4, #1
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	4819      	ldr	r0, [pc, #100]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002eb2:	2178      	movs	r1, #120	; 0x78
 8002eb4:	049b      	lsls	r3, r3, #18
 8002eb6:	f7fd fb8b 	bl	80005d0 <I2C_TransferHandling>
	    //Again, wait until the transmit interrupted flag is set
	    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8002eba:	4817      	ldr	r0, [pc, #92]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	f7fd fc29 	bl	8000714 <I2C_GetFlagStatus>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d0f9      	beq.n	8002eba <u8g_com_hw_i2c_fn+0x96>
 8002ec6:	192c      	adds	r4, r5, r4
	    //Send the value you wish you write to the register
        while( arg_val > 0 )
 8002ec8:	42a5      	cmp	r5, r4
 8002eca:	d00b      	beq.n	8002ee4 <u8g_com_hw_i2c_fn+0xc0>
        {
	        I2C_SendData(I2C1, *ptr++);
 8002ecc:	7829      	ldrb	r1, [r5, #0]
 8002ece:	4812      	ldr	r0, [pc, #72]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002ed0:	f7fd fc10 	bl	80006f4 <I2C_SendData>
            arg_val--;
	        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8002ed4:	4810      	ldr	r0, [pc, #64]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	f7fd fc1c 	bl	8000714 <I2C_GetFlagStatus>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d0f9      	beq.n	8002ed4 <u8g_com_hw_i2c_fn+0xb0>
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	e7f1      	b.n	8002ec8 <u8g_com_hw_i2c_fn+0xa4>
            //Wait for the stop flag to be set indicating a stop condition has been sent
        }
	    I2C_TransferHandling(I2C1, 0x78, 0, I2C_AutoEnd_Mode, I2C_Generate_Stop);
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	01db      	lsls	r3, r3, #7
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002eee:	2178      	movs	r1, #120	; 0x78
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	049b      	lsls	r3, r3, #18
 8002ef4:	f7fd fb6c 	bl	80005d0 <I2C_TransferHandling>
	    while(I2C_GetFlagStatus(I2C1,I2C_FLAG_STOPF) == RESET);
 8002ef8:	4807      	ldr	r0, [pc, #28]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002efa:	2120      	movs	r1, #32
 8002efc:	f7fd fc0a 	bl	8000714 <I2C_GetFlagStatus>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d0f9      	beq.n	8002ef8 <u8g_com_hw_i2c_fn+0xd4>
	    I2C_ClearFlag(I2C1, I2C_FLAG_STOPF); 
 8002f04:	4804      	ldr	r0, [pc, #16]	; (8002f18 <u8g_com_hw_i2c_fn+0xf4>)
 8002f06:	2120      	movs	r1, #32
 8002f08:	f7fd fc0a 	bl	8000720 <I2C_ClearFlag>
        u8g_MicroDelay();
 8002f0c:	f7ff ff7f 	bl	8002e0e <u8g_MicroDelay>
        break;
  }
  return 1;
}
 8002f10:	2001      	movs	r0, #1
 8002f12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002f14:	20000a68 	.word	0x20000a68
 8002f18:	40005400 	.word	0x40005400

08002f1c <init_i2c>:
#include "i2c_func.h"

//initialize the i2c periperal
void init_i2c(void){
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002f1c:	2080      	movs	r0, #128	; 0x80
#include "i2c_func.h"

//initialize the i2c periperal
void init_i2c(void){
 8002f1e:	b530      	push	{r4, r5, lr}
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002f20:	02c0      	lsls	r0, r0, #11
#include "i2c_func.h"

//initialize the i2c periperal
void init_i2c(void){
 8002f22:	b08b      	sub	sp, #44	; 0x2c
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002f24:	2101      	movs	r1, #1
 8002f26:	f7fd fe1b 	bl	8000b60 <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002f2a:	2080      	movs	r0, #128	; 0x80
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_1);
 8002f2c:	4c1a      	ldr	r4, [pc, #104]	; (8002f98 <init_i2c+0x7c>)
#include "i2c_func.h"

//initialize the i2c periperal
void init_i2c(void){
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002f2e:	2101      	movs	r1, #1
 8002f30:	0380      	lsls	r0, r0, #14
 8002f32:	f7fd fe2d 	bl	8000b90 <RCC_APB1PeriphClockCmd>
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
 8002f36:	2010      	movs	r0, #16
 8002f38:	f7fd fd4a 	bl	80009d0 <RCC_I2CCLKConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_1);
 8002f3c:	1c20      	adds	r0, r4, #0
 8002f3e:	2106      	movs	r1, #6
 8002f40:	2201      	movs	r2, #1
 8002f42:	f7fd f9b3 	bl	80002ac <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_1);
 8002f46:	1c20      	adds	r0, r4, #0
 8002f48:	2107      	movs	r1, #7
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f7fd f9ae 	bl	80002ac <GPIO_PinAFConfig>

    GPIO_InitTypeDef GPIOB_InitStruct = {
 8002f50:	a901      	add	r1, sp, #4
 8002f52:	1c0a      	adds	r2, r1, #0
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <init_i2c+0x80>)
 8002f56:	cb21      	ldmia	r3!, {r0, r5}
 8002f58:	c221      	stmia	r2!, {r0, r5}
        .GPIO_Speed = GPIO_Speed_50MHz,
        .GPIO_Mode = GPIO_Mode_AF,
        .GPIO_OType = GPIO_OType_OD,
        .GPIO_PuPd = GPIO_PuPd_UP
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
 8002f5a:	1c20      	adds	r0, r4, #0
 8002f5c:	f7fd f904 	bl	8000168 <GPIO_Init>
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
 8002f60:	1c20      	adds	r0, r4, #0
 8002f62:	2106      	movs	r1, #6
 8002f64:	f7fd f970 	bl	8000248 <GPIO_PinLockConfig>
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
 8002f68:	1c20      	adds	r0, r4, #0
 8002f6a:	2107      	movs	r1, #7
 8002f6c:	f7fd f96c 	bl	8000248 <GPIO_PinLockConfig>
    
    I2C_InitTypeDef I2C_InitStructure = {
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <init_i2c+0x84>)
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 8002f72:	4c0c      	ldr	r4, [pc, #48]	; (8002fa4 <init_i2c+0x88>)
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
    
    I2C_InitTypeDef I2C_InitStructure = {
 8002f74:	9303      	str	r3, [sp, #12]
 8002f76:	2300      	movs	r3, #0
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 8002f78:	1c20      	adds	r0, r4, #0
 8002f7a:	a903      	add	r1, sp, #12
    };
    GPIO_Init(GPIOB, &GPIOB_InitStruct);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource6);
    GPIO_PinLockConfig(GPIOB, GPIO_PinSource7);
    
    I2C_InitTypeDef I2C_InitStructure = {
 8002f7c:	9304      	str	r3, [sp, #16]
 8002f7e:	9305      	str	r3, [sp, #20]
 8002f80:	9306      	str	r3, [sp, #24]
 8002f82:	9307      	str	r3, [sp, #28]
 8002f84:	9308      	str	r3, [sp, #32]
 8002f86:	9309      	str	r3, [sp, #36]	; 0x24
        .I2C_Mode = I2C_Mode_I2C,
        .I2C_OwnAddress1 = 0x00,
        .I2C_Ack = I2C_Ack_Enable,
        .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit
    };
    I2C_Init(I2C1, &I2C_InitStructure);
 8002f88:	f7fd f9be 	bl	8000308 <I2C_Init>
    I2C_Cmd(I2C1, ENABLE);
 8002f8c:	1c20      	adds	r0, r4, #0
 8002f8e:	2101      	movs	r1, #1
 8002f90:	f7fd f9f8 	bl	8000384 <I2C_Cmd>
}
 8002f94:	b00b      	add	sp, #44	; 0x2c
 8002f96:	bd30      	pop	{r4, r5, pc}
 8002f98:	48000400 	.word	0x48000400
 8002f9c:	08003084 	.word	0x08003084
 8002fa0:	20310a0d 	.word	0x20310a0d
 8002fa4:	40005400 	.word	0x40005400

08002fa8 <I2C_WrReg>:
    while ((I2C1->ISR & I2C_ISR_TXE)==0);    //while TXE ==0, buffer is full
    I2C1->TXDR=0xff;//example data
}


void I2C_WrReg(uint8_t Reg, uint8_t Val){
 8002fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002faa:	1c05      	adds	r5, r0, #0
 8002fac:	1c0c      	adds	r4, r1, #0
    //Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY) == SET);
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	481e      	ldr	r0, [pc, #120]	; (800302c <I2C_WrReg+0x84>)
 8002fb2:	0209      	lsls	r1, r1, #8
 8002fb4:	f7fd fbae 	bl	8000714 <I2C_GetFlagStatus>
 8002fb8:	2801      	cmp	r0, #1
 8002fba:	d0f8      	beq.n	8002fae <I2C_WrReg+0x6>
	//"Handle" a transfer - The STM32F0 series has a shocking I2C interface...
	//...Regardless! Send the address of the HMC sensor down the I2C Bus and generate
	//a start saying we're going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me and a lot of the code is
	//from the Std peripheral library
	I2C_TransferHandling(I2C1, 0x78, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	019b      	lsls	r3, r3, #6
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	4819      	ldr	r0, [pc, #100]	; (800302c <I2C_WrReg+0x84>)
 8002fc6:	2178      	movs	r1, #120	; 0x78
 8002fc8:	2201      	movs	r2, #1
 8002fca:	045b      	lsls	r3, r3, #17
 8002fcc:	f7fd fb00 	bl	80005d0 <I2C_TransferHandling>

	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8002fd0:	4816      	ldr	r0, [pc, #88]	; (800302c <I2C_WrReg+0x84>)
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	f7fd fb9e 	bl	8000714 <I2C_GetFlagStatus>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d0f9      	beq.n	8002fd0 <I2C_WrReg+0x28>

	//Send the address of the register we wish to write to
	I2C_SendData(I2C1, Reg);
 8002fdc:	4813      	ldr	r0, [pc, #76]	; (800302c <I2C_WrReg+0x84>)
 8002fde:	1c29      	adds	r1, r5, #0
 8002fe0:	f7fd fb88 	bl	80006f4 <I2C_SendData>

	//Ensure that the transfer complete reload flag is Set, essentially a standard
	//TC flag
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TCR) == RESET);
 8002fe4:	4811      	ldr	r0, [pc, #68]	; (800302c <I2C_WrReg+0x84>)
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	f7fd fb94 	bl	8000714 <I2C_GetFlagStatus>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d0f9      	beq.n	8002fe4 <I2C_WrReg+0x3c>

	//Now that the HMC5883L knows which register we want to write to, send the address
	//again and ensure the I2C peripheral doesn't add any start or stop conditions
	I2C_TransferHandling(I2C1, 0x78, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <I2C_WrReg+0x84>)
 8002ff8:	2178      	movs	r1, #120	; 0x78
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	049b      	lsls	r3, r3, #18
 8002ffe:	f7fd fae7 	bl	80005d0 <I2C_TransferHandling>

	//Again, wait until the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_TXIS) == RESET);
 8003002:	480a      	ldr	r0, [pc, #40]	; (800302c <I2C_WrReg+0x84>)
 8003004:	2102      	movs	r1, #2
 8003006:	f7fd fb85 	bl	8000714 <I2C_GetFlagStatus>
 800300a:	2800      	cmp	r0, #0
 800300c:	d0f9      	beq.n	8003002 <I2C_WrReg+0x5a>

	//Send the value you wish you write to the register
	I2C_SendData(I2C1, Val);
 800300e:	4807      	ldr	r0, [pc, #28]	; (800302c <I2C_WrReg+0x84>)
 8003010:	1c21      	adds	r1, r4, #0
 8003012:	f7fd fb6f 	bl	80006f4 <I2C_SendData>

	//Wait for the stop flag to be set indicating a stop condition has been sent
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF) == RESET);
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <I2C_WrReg+0x84>)
 8003018:	2120      	movs	r1, #32
 800301a:	f7fd fb7b 	bl	8000714 <I2C_GetFlagStatus>
 800301e:	2800      	cmp	r0, #0
 8003020:	d0f9      	beq.n	8003016 <I2C_WrReg+0x6e>

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C1, I2C_FLAG_STOPF);
 8003022:	4802      	ldr	r0, [pc, #8]	; (800302c <I2C_WrReg+0x84>)
 8003024:	2120      	movs	r1, #32
 8003026:	f7fd fb7b 	bl	8000720 <I2C_ClearFlag>
}
 800302a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800302c:	40005400 	.word	0x40005400

08003030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003034:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003036:	e003      	b.n	8003040 <LoopCopyDataInit>

08003038 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800303a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800303c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800303e:	3104      	adds	r1, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003040:	480b      	ldr	r0, [pc, #44]	; (8003070 <LoopForever+0xa>)
  ldr r3, =_edata
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <LoopForever+0xe>)
  adds r2, r0, r1
 8003044:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003046:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003048:	d3f6      	bcc.n	8003038 <CopyDataInit>
  ldr r2, =_sbss
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <LoopForever+0x12>)
  b LoopFillZerobss
 800304c:	e002      	b.n	8003054 <LoopFillZerobss>

0800304e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003050:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003052:	3204      	adds	r2, #4

08003054 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <LoopForever+0x16>)
  cmp r2, r3
 8003056:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003058:	d3f9      	bcc.n	800304e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800305a:	f7ff fdfd 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305e:	f7ff fd29 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003062:	f7ff fd6d 	bl	8002b40 <main>

08003066 <LoopForever>:
  
LoopForever:
    b LoopForever
 8003066:	e7fe      	b.n	8003066 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003068:	20001000 	.word	0x20001000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800306c:	08003114 	.word	0x08003114
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003070:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003074:	20000364 	.word	0x20000364
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003078:	20000364 	.word	0x20000364
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 800307c:	20000a6c 	.word	0x20000a6c

08003080 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC1_COMP_IRQHandler>
 8003082:	0000      	movs	r0, r0
 8003084:	000000c0 	.word	0x000000c0
 8003088:	01010302 	.word	0x01010302

0800308c <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
 800308c:	e0ffd0ff d1ffc1ff a880d5ae 4000d33f     ............?..@
 800309c:	0020148d 12dac8a1 f1d9cf81 a42e40db     .. ..........@..
 80030ac:	d0ffafa6 e0fffeff                                ......

080030b2 <u8g_dev_ssd1306_128x64_data_start>:
 80030b2:	d1ffe0ff feff0010                       ........

080030ba <u8g_dev_ssd13xx_sleep_on>:
 80030ba:	d1ffe0ff ffd0ffae ffe0fffe                       .........

080030c3 <u8g_dev_ssd13xx_sleep_off>:
 80030c3:	d1ffe0ff ff32ffaf fffeffd0                       ......2....

080030ce <u8g_dev_ssd1306_128x64_adafruit3_init_seq>:
 80030ce:	e0ffd0ff d1ffc1ff a880d5ae 4000d33f     ............?..@
 80030de:	0220148d 12dac8a1 f1d9cf81 a42e40db     .. ..........@..
 80030ee:	d0ffafa6 e0fffeff                                ......

080030f4 <u8g_dev_sh1106_128x64_data_start>:
 80030f4:	d1ffe0ff feff0210                       ........

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
